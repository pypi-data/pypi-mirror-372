"""Docs Generator - Generates documentation"""

from ...generators.base_generator import BaseGenerator


class DocsGenerator(BaseGenerator):
    """Generates documentation files"""

    def should_generate(self):
        return self.config.include_docs

    def generate(self):
        """Generate documentation files"""
        if not self.config.include_docs:
            return

        # Generate README.md for the project
        readme_content = self._get_readme_template()
        self.write_file(f"{self.config.path}/README.md", readme_content)

        # Generate API documentation
        api_docs_content = self._get_api_docs_template()
        self.write_file(f"{self.config.path}/docs/api.md", api_docs_content)

    def _get_readme_template(self) -> str:
        """Get README template"""
        template = f"""# {self.config.name.title()}

A FastAPI application generated by StartFast.

## Features

- FastAPI framework
- {self.config.database_type.value.title()} database
- {self.config.auth_type.value.title()} authentication
- Async support
{self._get_feature_list()}

## Installation

1. Clone the repository
2. Install dependencies:

   ```bash
   pip install -r requirements.txt
   ```
3. Set up environment variables:

   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```
4. Run the application:

   ```bash
   uvicorn app.main:app --reload
   ```

## API Documentation

Once running, visit:
- Swagger UI: http://localhost:8000/docs
- ReDoc: http://localhost:8000/redoc

## Project Structure

```
{self.config.name}/
├── app/
│   ├── api/
│   │   └── v1/
│   ├── core/
│   ├── db/
│   ├── models/
│   ├── schemas/
│   ├── services/
│   └── utils/
├── tests/
├── docs/
├── requirements.txt
{"├── Dockerfile" if self.config.include_docker else ""}
{"├── docker-compose.yml" if self.config.include_docker else ""}
└── README.md
```

## Development

### Running Tests

```bash
pytest
```

### Code Formatting

```bash
black .
isort .
```

{"### Docker" if self.config.include_docker else ""}
{"```bash" if self.config.include_docker else ""}
{"docker-compose up -d" if self.config.include_docker else ""}
{"```" if self.config.include_docker else ""}

## License

This project is licensed under the MIT License.
"""
        return template

    def _get_api_docs_template(self) -> str:
        """Get API documentation template"""
        template = f"""# API Documentation

## Base URL

- Development: `http://localhost:8000`
- Production: `https://your-domain.com`

## Authentication

{self._get_auth_docs()}

## Endpoints

### Health Check

- **GET** `/health` - Health check endpoint

### Root

- **GET** `/` - Root endpoint

### API v1

All API v1 endpoints are prefixed with `/api/v1`.

## Error Responses

All endpoints return error responses in the following format:

```json
{{
  "detail": "Error message"
}}
```

## Status Codes

- `200` - Success
- `201` - Created
- `400` - Bad Request
- `401` - Unauthorized
- `403` - Forbidden
- `404` - Not Found
- `422` - Validation Error
- `500` - Internal Server Error
"""
        return template

    def _get_feature_list(self) -> str:
        """Get feature list for README"""
        features = []

        if self.config.include_docker:
            features.append("- Docker support")
        if self.config.include_tests:
            features.append("- Comprehensive test suite")
        if self.config.include_monitoring:
            features.append("- Monitoring and observability")
        if self.config.include_celery:
            features.append("- Background task processing with Celery")
        return "\n".join(features)

    def _get_auth_docs(self) -> str:
        """Get authentication documentation"""
        from ...core.config import AuthType

        if self.config.auth_type == AuthType.NONE:
            return "No authentication required."
        elif self.config.auth_type == AuthType.JWT:
            return """JWT Token authentication is required for protected endpoints.

Include the token in the Authorization header:
```
Authorization: Bearer <your-jwt-token>
```"""
        elif self.config.auth_type == AuthType.API_KEY:
            return """API Key authentication is required.

Include the API key in the request headers:
```
X-API-Key: <your-api-key>
```"""
        elif self.config.auth_type == AuthType.OAUTH2:
            return """OAuth2 authentication is required for protected endpoints.

Follow the OAuth2 flow to obtain an access token."""

        return ""
