"""Config Generator - Generates configuration files"""

from ...generators.base_generator import BaseGenerator


class ConfigGenerator(BaseGenerator):
    """Generates configuration files"""

    def generate(self):
        """Generate config files"""
        # Generate main config file
        config_content = self._get_config_template()
        self.write_file(f"{self.config.path}/app/core/config.py", config_content)

    def _get_config_template(self) -> str:
        """Get the configuration template"""
        template = f'''"""
Application Configuration
Generated by StartFast
"""

from typing import List, Optional
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    """Application settings"""
    
    # Application
    APP_NAME: str = "{self.config.name}"
    APP_VERSION: str = "1.0.0"
    DEBUG: bool = True
    API_PREFIX: str = "/api/v1"
    
    # Server
    HOST: str = "0.0.0.0"
    PORT: int = 8000
    
    # Database
{self._get_database_settings()}
    
    # Security
{self._get_security_settings()}
    
    # CORS
    ALLOWED_ORIGINS: List[str] = ["http://localhost:3000", "http://localhost:8080"]
    
    # Logging
    LOG_LEVEL: str = "INFO"
    LOG_FILE: Optional[str] = None
    
{self._get_additional_settings()}
    

    class Config:
        env_file = ".env"
        case_sensitive = True


# Create settings instance
settings = Settings()
'''
        return template

    def _get_database_settings(self) -> str:
        """Get database-specific settings"""
        from ...core.config import DatabaseType

        if self.config.database_type in [
            DatabaseType.SQLITE,
            DatabaseType.POSTGRESQL,
            DatabaseType.MYSQL,
        ]:
            return """    DATABASE_URL: str
    DATABASE_HOST: Optional[str] = None
    DATABASE_PORT: Optional[int] = None
    DATABASE_NAME: Optional[str] = None
    DATABASE_USER: Optional[str] = None
    DATABASE_PASSWORD: Optional[str] = None"""
        elif self.config.database_type == DatabaseType.MONGODB:
            return """    MONGODB_URL: str
    MONGODB_HOST: str = "localhost"
    MONGODB_PORT: int = 27017
    MONGODB_NAME: str"""
        
        return ""

    def _get_security_settings(self) -> str:
        """Get security-specific settings"""
        from ...core.config import AuthType

        if self.config.auth_type == AuthType.JWT:
            return """    SECRET_KEY: str
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30"""
        elif self.config.auth_type == AuthType.OAUTH2:
            return """    SECRET_KEY: str
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    OAUTH2_CLIENT_ID: str
    OAUTH2_CLIENT_SECRET: str"""
        elif self.config.auth_type == AuthType.API_KEY:
            return """    API_KEY: str"""
        return ""

    def _get_additional_settings(self) -> str:
        """Get additional settings based on configuration"""
        settings_list = []

        if self.config.include_celery:
            settings_list.append(
                '''    # Celery
    CELERY_BROKER_URL: str = "redis://localhost:6379/0"
    CELERY_RESULT_BACKEND: str = "redis://localhost:6379/0"'''
            )

        if self.config.include_monitoring:
            settings_list.append(
                """    # Monitoring
    SENTRY_DSN: Optional[str] = None
    PROMETHEUS_PORT: int = 9090"""
            )

        return "\n\n".join(settings_list)
