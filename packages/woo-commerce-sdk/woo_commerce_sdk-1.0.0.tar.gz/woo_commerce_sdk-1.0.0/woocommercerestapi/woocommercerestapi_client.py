# -*- coding: utf-8 -*-

"""
woocommercerestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from woocommercerestapi.configuration import Configuration
from woocommercerestapi.controllers.base_controller import BaseController
from woocommercerestapi.configuration import Environment
from woocommercerestapi.http.auth.basic_auth import BasicAuth
from woocommercerestapi.controllers.id_controller import IdController
from woocommercerestapi.controllers.batch_controller import BatchController
from woocommercerestapi.controllers.coupons_controller import CouponsController
from woocommercerestapi.controllers.customers_controller\
    import CustomersController
from woocommercerestapi.controllers.notes_controller import NotesController
from woocommercerestapi.controllers.refunds_controller import RefundsController
from woocommercerestapi.controllers.orders_controller import OrdersController
from woocommercerestapi.controllers.attribute_id_terms_controller\
    import AttributeIdTermsController
from woocommercerestapi.controllers.attributes_controller\
    import AttributesController
from woocommercerestapi.controllers.categories_controller\
    import CategoriesController
from woocommercerestapi.controllers.reviews_controller import ReviewsController
from woocommercerestapi.controllers.shipping_classes_controller\
    import ShippingClassesController
from woocommercerestapi.controllers.tags_controller import TagsController
from woocommercerestapi.controllers.product_id_variations_controller\
    import ProductIdVariationsController
from woocommercerestapi.controllers.products_controller\
    import ProductsController
from woocommercerestapi.controllers.reports_controller import ReportsController
from woocommercerestapi.controllers.group_id_controller\
    import GroupIdController
from woocommercerestapi.controllers.settings_controller\
    import SettingsController
from woocommercerestapi.controllers.locations_controller\
    import LocationsController
from woocommercerestapi.controllers.instance_id_controller\
    import InstanceIdController
from woocommercerestapi.controllers.zone_id_methods_controller\
    import ZoneIdMethodsController
from woocommercerestapi.controllers.shipping_zones_controller\
    import ShippingZonesController
from woocommercerestapi.controllers.classes_controller import ClassesController
from woocommercerestapi.controllers.taxes_controller import TaxesController
from woocommercerestapi.controllers.webhooks_controller\
    import WebhooksController
from woocommercerestapi.controllers.tools_controller import ToolsController
from woocommercerestapi.controllers.system_status_controller\
    import SystemStatusController
from woocommercerestapi.controllers.shipping_methods_controller\
    import ShippingMethodsController
from woocommercerestapi.controllers.payment_gateways_controller\
    import PaymentGatewaysController
from woocommercerestapi.controllers.continents_controller\
    import ContinentsController
from woocommercerestapi.controllers.countries_controller\
    import CountriesController
from woocommercerestapi.controllers.currencies_controller\
    import CurrenciesController
from woocommercerestapi.controllers.data_controller import DataController


class WoocommercerestapiClient(object):
    @LazyProperty
    def id(self):
        return IdController(self.global_configuration)

    @LazyProperty
    def batch(self):
        return BatchController(self.global_configuration)

    @LazyProperty
    def coupons(self):
        return CouponsController(self.global_configuration)

    @LazyProperty
    def customers(self):
        return CustomersController(self.global_configuration)

    @LazyProperty
    def notes(self):
        return NotesController(self.global_configuration)

    @LazyProperty
    def refunds(self):
        return RefundsController(self.global_configuration)

    @LazyProperty
    def orders(self):
        return OrdersController(self.global_configuration)

    @LazyProperty
    def attribute_id_terms(self):
        return AttributeIdTermsController(self.global_configuration)

    @LazyProperty
    def attributes(self):
        return AttributesController(self.global_configuration)

    @LazyProperty
    def categories(self):
        return CategoriesController(self.global_configuration)

    @LazyProperty
    def reviews(self):
        return ReviewsController(self.global_configuration)

    @LazyProperty
    def shipping_classes(self):
        return ShippingClassesController(self.global_configuration)

    @LazyProperty
    def tags(self):
        return TagsController(self.global_configuration)

    @LazyProperty
    def product_id_variations(self):
        return ProductIdVariationsController(self.global_configuration)

    @LazyProperty
    def products(self):
        return ProductsController(self.global_configuration)

    @LazyProperty
    def reports(self):
        return ReportsController(self.global_configuration)

    @LazyProperty
    def group_id(self):
        return GroupIdController(self.global_configuration)

    @LazyProperty
    def settings(self):
        return SettingsController(self.global_configuration)

    @LazyProperty
    def locations(self):
        return LocationsController(self.global_configuration)

    @LazyProperty
    def instance_id(self):
        return InstanceIdController(self.global_configuration)

    @LazyProperty
    def zone_id_methods(self):
        return ZoneIdMethodsController(self.global_configuration)

    @LazyProperty
    def shipping_zones(self):
        return ShippingZonesController(self.global_configuration)

    @LazyProperty
    def classes(self):
        return ClassesController(self.global_configuration)

    @LazyProperty
    def taxes(self):
        return TaxesController(self.global_configuration)

    @LazyProperty
    def webhooks(self):
        return WebhooksController(self.global_configuration)

    @LazyProperty
    def tools(self):
        return ToolsController(self.global_configuration)

    @LazyProperty
    def system_status(self):
        return SystemStatusController(self.global_configuration)

    @LazyProperty
    def shipping_methods(self):
        return ShippingMethodsController(self.global_configuration)

    @LazyProperty
    def payment_gateways(self):
        return PaymentGatewaysController(self.global_configuration)

    @LazyProperty
    def continents(self):
        return ContinentsController(self.global_configuration)

    @LazyProperty
    def countries(self):
        return CountriesController(self.global_configuration)

    @LazyProperty
    def currencies(self):
        return CurrenciesController(self.global_configuration)

    @LazyProperty
    def data(self):
        return DataController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, username=None,
                 password=None, basic_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, username=username, password=password,
            basic_auth_credentials=basic_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['basic']}
        self.auth_managers['basic'] = BasicAuth(
            self.config.basic_auth_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

