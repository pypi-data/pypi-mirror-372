# -*- coding: utf-8 -*-

"""
woocommercerestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from woocommercerestapi.api_helper import APIHelper
from woocommercerestapi.configuration import Server
from woocommercerestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from woocommercerestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from woocommercerestapi.exceptions.api_exception import APIException


class ProductIdVariationsController(BaseController):

    """A Controller to access Endpoints in the woocommercerestapi API."""
    def __init__(self, config):
        super(ProductIdVariationsController, self).__init__(config)

    def wc_v_3_products_product_id_variations(self,
                                              context,
                                              page,
                                              per_page,
                                              search,
                                              after,
                                              before,
                                              exclude,
                                              include,
                                              offset,
                                              order,
                                              orderby,
                                              parent,
                                              parent_exclude,
                                              slug,
                                              status,
                                              sku,
                                              on_sale,
                                              min_price,
                                              max_price,
                                              stock_status,
                                              product_id):
        """Does a GET request to /products/{product_id}/variations.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            page (str): Current page of the collection.
            per_page (str): Maximum number of items to be returned in result
                set.
            search (str): Limit results to those matching a string.
            after (str): Limit response to resources published after a given
                ISO8601 compliant date.
            before (str): Limit response to resources published before a given
                ISO8601 compliant date.
            exclude (str): Ensure result set excludes specific IDs.
            include (str): Limit result set to specific ids.
            offset (str): Offset the result set by a specific number of items.
            order (str): Order sort attribute ascending or descending.
            orderby (str): Sort collection by object attribute.
            parent (str): Limit result set to those of particular parent IDs.
            parent_exclude (str): Limit result set to all items except those
                of a particular parent ID.
            slug (str): Limit result set to products with a specific slug.
            status (str): Limit result set to products assigned a specific
                status.
            sku (str): Limit result set to products with specific SKU(s). Use
                commas to separate.
            on_sale (str): Limit result set to products on sale.
            min_price (str): Limit result set to products based on a minimum
                price.
            max_price (str): Limit result set to products based on a maximum
                price.
            stock_status (str): Limit result set to products with specified
                stock status.
            product_id (str): (Required) Unique identifier for the variable
                product.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{product_id}/variations')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('after')
                         .value(after))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('exclude')
                         .value(exclude))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('orderby')
                         .value(orderby))
            .query_param(Parameter()
                         .key('parent')
                         .value(parent))
            .query_param(Parameter()
                         .key('parent_exclude')
                         .value(parent_exclude))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('sku')
                         .value(sku))
            .query_param(Parameter()
                         .key('on_sale')
                         .value(on_sale))
            .query_param(Parameter()
                         .key('min_price')
                         .value(min_price))
            .query_param(Parameter()
                         .key('max_price')
                         .value(max_price))
            .query_param(Parameter()
                         .key('stock_status')
                         .value(stock_status))
            .template_param(Parameter()
                            .key('product_id')
                            .value(product_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_product_id_variations_1(self,
                                                product_id,
                                                description,
                                                sku,
                                                regular_price,
                                                sale_price,
                                                date_on_sale_from,
                                                date_on_sale_from_gmt,
                                                date_on_sale_to,
                                                date_on_sale_to_gmt,
                                                status,
                                                virtual,
                                                downloadable,
                                                downloads,
                                                download_limit,
                                                download_expiry,
                                                tax_status,
                                                tax_class,
                                                manage_stock,
                                                stock_quantity,
                                                stock_status,
                                                backorders,
                                                weight,
                                                dimensions,
                                                shipping_class,
                                                image,
                                                attributes,
                                                menu_order,
                                                meta_data):
        """Does a POST request to /products/{product_id}/variations.

        Args:
            product_id (str): (Required) Unique identifier for the variable
                product.
            description (str): Variation description.
            sku (str): Unique identifier.
            regular_price (str): Variation regular price.
            sale_price (str): Variation sale price.
            date_on_sale_from (str): Start date of sale price, in the site's
                timezone.
            date_on_sale_from_gmt (str): Start date of sale price, as GMT.
            date_on_sale_to (str): End date of sale price, in the site's
                timezone.
            date_on_sale_to_gmt (str): End date of sale price, in the site's
                timezone.
            status (List[str]): Variation status.
            virtual (str): If the variation is virtual.
            downloadable (str): If the variation is downloadable.
            downloads (str): List of downloadable files.
            download_limit (str): Number of times downloadable files can be
                downloaded after purchase.
            download_expiry (str): Number of days until access to downloadable
                files expires.
            tax_status (List[str]): Tax status.
            tax_class (str): Tax class.
            manage_stock (str): Stock management at variation level.
            stock_quantity (str): Stock quantity.
            stock_status (List[str]): Controls the stock status of the product.
            backorders (List[str]): If managing stock, this controls if
                backorders are allowed.
            weight (str): Variation weight (kg).
            dimensions (str): Variation dimensions.
            shipping_class (str): Shipping class slug.
            image (str): Variation image data.
            attributes (str): List of attributes.
            menu_order (str): Menu order, used to custom sort products.
            meta_data (str): Meta data.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{product_id}/variations')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('product_id')
                            .value(product_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('sku')
                        .value(sku))
            .form_param(Parameter()
                        .key('regular_price')
                        .value(regular_price))
            .form_param(Parameter()
                        .key('sale_price')
                        .value(sale_price))
            .form_param(Parameter()
                        .key('date_on_sale_from')
                        .value(date_on_sale_from))
            .form_param(Parameter()
                        .key('date_on_sale_from_gmt')
                        .value(date_on_sale_from_gmt))
            .form_param(Parameter()
                        .key('date_on_sale_to')
                        .value(date_on_sale_to))
            .form_param(Parameter()
                        .key('date_on_sale_to_gmt')
                        .value(date_on_sale_to_gmt))
            .form_param(Parameter()
                        .key('status')
                        .value(status))
            .form_param(Parameter()
                        .key('virtual')
                        .value(virtual))
            .form_param(Parameter()
                        .key('downloadable')
                        .value(downloadable))
            .form_param(Parameter()
                        .key('downloads')
                        .value(downloads))
            .form_param(Parameter()
                        .key('download_limit')
                        .value(download_limit))
            .form_param(Parameter()
                        .key('download_expiry')
                        .value(download_expiry))
            .form_param(Parameter()
                        .key('tax_status')
                        .value(tax_status))
            .form_param(Parameter()
                        .key('tax_class')
                        .value(tax_class))
            .form_param(Parameter()
                        .key('manage_stock')
                        .value(manage_stock))
            .form_param(Parameter()
                        .key('stock_quantity')
                        .value(stock_quantity))
            .form_param(Parameter()
                        .key('stock_status')
                        .value(stock_status))
            .form_param(Parameter()
                        .key('backorders')
                        .value(backorders))
            .form_param(Parameter()
                        .key('weight')
                        .value(weight))
            .form_param(Parameter()
                        .key('dimensions')
                        .value(dimensions))
            .form_param(Parameter()
                        .key('shipping_class')
                        .value(shipping_class))
            .form_param(Parameter()
                        .key('image')
                        .value(image))
            .form_param(Parameter()
                        .key('attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('menu_order')
                        .value(menu_order))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()
