# -*- coding: utf-8 -*-

"""
woocommercerestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from woocommercerestapi.api_helper import APIHelper
from woocommercerestapi.configuration import Server
from woocommercerestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from woocommercerestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from woocommercerestapi.exceptions.api_exception import APIException


class CustomersController(BaseController):

    """A Controller to access Endpoints in the woocommercerestapi API."""
    def __init__(self, config):
        super(CustomersController, self).__init__(config)

    def wc_v_3_customers(self,
                         context,
                         page,
                         per_page,
                         search,
                         exclude,
                         include,
                         offset,
                         order,
                         orderby,
                         email,
                         role):
        """Does a GET request to /customers.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            page (str): Current page of the collection.
            per_page (str): Maximum number of items to be returned in result
                set.
            search (str): Limit results to those matching a string.
            exclude (str): Ensure result set excludes specific IDs.
            include (str): Limit result set to specific IDs.
            offset (str): Offset the result set by a specific number of items.
            order (str): Order sort attribute ascending or descending.
            orderby (str): Sort collection by object attribute.
            email (str): Limit result set to resources with a specific email.
            role (str): Limit result set to resources with a specific role.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/customers')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('exclude')
                         .value(exclude))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('orderby')
                         .value(orderby))
            .query_param(Parameter()
                         .key('email')
                         .value(email))
            .query_param(Parameter()
                         .key('role')
                         .value(role))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_customers_1(self,
                           email,
                           first_name,
                           last_name,
                           username,
                           password,
                           billing,
                           shipping,
                           meta_data):
        """Does a POST request to /customers.

        Args:
            email (str): New user email address.
            first_name (str): Customer first name.
            last_name (str): Customer last name.
            username (str): New user username.
            password (str): New user password.
            billing (str): List of billing address data.
            shipping (str): List of shipping address data.
            meta_data (str): Meta data.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/customers')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('email')
                        .value(email))
            .form_param(Parameter()
                        .key('first_name')
                        .value(first_name))
            .form_param(Parameter()
                        .key('last_name')
                        .value(last_name))
            .form_param(Parameter()
                        .key('username')
                        .value(username))
            .form_param(Parameter()
                        .key('password')
                        .value(password))
            .form_param(Parameter()
                        .key('billing')
                        .value(billing))
            .form_param(Parameter()
                        .key('shipping')
                        .value(shipping))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_customers_copy(self,
                              email,
                              first_name,
                              last_name,
                              username,
                              password,
                              billing,
                              shipping,
                              meta_data):
        """Does a POST request to /customers.

        Args:
            email (str): New user email address.
            first_name (str): Customer first name.
            last_name (str): Customer last name.
            username (str): New user username.
            password (str): New user password.
            billing (str): List of billing address data.
            shipping (str): List of shipping address data.
            meta_data (str): Meta data.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/customers')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('email')
                        .value(email))
            .form_param(Parameter()
                        .key('first_name')
                        .value(first_name))
            .form_param(Parameter()
                        .key('last_name')
                        .value(last_name))
            .form_param(Parameter()
                        .key('username')
                        .value(username))
            .form_param(Parameter()
                        .key('password')
                        .value(password))
            .form_param(Parameter()
                        .key('billing')
                        .value(billing))
            .form_param(Parameter()
                        .key('shipping')
                        .value(shipping))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_customers_customer_id_downloads(self,
                                               context,
                                               customer_id):
        """Does a GET request to /customers/{customer_id}/downloads.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            customer_id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/customers/{customer_id}/downloads')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('customer_id')
                            .value(customer_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()
