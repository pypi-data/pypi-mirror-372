# -*- coding: utf-8 -*-

"""
woocommercerestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from woocommercerestapi.api_helper import APIHelper
from woocommercerestapi.configuration import Server
from woocommercerestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from woocommercerestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from woocommercerestapi.exceptions.api_exception import APIException


class IdController(BaseController):

    """A Controller to access Endpoints in the woocommercerestapi API."""
    def __init__(self, config):
        super(IdController, self).__init__(config)

    def wc_v_3_coupons_id(self,
                          context,
                          id):
        """Does a GET request to /coupons/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/coupons/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_coupons_id_2(self,
                            id,
                            code,
                            amount,
                            discount_type,
                            description,
                            date_expires,
                            date_expires_gmt,
                            individual_use,
                            product_ids,
                            excluded_product_ids,
                            usage_limit,
                            usage_limit_per_user,
                            limit_usage_to_x_items,
                            free_shipping,
                            product_categories,
                            excluded_product_categories,
                            exclude_sale_items,
                            minimum_amount,
                            maximum_amount,
                            email_restrictions,
                            meta_data):
        """Does a POST request to /coupons/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            code (str): Coupon code.
            amount (str): The amount of discount. Should always be numeric,
                even if setting a percentage.
            discount_type (List[str]): Determines the type of discount that
                will be applied.
            description (str): Coupon description.
            date_expires (str): The date the coupon expires, in the site's
                timezone.
            date_expires_gmt (str): The date the coupon expires, as GMT.
            individual_use (str): If true, the coupon can only be used
                individually. Other applied coupons will be removed from the
                cart.
            product_ids (str): List of product IDs the coupon can be used on.
            excluded_product_ids (str): List of product IDs the coupon cannot
                be used on.
            usage_limit (str): How many times the coupon can be used in total.
            usage_limit_per_user (str): How many times the coupon can be used
                per customer.
            limit_usage_to_x_items (str): Max number of items in the cart the
                coupon can be applied to.
            free_shipping (str): If true and if the free shipping method
                requires a coupon, this coupon will enable free shipping.
            product_categories (str): List of category IDs the coupon applies
                to.
            excluded_product_categories (str): List of category IDs the coupon
                does not apply to.
            exclude_sale_items (str): If true, this coupon will not be applied
                to items that have sale prices.
            minimum_amount (str): Minimum order amount that needs to be in the
                cart before coupon applies.
            maximum_amount (str): Maximum order amount allowed when using the
                coupon.
            email_restrictions (str): List of email addresses that can use
                this coupon.
            meta_data (str): Meta data.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/coupons/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('code')
                        .value(code))
            .form_param(Parameter()
                        .key('amount')
                        .value(amount))
            .form_param(Parameter()
                        .key('discount_type')
                        .value(discount_type))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('date_expires')
                        .value(date_expires))
            .form_param(Parameter()
                        .key('date_expires_gmt')
                        .value(date_expires_gmt))
            .form_param(Parameter()
                        .key('individual_use')
                        .value(individual_use))
            .form_param(Parameter()
                        .key('product_ids')
                        .value(product_ids))
            .form_param(Parameter()
                        .key('excluded_product_ids')
                        .value(excluded_product_ids))
            .form_param(Parameter()
                        .key('usage_limit')
                        .value(usage_limit))
            .form_param(Parameter()
                        .key('usage_limit_per_user')
                        .value(usage_limit_per_user))
            .form_param(Parameter()
                        .key('limit_usage_to_x_items')
                        .value(limit_usage_to_x_items))
            .form_param(Parameter()
                        .key('free_shipping')
                        .value(free_shipping))
            .form_param(Parameter()
                        .key('product_categories')
                        .value(product_categories))
            .form_param(Parameter()
                        .key('excluded_product_categories')
                        .value(excluded_product_categories))
            .form_param(Parameter()
                        .key('exclude_sale_items')
                        .value(exclude_sale_items))
            .form_param(Parameter()
                        .key('minimum_amount')
                        .value(minimum_amount))
            .form_param(Parameter()
                        .key('maximum_amount')
                        .value(maximum_amount))
            .form_param(Parameter()
                        .key('email_restrictions')
                        .value(email_restrictions))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_coupons_id_3(self,
                            code,
                            amount,
                            discount_type,
                            description,
                            date_expires,
                            date_expires_gmt,
                            individual_use,
                            product_ids,
                            excluded_product_ids,
                            usage_limit,
                            usage_limit_per_user,
                            limit_usage_to_x_items,
                            free_shipping,
                            product_categories,
                            excluded_product_categories,
                            exclude_sale_items,
                            minimum_amount,
                            maximum_amount,
                            email_restrictions,
                            meta_data,
                            id):
        """Does a PUT request to /coupons/{id}.

        Args:
            code (str): Coupon code.
            amount (str): The amount of discount. Should always be numeric,
                even if setting a percentage.
            discount_type (str): Determines the type of discount that will be
                applied.
            description (str): Coupon description.
            date_expires (str): The date the coupon expires, in the site's
                timezone.
            date_expires_gmt (str): The date the coupon expires, as GMT.
            individual_use (str): If true, the coupon can only be used
                individually. Other applied coupons will be removed from the
                cart.
            product_ids (str): List of product IDs the coupon can be used on.
            excluded_product_ids (str): List of product IDs the coupon cannot
                be used on.
            usage_limit (str): How many times the coupon can be used in total.
            usage_limit_per_user (str): How many times the coupon can be used
                per customer.
            limit_usage_to_x_items (str): Max number of items in the cart the
                coupon can be applied to.
            free_shipping (str): If true and if the free shipping method
                requires a coupon, this coupon will enable free shipping.
            product_categories (str): List of category IDs the coupon applies
                to.
            excluded_product_categories (str): List of category IDs the coupon
                does not apply to.
            exclude_sale_items (str): If true, this coupon will not be applied
                to items that have sale prices.
            minimum_amount (str): Minimum order amount that needs to be in the
                cart before coupon applies.
            maximum_amount (str): Maximum order amount allowed when using the
                coupon.
            email_restrictions (str): List of email addresses that can use
                this coupon.
            meta_data (str): Meta data.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/coupons/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('code')
                         .value(code))
            .query_param(Parameter()
                         .key('amount')
                         .value(amount))
            .query_param(Parameter()
                         .key('discount_type')
                         .value(discount_type))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('date_expires')
                         .value(date_expires))
            .query_param(Parameter()
                         .key('date_expires_gmt')
                         .value(date_expires_gmt))
            .query_param(Parameter()
                         .key('individual_use')
                         .value(individual_use))
            .query_param(Parameter()
                         .key('product_ids')
                         .value(product_ids))
            .query_param(Parameter()
                         .key('excluded_product_ids')
                         .value(excluded_product_ids))
            .query_param(Parameter()
                         .key('usage_limit')
                         .value(usage_limit))
            .query_param(Parameter()
                         .key('usage_limit_per_user')
                         .value(usage_limit_per_user))
            .query_param(Parameter()
                         .key('limit_usage_to_x_items')
                         .value(limit_usage_to_x_items))
            .query_param(Parameter()
                         .key('free_shipping')
                         .value(free_shipping))
            .query_param(Parameter()
                         .key('product_categories')
                         .value(product_categories))
            .query_param(Parameter()
                         .key('excluded_product_categories')
                         .value(excluded_product_categories))
            .query_param(Parameter()
                         .key('exclude_sale_items')
                         .value(exclude_sale_items))
            .query_param(Parameter()
                         .key('minimum_amount')
                         .value(minimum_amount))
            .query_param(Parameter()
                         .key('maximum_amount')
                         .value(maximum_amount))
            .query_param(Parameter()
                         .key('email_restrictions')
                         .value(email_restrictions))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_coupons_id_1(self,
                            code,
                            amount,
                            discount_type,
                            description,
                            date_expires,
                            date_expires_gmt,
                            individual_use,
                            product_ids,
                            excluded_product_ids,
                            usage_limit,
                            usage_limit_per_user,
                            limit_usage_to_x_items,
                            free_shipping,
                            product_categories,
                            excluded_product_categories,
                            exclude_sale_items,
                            minimum_amount,
                            maximum_amount,
                            email_restrictions,
                            meta_data,
                            id):
        """Does a PATCH request to /coupons/{id}.

        Args:
            code (str): Coupon code.
            amount (str): The amount of discount. Should always be numeric,
                even if setting a percentage.
            discount_type (str): Determines the type of discount that will be
                applied.
            description (str): Coupon description.
            date_expires (str): The date the coupon expires, in the site's
                timezone.
            date_expires_gmt (str): The date the coupon expires, as GMT.
            individual_use (str): If true, the coupon can only be used
                individually. Other applied coupons will be removed from the
                cart.
            product_ids (str): List of product IDs the coupon can be used on.
            excluded_product_ids (str): List of product IDs the coupon cannot
                be used on.
            usage_limit (str): How many times the coupon can be used in total.
            usage_limit_per_user (str): How many times the coupon can be used
                per customer.
            limit_usage_to_x_items (str): Max number of items in the cart the
                coupon can be applied to.
            free_shipping (str): If true and if the free shipping method
                requires a coupon, this coupon will enable free shipping.
            product_categories (str): List of category IDs the coupon applies
                to.
            excluded_product_categories (str): List of category IDs the coupon
                does not apply to.
            exclude_sale_items (str): If true, this coupon will not be applied
                to items that have sale prices.
            minimum_amount (str): Minimum order amount that needs to be in the
                cart before coupon applies.
            maximum_amount (str): Maximum order amount allowed when using the
                coupon.
            email_restrictions (str): List of email addresses that can use
                this coupon.
            meta_data (str): Meta data.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/coupons/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('code')
                         .value(code))
            .query_param(Parameter()
                         .key('amount')
                         .value(amount))
            .query_param(Parameter()
                         .key('discount_type')
                         .value(discount_type))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('date_expires')
                         .value(date_expires))
            .query_param(Parameter()
                         .key('date_expires_gmt')
                         .value(date_expires_gmt))
            .query_param(Parameter()
                         .key('individual_use')
                         .value(individual_use))
            .query_param(Parameter()
                         .key('product_ids')
                         .value(product_ids))
            .query_param(Parameter()
                         .key('excluded_product_ids')
                         .value(excluded_product_ids))
            .query_param(Parameter()
                         .key('usage_limit')
                         .value(usage_limit))
            .query_param(Parameter()
                         .key('usage_limit_per_user')
                         .value(usage_limit_per_user))
            .query_param(Parameter()
                         .key('limit_usage_to_x_items')
                         .value(limit_usage_to_x_items))
            .query_param(Parameter()
                         .key('free_shipping')
                         .value(free_shipping))
            .query_param(Parameter()
                         .key('product_categories')
                         .value(product_categories))
            .query_param(Parameter()
                         .key('excluded_product_categories')
                         .value(excluded_product_categories))
            .query_param(Parameter()
                         .key('exclude_sale_items')
                         .value(exclude_sale_items))
            .query_param(Parameter()
                         .key('minimum_amount')
                         .value(minimum_amount))
            .query_param(Parameter()
                         .key('maximum_amount')
                         .value(maximum_amount))
            .query_param(Parameter()
                         .key('email_restrictions')
                         .value(email_restrictions))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_coupons_id_4(self,
                            force,
                            id):
        """Does a DELETE request to /coupons/{id}.

        Args:
            force (str): Whether to bypass trash and force deletion.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/coupons/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_customers_id(self,
                            context,
                            id):
        """Does a GET request to /customers/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/customers/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_customers_id_2(self,
                              id,
                              email,
                              first_name,
                              last_name,
                              username,
                              password,
                              billing,
                              shipping,
                              meta_data):
        """Does a POST request to /customers/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            email (str): The email address for the customer.
            first_name (str): Customer first name.
            last_name (str): Customer last name.
            username (str): Customer login name.
            password (str): Customer password.
            billing (str): List of billing address data.
            shipping (str): List of shipping address data.
            meta_data (str): Meta data.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/customers/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('email')
                        .value(email))
            .form_param(Parameter()
                        .key('first_name')
                        .value(first_name))
            .form_param(Parameter()
                        .key('last_name')
                        .value(last_name))
            .form_param(Parameter()
                        .key('username')
                        .value(username))
            .form_param(Parameter()
                        .key('password')
                        .value(password))
            .form_param(Parameter()
                        .key('billing')
                        .value(billing))
            .form_param(Parameter()
                        .key('shipping')
                        .value(shipping))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_customers_id_3(self,
                              email,
                              first_name,
                              last_name,
                              username,
                              password,
                              billing,
                              shipping,
                              meta_data,
                              id):
        """Does a PUT request to /customers/{id}.

        Args:
            email (str): The email address for the customer.
            first_name (str): Customer first name.
            last_name (str): Customer last name.
            username (str): Customer login name.
            password (str): Customer password.
            billing (str): List of billing address data.
            shipping (str): List of shipping address data.
            meta_data (str): Meta data.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/customers/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('email')
                         .value(email))
            .query_param(Parameter()
                         .key('first_name')
                         .value(first_name))
            .query_param(Parameter()
                         .key('last_name')
                         .value(last_name))
            .query_param(Parameter()
                         .key('username')
                         .value(username))
            .query_param(Parameter()
                         .key('password')
                         .value(password))
            .query_param(Parameter()
                         .key('billing')
                         .value(billing))
            .query_param(Parameter()
                         .key('shipping')
                         .value(shipping))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_customers_id_1(self,
                              email,
                              first_name,
                              last_name,
                              username,
                              password,
                              billing,
                              shipping,
                              meta_data,
                              id):
        """Does a PATCH request to /customers/{id}.

        Args:
            email (str): The email address for the customer.
            first_name (str): Customer first name.
            last_name (str): Customer last name.
            username (str): Customer login name.
            password (str): Customer password.
            billing (str): List of billing address data.
            shipping (str): List of shipping address data.
            meta_data (str): Meta data.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/customers/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('email')
                         .value(email))
            .query_param(Parameter()
                         .key('first_name')
                         .value(first_name))
            .query_param(Parameter()
                         .key('last_name')
                         .value(last_name))
            .query_param(Parameter()
                         .key('username')
                         .value(username))
            .query_param(Parameter()
                         .key('password')
                         .value(password))
            .query_param(Parameter()
                         .key('billing')
                         .value(billing))
            .query_param(Parameter()
                         .key('shipping')
                         .value(shipping))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_customers_id_4(self,
                              force,
                              reassign,
                              id):
        """Does a DELETE request to /customers/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            reassign (str): ID to reassign posts to.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/customers/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .query_param(Parameter()
                         .key('reassign')
                         .value(reassign))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_order_id_notes_id(self,
                                        context,
                                        id,
                                        order_id):
        """Does a GET request to /orders/{order_id}/notes/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.
            order_id (str): (Required) The order ID.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders/{order_id}/notes/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('order_id')
                            .value(order_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_order_id_notes_id_1(self,
                                          force,
                                          id,
                                          order_id):
        """Does a DELETE request to /orders/{order_id}/notes/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            id (str): (Required) Unique identifier for the resource.
            order_id (str): (Required) The order ID.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders/{order_id}/notes/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('order_id')
                            .value(order_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_order_id_refunds_id(self,
                                          context,
                                          order_id,
                                          id):
        """Does a GET request to /orders/{order_id}/refunds/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            order_id (str): (Required) The order ID.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders/{order_id}/refunds/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('order_id')
                            .value(order_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_order_id_refunds_id_1(self,
                                            force,
                                            order_id,
                                            id):
        """Does a DELETE request to /orders/{order_id}/refunds/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            order_id (str): (Required) The order ID.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders/{order_id}/refunds/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('order_id')
                            .value(order_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_id(self,
                         id):
        """Does a GET request to /orders/{id}.

        Args:
            id (int): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_id_2(self,
                           id,
                           parent_id,
                           status,
                           currency,
                           customer_id,
                           customer_note,
                           billing,
                           shipping,
                           payment_method,
                           payment_method_title,
                           transaction_id,
                           meta_data,
                           line_items,
                           shipping_lines,
                           fee_lines,
                           coupon_lines,
                           set_paid):
        """Does a POST request to /orders/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            parent_id (str): Parent order ID.
            status (List[str]): Order status.
            currency (List[str]): Currency the order was created with, in ISO
                format.
            customer_id (str): User ID who owns the order. 0 for guests.
            customer_note (str): Note left by customer during checkout.
            billing (str): Billing address.
            shipping (str): Shipping address.
            payment_method (str): Payment method ID.
            payment_method_title (str): Payment method title.
            transaction_id (str): Unique transaction ID.
            meta_data (str): Meta data.
            line_items (str): Line items data.
            shipping_lines (str): Shipping lines data.
            fee_lines (str): Fee lines data.
            coupon_lines (str): Coupons line data.
            set_paid (str): Define if the order is paid. It will set the
                status to processing and reduce stock items.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('parent_id')
                        .value(parent_id))
            .form_param(Parameter()
                        .key('status')
                        .value(status))
            .form_param(Parameter()
                        .key('currency')
                        .value(currency))
            .form_param(Parameter()
                        .key('customer_id')
                        .value(customer_id))
            .form_param(Parameter()
                        .key('customer_note')
                        .value(customer_note))
            .form_param(Parameter()
                        .key('billing')
                        .value(billing))
            .form_param(Parameter()
                        .key('shipping')
                        .value(shipping))
            .form_param(Parameter()
                        .key('payment_method')
                        .value(payment_method))
            .form_param(Parameter()
                        .key('payment_method_title')
                        .value(payment_method_title))
            .form_param(Parameter()
                        .key('transaction_id')
                        .value(transaction_id))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .form_param(Parameter()
                        .key('line_items')
                        .value(line_items))
            .form_param(Parameter()
                        .key('shipping_lines')
                        .value(shipping_lines))
            .form_param(Parameter()
                        .key('fee_lines')
                        .value(fee_lines))
            .form_param(Parameter()
                        .key('coupon_lines')
                        .value(coupon_lines))
            .form_param(Parameter()
                        .key('set_paid')
                        .value(set_paid))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_id_3(self,
                           parent_id,
                           status,
                           currency,
                           customer_id,
                           customer_note,
                           billing,
                           shipping,
                           payment_method,
                           payment_method_title,
                           transaction_id,
                           meta_data,
                           line_items,
                           shipping_lines,
                           fee_lines,
                           coupon_lines,
                           set_paid,
                           id):
        """Does a PUT request to /orders/{id}.

        Args:
            parent_id (str): Parent order ID.
            status (str): Order status.
            currency (str): Currency the order was created with, in ISO format.
            customer_id (str): User ID who owns the order. 0 for guests.
            customer_note (str): Note left by customer during checkout.
            billing (str): Billing address.
            shipping (str): Shipping address.
            payment_method (str): Payment method ID.
            payment_method_title (str): Payment method title.
            transaction_id (str): Unique transaction ID.
            meta_data (str): Meta data.
            line_items (str): Line items data.
            shipping_lines (str): Shipping lines data.
            fee_lines (str): Fee lines data.
            coupon_lines (str): Coupons line data.
            set_paid (str): Define if the order is paid. It will set the
                status to processing and reduce stock items.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('parent_id')
                         .value(parent_id))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('currency')
                         .value(currency))
            .query_param(Parameter()
                         .key('customer_id')
                         .value(customer_id))
            .query_param(Parameter()
                         .key('customer_note')
                         .value(customer_note))
            .query_param(Parameter()
                         .key('billing')
                         .value(billing))
            .query_param(Parameter()
                         .key('shipping')
                         .value(shipping))
            .query_param(Parameter()
                         .key('payment_method')
                         .value(payment_method))
            .query_param(Parameter()
                         .key('payment_method_title')
                         .value(payment_method_title))
            .query_param(Parameter()
                         .key('transaction_id')
                         .value(transaction_id))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .query_param(Parameter()
                         .key('line_items')
                         .value(line_items))
            .query_param(Parameter()
                         .key('shipping_lines')
                         .value(shipping_lines))
            .query_param(Parameter()
                         .key('fee_lines')
                         .value(fee_lines))
            .query_param(Parameter()
                         .key('coupon_lines')
                         .value(coupon_lines))
            .query_param(Parameter()
                         .key('set_paid')
                         .value(set_paid))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_id_1(self,
                           parent_id,
                           status,
                           currency,
                           customer_id,
                           customer_note,
                           billing,
                           shipping,
                           payment_method,
                           payment_method_title,
                           transaction_id,
                           meta_data,
                           line_items,
                           shipping_lines,
                           fee_lines,
                           coupon_lines,
                           set_paid,
                           id):
        """Does a PATCH request to /orders/{id}.

        Args:
            parent_id (str): Parent order ID.
            status (str): Order status.
            currency (str): Currency the order was created with, in ISO format.
            customer_id (str): User ID who owns the order. 0 for guests.
            customer_note (str): Note left by customer during checkout.
            billing (str): Billing address.
            shipping (str): Shipping address.
            payment_method (str): Payment method ID.
            payment_method_title (str): Payment method title.
            transaction_id (str): Unique transaction ID.
            meta_data (str): Meta data.
            line_items (str): Line items data.
            shipping_lines (str): Shipping lines data.
            fee_lines (str): Fee lines data.
            coupon_lines (str): Coupons line data.
            set_paid (str): Define if the order is paid. It will set the
                status to processing and reduce stock items.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('parent_id')
                         .value(parent_id))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('currency')
                         .value(currency))
            .query_param(Parameter()
                         .key('customer_id')
                         .value(customer_id))
            .query_param(Parameter()
                         .key('customer_note')
                         .value(customer_note))
            .query_param(Parameter()
                         .key('billing')
                         .value(billing))
            .query_param(Parameter()
                         .key('shipping')
                         .value(shipping))
            .query_param(Parameter()
                         .key('payment_method')
                         .value(payment_method))
            .query_param(Parameter()
                         .key('payment_method_title')
                         .value(payment_method_title))
            .query_param(Parameter()
                         .key('transaction_id')
                         .value(transaction_id))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .query_param(Parameter()
                         .key('line_items')
                         .value(line_items))
            .query_param(Parameter()
                         .key('shipping_lines')
                         .value(shipping_lines))
            .query_param(Parameter()
                         .key('fee_lines')
                         .value(fee_lines))
            .query_param(Parameter()
                         .key('coupon_lines')
                         .value(coupon_lines))
            .query_param(Parameter()
                         .key('set_paid')
                         .value(set_paid))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_id_4(self,
                           force,
                           id):
        """Does a DELETE request to /orders/{id}.

        Args:
            force (str): Whether to bypass trash and force deletion.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_attribute_id_terms_id(self,
                                                         context,
                                                         id,
                                                         attribute_id):
        """Does a GET request to /products/attributes/{attribute_id}/terms/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.
            attribute_id (str): (Required) Unique identifier for the attribute
                of the terms.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{attribute_id}/terms/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('attribute_id')
                            .value(attribute_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_attribute_id_terms_id_2(self,
                                                           id,
                                                           attribute_id,
                                                           name,
                                                           slug,
                                                           description,
                                                           menu_order):
        """Does a POST request to /products/attributes/{attribute_id}/terms/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            attribute_id (str): (Required) Unique identifier for the attribute
                of the terms.
            name (str): Term name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.
            menu_order (str): Menu order, used to custom sort the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{attribute_id}/terms/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('attribute_id')
                            .value(attribute_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('menu_order')
                        .value(menu_order))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_attribute_id_terms_id_3(self,
                                                           name,
                                                           slug,
                                                           description,
                                                           menu_order,
                                                           id,
                                                           attribute_id):
        """Does a PUT request to /products/attributes/{attribute_id}/terms/{id}.

        Args:
            name (str): Term name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.
            menu_order (str): Menu order, used to custom sort the resource.
            id (str): (Required) Unique identifier for the resource.
            attribute_id (str): (Required) Unique identifier for the attribute
                of the terms.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{attribute_id}/terms/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('menu_order')
                         .value(menu_order))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('attribute_id')
                            .value(attribute_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_attribute_id_terms_id_1(self,
                                                           name,
                                                           slug,
                                                           description,
                                                           menu_order,
                                                           id,
                                                           attribute_id):
        """Does a PATCH request to /products/attributes/{attribute_id}/terms/{id}.

        Args:
            name (str): Term name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.
            menu_order (str): Menu order, used to custom sort the resource.
            id (str): (Required) Unique identifier for the resource.
            attribute_id (str): (Required) Unique identifier for the attribute
                of the terms.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{attribute_id}/terms/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('menu_order')
                         .value(menu_order))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('attribute_id')
                            .value(attribute_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_attribute_id_terms_id_4(self,
                                                           force,
                                                           id,
                                                           attribute_id):
        """Does a DELETE request to /products/attributes/{attribute_id}/terms/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            id (str): (Required) Unique identifier for the resource.
            attribute_id (str): (Required) Unique identifier for the attribute
                of the terms.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{attribute_id}/terms/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('attribute_id')
                            .value(attribute_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_id(self,
                                      context,
                                      id):
        """Does a GET request to /products/attributes/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_id_2(self,
                                        id,
                                        name,
                                        slug,
                                        mtype,
                                        order_by,
                                        has_archives):
        """Does a POST request to /products/attributes/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            name (str): Attribute name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            mtype (List[str]): Type of attribute.
            order_by (List[str]): Default sort order.
            has_archives (str): Enable/Disable attribute archives.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('type')
                        .value(mtype))
            .form_param(Parameter()
                        .key('order_by')
                        .value(order_by))
            .form_param(Parameter()
                        .key('has_archives')
                        .value(has_archives))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_id_3(self,
                                        name,
                                        slug,
                                        mtype,
                                        order_by,
                                        has_archives,
                                        id):
        """Does a PUT request to /products/attributes/{id}.

        Args:
            name (str): Attribute name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            mtype (str): Type of attribute.
            order_by (str): Default sort order.
            has_archives (str): Enable/Disable attribute archives.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('order_by')
                         .value(order_by))
            .query_param(Parameter()
                         .key('has_archives')
                         .value(has_archives))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_id_1(self,
                                        name,
                                        slug,
                                        mtype,
                                        order_by,
                                        has_archives,
                                        id):
        """Does a PATCH request to /products/attributes/{id}.

        Args:
            name (str): Attribute name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            mtype (str): Type of attribute.
            order_by (str): Default sort order.
            has_archives (str): Enable/Disable attribute archives.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('order_by')
                         .value(order_by))
            .query_param(Parameter()
                         .key('has_archives')
                         .value(has_archives))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_id_4(self,
                                        force,
                                        id):
        """Does a DELETE request to /products/attributes/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_categories_id(self,
                                      context,
                                      id):
        """Does a GET request to /products/categories/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/categories/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_categories_id_2(self,
                                        id,
                                        name,
                                        slug,
                                        parent,
                                        description,
                                        display,
                                        image,
                                        menu_order):
        """Does a POST request to /products/categories/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            name (str): Category name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            parent (str): The ID for the parent of the resource.
            description (str): HTML description of the resource.
            display (List[str]): Category archive display type.
            image (str): Image data.
            menu_order (str): Menu order, used to custom sort the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/categories/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('parent')
                        .value(parent))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('display')
                        .value(display))
            .form_param(Parameter()
                        .key('image')
                        .value(image))
            .form_param(Parameter()
                        .key('menu_order')
                        .value(menu_order))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_categories_id_3(self,
                                        name,
                                        slug,
                                        parent,
                                        description,
                                        display,
                                        image,
                                        menu_order,
                                        id):
        """Does a PUT request to /products/categories/{id}.

        Args:
            name (str): Category name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            parent (str): The ID for the parent of the resource.
            description (str): HTML description of the resource.
            display (str): Category archive display type.
            image (str): Image data.
            menu_order (str): Menu order, used to custom sort the resource.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/categories/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('parent')
                         .value(parent))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('display')
                         .value(display))
            .query_param(Parameter()
                         .key('image')
                         .value(image))
            .query_param(Parameter()
                         .key('menu_order')
                         .value(menu_order))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_categories_id_1(self,
                                        name,
                                        slug,
                                        parent,
                                        description,
                                        display,
                                        image,
                                        menu_order,
                                        id):
        """Does a PATCH request to /products/categories/{id}.

        Args:
            name (str): Category name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            parent (str): The ID for the parent of the resource.
            description (str): HTML description of the resource.
            display (str): Category archive display type.
            image (str): Image data.
            menu_order (str): Menu order, used to custom sort the resource.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/categories/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('parent')
                         .value(parent))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('display')
                         .value(display))
            .query_param(Parameter()
                         .key('image')
                         .value(image))
            .query_param(Parameter()
                         .key('menu_order')
                         .value(menu_order))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_categories_id_4(self,
                                        force,
                                        id):
        """Does a DELETE request to /products/categories/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/categories/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_reviews_id(self,
                                   context,
                                   id):
        """Does a GET request to /products/reviews/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/reviews/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_reviews_id_2(self,
                                     id,
                                     product_id,
                                     status,
                                     reviewer,
                                     reviewer_email,
                                     review,
                                     rating):
        """Does a POST request to /products/reviews/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            product_id (str): Unique identifier for the product that the
                review belongs to.
            status (List[str]): Status of the review.
            reviewer (str): Reviewer name.
            reviewer_email (str): Reviewer email.
            review (str): The content of the review.
            rating (str): Review rating (0 to 5).

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/reviews/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('product_id')
                        .value(product_id))
            .form_param(Parameter()
                        .key('status')
                        .value(status))
            .form_param(Parameter()
                        .key('reviewer')
                        .value(reviewer))
            .form_param(Parameter()
                        .key('reviewer_email')
                        .value(reviewer_email))
            .form_param(Parameter()
                        .key('review')
                        .value(review))
            .form_param(Parameter()
                        .key('rating')
                        .value(rating))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_reviews_id_3(self,
                                     product_id,
                                     status,
                                     reviewer,
                                     reviewer_email,
                                     review,
                                     rating,
                                     id):
        """Does a PUT request to /products/reviews/{id}.

        Args:
            product_id (str): Unique identifier for the product that the
                review belongs to.
            status (str): Status of the review.
            reviewer (str): Reviewer name.
            reviewer_email (str): Reviewer email.
            review (str): The content of the review.
            rating (str): Review rating (0 to 5).
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/reviews/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('product_id')
                         .value(product_id))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('reviewer')
                         .value(reviewer))
            .query_param(Parameter()
                         .key('reviewer_email')
                         .value(reviewer_email))
            .query_param(Parameter()
                         .key('review')
                         .value(review))
            .query_param(Parameter()
                         .key('rating')
                         .value(rating))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_reviews_id_1(self,
                                     product_id,
                                     status,
                                     reviewer,
                                     reviewer_email,
                                     review,
                                     rating,
                                     id):
        """Does a PATCH request to /products/reviews/{id}.

        Args:
            product_id (str): Unique identifier for the product that the
                review belongs to.
            status (str): Status of the review.
            reviewer (str): Reviewer name.
            reviewer_email (str): Reviewer email.
            review (str): The content of the review.
            rating (str): Review rating (0 to 5).
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/reviews/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('product_id')
                         .value(product_id))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('reviewer')
                         .value(reviewer))
            .query_param(Parameter()
                         .key('reviewer_email')
                         .value(reviewer_email))
            .query_param(Parameter()
                         .key('review')
                         .value(review))
            .query_param(Parameter()
                         .key('rating')
                         .value(rating))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_reviews_id_4(self,
                                     force,
                                     id):
        """Does a DELETE request to /products/reviews/{id}.

        Args:
            force (str): Whether to bypass trash and force deletion.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/reviews/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_shipping_classes_id(self,
                                            context,
                                            id):
        """Does a GET request to /products/shipping_classes/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/shipping_classes/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_shipping_classes_id_2(self,
                                              id,
                                              name,
                                              slug,
                                              description):
        """Does a POST request to /products/shipping_classes/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            name (str): Shipping class name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/shipping_classes/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_shipping_classes_id_3(self,
                                              name,
                                              slug,
                                              description,
                                              id):
        """Does a PUT request to /products/shipping_classes/{id}.

        Args:
            name (str): Shipping class name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/shipping_classes/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_shipping_classes_id_1(self,
                                              name,
                                              slug,
                                              description,
                                              id):
        """Does a PATCH request to /products/shipping_classes/{id}.

        Args:
            name (str): Shipping class name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/shipping_classes/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_shipping_classes_id_4(self,
                                              force,
                                              id):
        """Does a DELETE request to /products/shipping_classes/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/shipping_classes/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_tags_id(self,
                                context,
                                id):
        """Does a GET request to /products/tags/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/tags/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_tags_id_2(self,
                                  id,
                                  name,
                                  slug,
                                  description):
        """Does a POST request to /products/tags/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            name (str): Tag name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/tags/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_tags_id_3(self,
                                  name,
                                  slug,
                                  description,
                                  id):
        """Does a PUT request to /products/tags/{id}.

        Args:
            name (str): Tag name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/tags/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_tags_id_1(self,
                                  name,
                                  slug,
                                  description,
                                  id):
        """Does a PATCH request to /products/tags/{id}.

        Args:
            name (str): Tag name.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/tags/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_tags_id_4(self,
                                  force,
                                  id):
        """Does a DELETE request to /products/tags/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/tags/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_id(self,
                           context,
                           id):
        """Does a GET request to /products/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_id_2(self,
                             id,
                             name,
                             slug,
                             date_created,
                             date_created_gmt,
                             mtype,
                             status,
                             featured,
                             catalog_visibility,
                             description,
                             short_description,
                             sku,
                             regular_price,
                             sale_price,
                             date_on_sale_from,
                             date_on_sale_from_gmt,
                             date_on_sale_to,
                             date_on_sale_to_gmt,
                             virtual,
                             downloadable,
                             downloads,
                             download_limit,
                             download_expiry,
                             external_url,
                             button_text,
                             tax_status,
                             tax_class,
                             manage_stock,
                             stock_quantity,
                             stock_status,
                             backorders,
                             sold_individually,
                             weight,
                             dimensions,
                             shipping_class,
                             reviews_allowed,
                             upsell_ids,
                             cross_sell_ids,
                             parent_id,
                             purchase_note,
                             categories,
                             tags,
                             images,
                             attributes,
                             default_attributes,
                             menu_order,
                             meta_data):
        """Does a POST request to /products/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            name (str): Product name.
            slug (str): Product slug.
            date_created (str): The date the product was created, in the
                site's timezone.
            date_created_gmt (str): The date the product was created, as GMT.
            mtype (List[str]): Product type.
            status (List[str]): Product status (post status).
            featured (str): Featured product.
            catalog_visibility (List[str]): Catalog visibility.
            description (str): Product description.
            short_description (str): Product short description.
            sku (str): Unique identifier.
            regular_price (str): Product regular price.
            sale_price (str): Product sale price.
            date_on_sale_from (str): Start date of sale price, in the site's
                timezone.
            date_on_sale_from_gmt (str): Start date of sale price, as GMT.
            date_on_sale_to (str): End date of sale price, in the site's
                timezone.
            date_on_sale_to_gmt (str): End date of sale price, in the site's
                timezone.
            virtual (str): If the product is virtual.
            downloadable (str): If the product is downloadable.
            downloads (str): List of downloadable files.
            download_limit (str): Number of times downloadable files can be
                downloaded after purchase.
            download_expiry (str): Number of days until access to downloadable
                files expires.
            external_url (str): Product external URL. Only for external
                products.
            button_text (str): Product external button text. Only for external
                products.
            tax_status (List[str]): Tax status.
            tax_class (str): Tax class.
            manage_stock (str): Stock management at product level.
            stock_quantity (str): Stock quantity.
            stock_status (List[str]): Controls the stock status of the product.
            backorders (List[str]): If managing stock, this controls if
                backorders are allowed.
            sold_individually (str): Allow one item to be bought in a single
                order.
            weight (str): Product weight (kg).
            dimensions (str): Product dimensions.
            shipping_class (str): Shipping class slug.
            reviews_allowed (str): Allow reviews.
            upsell_ids (str): List of up-sell products IDs.
            cross_sell_ids (str): List of cross-sell products IDs.
            parent_id (str): Product parent ID.
            purchase_note (str): Optional note to send the customer after
                purchase.
            categories (str): List of categories.
            tags (str): List of tags.
            images (str): List of images.
            attributes (str): List of attributes.
            default_attributes (str): Defaults variation attributes.
            menu_order (str): Menu order, used to custom sort products.
            meta_data (str): Meta data.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('date_created')
                        .value(date_created))
            .form_param(Parameter()
                        .key('date_created_gmt')
                        .value(date_created_gmt))
            .form_param(Parameter()
                        .key('type')
                        .value(mtype))
            .form_param(Parameter()
                        .key('status')
                        .value(status))
            .form_param(Parameter()
                        .key('featured')
                        .value(featured))
            .form_param(Parameter()
                        .key('catalog_visibility')
                        .value(catalog_visibility))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('short_description')
                        .value(short_description))
            .form_param(Parameter()
                        .key('sku')
                        .value(sku))
            .form_param(Parameter()
                        .key('regular_price')
                        .value(regular_price))
            .form_param(Parameter()
                        .key('sale_price')
                        .value(sale_price))
            .form_param(Parameter()
                        .key('date_on_sale_from')
                        .value(date_on_sale_from))
            .form_param(Parameter()
                        .key('date_on_sale_from_gmt')
                        .value(date_on_sale_from_gmt))
            .form_param(Parameter()
                        .key('date_on_sale_to')
                        .value(date_on_sale_to))
            .form_param(Parameter()
                        .key('date_on_sale_to_gmt')
                        .value(date_on_sale_to_gmt))
            .form_param(Parameter()
                        .key('virtual')
                        .value(virtual))
            .form_param(Parameter()
                        .key('downloadable')
                        .value(downloadable))
            .form_param(Parameter()
                        .key('downloads')
                        .value(downloads))
            .form_param(Parameter()
                        .key('download_limit')
                        .value(download_limit))
            .form_param(Parameter()
                        .key('download_expiry')
                        .value(download_expiry))
            .form_param(Parameter()
                        .key('external_url')
                        .value(external_url))
            .form_param(Parameter()
                        .key('button_text')
                        .value(button_text))
            .form_param(Parameter()
                        .key('tax_status')
                        .value(tax_status))
            .form_param(Parameter()
                        .key('tax_class')
                        .value(tax_class))
            .form_param(Parameter()
                        .key('manage_stock')
                        .value(manage_stock))
            .form_param(Parameter()
                        .key('stock_quantity')
                        .value(stock_quantity))
            .form_param(Parameter()
                        .key('stock_status')
                        .value(stock_status))
            .form_param(Parameter()
                        .key('backorders')
                        .value(backorders))
            .form_param(Parameter()
                        .key('sold_individually')
                        .value(sold_individually))
            .form_param(Parameter()
                        .key('weight')
                        .value(weight))
            .form_param(Parameter()
                        .key('dimensions')
                        .value(dimensions))
            .form_param(Parameter()
                        .key('shipping_class')
                        .value(shipping_class))
            .form_param(Parameter()
                        .key('reviews_allowed')
                        .value(reviews_allowed))
            .form_param(Parameter()
                        .key('upsell_ids')
                        .value(upsell_ids))
            .form_param(Parameter()
                        .key('cross_sell_ids')
                        .value(cross_sell_ids))
            .form_param(Parameter()
                        .key('parent_id')
                        .value(parent_id))
            .form_param(Parameter()
                        .key('purchase_note')
                        .value(purchase_note))
            .form_param(Parameter()
                        .key('categories')
                        .value(categories))
            .form_param(Parameter()
                        .key('tags')
                        .value(tags))
            .form_param(Parameter()
                        .key('images')
                        .value(images))
            .form_param(Parameter()
                        .key('attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('default_attributes')
                        .value(default_attributes))
            .form_param(Parameter()
                        .key('menu_order')
                        .value(menu_order))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_id_3(self,
                             name,
                             slug,
                             date_created,
                             date_created_gmt,
                             mtype,
                             status,
                             featured,
                             catalog_visibility,
                             description,
                             short_description,
                             sku,
                             regular_price,
                             sale_price,
                             date_on_sale_from,
                             date_on_sale_from_gmt,
                             date_on_sale_to,
                             date_on_sale_to_gmt,
                             virtual,
                             downloadable,
                             downloads,
                             download_limit,
                             download_expiry,
                             external_url,
                             button_text,
                             tax_status,
                             tax_class,
                             manage_stock,
                             stock_quantity,
                             stock_status,
                             backorders,
                             sold_individually,
                             weight,
                             dimensions,
                             shipping_class,
                             reviews_allowed,
                             upsell_ids,
                             cross_sell_ids,
                             parent_id,
                             purchase_note,
                             categories,
                             tags,
                             images,
                             attributes,
                             default_attributes,
                             menu_order,
                             meta_data,
                             id):
        """Does a PUT request to /products/{id}.

        Args:
            name (str): Product name.
            slug (str): Product slug.
            date_created (str): The date the product was created, in the
                site's timezone.
            date_created_gmt (str): The date the product was created, as GMT.
            mtype (str): Product type.
            status (str): Product status (post status).
            featured (str): Featured product.
            catalog_visibility (str): Catalog visibility.
            description (str): Product description.
            short_description (str): Product short description.
            sku (str): Unique identifier.
            regular_price (str): Product regular price.
            sale_price (str): Product sale price.
            date_on_sale_from (str): Start date of sale price, in the site's
                timezone.
            date_on_sale_from_gmt (str): Start date of sale price, as GMT.
            date_on_sale_to (str): End date of sale price, in the site's
                timezone.
            date_on_sale_to_gmt (str): End date of sale price, in the site's
                timezone.
            virtual (str): If the product is virtual.
            downloadable (str): If the product is downloadable.
            downloads (str): List of downloadable files.
            download_limit (str): Number of times downloadable files can be
                downloaded after purchase.
            download_expiry (str): Number of days until access to downloadable
                files expires.
            external_url (str): Product external URL. Only for external
                products.
            button_text (str): Product external button text. Only for external
                products.
            tax_status (str): Tax status.
            tax_class (str): Tax class.
            manage_stock (str): Stock management at product level.
            stock_quantity (str): Stock quantity.
            stock_status (str): Controls the stock status of the product.
            backorders (str): If managing stock, this controls if backorders
                are allowed.
            sold_individually (str): Allow one item to be bought in a single
                order.
            weight (str): Product weight (kg).
            dimensions (str): Product dimensions.
            shipping_class (str): Shipping class slug.
            reviews_allowed (str): Allow reviews.
            upsell_ids (str): List of up-sell products IDs.
            cross_sell_ids (str): List of cross-sell products IDs.
            parent_id (str): Product parent ID.
            purchase_note (str): Optional note to send the customer after
                purchase.
            categories (str): List of categories.
            tags (str): List of tags.
            images (str): List of images.
            attributes (str): List of attributes.
            default_attributes (str): Defaults variation attributes.
            menu_order (str): Menu order, used to custom sort products.
            meta_data (str): Meta data.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('date_created')
                         .value(date_created))
            .query_param(Parameter()
                         .key('date_created_gmt')
                         .value(date_created_gmt))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('featured')
                         .value(featured))
            .query_param(Parameter()
                         .key('catalog_visibility')
                         .value(catalog_visibility))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('short_description')
                         .value(short_description))
            .query_param(Parameter()
                         .key('sku')
                         .value(sku))
            .query_param(Parameter()
                         .key('regular_price')
                         .value(regular_price))
            .query_param(Parameter()
                         .key('sale_price')
                         .value(sale_price))
            .query_param(Parameter()
                         .key('date_on_sale_from')
                         .value(date_on_sale_from))
            .query_param(Parameter()
                         .key('date_on_sale_from_gmt')
                         .value(date_on_sale_from_gmt))
            .query_param(Parameter()
                         .key('date_on_sale_to')
                         .value(date_on_sale_to))
            .query_param(Parameter()
                         .key('date_on_sale_to_gmt')
                         .value(date_on_sale_to_gmt))
            .query_param(Parameter()
                         .key('virtual')
                         .value(virtual))
            .query_param(Parameter()
                         .key('downloadable')
                         .value(downloadable))
            .query_param(Parameter()
                         .key('downloads')
                         .value(downloads))
            .query_param(Parameter()
                         .key('download_limit')
                         .value(download_limit))
            .query_param(Parameter()
                         .key('download_expiry')
                         .value(download_expiry))
            .query_param(Parameter()
                         .key('external_url')
                         .value(external_url))
            .query_param(Parameter()
                         .key('button_text')
                         .value(button_text))
            .query_param(Parameter()
                         .key('tax_status')
                         .value(tax_status))
            .query_param(Parameter()
                         .key('tax_class')
                         .value(tax_class))
            .query_param(Parameter()
                         .key('manage_stock')
                         .value(manage_stock))
            .query_param(Parameter()
                         .key('stock_quantity')
                         .value(stock_quantity))
            .query_param(Parameter()
                         .key('stock_status')
                         .value(stock_status))
            .query_param(Parameter()
                         .key('backorders')
                         .value(backorders))
            .query_param(Parameter()
                         .key('sold_individually')
                         .value(sold_individually))
            .query_param(Parameter()
                         .key('weight')
                         .value(weight))
            .query_param(Parameter()
                         .key('dimensions')
                         .value(dimensions))
            .query_param(Parameter()
                         .key('shipping_class')
                         .value(shipping_class))
            .query_param(Parameter()
                         .key('reviews_allowed')
                         .value(reviews_allowed))
            .query_param(Parameter()
                         .key('upsell_ids')
                         .value(upsell_ids))
            .query_param(Parameter()
                         .key('cross_sell_ids')
                         .value(cross_sell_ids))
            .query_param(Parameter()
                         .key('parent_id')
                         .value(parent_id))
            .query_param(Parameter()
                         .key('purchase_note')
                         .value(purchase_note))
            .query_param(Parameter()
                         .key('categories')
                         .value(categories))
            .query_param(Parameter()
                         .key('tags')
                         .value(tags))
            .query_param(Parameter()
                         .key('images')
                         .value(images))
            .query_param(Parameter()
                         .key('attributes')
                         .value(attributes))
            .query_param(Parameter()
                         .key('default_attributes')
                         .value(default_attributes))
            .query_param(Parameter()
                         .key('menu_order')
                         .value(menu_order))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_id_1(self,
                             name,
                             slug,
                             date_created,
                             date_created_gmt,
                             mtype,
                             status,
                             featured,
                             catalog_visibility,
                             description,
                             short_description,
                             sku,
                             regular_price,
                             sale_price,
                             date_on_sale_from,
                             date_on_sale_from_gmt,
                             date_on_sale_to,
                             date_on_sale_to_gmt,
                             virtual,
                             downloadable,
                             downloads,
                             download_limit,
                             download_expiry,
                             external_url,
                             button_text,
                             tax_status,
                             tax_class,
                             manage_stock,
                             stock_quantity,
                             stock_status,
                             backorders,
                             sold_individually,
                             weight,
                             dimensions,
                             shipping_class,
                             reviews_allowed,
                             upsell_ids,
                             cross_sell_ids,
                             parent_id,
                             purchase_note,
                             categories,
                             tags,
                             images,
                             attributes,
                             default_attributes,
                             menu_order,
                             meta_data,
                             id):
        """Does a PATCH request to /products/{id}.

        Args:
            name (str): Product name.
            slug (str): Product slug.
            date_created (str): The date the product was created, in the
                site's timezone.
            date_created_gmt (str): The date the product was created, as GMT.
            mtype (str): Product type.
            status (str): Product status (post status).
            featured (str): Featured product.
            catalog_visibility (str): Catalog visibility.
            description (str): Product description.
            short_description (str): Product short description.
            sku (str): Unique identifier.
            regular_price (str): Product regular price.
            sale_price (str): Product sale price.
            date_on_sale_from (str): Start date of sale price, in the site's
                timezone.
            date_on_sale_from_gmt (str): Start date of sale price, as GMT.
            date_on_sale_to (str): End date of sale price, in the site's
                timezone.
            date_on_sale_to_gmt (str): End date of sale price, in the site's
                timezone.
            virtual (str): If the product is virtual.
            downloadable (str): If the product is downloadable.
            downloads (str): List of downloadable files.
            download_limit (str): Number of times downloadable files can be
                downloaded after purchase.
            download_expiry (str): Number of days until access to downloadable
                files expires.
            external_url (str): Product external URL. Only for external
                products.
            button_text (str): Product external button text. Only for external
                products.
            tax_status (str): Tax status.
            tax_class (str): Tax class.
            manage_stock (str): Stock management at product level.
            stock_quantity (str): Stock quantity.
            stock_status (str): Controls the stock status of the product.
            backorders (str): If managing stock, this controls if backorders
                are allowed.
            sold_individually (str): Allow one item to be bought in a single
                order.
            weight (str): Product weight (kg).
            dimensions (str): Product dimensions.
            shipping_class (str): Shipping class slug.
            reviews_allowed (str): Allow reviews.
            upsell_ids (str): List of up-sell products IDs.
            cross_sell_ids (str): List of cross-sell products IDs.
            parent_id (str): Product parent ID.
            purchase_note (str): Optional note to send the customer after
                purchase.
            categories (str): List of categories.
            tags (str): List of tags.
            images (str): List of images.
            attributes (str): List of attributes.
            default_attributes (str): Defaults variation attributes.
            menu_order (str): Menu order, used to custom sort products.
            meta_data (str): Meta data.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .query_param(Parameter()
                         .key('date_created')
                         .value(date_created))
            .query_param(Parameter()
                         .key('date_created_gmt')
                         .value(date_created_gmt))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('featured')
                         .value(featured))
            .query_param(Parameter()
                         .key('catalog_visibility')
                         .value(catalog_visibility))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('short_description')
                         .value(short_description))
            .query_param(Parameter()
                         .key('sku')
                         .value(sku))
            .query_param(Parameter()
                         .key('regular_price')
                         .value(regular_price))
            .query_param(Parameter()
                         .key('sale_price')
                         .value(sale_price))
            .query_param(Parameter()
                         .key('date_on_sale_from')
                         .value(date_on_sale_from))
            .query_param(Parameter()
                         .key('date_on_sale_from_gmt')
                         .value(date_on_sale_from_gmt))
            .query_param(Parameter()
                         .key('date_on_sale_to')
                         .value(date_on_sale_to))
            .query_param(Parameter()
                         .key('date_on_sale_to_gmt')
                         .value(date_on_sale_to_gmt))
            .query_param(Parameter()
                         .key('virtual')
                         .value(virtual))
            .query_param(Parameter()
                         .key('downloadable')
                         .value(downloadable))
            .query_param(Parameter()
                         .key('downloads')
                         .value(downloads))
            .query_param(Parameter()
                         .key('download_limit')
                         .value(download_limit))
            .query_param(Parameter()
                         .key('download_expiry')
                         .value(download_expiry))
            .query_param(Parameter()
                         .key('external_url')
                         .value(external_url))
            .query_param(Parameter()
                         .key('button_text')
                         .value(button_text))
            .query_param(Parameter()
                         .key('tax_status')
                         .value(tax_status))
            .query_param(Parameter()
                         .key('tax_class')
                         .value(tax_class))
            .query_param(Parameter()
                         .key('manage_stock')
                         .value(manage_stock))
            .query_param(Parameter()
                         .key('stock_quantity')
                         .value(stock_quantity))
            .query_param(Parameter()
                         .key('stock_status')
                         .value(stock_status))
            .query_param(Parameter()
                         .key('backorders')
                         .value(backorders))
            .query_param(Parameter()
                         .key('sold_individually')
                         .value(sold_individually))
            .query_param(Parameter()
                         .key('weight')
                         .value(weight))
            .query_param(Parameter()
                         .key('dimensions')
                         .value(dimensions))
            .query_param(Parameter()
                         .key('shipping_class')
                         .value(shipping_class))
            .query_param(Parameter()
                         .key('reviews_allowed')
                         .value(reviews_allowed))
            .query_param(Parameter()
                         .key('upsell_ids')
                         .value(upsell_ids))
            .query_param(Parameter()
                         .key('cross_sell_ids')
                         .value(cross_sell_ids))
            .query_param(Parameter()
                         .key('parent_id')
                         .value(parent_id))
            .query_param(Parameter()
                         .key('purchase_note')
                         .value(purchase_note))
            .query_param(Parameter()
                         .key('categories')
                         .value(categories))
            .query_param(Parameter()
                         .key('tags')
                         .value(tags))
            .query_param(Parameter()
                         .key('images')
                         .value(images))
            .query_param(Parameter()
                         .key('attributes')
                         .value(attributes))
            .query_param(Parameter()
                         .key('default_attributes')
                         .value(default_attributes))
            .query_param(Parameter()
                         .key('menu_order')
                         .value(menu_order))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_id_4(self,
                             force,
                             id):
        """Does a DELETE request to /products/{id}.

        Args:
            force (str): Whether to bypass trash and force deletion.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_product_id_variations_id(self,
                                                 context,
                                                 product_id,
                                                 id):
        """Does a GET request to /products/{product_id}/variations/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            product_id (str): (Required) Unique identifier for the variable
                product.
            id (str): (Required) Unique identifier for the variation.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{product_id}/variations/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('product_id')
                            .value(product_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_product_id_variations_id_2(self,
                                                   product_id,
                                                   id,
                                                   description,
                                                   sku,
                                                   regular_price,
                                                   sale_price,
                                                   date_on_sale_from,
                                                   date_on_sale_from_gmt,
                                                   date_on_sale_to,
                                                   date_on_sale_to_gmt,
                                                   status,
                                                   virtual,
                                                   downloadable,
                                                   downloads,
                                                   download_limit,
                                                   download_expiry,
                                                   tax_status,
                                                   tax_class,
                                                   manage_stock,
                                                   stock_quantity,
                                                   stock_status,
                                                   backorders,
                                                   weight,
                                                   dimensions,
                                                   shipping_class,
                                                   image,
                                                   attributes,
                                                   menu_order,
                                                   meta_data):
        """Does a POST request to /products/{product_id}/variations/{id}.

        Args:
            product_id (str): (Required) Unique identifier for the variable
                product.
            id (str): (Required) Unique identifier for the variation.
            description (str): Variation description.
            sku (str): Unique identifier.
            regular_price (str): Variation regular price.
            sale_price (str): Variation sale price.
            date_on_sale_from (str): Start date of sale price, in the site's
                timezone.
            date_on_sale_from_gmt (str): Start date of sale price, as GMT.
            date_on_sale_to (str): End date of sale price, in the site's
                timezone.
            date_on_sale_to_gmt (str): End date of sale price, in the site's
                timezone.
            status (List[str]): Variation status.
            virtual (str): If the variation is virtual.
            downloadable (str): If the variation is downloadable.
            downloads (str): List of downloadable files.
            download_limit (str): Number of times downloadable files can be
                downloaded after purchase.
            download_expiry (str): Number of days until access to downloadable
                files expires.
            tax_status (List[str]): Tax status.
            tax_class (str): Tax class.
            manage_stock (str): Stock management at variation level.
            stock_quantity (str): Stock quantity.
            stock_status (List[str]): Controls the stock status of the product.
            backorders (List[str]): If managing stock, this controls if
                backorders are allowed.
            weight (str): Variation weight (kg).
            dimensions (str): Variation dimensions.
            shipping_class (str): Shipping class slug.
            image (str): Variation image data.
            attributes (str): List of attributes.
            menu_order (str): Menu order, used to custom sort products.
            meta_data (str): Meta data.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{product_id}/variations/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('product_id')
                            .value(product_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('sku')
                        .value(sku))
            .form_param(Parameter()
                        .key('regular_price')
                        .value(regular_price))
            .form_param(Parameter()
                        .key('sale_price')
                        .value(sale_price))
            .form_param(Parameter()
                        .key('date_on_sale_from')
                        .value(date_on_sale_from))
            .form_param(Parameter()
                        .key('date_on_sale_from_gmt')
                        .value(date_on_sale_from_gmt))
            .form_param(Parameter()
                        .key('date_on_sale_to')
                        .value(date_on_sale_to))
            .form_param(Parameter()
                        .key('date_on_sale_to_gmt')
                        .value(date_on_sale_to_gmt))
            .form_param(Parameter()
                        .key('status')
                        .value(status))
            .form_param(Parameter()
                        .key('virtual')
                        .value(virtual))
            .form_param(Parameter()
                        .key('downloadable')
                        .value(downloadable))
            .form_param(Parameter()
                        .key('downloads')
                        .value(downloads))
            .form_param(Parameter()
                        .key('download_limit')
                        .value(download_limit))
            .form_param(Parameter()
                        .key('download_expiry')
                        .value(download_expiry))
            .form_param(Parameter()
                        .key('tax_status')
                        .value(tax_status))
            .form_param(Parameter()
                        .key('tax_class')
                        .value(tax_class))
            .form_param(Parameter()
                        .key('manage_stock')
                        .value(manage_stock))
            .form_param(Parameter()
                        .key('stock_quantity')
                        .value(stock_quantity))
            .form_param(Parameter()
                        .key('stock_status')
                        .value(stock_status))
            .form_param(Parameter()
                        .key('backorders')
                        .value(backorders))
            .form_param(Parameter()
                        .key('weight')
                        .value(weight))
            .form_param(Parameter()
                        .key('dimensions')
                        .value(dimensions))
            .form_param(Parameter()
                        .key('shipping_class')
                        .value(shipping_class))
            .form_param(Parameter()
                        .key('image')
                        .value(image))
            .form_param(Parameter()
                        .key('attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('menu_order')
                        .value(menu_order))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_product_id_variations_id_3(self,
                                                   description,
                                                   sku,
                                                   regular_price,
                                                   sale_price,
                                                   date_on_sale_from,
                                                   date_on_sale_from_gmt,
                                                   date_on_sale_to,
                                                   date_on_sale_to_gmt,
                                                   status,
                                                   virtual,
                                                   downloadable,
                                                   downloads,
                                                   download_limit,
                                                   download_expiry,
                                                   tax_status,
                                                   tax_class,
                                                   manage_stock,
                                                   stock_quantity,
                                                   stock_status,
                                                   backorders,
                                                   weight,
                                                   dimensions,
                                                   shipping_class,
                                                   image,
                                                   attributes,
                                                   menu_order,
                                                   meta_data,
                                                   product_id,
                                                   id):
        """Does a PUT request to /products/{product_id}/variations/{id}.

        Args:
            description (str): Variation description.
            sku (str): Unique identifier.
            regular_price (str): Variation regular price.
            sale_price (str): Variation sale price.
            date_on_sale_from (str): Start date of sale price, in the site's
                timezone.
            date_on_sale_from_gmt (str): Start date of sale price, as GMT.
            date_on_sale_to (str): End date of sale price, in the site's
                timezone.
            date_on_sale_to_gmt (str): End date of sale price, in the site's
                timezone.
            status (str): Variation status.
            virtual (str): If the variation is virtual.
            downloadable (str): If the variation is downloadable.
            downloads (str): List of downloadable files.
            download_limit (str): Number of times downloadable files can be
                downloaded after purchase.
            download_expiry (str): Number of days until access to downloadable
                files expires.
            tax_status (str): Tax status.
            tax_class (str): Tax class.
            manage_stock (str): Stock management at variation level.
            stock_quantity (str): Stock quantity.
            stock_status (str): Controls the stock status of the product.
            backorders (str): If managing stock, this controls if backorders
                are allowed.
            weight (str): Variation weight (kg).
            dimensions (str): Variation dimensions.
            shipping_class (str): Shipping class slug.
            image (str): Variation image data.
            attributes (str): List of attributes.
            menu_order (str): Menu order, used to custom sort products.
            meta_data (str): Meta data.
            product_id (str): (Required) Unique identifier for the variable
                product.
            id (str): (Required) Unique identifier for the variation.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{product_id}/variations/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('sku')
                         .value(sku))
            .query_param(Parameter()
                         .key('regular_price')
                         .value(regular_price))
            .query_param(Parameter()
                         .key('sale_price')
                         .value(sale_price))
            .query_param(Parameter()
                         .key('date_on_sale_from')
                         .value(date_on_sale_from))
            .query_param(Parameter()
                         .key('date_on_sale_from_gmt')
                         .value(date_on_sale_from_gmt))
            .query_param(Parameter()
                         .key('date_on_sale_to')
                         .value(date_on_sale_to))
            .query_param(Parameter()
                         .key('date_on_sale_to_gmt')
                         .value(date_on_sale_to_gmt))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('virtual')
                         .value(virtual))
            .query_param(Parameter()
                         .key('downloadable')
                         .value(downloadable))
            .query_param(Parameter()
                         .key('downloads')
                         .value(downloads))
            .query_param(Parameter()
                         .key('download_limit')
                         .value(download_limit))
            .query_param(Parameter()
                         .key('download_expiry')
                         .value(download_expiry))
            .query_param(Parameter()
                         .key('tax_status')
                         .value(tax_status))
            .query_param(Parameter()
                         .key('tax_class')
                         .value(tax_class))
            .query_param(Parameter()
                         .key('manage_stock')
                         .value(manage_stock))
            .query_param(Parameter()
                         .key('stock_quantity')
                         .value(stock_quantity))
            .query_param(Parameter()
                         .key('stock_status')
                         .value(stock_status))
            .query_param(Parameter()
                         .key('backorders')
                         .value(backorders))
            .query_param(Parameter()
                         .key('weight')
                         .value(weight))
            .query_param(Parameter()
                         .key('dimensions')
                         .value(dimensions))
            .query_param(Parameter()
                         .key('shipping_class')
                         .value(shipping_class))
            .query_param(Parameter()
                         .key('image')
                         .value(image))
            .query_param(Parameter()
                         .key('attributes')
                         .value(attributes))
            .query_param(Parameter()
                         .key('menu_order')
                         .value(menu_order))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .template_param(Parameter()
                            .key('product_id')
                            .value(product_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_product_id_variations_id_1(self,
                                                   description,
                                                   sku,
                                                   regular_price,
                                                   sale_price,
                                                   date_on_sale_from,
                                                   date_on_sale_from_gmt,
                                                   date_on_sale_to,
                                                   date_on_sale_to_gmt,
                                                   status,
                                                   virtual,
                                                   downloadable,
                                                   downloads,
                                                   download_limit,
                                                   download_expiry,
                                                   tax_status,
                                                   tax_class,
                                                   manage_stock,
                                                   stock_quantity,
                                                   stock_status,
                                                   backorders,
                                                   weight,
                                                   dimensions,
                                                   shipping_class,
                                                   image,
                                                   attributes,
                                                   menu_order,
                                                   meta_data,
                                                   product_id,
                                                   id):
        """Does a PATCH request to /products/{product_id}/variations/{id}.

        Args:
            description (str): Variation description.
            sku (str): Unique identifier.
            regular_price (str): Variation regular price.
            sale_price (str): Variation sale price.
            date_on_sale_from (str): Start date of sale price, in the site's
                timezone.
            date_on_sale_from_gmt (str): Start date of sale price, as GMT.
            date_on_sale_to (str): End date of sale price, in the site's
                timezone.
            date_on_sale_to_gmt (str): End date of sale price, in the site's
                timezone.
            status (str): Variation status.
            virtual (str): If the variation is virtual.
            downloadable (str): If the variation is downloadable.
            downloads (str): List of downloadable files.
            download_limit (str): Number of times downloadable files can be
                downloaded after purchase.
            download_expiry (str): Number of days until access to downloadable
                files expires.
            tax_status (str): Tax status.
            tax_class (str): Tax class.
            manage_stock (str): Stock management at variation level.
            stock_quantity (str): Stock quantity.
            stock_status (str): Controls the stock status of the product.
            backorders (str): If managing stock, this controls if backorders
                are allowed.
            weight (str): Variation weight (kg).
            dimensions (str): Variation dimensions.
            shipping_class (str): Shipping class slug.
            image (str): Variation image data.
            attributes (str): List of attributes.
            menu_order (str): Menu order, used to custom sort products.
            meta_data (str): Meta data.
            product_id (str): (Required) Unique identifier for the variable
                product.
            id (str): (Required) Unique identifier for the variation.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{product_id}/variations/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('sku')
                         .value(sku))
            .query_param(Parameter()
                         .key('regular_price')
                         .value(regular_price))
            .query_param(Parameter()
                         .key('sale_price')
                         .value(sale_price))
            .query_param(Parameter()
                         .key('date_on_sale_from')
                         .value(date_on_sale_from))
            .query_param(Parameter()
                         .key('date_on_sale_from_gmt')
                         .value(date_on_sale_from_gmt))
            .query_param(Parameter()
                         .key('date_on_sale_to')
                         .value(date_on_sale_to))
            .query_param(Parameter()
                         .key('date_on_sale_to_gmt')
                         .value(date_on_sale_to_gmt))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('virtual')
                         .value(virtual))
            .query_param(Parameter()
                         .key('downloadable')
                         .value(downloadable))
            .query_param(Parameter()
                         .key('downloads')
                         .value(downloads))
            .query_param(Parameter()
                         .key('download_limit')
                         .value(download_limit))
            .query_param(Parameter()
                         .key('download_expiry')
                         .value(download_expiry))
            .query_param(Parameter()
                         .key('tax_status')
                         .value(tax_status))
            .query_param(Parameter()
                         .key('tax_class')
                         .value(tax_class))
            .query_param(Parameter()
                         .key('manage_stock')
                         .value(manage_stock))
            .query_param(Parameter()
                         .key('stock_quantity')
                         .value(stock_quantity))
            .query_param(Parameter()
                         .key('stock_status')
                         .value(stock_status))
            .query_param(Parameter()
                         .key('backorders')
                         .value(backorders))
            .query_param(Parameter()
                         .key('weight')
                         .value(weight))
            .query_param(Parameter()
                         .key('dimensions')
                         .value(dimensions))
            .query_param(Parameter()
                         .key('shipping_class')
                         .value(shipping_class))
            .query_param(Parameter()
                         .key('image')
                         .value(image))
            .query_param(Parameter()
                         .key('attributes')
                         .value(attributes))
            .query_param(Parameter()
                         .key('menu_order')
                         .value(menu_order))
            .query_param(Parameter()
                         .key('meta_data')
                         .value(meta_data))
            .template_param(Parameter()
                            .key('product_id')
                            .value(product_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_product_id_variations_id_4(self,
                                                   force,
                                                   product_id,
                                                   id):
        """Does a DELETE request to /products/{product_id}/variations/{id}.

        Args:
            force (str): Whether to bypass trash and force deletion.
            product_id (str): (Required) Unique identifier for the variable
                product.
            id (str): (Required) Unique identifier for the variation.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/{product_id}/variations/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('product_id')
                            .value(product_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_settings_group_id_id(self,
                                    group,
                                    id,
                                    group_id):
        """Does a GET request to /settings/{group_id}/{id}.

        Args:
            group (str): Settings group ID.
            id (str): (Required) Unique identifier for the resource.
            group_id (str): (Required)

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/settings/{group_id}/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('group')
                         .value(group))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('group_id')
                            .value(group_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_settings_group_id_id_2(self,
                                      id,
                                      group_id,
                                      group,
                                      value):
        """Does a POST request to /settings/{group_id}/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            group_id (str): (Required)
            group (str): Settings group ID.
            value (str): Setting value.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/settings/{group_id}/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('group_id')
                            .value(group_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('group')
                        .value(group))
            .form_param(Parameter()
                        .key('value')
                        .value(value))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_settings_group_id_id_3(self,
                                      group,
                                      value,
                                      id,
                                      group_id):
        """Does a PUT request to /settings/{group_id}/{id}.

        Args:
            group (str): Settings group ID.
            value (str): Setting value.
            id (str): (Required) Unique identifier for the resource.
            group_id (str): (Required)

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/settings/{group_id}/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('group')
                         .value(group))
            .query_param(Parameter()
                         .key('value')
                         .value(value))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('group_id')
                            .value(group_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_settings_group_id_id_1(self,
                                      group,
                                      value,
                                      id,
                                      group_id):
        """Does a PATCH request to /settings/{group_id}/{id}.

        Args:
            group (str): Settings group ID.
            value (str): Setting value.
            id (str): (Required) Unique identifier for the resource.
            group_id (str): (Required)

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/settings/{group_id}/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('group')
                         .value(group))
            .query_param(Parameter()
                         .key('value')
                         .value(value))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('group_id')
                            .value(group_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_shipping_zones_id(self,
                                 id):
        """Does a GET request to /shipping/zones/{id}.

        Args:
            id (str): (Required) Unique ID for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shipping/zones/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_shipping_zones_id_2(self,
                                   id,
                                   name,
                                   order):
        """Does a POST request to /shipping/zones/{id}.

        Args:
            id (str): (Required) Unique ID for the resource.
            name (str): Shipping zone name.
            order (str): Shipping zone order.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shipping/zones/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('order')
                        .value(order))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_shipping_zones_id_3(self,
                                   name,
                                   order,
                                   id):
        """Does a PUT request to /shipping/zones/{id}.

        Args:
            name (str): Shipping zone name.
            order (str): Shipping zone order.
            id (str): (Required) Unique ID for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shipping/zones/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_shipping_zones_id_1(self,
                                   name,
                                   order,
                                   id):
        """Does a PATCH request to /shipping/zones/{id}.

        Args:
            name (str): Shipping zone name.
            order (str): Shipping zone order.
            id (str): (Required) Unique ID for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shipping/zones/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_shipping_zones_id_4(self,
                                   force,
                                   id):
        """Does a DELETE request to /shipping/zones/{id}.

        Args:
            force (str): Whether to bypass trash and force deletion.
            id (str): (Required) Unique ID for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shipping/zones/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_taxes_id(self,
                        context,
                        id):
        """Does a GET request to /taxes/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/taxes/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_taxes_id_2(self,
                          id,
                          country,
                          state,
                          postcode,
                          city,
                          rate,
                          name,
                          priority,
                          compound,
                          shipping,
                          order,
                          mclass):
        """Does a POST request to /taxes/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            country (str): Country ISO 3166 code.
            state (str): State code.
            postcode (str): Postcode / ZIP.
            city (str): City name.
            rate (str): Tax rate.
            name (str): Tax rate name.
            priority (str): Tax priority.
            compound (str): Whether or not this is a compound rate.
            shipping (str): Whether or not this tax rate also gets applied to
                shipping.
            order (str): Indicates the order that will appear in queries.
            mclass (List[str]): Tax class.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/taxes/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('country')
                        .value(country))
            .form_param(Parameter()
                        .key('state')
                        .value(state))
            .form_param(Parameter()
                        .key('postcode')
                        .value(postcode))
            .form_param(Parameter()
                        .key('city')
                        .value(city))
            .form_param(Parameter()
                        .key('rate')
                        .value(rate))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('priority')
                        .value(priority))
            .form_param(Parameter()
                        .key('compound')
                        .value(compound))
            .form_param(Parameter()
                        .key('shipping')
                        .value(shipping))
            .form_param(Parameter()
                        .key('order')
                        .value(order))
            .form_param(Parameter()
                        .key('class')
                        .value(mclass))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_taxes_id_3(self,
                          country,
                          state,
                          postcode,
                          city,
                          rate,
                          name,
                          priority,
                          compound,
                          shipping,
                          order,
                          mclass,
                          id):
        """Does a PUT request to /taxes/{id}.

        Args:
            country (str): Country ISO 3166 code.
            state (str): State code.
            postcode (str): Postcode / ZIP.
            city (str): City name.
            rate (str): Tax rate.
            name (str): Tax rate name.
            priority (str): Tax priority.
            compound (str): Whether or not this is a compound rate.
            shipping (str): Whether or not this tax rate also gets applied to
                shipping.
            order (str): Indicates the order that will appear in queries.
            mclass (str): Tax class.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/taxes/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('country')
                         .value(country))
            .query_param(Parameter()
                         .key('state')
                         .value(state))
            .query_param(Parameter()
                         .key('postcode')
                         .value(postcode))
            .query_param(Parameter()
                         .key('city')
                         .value(city))
            .query_param(Parameter()
                         .key('rate')
                         .value(rate))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('priority')
                         .value(priority))
            .query_param(Parameter()
                         .key('compound')
                         .value(compound))
            .query_param(Parameter()
                         .key('shipping')
                         .value(shipping))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('class')
                         .value(mclass))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_taxes_id_1(self,
                          country,
                          state,
                          postcode,
                          city,
                          rate,
                          name,
                          priority,
                          compound,
                          shipping,
                          order,
                          mclass,
                          id):
        """Does a PATCH request to /taxes/{id}.

        Args:
            country (str): Country ISO 3166 code.
            state (str): State code.
            postcode (str): Postcode / ZIP.
            city (str): City name.
            rate (str): Tax rate.
            name (str): Tax rate name.
            priority (str): Tax priority.
            compound (str): Whether or not this is a compound rate.
            shipping (str): Whether or not this tax rate also gets applied to
                shipping.
            order (str): Indicates the order that will appear in queries.
            mclass (str): Tax class.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/taxes/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('country')
                         .value(country))
            .query_param(Parameter()
                         .key('state')
                         .value(state))
            .query_param(Parameter()
                         .key('postcode')
                         .value(postcode))
            .query_param(Parameter()
                         .key('city')
                         .value(city))
            .query_param(Parameter()
                         .key('rate')
                         .value(rate))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('priority')
                         .value(priority))
            .query_param(Parameter()
                         .key('compound')
                         .value(compound))
            .query_param(Parameter()
                         .key('shipping')
                         .value(shipping))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('class')
                         .value(mclass))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_taxes_id_4(self,
                          force,
                          id):
        """Does a DELETE request to /taxes/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/taxes/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_webhooks_id(self,
                           context,
                           id):
        """Does a GET request to /webhooks/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/webhooks/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_webhooks_id_2(self,
                             id,
                             name,
                             status,
                             topic,
                             secret):
        """Does a POST request to /webhooks/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            name (str): A friendly name for the webhook.
            status (List[str]): Webhook status.
            topic (str): Webhook topic.
            secret (str): Secret key used to generate a hash of the delivered
                webhook and provided in the request headers. This will default
                to a MD5 hash from the current user's ID|username if not
                provided.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/webhooks/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('status')
                        .value(status))
            .form_param(Parameter()
                        .key('topic')
                        .value(topic))
            .form_param(Parameter()
                        .key('secret')
                        .value(secret))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_webhooks_id_3(self,
                             name,
                             status,
                             topic,
                             secret,
                             id):
        """Does a PUT request to /webhooks/{id}.

        Args:
            name (str): A friendly name for the webhook.
            status (str): Webhook status.
            topic (str): Webhook topic.
            secret (str): Secret key used to generate a hash of the delivered
                webhook and provided in the request headers. This will default
                to a MD5 hash from the current user's ID|username if not
                provided.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/webhooks/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('topic')
                         .value(topic))
            .query_param(Parameter()
                         .key('secret')
                         .value(secret))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_webhooks_id_1(self,
                             name,
                             status,
                             topic,
                             secret,
                             id):
        """Does a PATCH request to /webhooks/{id}.

        Args:
            name (str): A friendly name for the webhook.
            status (str): Webhook status.
            topic (str): Webhook topic.
            secret (str): Secret key used to generate a hash of the delivered
                webhook and provided in the request headers. This will default
                to a MD5 hash from the current user's ID|username if not
                provided.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/webhooks/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('topic')
                         .value(topic))
            .query_param(Parameter()
                         .key('secret')
                         .value(secret))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_webhooks_id_4(self,
                             force,
                             id):
        """Does a DELETE request to /webhooks/{id}.

        Args:
            force (str): Required to be true, as resource does not support
                trashing.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/webhooks/{id}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('force')
                         .value(force))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_system_status_tools_id(self,
                                      id):
        """Does a GET request to /system_status/tools/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/system_status/tools/{id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_system_status_tools_id_2(self,
                                        id,
                                        name,
                                        action,
                                        description,
                                        success,
                                        message):
        """Does a POST request to /system_status/tools/{id}.

        Args:
            id (str): (Required) A unique identifier for the tool.
            name (str): Tool name.
            action (str): What running the tool will do.
            description (str): Tool description.
            success (str): Did the tool run successfully?
            message (str): Tool return message.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/system_status/tools/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('action')
                        .value(action))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('success')
                        .value(success))
            .form_param(Parameter()
                        .key('message')
                        .value(message))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_system_status_tools_id_3(self,
                                        name,
                                        action,
                                        description,
                                        success,
                                        message,
                                        id):
        """Does a PUT request to /system_status/tools/{id}.

        Args:
            name (str): Tool name.
            action (str): What running the tool will do.
            description (str): Tool description.
            success (str): Did the tool run successfully?
            message (str): Tool return message.
            id (str): (Required) A unique identifier for the tool.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/system_status/tools/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('action')
                         .value(action))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('success')
                         .value(success))
            .query_param(Parameter()
                         .key('message')
                         .value(message))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_system_status_tools_id_1(self,
                                        name,
                                        action,
                                        description,
                                        success,
                                        message,
                                        id):
        """Does a PATCH request to /system_status/tools/{id}.

        Args:
            name (str): Tool name.
            action (str): What running the tool will do.
            description (str): Tool description.
            success (str): Did the tool run successfully?
            message (str): Tool return message.
            id (str): (Required) A unique identifier for the tool.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/system_status/tools/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .query_param(Parameter()
                         .key('action')
                         .value(action))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('success')
                         .value(success))
            .query_param(Parameter()
                         .key('message')
                         .value(message))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_payment_gateways_id(self,
                                   context,
                                   id):
        """Does a GET request to /payment_gateways/{id}.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/payment_gateways/{id}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_payment_gateways_id_2(self,
                                     id,
                                     title,
                                     description,
                                     order,
                                     enabled,
                                     settings):
        """Does a POST request to /payment_gateways/{id}.

        Args:
            id (str): (Required) Unique identifier for the resource.
            title (str): Payment gateway title on checkout.
            description (str): Payment gateway description on checkout.
            order (str): Payment gateway sort order.
            enabled (str): Payment gateway enabled status.
            settings (str): Payment gateway settings.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/payment_gateways/{id}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('title')
                        .value(title))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('order')
                        .value(order))
            .form_param(Parameter()
                        .key('enabled')
                        .value(enabled))
            .form_param(Parameter()
                        .key('settings')
                        .value(settings))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_payment_gateways_id_3(self,
                                     title,
                                     description,
                                     order,
                                     enabled,
                                     settings,
                                     id):
        """Does a PUT request to /payment_gateways/{id}.

        Args:
            title (str): Payment gateway title on checkout.
            description (str): Payment gateway description on checkout.
            order (str): Payment gateway sort order.
            enabled (str): Payment gateway enabled status.
            settings (str): Payment gateway settings.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/payment_gateways/{id}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('title')
                         .value(title))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('enabled')
                         .value(enabled))
            .query_param(Parameter()
                         .key('settings')
                         .value(settings))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_payment_gateways_id_1(self,
                                     title,
                                     description,
                                     order,
                                     enabled,
                                     settings,
                                     id):
        """Does a PATCH request to /payment_gateways/{id}.

        Args:
            title (str): Payment gateway title on checkout.
            description (str): Payment gateway description on checkout.
            order (str): Payment gateway sort order.
            enabled (str): Payment gateway enabled status.
            settings (str): Payment gateway settings.
            id (str): (Required) Unique identifier for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/payment_gateways/{id}')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('title')
                         .value(title))
            .query_param(Parameter()
                         .key('description')
                         .value(description))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('enabled')
                         .value(enabled))
            .query_param(Parameter()
                         .key('settings')
                         .value(settings))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()
