# -*- coding: utf-8 -*-

"""
woocommercerestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from woocommercerestapi.api_helper import APIHelper
from woocommercerestapi.configuration import Server
from woocommercerestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from woocommercerestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from woocommercerestapi.exceptions.api_exception import APIException


class CouponsController(BaseController):

    """A Controller to access Endpoints in the woocommercerestapi API."""
    def __init__(self, config):
        super(CouponsController, self).__init__(config)

    def wc_v_3_coupons(self,
                       context,
                       page,
                       per_page,
                       search,
                       after,
                       before,
                       exclude,
                       include,
                       offset,
                       order,
                       orderby,
                       code):
        """Does a GET request to /coupons.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            page (str): Current page of the collection.
            per_page (str): Maximum number of items to be returned in result
                set.
            search (str): Limit results to those matching a string.
            after (str): Limit response to resources published after a given
                ISO8601 compliant date.
            before (str): Limit response to resources published before a given
                ISO8601 compliant date.
            exclude (str): Ensure result set excludes specific IDs.
            include (str): Limit result set to specific ids.
            offset (str): Offset the result set by a specific number of items.
            order (str): Order sort attribute ascending or descending.
            orderby (str): Sort collection by object attribute.
            code (str): Limit result set to resources with a specific code.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/coupons')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('after')
                         .value(after))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('exclude')
                         .value(exclude))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('orderby')
                         .value(orderby))
            .query_param(Parameter()
                         .key('code')
                         .value(code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_coupons_1(self,
                         code,
                         amount,
                         discount_type,
                         description,
                         date_expires,
                         date_expires_gmt,
                         individual_use,
                         product_ids,
                         excluded_product_ids,
                         usage_limit,
                         usage_limit_per_user,
                         limit_usage_to_x_items,
                         free_shipping,
                         product_categories,
                         excluded_product_categories,
                         exclude_sale_items,
                         minimum_amount,
                         maximum_amount,
                         email_restrictions,
                         meta_data):
        """Does a POST request to /coupons.

        Args:
            code (str): Coupon code.
            amount (str): The amount of discount. Should always be numeric,
                even if setting a percentage.
            discount_type (List[str]): Determines the type of discount that
                will be applied.
            description (str): Coupon description.
            date_expires (str): The date the coupon expires, in the site's
                timezone.
            date_expires_gmt (str): The date the coupon expires, as GMT.
            individual_use (str): If true, the coupon can only be used
                individually. Other applied coupons will be removed from the
                cart.
            product_ids (str): List of product IDs the coupon can be used on.
            excluded_product_ids (str): List of product IDs the coupon cannot
                be used on.
            usage_limit (str): How many times the coupon can be used in total.
            usage_limit_per_user (str): How many times the coupon can be used
                per customer.
            limit_usage_to_x_items (str): Max number of items in the cart the
                coupon can be applied to.
            free_shipping (str): If true and if the free shipping method
                requires a coupon, this coupon will enable free shipping.
            product_categories (str): List of category IDs the coupon applies
                to.
            excluded_product_categories (str): List of category IDs the coupon
                does not apply to.
            exclude_sale_items (str): If true, this coupon will not be applied
                to items that have sale prices.
            minimum_amount (str): Minimum order amount that needs to be in the
                cart before coupon applies.
            maximum_amount (str): Maximum order amount allowed when using the
                coupon.
            email_restrictions (str): List of email addresses that can use
                this coupon.
            meta_data (str): Meta data.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/coupons')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('code')
                        .value(code))
            .form_param(Parameter()
                        .key('amount')
                        .value(amount))
            .form_param(Parameter()
                        .key('discount_type')
                        .value(discount_type))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('date_expires')
                        .value(date_expires))
            .form_param(Parameter()
                        .key('date_expires_gmt')
                        .value(date_expires_gmt))
            .form_param(Parameter()
                        .key('individual_use')
                        .value(individual_use))
            .form_param(Parameter()
                        .key('product_ids')
                        .value(product_ids))
            .form_param(Parameter()
                        .key('excluded_product_ids')
                        .value(excluded_product_ids))
            .form_param(Parameter()
                        .key('usage_limit')
                        .value(usage_limit))
            .form_param(Parameter()
                        .key('usage_limit_per_user')
                        .value(usage_limit_per_user))
            .form_param(Parameter()
                        .key('limit_usage_to_x_items')
                        .value(limit_usage_to_x_items))
            .form_param(Parameter()
                        .key('free_shipping')
                        .value(free_shipping))
            .form_param(Parameter()
                        .key('product_categories')
                        .value(product_categories))
            .form_param(Parameter()
                        .key('excluded_product_categories')
                        .value(excluded_product_categories))
            .form_param(Parameter()
                        .key('exclude_sale_items')
                        .value(exclude_sale_items))
            .form_param(Parameter()
                        .key('minimum_amount')
                        .value(minimum_amount))
            .form_param(Parameter()
                        .key('maximum_amount')
                        .value(maximum_amount))
            .form_param(Parameter()
                        .key('email_restrictions')
                        .value(email_restrictions))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()
