# -*- coding: utf-8 -*-

"""
woocommercerestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from woocommercerestapi.api_helper import APIHelper
from woocommercerestapi.configuration import Server
from woocommercerestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from woocommercerestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from woocommercerestapi.exceptions.api_exception import APIException


class LocationsController(BaseController):

    """A Controller to access Endpoints in the woocommercerestapi API."""
    def __init__(self, config):
        super(LocationsController, self).__init__(config)

    def wc_v_3_shipping_zones_id_locations(self,
                                           id):
        """Does a GET request to /shipping/zones/{id}/locations.

        Args:
            id (str): (Required) Unique ID for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shipping/zones/{id}/locations')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_shipping_zones_id_locations_2(self,
                                             id,
                                             code,
                                             mtype):
        """Does a POST request to /shipping/zones/{id}/locations.

        Args:
            id (str): (Required) Unique ID for the resource.
            code (str): Shipping zone location code.
            mtype (List[str]): Shipping zone location type.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shipping/zones/{id}/locations')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('code')
                        .value(code))
            .form_param(Parameter()
                        .key('type')
                        .value(mtype))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_shipping_zones_id_locations_3(self,
                                             code,
                                             mtype,
                                             id):
        """Does a PUT request to /shipping/zones/{id}/locations.

        Args:
            code (str): Shipping zone location code.
            mtype (str): Shipping zone location type.
            id (str): (Required) Unique ID for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shipping/zones/{id}/locations')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('code')
                         .value(code))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_shipping_zones_id_locations_1(self,
                                             code,
                                             mtype,
                                             id):
        """Does a PATCH request to /shipping/zones/{id}/locations.

        Args:
            code (str): Shipping zone location code.
            mtype (str): Shipping zone location type.
            id (str): (Required) Unique ID for the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/shipping/zones/{id}/locations')
            .http_method(HttpMethodEnum.PATCH)
            .query_param(Parameter()
                         .key('code')
                         .value(code))
            .query_param(Parameter()
                         .key('type')
                         .value(mtype))
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()
