# -*- coding: utf-8 -*-

"""
woocommercerestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from woocommercerestapi.api_helper import APIHelper
from woocommercerestapi.configuration import Server
from woocommercerestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from woocommercerestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from woocommercerestapi.exceptions.api_exception import APIException


class AttributeIdTermsController(BaseController):

    """A Controller to access Endpoints in the woocommercerestapi API."""
    def __init__(self, config):
        super(AttributeIdTermsController, self).__init__(config)

    def wc_v_3_products_attributes_attribute_id_terms(self,
                                                      context,
                                                      page,
                                                      per_page,
                                                      search,
                                                      exclude,
                                                      include,
                                                      order,
                                                      orderby,
                                                      hide_empty,
                                                      parent,
                                                      product,
                                                      slug,
                                                      attribute_id):
        """Does a GET request to /products/attributes/{attribute_id}/terms.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            page (str): Current page of the collection.
            per_page (str): Maximum number of items to be returned in result
                set.
            search (str): Limit results to those matching a string.
            exclude (str): Ensure result set excludes specific IDs.
            include (str): Limit result set to specific ids.
            order (str): Order sort attribute ascending or descending.
            orderby (str): Sort collection by resource attribute.
            hide_empty (str): Whether to hide resources not assigned to any
                products.
            parent (str): Limit result set to resources assigned to a specific
                parent.
            product (str): Limit result set to resources assigned to a
                specific product.
            slug (str): Limit result set to resources with a specific slug.
            attribute_id (str): (Required) Unique identifier for the attribute
                of the terms.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{attribute_id}/terms')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('exclude')
                         .value(exclude))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('orderby')
                         .value(orderby))
            .query_param(Parameter()
                         .key('hide_empty')
                         .value(hide_empty))
            .query_param(Parameter()
                         .key('parent')
                         .value(parent))
            .query_param(Parameter()
                         .key('product')
                         .value(product))
            .query_param(Parameter()
                         .key('slug')
                         .value(slug))
            .template_param(Parameter()
                            .key('attribute_id')
                            .value(attribute_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_attribute_id_terms_1(self,
                                                        attribute_id,
                                                        name,
                                                        slug,
                                                        description,
                                                        menu_order):
        """Does a POST request to /products/attributes/{attribute_id}/terms.

        Args:
            attribute_id (str): (Required) Unique identifier for the attribute
                of the terms.
            name (str): Name for the resource.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            description (str): HTML description of the resource.
            menu_order (str): Menu order, used to custom sort the resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes/{attribute_id}/terms')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('attribute_id')
                            .value(attribute_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('description')
                        .value(description))
            .form_param(Parameter()
                        .key('menu_order')
                        .value(menu_order))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()
