# -*- coding: utf-8 -*-

"""
woocommercerestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from woocommercerestapi.api_helper import APIHelper
from woocommercerestapi.configuration import Server
from woocommercerestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from woocommercerestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from woocommercerestapi.exceptions.api_exception import APIException


class AttributesController(BaseController):

    """A Controller to access Endpoints in the woocommercerestapi API."""
    def __init__(self, config):
        super(AttributesController, self).__init__(config)

    def wc_v_3_products_attributes(self,
                                   context):
        """Does a GET request to /products/attributes.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_products_attributes_1(self,
                                     name,
                                     slug,
                                     mtype,
                                     order_by,
                                     has_archives):
        """Does a POST request to /products/attributes.

        Args:
            name (str): Name for the resource.
            slug (str): An alphanumeric identifier for the resource unique to
                its type.
            mtype (List[str]): Type of attribute.
            order_by (List[str]): Default sort order.
            has_archives (str): Enable/Disable attribute archives.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/products/attributes')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('slug')
                        .value(slug))
            .form_param(Parameter()
                        .key('type')
                        .value(mtype))
            .form_param(Parameter()
                        .key('order_by')
                        .value(order_by))
            .form_param(Parameter()
                        .key('has_archives')
                        .value(has_archives))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()
