# -*- coding: utf-8 -*-

"""
woocommercerestapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from woocommercerestapi.api_helper import APIHelper
from woocommercerestapi.configuration import Server
from woocommercerestapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from woocommercerestapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from woocommercerestapi.exceptions.api_exception import APIException


class OrdersController(BaseController):

    """A Controller to access Endpoints in the woocommercerestapi API."""
    def __init__(self, config):
        super(OrdersController, self).__init__(config)

    def wc_v_3_orders(self,
                      context,
                      page,
                      per_page,
                      search,
                      after,
                      before,
                      exclude,
                      include,
                      offset,
                      order,
                      orderby,
                      parent,
                      parent_exclude,
                      status,
                      customer,
                      product,
                      dp):
        """Does a GET request to /orders.

        Args:
            context (str): Scope under which the request is made; determines
                fields present in response.
            page (str): Current page of the collection.
            per_page (str): Maximum number of items to be returned in result
                set.
            search (str): Limit results to those matching a string.
            after (str): Limit response to resources published after a given
                ISO8601 compliant date.
            before (str): Limit response to resources published before a given
                ISO8601 compliant date.
            exclude (str): Ensure result set excludes specific IDs.
            include (str): Limit result set to specific ids.
            offset (str): Offset the result set by a specific number of items.
            order (str): Order sort attribute ascending or descending.
            orderby (str): Sort collection by object attribute.
            parent (str): Limit result set to those of particular parent IDs.
            parent_exclude (str): Limit result set to all items except those
                of a particular parent ID.
            status (str): Limit result set to orders which have specific
                statuses.
            customer (str): Limit result set to orders assigned a specific
                customer.
            product (str): Limit result set to orders assigned a specific
                product.
            dp (str): Number of decimal points to use in each resource.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('context')
                         .value(context))
            .query_param(Parameter()
                         .key('page')
                         .value(page))
            .query_param(Parameter()
                         .key('per_page')
                         .value(per_page))
            .query_param(Parameter()
                         .key('search')
                         .value(search))
            .query_param(Parameter()
                         .key('after')
                         .value(after))
            .query_param(Parameter()
                         .key('before')
                         .value(before))
            .query_param(Parameter()
                         .key('exclude')
                         .value(exclude))
            .query_param(Parameter()
                         .key('include')
                         .value(include))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('orderby')
                         .value(orderby))
            .query_param(Parameter()
                         .key('parent')
                         .value(parent))
            .query_param(Parameter()
                         .key('parent_exclude')
                         .value(parent_exclude))
            .query_param(Parameter()
                         .key('status')
                         .value(status))
            .query_param(Parameter()
                         .key('customer')
                         .value(customer))
            .query_param(Parameter()
                         .key('product')
                         .value(product))
            .query_param(Parameter()
                         .key('dp')
                         .value(dp))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()

    def wc_v_3_orders_1(self,
                        parent_id,
                        status,
                        currency,
                        customer_id,
                        customer_note,
                        billing,
                        shipping,
                        payment_method,
                        payment_method_title,
                        transaction_id,
                        meta_data,
                        line_items,
                        shipping_lines,
                        fee_lines,
                        coupon_lines,
                        set_paid):
        """Does a POST request to /orders.

        Args:
            parent_id (str): Parent order ID.
            status (List[str]): Order status.
            currency (List[str]): Currency the order was created with, in ISO
                format.
            customer_id (str): User ID who owns the order. 0 for guests.
            customer_note (str): Note left by customer during checkout.
            billing (str): Billing address.
            shipping (str): Shipping address.
            payment_method (str): Payment method ID.
            payment_method_title (str): Payment method title.
            transaction_id (str): Unique transaction ID.
            meta_data (str): Meta data.
            line_items (str): Line items data.
            shipping_lines (str): Shipping lines data.
            fee_lines (str): Fee lines data.
            coupon_lines (str): Coupons line data.
            set_paid (str): Define if the order is paid. It will set the
                status to processing and reduce stock items.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/orders')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('parent_id')
                        .value(parent_id))
            .form_param(Parameter()
                        .key('status')
                        .value(status))
            .form_param(Parameter()
                        .key('currency')
                        .value(currency))
            .form_param(Parameter()
                        .key('customer_id')
                        .value(customer_id))
            .form_param(Parameter()
                        .key('customer_note')
                        .value(customer_note))
            .form_param(Parameter()
                        .key('billing')
                        .value(billing))
            .form_param(Parameter()
                        .key('shipping')
                        .value(shipping))
            .form_param(Parameter()
                        .key('payment_method')
                        .value(payment_method))
            .form_param(Parameter()
                        .key('payment_method_title')
                        .value(payment_method_title))
            .form_param(Parameter()
                        .key('transaction_id')
                        .value(transaction_id))
            .form_param(Parameter()
                        .key('meta_data')
                        .value(meta_data))
            .form_param(Parameter()
                        .key('line_items')
                        .value(line_items))
            .form_param(Parameter()
                        .key('shipping_lines')
                        .value(shipping_lines))
            .form_param(Parameter()
                        .key('fee_lines')
                        .value(fee_lines))
            .form_param(Parameter()
                        .key('coupon_lines')
                        .value(coupon_lines))
            .form_param(Parameter()
                        .key('set_paid')
                        .value(set_paid))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
            .local_error('400', 'Bad Request', APIException)
            .local_error('404', 'Not Found', APIException)
        ).execute()
