# -*- coding: utf-8 -*-

"""
openweathermap

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openweathermap.api_helper import APIHelper


class Clouds(object):

    """Implementation of the 'clouds' model.

    Reference

    Attributes:
        clouds (Any): Reference

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "clouds": 'clouds'
    }

    _optionals = [
        'clouds',
    ]

    def __init__(self,
                 clouds=APIHelper.SKIP):
        """Constructor for the Clouds class"""

        # Initialize members of the class
        if clouds is not APIHelper.SKIP:
            self.clouds = clouds 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        clouds = dictionary.get("clouds") if dictionary.get("clouds") else APIHelper.SKIP
        # Return an object of this model
        return cls(clouds)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'clouds={(self.clouds if hasattr(self, "clouds") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'clouds={(self.clouds if hasattr(self, "clouds") else None)!s})')
