# -*- coding: utf-8 -*-

"""
openweathermap

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openweathermap.api_helper import APIHelper


class Snow(object):

    """Implementation of the 'snow' model.

    Reference

    Attributes:
        snow (Any): Reference

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "snow": 'snow'
    }

    _optionals = [
        'snow',
    ]

    def __init__(self,
                 snow=APIHelper.SKIP):
        """Constructor for the Snow class"""

        # Initialize members of the class
        if snow is not APIHelper.SKIP:
            self.snow = snow 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        snow = dictionary.get("snow") if dictionary.get("snow") else APIHelper.SKIP
        # Return an object of this model
        return cls(snow)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'snow={(self.snow if hasattr(self, "snow") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'snow={(self.snow if hasattr(self, "snow") else None)!s})')
