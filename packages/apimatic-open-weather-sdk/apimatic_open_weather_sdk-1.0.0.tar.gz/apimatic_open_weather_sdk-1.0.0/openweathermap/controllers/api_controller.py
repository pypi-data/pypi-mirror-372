# -*- coding: utf-8 -*-

"""
openweathermap

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openweathermap.api_helper import APIHelper
from openweathermap.configuration import Server
from openweathermap.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openweathermap.http.http_method_enum import HttpMethodEnum


class APIController(BaseController):

    """A Controller to access Endpoints in the openweathermap API."""
    def __init__(self, config):
        super(APIController, self).__init__(config)

    def weather_get(self,
                    q=None,
                    id=None,
                    lat=None,
                    lon=None,
                    zip=None,
                    units=None,
                    lang=None,
                    mode=None,
                    appid=None,
                    no_name=None):
        """Does a GET request to /weather.

        Access current weather data for any location on Earth including over
        200,000 cities! Current weather is frequently updated based on global
        models and data from more than 40,000 weather stations.

        Args:
            q (str, optional): **City name**. *Example: London*. You can call
                by city name, or by city name and country code. The API
                responds with a list of results that match a searching word.
                For the query value, type the city name and optionally the
                country code divided by a comma; use ISO 3166 country codes.
            id (int, optional): **City ID**. *Example: `2172797`*. You can
                call by city ID. The API responds with the exact result. The
                List of city IDs can be downloaded
                [here](http://bulk.openweathermap.org/sample/). You can
                include multiple cities in this parameter &mdash; just
                separate them by commas. The limit of locations is 20. *Note:
                A single ID counts as a one API call. So, if you have city
                IDs, its treated as 3 API calls.*
            lat (float, optional): **Latitude**. *Example: 35*. The latitude
                coordinate of the location of your interest. Must use with
                `lon`.
            lon (float, optional): **Longitude**. *Example: 139*. Longitude
                coordinate of the location of your interest. Must use with
                `lat`.
            zip (str, optional): **Zip code**. Search by zip code. *Example:
                95050,us*. Please note that if the country is not specified,
                the search uses USA as a default.
            units (str, optional): **Units**. *Example: imperial*. Possible
                values: `metric`, `imperial`. When you do not use the `units`
                parameter, the format is `standard` by default.
            lang (str, optional): **Language**. *Example: en*. You can use
                lang parameter to get the output in your language. We support
                the following languages that you can use with the corresponded
                lang values: Arabic - `ar`, Bulgarian - `bg`, Catalan - `ca`,
                Czech - `cz`, German - `de`, Greek - `el`, English - `en`,
                Persian (Farsi) - `fa`, Finnish - `fi`, French - `fr`,
                Galician - `gl`, Croatian - `hr`, Hungarian - `hu`, Italian -
                `it`, Japanese - `ja`, Korean - `kr`, Latvian - `la`,
                Lithuanian - `lt`, Macedonian - `mk`, Dutc
            mode (str, optional): **Mode**. *Example: html*. Determines the
                format of the response. Possible values are `xml` and `html`.
                If the mode parameter is empty, the format is `json` by
                default.
            appid (str, optional): **API Key**. *Example:
                52a17d91b3ed0697b05a7dd6fdc708c4*. API Keys are associated
                with developer accounts.
            no_name (str, optional): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/weather')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('q')
                         .value(q))
            .query_param(Parameter()
                         .key('id')
                         .value(id))
            .query_param(Parameter()
                         .key('lat')
                         .value(lat))
            .query_param(Parameter()
                         .key('lon')
                         .value(lon))
            .query_param(Parameter()
                         .key('zip')
                         .value(zip))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('lang')
                         .value(lang))
            .query_param(Parameter()
                         .key('Mode')
                         .value(mode))
            .query_param(Parameter()
                         .key('appid')
                         .value(appid))
            .query_param(Parameter()
                         .key('No Name')
                         .value(no_name))
        ).execute()

    def forecasted_weather_data(self,
                                appid=None,
                                q=None,
                                id=None,
                                lat=None,
                                lon=None,
                                zip=None,
                                units=None,
                                lang=None,
                                mode=None):
        """Does a GET request to /forecast.

        Access forecasted weather data for any location on Earth including
        over 200,000 cities! Current weather is frequently updated based on
        global models and data from more than 40,000 weather stations.

        Args:
            appid (str, optional): **API Key**. *Example:
                52a17d91b3ed0697b05a7dd6fdc708c4*. API Keys are associated
                with developer accounts.
            q (str, optional): **City name**. *Example: London*. You can call
                by city name, or by city name and country code. The API
                responds with a list of results that match a searching word.
                For the query value, type the city name and optionally the
                country code divided by a comma; use ISO 3166 country codes.
            id (int, optional): **City ID**. *Example: `2172797`*. You can
                call by city ID. The API responds with the exact result. The
                List of city IDs can be downloaded
                [here](http://bulk.openweathermap.org/sample/). You can
                include multiple cities in this parameter &mdash; just
                separate them by commas. The limit of locations is 20. *Note:
                A single ID counts as a one API call. So, if you have city
                IDs, its treated as 3 API calls.*
            lat (float, optional): **Latitude**. *Example: 35*. The latitude
                coordinate of the location of your interest. Must use with
                `lon`.
            lon (float, optional): **Longitude**. *Example: 139*. Longitude
                coordinate of the location of your interest. Must use with
                `lat`.
            zip (str, optional): **Zip code**. Search by zip code. *Example:
                95050,us*. Please note that if the country is not specified,
                the search uses USA as a default.
            units (str, optional): **Units**. *Example: imperial*. Possible
                values: `metric`, `imperial`. When you do not use the `units`
                parameter, the format is `standard` by default.
            lang (str, optional): **Language**. *Example: en*. You can use
                lang parameter to get the output in your language. We support
                the following languages that you can use with the corresponded
                lang values: Arabic - `ar`, Bulgarian - `bg`, Catalan - `ca`,
                Czech - `cz`, German - `de`, Greek - `el`, English - `en`,
                Persian (Farsi) - `fa`, Finnish - `fi`, French - `fr`,
                Galician - `gl`, Croatian - `hr`, Hungarian - `hu`, Italian -
                `it`, Japanese - `ja`, Korean - `kr`, Latvian - `la`,
                Lithuanian - `lt`, Macedonian - `mk`, Dutc
            mode (str, optional): **Mode**. *Example: html*. Determines the
                format of the response. Possible values are `xml` and `html`.
                If the mode parameter is empty, the format is `json` by
                default.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/forecast')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('appid')
                         .value(appid))
            .query_param(Parameter()
                         .key('q')
                         .value(q))
            .query_param(Parameter()
                         .key('id')
                         .value(id))
            .query_param(Parameter()
                         .key('lat')
                         .value(lat))
            .query_param(Parameter()
                         .key('lon')
                         .value(lon))
            .query_param(Parameter()
                         .key('zip')
                         .value(zip))
            .query_param(Parameter()
                         .key('units')
                         .value(units))
            .query_param(Parameter()
                         .key('lang')
                         .value(lang))
            .query_param(Parameter()
                         .key('Mode')
                         .value(mode))
        ).execute()
