from data_gateway_sdk.protocols.smpm.smpm_ul_device_heat_proxy_meter_16b_daily import SmpmUlDeviceHeatProxyMeter16BDailyData
from data_gateway_sdk.utils.buf_ref import BufRef


def test_smpm_ul_device_heat_proxy_meter_16b_daily() -> None:
    case_serialized = bytes.fromhex("84640000e40c0000030080524d970200")
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=3.3, uptime_min=3, meter_battery_volts=3.3, capacitor_volts=3.33, radio_proxy_battery_volts=3.31, error_meter_sync=False, error_reset=False) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(value=3.3, uptime_min=3, meter_battery_volts=3.3, capacitor_volts=3.33, radio_proxy_battery_volts=3.31, error_meter_sync=False, error_reset=False))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000000000000c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=0.0, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=0.0, uptime_min=0, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000000000000c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=0.0, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=0.0, uptime_min=0, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000000000000c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=0.0, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=0.0, uptime_min=8388608, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000000000000c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=0.0, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=0.0, uptime_min=8388608, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000000000fe0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=0.0, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=5.11, uptime_min=0, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000000000fe0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=0.0, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=5.11, uptime_min=0, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000000000fe0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=0.0, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=5.11, uptime_min=8388608, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000000000fe0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=0.0, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=5.11, uptime_min=8388608, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07f00000c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=0.0, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=0.0, uptime_min=0, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07f00000c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=0.0, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=0.0, uptime_min=0, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07f00000c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=0.0, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=0.0, uptime_min=8388608, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07f00000c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=0.0, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=0.0, uptime_min=8388608, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07f00fe0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=0.0, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=5.11, uptime_min=0, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07f00fe0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=0.0, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=5.11, uptime_min=0, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07f00fe0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=0.0, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=5.11, uptime_min=8388608, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07f00fe0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=0.0, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=0.0, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=5.11, uptime_min=8388608, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("846400000000000000000000ff010c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=5.11, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=0.0, uptime_min=0, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("846400000000000000000000ff010c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=5.11, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=0.0, uptime_min=0, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("846400000000000000000000ff010c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=5.11, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=0.0, uptime_min=8388608, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("846400000000000000000000ff010c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=5.11, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=0.0, uptime_min=8388608, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("846400000000000000000000ffff0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=5.11, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=5.11, uptime_min=0, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("846400000000000000000000ffff0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=5.11, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=5.11, uptime_min=0, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("846400000000000000000000ffff0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=5.11, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=5.11, uptime_min=8388608, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("846400000000000000000000ffff0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=0.0, capacitor_volts=5.11, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=0.0, radio_proxy_battery_volts=5.11, uptime_min=8388608, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07fff010c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=5.11, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=0.0, uptime_min=0, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07fff010c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=5.11, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=0.0, uptime_min=0, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07fff010c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=5.11, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=0.0, uptime_min=8388608, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07fff010c00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=5.11, radio_proxy_battery_volts=0.0, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=0.0, uptime_min=8388608, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07fffff0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=5.11, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=5.11, uptime_min=0, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07fffff0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=5.11, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=5.11, uptime_min=0, value=268435.456))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07fffff0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=5.11, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=5.11, uptime_min=8388608, value=0.0))  # noqa: E501
    case_serialized = bytes.fromhex("84640000000000000000c07fffff0f00")  # overflow
    assert SmpmUlDeviceHeatProxyMeter16BDailyData(value=0.0, uptime_min=0, meter_battery_volts=5.11, capacitor_volts=5.11, radio_proxy_battery_volts=5.11, error_meter_sync=True, error_reset=True) == SmpmUlDeviceHeatProxyMeter16BDailyData.parse(BufRef(case_serialized))  # noqa: E501
    assert case_serialized == SmpmUlDeviceHeatProxyMeter16BDailyData.serialize(SmpmUlDeviceHeatProxyMeter16BDailyData(capacitor_volts=5.11, error_meter_sync=True, error_reset=True, meter_battery_volts=5.11, radio_proxy_battery_volts=5.11, uptime_min=8388608, value=268435.456))  # noqa: E501
