import threading
from .internal_utils.fallback_logger import sdk_logger as sdk_logger
from queue import Queue
from typing import Any, Callable

class ObjectSenderWorker(threading.Thread):
    def __init__(self, send_queue: Queue) -> None: ...
    def run(self) -> None: ...
    def stop(self) -> None: ...

class ObjectExporter:
    def __init__(self, api_key: str, objects_endpoint: str, project_name: str | None = None) -> None: ...
    def start_worker(self) -> None: ...
    def stop_worker(self) -> None: ...
    def send_objects_async(self, objects: list[dict[str, Any]], config_version: int | None = None, update_callback: Callable[[dict[str, Any]], None] | None = None) -> None: ...
