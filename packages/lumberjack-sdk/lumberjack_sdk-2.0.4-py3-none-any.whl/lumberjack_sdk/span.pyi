from .code_snippets import CodeSnippetExtractor as CodeSnippetExtractor
from .core import Lumberjack as Lumberjack
from opentelemetry import trace
from opentelemetry.trace import SpanContext as SpanContext, SpanKind, Status
from typing import Any, Generator

def start_span(name: str, kind: SpanKind = ..., attributes: dict[str, Any] | None = None, span_context: SpanContext | None = None) -> trace.Span | None: ...
def end_span(span: trace.Span | None = None, status: Status | None = None) -> None: ...
def get_current_span() -> trace.Span | None: ...
def get_current_trace_id() -> str | None: ...
def set_span_attribute(key: str, value: Any, span: trace.Span | None = None) -> None: ...
def add_span_event(name: str, attributes: dict[str, Any] | None = None, span: trace.Span | None = None) -> None: ...
def record_exception_on_span(exception: Exception, span: trace.Span | None = None, escaped: bool = False, capture_code_snippets: bool = True, context_lines: int = 5) -> None: ...
def span_context(name: str, kind: SpanKind = ..., attributes: dict[str, Any] | None = None, record_exception: bool = True) -> Generator[trace.Span, None, None]: ...
