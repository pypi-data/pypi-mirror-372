from ..internal_utils.fallback_logger import fallback_logger as fallback_logger
from .service_discovery import get_server_endpoint as get_server_endpoint, get_service_discovery as get_service_discovery, is_server_available as is_server_available
from _typeshed import Incomplete
from opentelemetry.sdk._logs import LogData as LogData
from opentelemetry.sdk._logs.export import LogExportResult, LogExporter
from typing import Any, Sequence

class LocalServerLogExporter(LogExporter):
    service_name: Incomplete
    cache_max_size: Incomplete
    discovery_interval: Incomplete
    timeout: Incomplete
    service_discovery: Incomplete
    def __init__(self, service_name: str | None = None, cache_max_size: int = 200, discovery_interval: float = 30.0, timeout: float = 10.0) -> None: ...
    def export(self, batch: Sequence[LogData]) -> LogExportResult: ...
    def get_cache_stats(self) -> dict[str, Any]: ...
    def force_flush(self, timeout_millis: int = 30000) -> bool: ...
    def shutdown(self) -> None: ...

def create_local_server_exporter(service_name: str | None = None, **kwargs: Any) -> LocalServerLogExporter: ...
def is_local_server_available() -> bool: ...
