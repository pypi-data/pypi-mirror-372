[project]
name = "phenomate-core"
version = "0.2.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "google>=3.0.0",
    "numpy>=2.3.1",
    "opencv-python>=4.11.0.86",
    "pillow>=11.3.0",
    "protobuf>=6.31.1",
    "pyturbojpeg",
    "spectral>=0.24",
]

[tool.uv.sources]
pyturbojpeg = { git = "https://github.com/lilohuang/PyTurboJPEG.git" }

[dependency-groups]
dev = [
    "bump-my-version>=1.2.1",
    "grpcio-tools>=1.74.0",
    "mypy>=1.17.0",
    "mypy-protobuf>=3.6.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.7",
    "sphinx-rtd-theme>=3.0.2",
    "types-protobuf>=6.30.2.20250703",
]

[build-system]
requires = ["uv_build>=0.8.3,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "phenomate_core"
module-root = ""


[tool.ruff]
exclude = [
  "**/*pb2.py",
  "**/*pb2.pyi"
]
lint.select = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",   # pycodestyle - warning
    "YTT", # flake8-2020
]
lint.ignore = [
    "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
    "D100",    # pydocstyle - missing docstring in public module
    "D101",    # pydocstyle - missing docstring in public class
    "D102",    # pydocstyle - missing docstring in public method
    "D103",    # pydocstyle - missing docstring in public function
    "D104",    # pydocstyle - missing docstring in public package
    "D105",    # pydocstyle - missing docstring in magic method
    "D106",    # pydocstyle - missing docstring in public nested class
    "D107",    # pydocstyle - missing docstring in __init__
    "D202",    # pydocstyle - no blank lines allowed after function docstring
    "D205",    # pydocstyle - 1 blank line required between summary line and description
    "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501",    # pycodestyle line too long, handled by ruff format
    "PLW2901", # pylint - for loop variable overwritten by assignment target
    "RUF012",  # Ruff-specific rule - annotated with classvar
    "ISC001",  # Ruff formatter incompatible
    "A002",    # Argument id shadowing scope id
    "ERA001",  # Commented out code
    "G004",    # flake8-logging-format - logging-f-string
]
line-length = 100

src = ["src"]
target-version = "py313"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 90

[tool.ruff.lint.per-file-ignores]
"tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]

[tool.mypy]
python_version = '3.11'
disallow_any_generics = false
disallow_untyped_decorators = true
disallow_untyped_calls = true
enable_error_code = "ignore-without-code"
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = false
exclude = '.*pb2\.pyi?$'

[[tool.mypy.overrides]]
module = ["spectral.*", "turbojpeg.*"]
follow_untyped_imports = true
