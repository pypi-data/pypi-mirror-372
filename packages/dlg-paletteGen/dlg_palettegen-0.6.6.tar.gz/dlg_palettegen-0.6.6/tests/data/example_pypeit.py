def poly_map(
    rawimg,
    rawivar,
    waveimg,
    slitmask,
    slitmask_trim,
    modelimg,
    deg=3,
    slit_illum_ref_idx=0,
    gpmask=None,
    thismask=None,
    debug=False,
):
    """
    Use a polynomial fit to control points along the spectral direction to construct a map between modelimg and
    rawimg. Currently, this routine is only used for image slicer IFUs.

    This problem needs to be recast into a chi-squared problem, that can take advantage of polynomial fitting.
    Refer to the following for variable assignments:
    https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html
    where:
    y = science/model
    w = model/science_error
    resid = w*(y-f(x))
    Then, iterate over this. The reason to iterate is that there should be a mapping between science and
    science_error. Once we have an estimate of f(x), we can do the following:
    spl = spline(science, science_error)
    new_science_error = spl(model*f(x))
    Now iterate a few times until new_science_error (and the fit) is converged.

    Parameters
    ----------
    rawimg : `numpy.ndarray`_
        Image data that will be used to estimate the spectral relative sensitivity
    rawivar : `numpy.ndarray`_
        Inverse variance image of rawimg
    waveimg : `numpy.ndarray`_
        Wavelength image
    slitmask : `numpy.ndarray`_
        A 2D int mask, the same shape as rawimg, indicating which pixels are on a slit. A -1 value
        indicates not on a slit, while any pixels on a slit should have the value of the slit spatial ID
        number.
    slitmask_trim : `numpy.ndarray`_
        Same as slitmask, but the slit edges are trimmed.
    model : `numpy.ndarray`_
        A model of the rawimg data.
    slit_illum_ref_idx : :obj:`int`
        Index of slit that is used as the reference.
    gpmask : `numpy.ndarray`_, optional
        bool good pixel mask (True = Good)
    thismask : `numpy.ndarray`_, optional
        A boolean mask (True = good) that indicates all pixels where the scaleImg should be constructed.
        If None, the slitmask that is generated by this routine will be used.
    debug : :obj:`bool`
        If True, some plots will be output to test if the fitting is working correctly.

    Returns
    -------
    modelmap : `numpy.ndarray`_
        A 2D image with the same shape as rawimg, that contains the modelimg mapped to the rawimg
    relscale : `numpy.ndarray`_
        A 2D image with the same shape as rawimg, that contains the relative spectral sensitivity
    """
    # Some variables to consider putting as function arguments
    print(
        rawimg,
        rawivar,
        waveimg,
        slitmask,
        slitmask_trim,
        modelimg,
        slit_illum_ref_idx,
        gpmask,
        thismask,
        debug,
        deg,
    )

    return deg, None
