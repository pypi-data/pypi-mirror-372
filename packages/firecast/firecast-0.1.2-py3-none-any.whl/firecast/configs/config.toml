# config.toml

# This is a comprehensive configuration file for the FIRE Monte Carlo simulation.
# It is designed to exercise all features and validation rules of the configuration
# parser.

# ==============================================================================
# 1. SIMULATION PARAMETERS
# ==============================================================================
[simulation_parameters]
# Number of Monte Carlo simulation runs to perform.
num_simulations = 10_000

# Seed for random number generation. Use any integer for reproducible results.  
# If omitted, results will vary each run.
# random_seed = 42         # Seed for random number generation, can be any integer

# ==============================================================================
# 2. PATHS
# ==============================================================================
[paths]
# Directory where all output (reports, plots, etc.) will be saved.
# Relative to the working directory.
output_root = "output/"

# ==============================================================================
# 3. DETERMINISTIC INPUTS
# ==============================================================================
# The years are counted from zero, so, if we are in 2025:
# 0 2025
# 1 2026
# 2 2027
# 3
#
# Imagine you are 30 and you want to retire at 50, ambitious!
# Suppose the pension (if you will have one) kicks in at 67 so at year 37 of the simulation.
# The simulation runs for 70 years to verify you can survive until 100.
[deterministic_inputs]
# Total duration of the simulation.
years_to_simulate = 70

# Initial cash/bank account balance.
initial_bank_balance = 8000.0

# Minimum allowed bank balance (if it drops below, funds are topped up from investments).
bank_lower_bound = 5000.0

# Maximum allowed bank balance (excess is invested).
bank_upper_bound = 10000.0

# investment_lot_size: Minimum chunk size for investing excess bank balance.
# Only multiples of this amount are invested when bank balance exceeds upper bound.
# If 0.0, all excess is invested immediately.
investment_lot_size = 5000.0

# --- Income Streams ---
# Monthly income
# Defines the income schedule as a list of step changes.
# In a step, the `monthly_amount` is expressed in today's money and paid from
# `year` onward until the next step.
# In between steps the amount is freezed and not adjusted for inflation.
# From the beginning of the last defined step, income start to grow with inflation
# scaled by `income_inflation_factor`.
# Income is set to zero before the first step and after `income_end_year`.
# If this list is omitted or empty, no income is paid at any time.
monthly_income_steps = [
  { year = 0, monthly_amount = 4000.0 },
  { year = 5, monthly_amount = 5000.0 },
  { year = 10, monthly_amount = 7000.0 },
  { year = 15, monthly_amount = 10000.0 },
]
# Income inflation factor is used to adjust the income after the last step.
# 1.0 means grows exactly with inflation, > 1.0 means grows faster than inflation,
# < 1.0 grows slower than inflation, 0.0 means no inflation adjustment.
# E.g. 1.0 = matches inflation, 1.01 = 1% above inflation, 0.6 = inflation adjustment
# accounts only for the 60% of inflation, 0.0 = not inflation adjusted.
income_inflation_factor = 0.6

# Year index when income ends (exclusive).
# It must be > the year of the last income step.
income_end_year = 20 # Income (salary?) stops, you are 50 now, you retire.

# Monthly pension.
# The pension starts at the nominal value `monthly_pension` the year `pension_start_year`.
# After that this value is adjusted with inflation scaled by `pension_inflation_factor`.
# Pay attention on how your pension fund estimate your pension at the year of retirement
# and if and how the value is inflation adjusted after retirement.
monthly_pension = 4000.0
pension_inflation_factor = 0.75 # Pension grows 75% of inflation.
pension_start_year = 37         # Pension starts at 67, you are 37 years into the simulation.

# Contributions
# One-time contributions (fixed nominal amounts, not inflation-adjusted), like you know
# you will receive a bonus, a credit payment, or a gift.
# To set your initial portfolio, use a planned contribution at year 0 and specify the
# allocation with a rebalance at year 0.
planned_contributions = [
  { year = 0, amount = 300_000, asset = "real_estate", description = "You own an house" },
  # { year = 5, amount = 20_000 },
  # { year = 10, amount = 20_000 },
  # { year = 15, amount = 10_000 },
]

# --- Purchases ---
# List of planned purchases where liquid assets are used to buy illiquid assets
# (e.g., real estate). At the specified year, the inflation-adjusted amount is
# withdrawn from liquid assets and added to the target illiquid asset. This does
# not count as an expense, but as a transfer of wealth.
# Remark: amount is expressed in today's money, will be inflation-adjusted.
# planned_illiquid_purchases = [
#   { year = 10, amount = 250_000, asset = "real_estate", description = "Buy a second house" },
# ]

# --- Expenditures ---
# Monthly expenses estimates expressed in today's money.
# The monthly expense expressed in today's money paid from this year onward until
# the next step.
# Opposite of `monthly_income_steps` in between steps the amount is adjusted for
# inflation, inflation has no mercy on expenses.
# From the beginning of the last defined step, expenses grow with inflation
# until the end of the simulation.
# Monthly expenses are mandatory and there must be an entry at year 0.
# No `expenses_inflation_factor` in this case, inflation has no mercy on expenses.
monthly_expenses_steps = [
  { year = 0, monthly_amount = 3500.0 },
  { year = 20, monthly_amount = 3000.0 },
  { year = 37, monthly_amount = 2500.0 },
  { year = 50, monthly_amount = 1500.0 },
]

# One-time extra expenses (in today's money, will be inflation-adjusted).
planned_extra_expenses = [
  { amount = 30_000.0, year = 20, description = "Buy a car" },
]

# Annual fee (Total Expense Ratio, TER) applied to all investments.
# E.g., 0.0015 for 0.15%.
annual_fund_fee = 0.0015

# transactions_fee: Transaction fee applied to all investments and disinvestments.
# Format: {min: float, rate: float, max: float}.
# Fee is calculated as max(min, amount * rate), capped at max if max > 0.
# If omitted or None, no fee is applied.
# Examples:
#   Fixed fee only: {min = 5, rate = 0.0, max = 5}
#   Percentage only: {min = 0, rate = 0.002, max = 0}
#   Percentage with min/max: {min = 3, rate = 0.0019, max = 19}
transactions_fee = { min = 2.95, rate = 0.0019, max = 19 }

#==============================================================================
# 4. ASSET DEFINITIONS
# ==============================================================================
# Defines all financial assets available in the simulation using a table for each asset.
# The key of the table (e.g., "stocks") is the unique identifier for the asset.
# Each asset in the configuration file is defined with the following parameters:
# - `mu`: Annual sample mean of return rates.
# - `sigma`: Annual sample standard deviation of return rates.
# - `withdrawal_priority`: Order in which assets are sold to cover cash shortfalls
#                          (lower number = sold first).
#
# Stock parameters based on MSCI World (USD) from 1999-2025, 20 years rolling 
# window average.
# mu = 0.0722
# sigma = 0.1609
#
[assets.stocks]
mu = 0.0722
sigma = 0.1609
withdrawal_priority = 2

# European Bond short term maturity 1-3y, hold to maturity strategy.
# YTM from 2005-2025.
# Average annual returns from 2004-2023.
# mu = 0.014
# sigma = 0.015
#
# The 2005-2025 period includes many years of historically very low and even
# negative interest rates in Europe. The environment has shifted (who knows?), 
# and current # yields are significantly higher.\
# Taking average YTM 2022-2025.
[assets.bonds]
mu = 0.026
sigma = 0.05
withdrawal_priority = 1

# Euro Short-Term Rate (STR), derived from historical EONIA (1999-Sep 2019) and
# ESTR (Oct 2019-May 2025) annual average rates.
# 20 years rolling window average.
[assets.str]
mu = 0.0103
sigma = 0.0157
withdrawal_priority = 0

# Ethereum: let's roll the dice
# From 2014 to 2025, 10 years rolling window average.
# mu = 0.8327
# sigma = 0.9501
# Ethereum: Putting Conservative values
[assets.eth]
mu = 0.25
sigma = 0.90
withdrawal_priority = 4

# Bitcoin: another dice roll
# From 2014 to 2025, 10 years window average.
# mu = 0.81
# sigma = 0.6994
# Bitcoin: Putting Conservative values
# [assets.btc]
# mu = 0.20
# sigma = 0.65
# withdrawal_priority = 5

# Silver: from 1915 to 2025, 20 years rolling window average.
# mu = 0.0404
# sigma = 0.2462
#
# last 20 years
# mu = 0.0903
# sigma = 0.3152
#
# Salomonic
[assets.ag]
mu = 0.07
sigma = 0.3
withdrawal_priority = 3

# --- Illiquid assets ---
[assets.real_estate]
mu = 0.025
sigma = 0.04

# Inflation although not an assate is mandatory to keep trak of the real values.
#
# Inflation parameters based on Eurozone HICP annual inflation rates from 1997-2025.
# 20 years rolling window average.
# mu = 0.0187
# sigma = 0.0151
#
# last 10 years
# mu = 0.0219
# sigma = 0.0308
[assets.inflation]
mu = 0.0219
sigma = 0.0308

# ==============================================================================
# 5. CORRELATION MATRIX 
# ============================================================================== 
# Correlation matrix for asset returns and inflation.
# The `assets` list must match keys from the [assets] tables, plus "inflation".
# The matrix must be square, symmetric and positive semi-definite, with 1.0 on 
# the diagonal and correspond to the `assets` list order.
[correlation_matrix]
assets_order = [
  "stocks",
  "bonds",
  "str",
  "eth",
  "ag",
  "real_estate",
  "inflation",
]

# Matrix provided by Google Gemini 2.5 pro, reliable? Ahahah
# matrix = [
#   # stk,  bnd,  str,  eth,  ag,     pi
#   [1.00, -0.05, 0.02, 0.15, 0.29, 0.02],  # Stocks
#   [-0.05, 1.00, 0.50, 0.03, -0.10, 0.31], # Bonds
#   [0.02, 0.50, 1.00, 0.02, 0.03, 0.38],   # STR
#   [0.15, 0.03, 0.02, 1.00, 0.09, 0.04],   # Eth
#   [0.29, -0.10, 0.03, 0.09, 1.00, -0.02], # Ag
#   [0.02, 0.31, 0.38, 0.04, -0.02, 1.00],  # Inflation
# ]

# Identity matrix. Indipendent variables, no correlation.
matrix = [
  #stk, bnd, str, eth, ag,  r_e   pi
  [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], # Stocks
  [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], # Bonds
  [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], # STR
  [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], # Eth
  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], # Ag
  [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], # Real Estate
  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], # Inflation
]
# ==============================================================================
# 6. SHOCKS
# ==============================================================================
# Defines specific, one-off market events that override stochastic returns for a
# given year.
# `asset` must match a key from the [assets] table.
# For some examples look in `docs/notes/shocks.md`.
#
# Great Depression (1929)
# [[shocks]] #1927
# year = 10
# description = "1927 buble pre crisis"
# impact = { stocks = 0.3749, bonds = 0.078, str = 0.038, eth = 0.20, ag = 0.0, inflation = -0.0170 }
#
# [[shocks]] #1928
# year = 11
# description = "1928 buble pre crisis"
# impact = { stocks = 0.4341, bonds = 0.0090, str = 0.0450, eth = 0.20, ag = 0.0909, inflation = -0.0170 }
#
# [[shocks]] #1929
# year = 12
# description = "1929, it kicks in"
# impact = { stocks = -0.0830, bonds = 0.0340, str = 0.0585, eth = -0.10, ag = -0.0833, inflation = 0.0 }
#
# [[shocks]] #1930
# year = 13
# description = "1930, recession/depresseion"
# impact = { stocks = -0.2512, bonds = 0.0450, str = 0.0225, eth = -0.40, ag = -0.2830, inflation = -0.0230 }
#
# [[shocks]] #1931
# year = 14
# description = "1931, recession/depression"
# impact = { stocks = -0.4384, bonds = -0.0260, str = 0.0150, eth = -0.30, ag = -0.2368, inflation = -0.0890 }
#
# [[shocks]] #1932
# year = 15
# description = "1932, recession/depression"
# impact = { stocks = -0.0864, bonds = 0.1680, str = 0.0150, eth = 0.40, ag = -0.1379, inflation = -0.0990 }
#
# [[shocks]] #1933
# year = 16
# description = "1933, boom"
# impact = { stocks = 0.4998, bonds = 0.0200, str = 0.0100, eth = 0.50, ag = 0.40, inflation = -0.0510 }
#
# [[shocks]] #1934
# year = 17
# description = "1934, end?"
# impact = { stocks = -0.0190, bonds = 0.1000, str = 0.0075, eth = 0.30, ag = 0.4286, inflation = -0.0310 }

# ==============================================================================
# 7. PORTFOLIO REBALANCES
# ==============================================================================
# Defines when and how the portfolio is rebalanced to target weights.
# Weights must sum to 1.0.
# To set your initial portfolio, use a planned contribution at year 0 and specify
# the allocation with a rebalance at year 0.
# There must always be a rebalance event for year 0 even if a planned contribution
# at year 0 is not specified, the weights are used to allocate all subsequent investments
# until the next rebalance.
# The `period` field allows for periodic rebalancing: if `period > 0`, the rebalance
# is applied every `period` years starting from `year` until the next rebalance event;
# if `period == 0` or omitted, it is applied only once at the specified year.
[[portfolio_rebalances]]
year = 0
period = 1
weights = { stocks = 0.80, bonds = 0.15, eth = 0.025, ag = 0.025 }
description = "start allocation"

[[portfolio_rebalances]]
year = 20
period = 1
description = "De-risking for retirement"
weights = { stocks = 0.60, bonds = 0.40 }
