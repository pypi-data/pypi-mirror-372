# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from googlemapsplatformcoreapis.configuration import Configuration
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from googlemapsplatformcoreapis.configuration import Environment
from googlemapsplatformcoreapis.http.auth.custom_query_authentication import CustomQueryAuthentication
from googlemapsplatformcoreapis.controllers.address_validation_api_controller\
    import AddressValidationAPIController
from googlemapsplatformcoreapis.controllers.aerial_view_api_controller\
    import AerialViewAPIController
from googlemapsplatformcoreapis.controllers.directions_api_legacy_controller\
    import DirectionsAPILegacyController
from googlemapsplatformcoreapis.controllers.distance_matrix_api_legacy_controller\
    import DistanceMatrixAPILegacyController
from googlemapsplatformcoreapis.controllers.elevation_api_controller\
    import ElevationAPIController
from googlemapsplatformcoreapis.controllers.geocoding_api_controller\
    import GeocodingAPIController
from googlemapsplatformcoreapis.controllers.geolocation_api_controller\
    import GeolocationAPIController
from googlemapsplatformcoreapis.controllers.autocomplete_controller\
    import AutocompleteController
from googlemapsplatformcoreapis.controllers.places_api_legacy_controller\
    import PlacesAPILegacyController
from googlemapsplatformcoreapis.controllers.places_api_controller\
    import PlacesAPIController
from googlemapsplatformcoreapis.controllers.roads_api_controller\
    import RoadsAPIController
from googlemapsplatformcoreapis.controllers.routes_api_controller\
    import RoutesAPIController
from googlemapsplatformcoreapis.controllers.street_view_api_controller\
    import StreetViewAPIController
from googlemapsplatformcoreapis.controllers.time_zone_api_controller\
    import TimeZoneAPIController
from googlemapsplatformcoreapis.controllers.solar_api_controller\
    import SolarAPIController
from googlemapsplatformcoreapis.controllers.pollen_api_controller\
    import PollenAPIController
from googlemapsplatformcoreapis.controllers.air_quality_api_controller\
    import AirQualityAPIController
from googlemapsplatformcoreapis.controllers.weather_api_controller\
    import WeatherAPIController


class GooglemapsplatformcoreapisClient(object):
    @LazyProperty
    def address_validation_api(self):
        return AddressValidationAPIController(self.global_configuration)

    @LazyProperty
    def aerial_view_api(self):
        return AerialViewAPIController(self.global_configuration)

    @LazyProperty
    def directions_api_legacy(self):
        return DirectionsAPILegacyController(self.global_configuration)

    @LazyProperty
    def distance_matrix_api_legacy(self):
        return DistanceMatrixAPILegacyController(self.global_configuration)

    @LazyProperty
    def elevation_api(self):
        return ElevationAPIController(self.global_configuration)

    @LazyProperty
    def geocoding_api(self):
        return GeocodingAPIController(self.global_configuration)

    @LazyProperty
    def geolocation_api(self):
        return GeolocationAPIController(self.global_configuration)

    @LazyProperty
    def autocomplete(self):
        return AutocompleteController(self.global_configuration)

    @LazyProperty
    def places_api_legacy(self):
        return PlacesAPILegacyController(self.global_configuration)

    @LazyProperty
    def places_api(self):
        return PlacesAPIController(self.global_configuration)

    @LazyProperty
    def roads_api(self):
        return RoadsAPIController(self.global_configuration)

    @LazyProperty
    def routes_api(self):
        return RoutesAPIController(self.global_configuration)

    @LazyProperty
    def street_view_api(self):
        return StreetViewAPIController(self.global_configuration)

    @LazyProperty
    def time_zone_api(self):
        return TimeZoneAPIController(self.global_configuration)

    @LazyProperty
    def solar_api(self):
        return SolarAPIController(self.global_configuration)

    @LazyProperty
    def pollen_api(self):
        return PollenAPIController(self.global_configuration)

    @LazyProperty
    def air_quality_api(self):
        return AirQualityAPIController(self.global_configuration)

    @LazyProperty
    def weather_api(self):
        return WeatherAPIController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, key='{{GMP API Key}}',
                 custom_query_authentication_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, key=key,
            custom_query_authentication_credentials=custom_query_authentication_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['apiKey']}
        self.auth_managers['apiKey'] = CustomQueryAuthentication(
            self.config.custom_query_authentication_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

