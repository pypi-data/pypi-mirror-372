# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.configuration import Server
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from googlemapsplatformcoreapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from googlemapsplatformcoreapis.models.m_200_ok_46 import M200OK46


class TimeZoneAPIController(BaseController):

    """A Controller to access Endpoints in the googlemapsplatformcoreapis API."""
    def __init__(self, config):
        super(TimeZoneAPIController, self).__init__(config)

    def timezone(self,
                 location,
                 timestamp,
                 accept):
        """Does a GET request to /timezone/json.

        The Time Zone API provides a simple interface to request the time zone
        for locations on the surface of the earth, as well as the time offset
        from UTC for each of those locations. You request the time zone
        information for a specific latitude/longitude pair and date. The API
        returns the name of that time zone, the time offset from UTC, and the
        daylight savings offset.

        Args:
            location (str): (Required) A comma-separated latitude,longitude
                tuple, `location=39.6034810,-119.6822510`, representing the
                location to look up.
            timestamp (str): (Required) The desired time as seconds since
                midnight, January 1, 1970 UTC. The Time Zone API uses the
                `timestamp` to determine whether or not Daylight Savings
                should be applied, based on the time zone of the `location`.  
                Note that the API does not take historical time zones into
                account. That is, if you specify a past timestamp, the API
                does not take into account the possibility that the location
                was previously in a different time zone.
            accept (str): The request header parameter.

        Returns:
            M200OK46: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/timezone/json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('location')
                         .value(location))
            .query_param(Parameter()
                         .key('timestamp')
                         .value(timestamp))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK46.from_dictionary)
        ).execute()
