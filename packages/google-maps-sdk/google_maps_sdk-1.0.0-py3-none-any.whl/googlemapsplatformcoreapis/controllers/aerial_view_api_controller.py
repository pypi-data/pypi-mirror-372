# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.configuration import Server
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from googlemapsplatformcoreapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from googlemapsplatformcoreapis.models.m_200_ok_2 import M200OK2
from googlemapsplatformcoreapis.models.m_200_ok_4 import M200OK4


class AerialViewAPIController(BaseController):

    """A Controller to access Endpoints in the googlemapsplatformcoreapis API."""
    def __init__(self, config):
        super(AerialViewAPIController, self).__init__(config)

    def render_video(self,
                     body):
        """Does a POST request to /videos:renderVideo.

        The `renderVideo` method requests the generation of an aerial view
        video for the specified US postal address. If the video already exists
        for the specified address, then this method returns metadata about the
        video.

        Args:
            body (RenderVideoRequest): The request body parameter.

        Returns:
            M200OK2: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/videos:renderVideo')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK2.from_dictionary)
        ).execute()

    def get_video(self,
                  video_id):
        """Does a GET request to /videos:lookupVideo.

        Given a valid address or video ID, the `lookupVideo` method returns
        URIs identifying a set of Aerial View API videos.
        The `lookupVideo` method only returns URIs when Google has already
        generated a video for that location.

        Args:
            video_id (str): The request query parameter.

        Returns:
            M200OK4: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/videos:lookupVideo')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('videoId')
                         .value(video_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK4.from_dictionary)
        ).execute()
