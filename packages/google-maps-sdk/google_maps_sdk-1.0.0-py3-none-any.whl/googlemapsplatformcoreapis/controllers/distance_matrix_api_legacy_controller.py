# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.configuration import Server
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from googlemapsplatformcoreapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from googlemapsplatformcoreapis.models.m_200_ok_8 import M200OK8


class DistanceMatrixAPILegacyController(BaseController):

    """A Controller to access Endpoints in the googlemapsplatformcoreapis API."""
    def __init__(self, config):
        super(DistanceMatrixAPILegacyController, self).__init__(config)

    def distance_matrix(self,
                        destinations,
                        origins,
                        accept):
        """Does a GET request to /distancematrix/json.

        The Distance Matrix API is a service that provides travel distance and
        time for a matrix of origins and destinations. The API returns
        information based on the recommended route between start and end
        points, as calculated by the Google Maps API, and consists of rows
        containing duration and distance values for each pair.

        Args:
            destinations (str): (Required) One or more locations to use as the
                finishing point for calculating travel distance and time. The
                options for the destinations parameter are the same as for the
                origins parameter.
            origins (str): (Required) The starting point for calculating
                travel distance and time. You can supply one or more locations
                separated by the pipe character (|), in the form of a place
                ID, an address, or latitude/longitude coordinates: - **Place
                ID**: If you supply a place ID, you must prefix it with
                `place_id:`. - **Address**: If you pass an address, the
                service geocodes the string and converts it to a
                latitude/longitude coordinate to calculate distance. This
                coordinate may be different from that returned by the
                Geocoding API, for example a building entrance rather than its
                center.   <div class="note">Note: using place IDs is preferred
                over using addresses or latitude/longitude coordinates. Using
                coordinates will always result in the point being snapped to
                the road nearest to those coordinates - which may not be an
                access point to the property, or even a road that will quickly
                or safely lead to the destination. Using the address will
                provide the distance to the center of the building, as opposed
                to an entrance to the building.</div> - **Coordinates**: If
                you pass latitude/longitude coordinates, they they will snap
                to the nearest road. Passing a place ID is preferred. If you
                do pass coordinates, ensure that no space exists between the
                latitude and longitude values. - **Plus codes** must be
                formatted as a global code or a compound code. Format plus
                codes as shown here (plus signs are url-escaped to %2B and
                spaces are url-escaped to %20):   - **global code** is a 4
                character area code and 6 character or longer local code
                (`849VCWC8+R9` is encoded to `849VCWC8%2BR9`).   - **compound
                code** is a 6 character or longer local code with an explicit
                location (`CWC8+R9 Mountain View, CA, USA` is encoded to
                `CWC8%2BR9%20Mountain%20View%20CA%20USA`). - **Encoded
                Polyline** Alternatively, you can supply an encoded set of
                coordinates using the [Encoded Polyline
                Algorithm](https://developers.google.com/maps/documentation/uti
                lities/polylinealgorithm). This is particularly useful if you
                have a large number of origin points, because the URL is
                significantly shorter when using an encoded polyline.   -
                Encoded polylines must be prefixed with `enc:` and followed by
                a colon `:`. For example: `origins=enc:gfo}EtohhU:`   - You
                can also include multiple encoded polylines, separated by the
                pipe character `|`. For example:      ```    
                origins=enc:wc~oAwquwMdlTxiKtqLyiK:|enc:c~vnAamswMvlTor@tjGi}L:
                |enc:udymA{~bxM:     ```
            accept (str): The request header parameter.

        Returns:
            M200OK8: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/distancematrix/json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('destinations')
                         .value(destinations))
            .query_param(Parameter()
                         .key('origins')
                         .value(origins))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK8.from_dictionary)
        ).execute()
