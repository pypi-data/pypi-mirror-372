# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.configuration import Server
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from googlemapsplatformcoreapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from googlemapsplatformcoreapis.models.m_200_ok_28 import M200OK28
from googlemapsplatformcoreapis.models.m_200_ok_30 import M200OK30
from googlemapsplatformcoreapis.models.m_200_ok_32 import M200OK32
from googlemapsplatformcoreapis.models.m_200_ok_34 import M200OK34


class PlacesAPIController(BaseController):

    """A Controller to access Endpoints in the googlemapsplatformcoreapis API."""
    def __init__(self, config):
        super(PlacesAPIController, self).__init__(config)

    def autocomplete(self,
                     x_goog_api_key,
                     body):
        """Does a POST request to /places:autocomplete.

        The Autocomplete service is a web service that returns place
        predictions and query predictions in response to an HTTP request. In
        the request, specify a text search string and geographic bounds that
        controls the search area.
        The Autocomplete service can match on full words and substrings of the
        input, resolving place names, addresses, and [plus
        codes](https://plus.codes/). Applications can therefore send queries
        as the user types, to provide on-the-fly place and query predictions.
        The response from the Autocomplete (New) API can contain two types of
        predictions:
        - **Place predictions**: Places, such as businesses, addresses and
        points of interest, based on the specified input text string and
        search area. Place predictions are returned by default.

        - **Query predictions**: Query strings matching the input text string
        and search area. Query predictions are not returned by default. Use
        the `includeQueryPredictions` request parameter to add query
        predictions to the response.

        For example, you call the API using as input a string that contains a
        partial user input, "Sicilian piz", with the search area limited to
        San Francisco, CA. The response then contains a list of **place
        predictions** that match the search string and search area, such as
        the restaurant named "Sicilian Pizza Kitchen", along with details
        about the place.
        The returned **place predictions** are designed to be presented to the
        user to aid them in selecting the desired place. You can make a [Place
        Details](https://developers.google.com/maps/documentation/places/web-se
        rvice/place-details) request to get more information about any of the
        returned place predictions.
        The response can also contain a list of **query predictions** that
        match the search string and search area, such as "Sicilian Pizza &
        Pasta". Each query prediction in the response includes the `text`
        field containing a recommended text search string. Use that string as
        an input to [Text Search
        ](https://developers.google.com/maps/documentation/places/web-service/t
        ext-search) to perform a more detailed search.

        Args:
            x_goog_api_key (str): The request header parameter.
            body (Autocompleterequest): The request body parameter.

        Returns:
            M200OK28: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/places:autocomplete')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('X-Goog-Api-Key')
                          .value(x_goog_api_key))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK28.from_dictionary)
        ).execute()

    def get_place_details(self,
                          x_goog_api_key,
                          x_goog_field_mask):
        """Does a GET request to /places/ChIJLU7jZClu5kcR4PcOOO6p3I0.

        Once you have a [place
        ID](https://developers.google.com/maps/documentation/places/web-service
        /place-id), you can request more details about a particular
        establishment or point of interest by initiating a [Place
        Details](https://developers.google.com/maps/documentation/places/web-se
        rvice/reference/rest/v1/places/get) request. A Place Details request
        returns more comprehensive information about the indicated place such
        as its complete address, phone number, user rating and reviews.
        There are many ways to obtain a place ID. You can use:
        - [Text
        Search](https://developers.google.com/maps/documentation/places/web-ser
        vice/text-search) or [Nearby
        Search](https://developers.google.com/maps/documentation/places/web-ser
        vice/nearby-search)

        - [Geocoding
        API](https://developers.google.com/maps/documentation/geocoding)

        - [Routes API](https://developers.google.com/maps/documentation/routes)

        - [Address Validation
        API](https://developers.google.com/maps/documentation/address-validatio
        n)

        - [Place
        Autocomplete](https://developers.google.com/maps/documentation/places/w
        eb-service/autocomplete)

        Args:
            x_goog_api_key (str): The request header parameter.
            x_goog_field_mask (str): Specify the list of fields to return in
                the response by creating a response field mask. Pass the
                response field mask to the method by using the URL parameter
                $fields or fields, or by using the HTTP header
                X-Goog-FieldMask. There is no default list of returned fields
                in the response. If you omit the field mask, the method
                returns an error.  Field masking is a good design practice to
                ensure that you don't request unnecessary data, which helps to
                avoid unnecessary processing time and billing charges. 
                Specify a comma-separated list of place data types to return.
                For example, to retrieve the display name and the address of
                the place.   X-Goog-FieldMask: displayName,formattedAddress
                Note: Spaces are not allowed anywhere in the field list. Use *
                to retrieve all fields.   X-Goog-FieldMask: * Wildcard "*"
                selects all fields. However, while that wildcard is fine to
                use in development, Google discourage the use of the wildcard
                (*) response field mask in production because of the large
                amount of data that can be returned. Further guidance for
                using iconMaskBaseUri and iconBackgroundColor can be found in
                Place Icons section. Specify one or more of the following
                fields:  The following fields trigger the Place Details (IDs
                Only) SKU:  id, name*, photos  * The name field contains the
                place resource name in the form: places/PLACE_ID. Use
                displayName to access the text name of the place.  The
                following fields trigger the Place Details (Location Only)
                SKU:  addressComponents, adrFormatAddress, formattedAddress,
                location, plusCode, shortFormattedAddress, types, viewport 
                The following fields trigger the Place Details (Basic) SKU: 
                accessibilityOptions, businessStatus, displayName,
                googleMapsUri, iconBackgroundColor, iconMaskBaseUri,
                primaryType, primaryTypeDisplayName, subDestinations,
                utcOffsetMinutes  The following fields trigger the Place
                Details (Advanced) SKU:  currentOpeningHours,
                currentSecondaryOpeningHours, internationalPhoneNumber,
                nationalPhoneNumber, priceLevel, rating, regularOpeningHours,
                regularSecondaryOpeningHours, userRatingCount, websiteUri  The
                following fields trigger the Place Details (Preferred) SKU: 
                allowsDogs, curbsidePickup, delivery, dineIn,
                editorialSummary, evChargeOptions, fuelOptions,
                goodForChildren, goodForGroups, goodForWatchingSports,
                liveMusic, menuForChildren, parkingOptions, paymentOptions,
                outdoorSeating, reservable, restroom, reviews, servesBeer,
                servesBreakfast, servesBrunch, servesCocktails, servesCoffee,
                servesDesserts, servesDinner, servesLunch,
                servesVegetarianFood, servesWine, takeout

        Returns:
            M200OK30: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/places/ChIJLU7jZClu5kcR4PcOOO6p3I0')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('X-Goog-Api-Key')
                          .value(x_goog_api_key))
            .header_param(Parameter()
                          .key('X-Goog-FieldMask')
                          .value(x_goog_field_mask))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK30.from_dictionary)
        ).execute()

    def nearby_search(self,
                      x_goog_api_key,
                      x_goog_field_mask,
                      body):
        """Does a POST request to /places:searchNearby.

        A [Nearby
        Search](https://developers.google.com/maps/documentation/places/web-ser
        vice/reference/rest/v1/places/searchNearby) request takes one or more
        place types, and returns a list of matching places within the
        specified area. A field mask specifying one or more data types is
        required. Nearby Search (New) only supports POST requests.

        Args:
            x_goog_api_key (str): The request header parameter.
            x_goog_field_mask (str): The request header parameter.
            body (str): The request body parameter.

        Returns:
            M200OK32: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/places:searchNearby')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('X-Goog-Api-Key')
                          .value(x_goog_api_key))
            .header_param(Parameter()
                          .key('X-Goog-FieldMask')
                          .value(x_goog_field_mask))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK32.from_dictionary)
        ).execute()

    def text_search(self,
                    x_goog_field_mask,
                    x_goog_api_key,
                    body):
        """Does a POST request to /places:searchText.

        A [Text
        Search](https://developers.google.com/maps/documentation/places/web-ser
        vice/reference/rest/v1/places/searchText) returns information about a
        set of places based on a string — for example "pizza in New York" or
        "shoe stores near Ottawa" or "123 Main Street". The service responds
        with a list of places matching the text string and any location bias
        that has been set.
        The service is especially useful for making [ambiguous address
        queries](https://developers.google.com/maps/documentation/geocoding/bes
        t-practices) in an automated system, and non-address components of the
        string may match businesses as well as addresses. Examples of
        ambiguous address queries are poorly-formatted addresses or requests
        that include non-address components such as business names. Requests
        like the first two examples in the following table may return zero
        results unless a location — such as region, location restriction, or
        location bias — is set.
        | "10 High Street, UK" or "123 Main Street, US" | Multiple "High
        Street"s in the UK; multiple "Main Street"s in the US. Query doesn't
        return desirable results unless a location restriction is set. |  
        | "ChainRestaurant New York" | Multiple "ChainRestaurant" locations in
        New York; no street address or even street name. |  
        | "10 High Street, Escher UK" or "123 Main Street, Pleasanton US" |
        Only one "High Street" in the UK city of Escher; only one "Main
        Street" in the US city of Pleasanton CA. |  
        | "UniqueRestaurantName New York" | Only one establishment with this
        name in New York; no street address needed to differentiate. |  
        | "pizza restaurants in New York" | This query contains its location
        restriction, and "pizza restaurants" is a well-defined place type. It
        returns multiple results. |  
        | "+1 514-670-8700" | This query contains a phone number. It returns
        multiple results for places associated with that phone number.  

        **Note:** For best results when searching on a phone number, include
        the country code followed by a space, and set the
        [<code>regionCode</code>](https://developers.google.com/maps/documentat
        ion/places/web-service/text-search#regioncode) parameter to correspond
        to the country code. |

        Args:
            x_goog_field_mask (str): The request header parameter.
            x_goog_api_key (str): The request header parameter.
            body (TextSearchRequest): The request body parameter.

        Returns:
            M200OK34: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/places:searchText')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('X-Goog-FieldMask')
                          .value(x_goog_field_mask))
            .header_param(Parameter()
                          .key('X-Goog-Api-Key')
                          .value(x_goog_api_key))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK34.from_dictionary)
        ).execute()

    def place_photo(self,
                    max_height_px,
                    max_width_px,
                    photo_id):
        """Does a GET request to /places/ChIJLU7jZClu5kcR4PcOOO6p3I0/photos/{photoId}/media.

        The [Place
        Photo](https://developers.google.com/maps/documentation/places/web-serv
        ice/reference/rest/v1/places.photos/getMedia) service is a read-only
        API that allows you to add high quality photographic content to your
        application. The Place Photo service gives you access to the millions
        of photos stored in the Places database.
        When you get place information using a Place Details, Nearby Search,
        or Text Search request, you can also request photo resources for
        relevant photographic content. Using the Photo service, you can then
        access the referenced photos and resize the image to the optimal size
        for your application.

        Args:
            max_height_px (int): Specifies the maximum desired height in
                pixels, of the image.  If the image is smaller than the values
                specified, the original image will be returned. If the image
                is larger in either dimension, it will be scaled to match the
                smaller of the two dimensions, restricted to its original
                aspect ratio. Both the maxheight and maxwidth properties
                accept an integer between 1 and 4800.  You must specify either
                maxHeightPx, or maxWidthPx, or both.
            max_width_px (int): Specifies the maximum desired width, in
                pixels, of the image.  If the image is smaller than the values
                specified, the original image will be returned. If the image
                is larger in either dimension, it will be scaled to match the
                smaller of the two dimensions, restricted to its original
                aspect ratio. Both the maxheight and maxwidth properties
                accept an integer between 1 and 4800.  You must specify either
                maxHeightPx, or maxWidthPx, or both.
            photo_id (str): The request template parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/places/ChIJLU7jZClu5kcR4PcOOO6p3I0/photos/{photoId}/media')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('maxHeightPx')
                         .value(max_height_px))
            .query_param(Parameter()
                         .key('maxWidthPx')
                         .value(max_width_px))
            .template_param(Parameter()
                            .key('photoId')
                            .value(photo_id)
                            .should_encode(True))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def aggregate_preview(self,
                          x_goog_api_key,
                          body):
        """Does a POST request to /v1:computeInsights.

        The [Places
        Aggregate](https://developers.google.com/maps/documentation/places-aggr
        egate/reference/rest/v1/TopLevel/computeInsights) API call lets you
        retrieve insights about areas using a variety of filter such as: area,
        place type, operating status, price level and ratings. Currently
        "count" and "places" insights are supported. With "count" insights you
        can answer questions such as "How many restaurant are located in
        California that are operational, are inexpensive and have an average
        rating of at least 4 stars" (see `insight` enum for more details).
        With "places" insights, you can determine which places match the
        requested filter. Clients can then use those place resource names to
        fetch more details about each individual place using the Places API.
        For more information, please consult the documentation here:
        [https://developers.google.com/maps/documentation/places-aggregate/refe
        rence/rest/v1/TopLevel/computeInsights](https://developers.google.com/m
        aps/documentation/places-aggregate/reference/rest/v1/TopLevel/computeIn
        sights)

        Args:
            x_goog_api_key (str): The request header parameter.
            body (AggregatePreviewRequest): The request body parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_6)
            .path('/v1:computeInsights')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('X-Goog-Api-Key')
                          .value(x_goog_api_key))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
