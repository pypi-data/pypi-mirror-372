# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.configuration import Server
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from googlemapsplatformcoreapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from googlemapsplatformcoreapis.models.m_200_ok_44 import M200OK44


class StreetViewAPIController(BaseController):

    """A Controller to access Endpoints in the googlemapsplatformcoreapis API."""
    def __init__(self, config):
        super(StreetViewAPIController, self).__init__(config)

    def street_view(self,
                    size,
                    accept):
        """Does a GET request to /streetview.

        The Street View Static API lets you embed a static (non-interactive)
        Street View panorama or thumbnail into your web page, without the use
        of JavaScript. The viewport is defined with URL parameters sent
        through a standard HTTP request, and is returned as a static image.

        Args:
            size (str): (Required) Specifies the output size of the image in
                pixels. Size is specified as `{width}x{height}` - for example,
                `size=600x400` returns an image 600 pixels wide, and 400 high.
            accept (str): The request header parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/streetview')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('size')
                         .value(size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def street_view_metadata(self,
                             accept):
        """Does a GET request to /streetview/metadata.

        The Street View Static API metadata requests provide data about Street
        View panoramas. Using the metadata, you can find out if a Street View
        image is available at a given location, as well as getting
        programmatic access to the latitude and longitude, the panorama ID,
        the date the photo was taken, and the copyright information for the
        image. Accessing this metadata allows you to customize error behavior
        in your application.

        Args:
            accept (str): The request header parameter.

        Returns:
            M200OK44: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/streetview/metadata')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK44.from_dictionary)
        ).execute()
