# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.author_attribution import AuthorAttribution


class Photo6(object):

    """Implementation of the 'Photo6' model.

    Attributes:
        name (str): The model property of type str.
        width_px (int): The model property of type int.
        height_px (int): The model property of type int.
        author_attributions (List[AuthorAttribution]): The model property of
            type List[AuthorAttribution].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "width_px": 'widthPx',
        "height_px": 'heightPx',
        "author_attributions": 'authorAttributions'
    }

    def __init__(self,
                 name=None,
                 width_px=None,
                 height_px=None,
                 author_attributions=None):
        """Constructor for the Photo6 class"""

        # Initialize members of the class
        self.name = name 
        self.width_px = width_px 
        self.height_px = height_px 
        self.author_attributions = author_attributions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        width_px = dictionary.get("widthPx") if dictionary.get("widthPx") else None
        height_px = dictionary.get("heightPx") if dictionary.get("heightPx") else None
        author_attributions = None
        if dictionary.get('authorAttributions') is not None:
            author_attributions = [AuthorAttribution.from_dictionary(x) for x in dictionary.get('authorAttributions')]
        # Return an object of this model
        return cls(name,
                   width_px,
                   height_px,
                   author_attributions)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.name,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.width_px,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.height_px,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.author_attributions,
                                            type_callable=lambda value: AuthorAttribution.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('name'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('widthPx'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('heightPx'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('authorAttributions'),
                                        type_callable=lambda value: AuthorAttribution.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'width_px={self.width_px!r}, '
                f'height_px={self.height_px!r}, '
                f'author_attributions={self.author_attributions!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'width_px={self.width_px!s}, '
                f'height_px={self.height_px!s}, '
                f'author_attributions={self.author_attributions!s})')
