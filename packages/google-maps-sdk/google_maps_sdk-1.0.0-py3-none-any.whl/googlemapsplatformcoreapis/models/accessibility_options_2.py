# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class AccessibilityOptions2(object):

    """Implementation of the 'AccessibilityOptions2' model.

    Attributes:
        wheelchair_accessible_parking (bool): The model property of type bool.
        wheelchair_accessible_entrance (bool): The model property of type bool.
        wheelchair_accessible_seating (bool): The model property of type bool.
        wheelchair_accessible_restroom (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "wheelchair_accessible_parking": 'wheelchairAccessibleParking',
        "wheelchair_accessible_entrance": 'wheelchairAccessibleEntrance',
        "wheelchair_accessible_seating": 'wheelchairAccessibleSeating',
        "wheelchair_accessible_restroom": 'wheelchairAccessibleRestroom'
    }

    _optionals = [
        'wheelchair_accessible_parking',
        'wheelchair_accessible_entrance',
        'wheelchair_accessible_seating',
        'wheelchair_accessible_restroom',
    ]

    def __init__(self,
                 wheelchair_accessible_parking=APIHelper.SKIP,
                 wheelchair_accessible_entrance=APIHelper.SKIP,
                 wheelchair_accessible_seating=APIHelper.SKIP,
                 wheelchair_accessible_restroom=APIHelper.SKIP):
        """Constructor for the AccessibilityOptions2 class"""

        # Initialize members of the class
        if wheelchair_accessible_parking is not APIHelper.SKIP:
            self.wheelchair_accessible_parking = wheelchair_accessible_parking 
        if wheelchair_accessible_entrance is not APIHelper.SKIP:
            self.wheelchair_accessible_entrance = wheelchair_accessible_entrance 
        if wheelchair_accessible_seating is not APIHelper.SKIP:
            self.wheelchair_accessible_seating = wheelchair_accessible_seating 
        if wheelchair_accessible_restroom is not APIHelper.SKIP:
            self.wheelchair_accessible_restroom = wheelchair_accessible_restroom 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        wheelchair_accessible_parking = dictionary.get("wheelchairAccessibleParking") if "wheelchairAccessibleParking" in dictionary.keys() else APIHelper.SKIP
        wheelchair_accessible_entrance = dictionary.get("wheelchairAccessibleEntrance") if "wheelchairAccessibleEntrance" in dictionary.keys() else APIHelper.SKIP
        wheelchair_accessible_seating = dictionary.get("wheelchairAccessibleSeating") if "wheelchairAccessibleSeating" in dictionary.keys() else APIHelper.SKIP
        wheelchair_accessible_restroom = dictionary.get("wheelchairAccessibleRestroom") if "wheelchairAccessibleRestroom" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(wheelchair_accessible_parking,
                   wheelchair_accessible_entrance,
                   wheelchair_accessible_seating,
                   wheelchair_accessible_restroom)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'wheelchair_accessible_parking={(self.wheelchair_accessible_parking if hasattr(self, "wheelchair_accessible_parking") else None)!r}, '
                f'wheelchair_accessible_entrance={(self.wheelchair_accessible_entrance if hasattr(self, "wheelchair_accessible_entrance") else None)!r}, '
                f'wheelchair_accessible_seating={(self.wheelchair_accessible_seating if hasattr(self, "wheelchair_accessible_seating") else None)!r}, '
                f'wheelchair_accessible_restroom={(self.wheelchair_accessible_restroom if hasattr(self, "wheelchair_accessible_restroom") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'wheelchair_accessible_parking={(self.wheelchair_accessible_parking if hasattr(self, "wheelchair_accessible_parking") else None)!s}, '
                f'wheelchair_accessible_entrance={(self.wheelchair_accessible_entrance if hasattr(self, "wheelchair_accessible_entrance") else None)!s}, '
                f'wheelchair_accessible_seating={(self.wheelchair_accessible_seating if hasattr(self, "wheelchair_accessible_seating") else None)!s}, '
                f'wheelchair_accessible_restroom={(self.wheelchair_accessible_restroom if hasattr(self, "wheelchair_accessible_restroom") else None)!s})')
