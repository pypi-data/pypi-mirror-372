# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.present_value_of_savings_lifetime import PresentValueOfSavingsLifetime
from googlemapsplatformcoreapis.models.present_value_of_savings_year_20 import PresentValueOfSavingsYear20
from googlemapsplatformcoreapis.models.savings_lifetime import SavingsLifetime
from googlemapsplatformcoreapis.models.savings_year_1 import SavingsYear1


class Savings(object):

    """Implementation of the 'Savings' model.

    Attributes:
        savings_year_1 (SavingsYear1): The model property of type SavingsYear1.
        savings_year_20 (SavingsYear1): The model property of type
            SavingsYear1.
        present_value_of_savings_year_20 (PresentValueOfSavingsYear20): The
            model property of type PresentValueOfSavingsYear20.
        financially_viable (bool): The model property of type bool.
        savings_lifetime (SavingsLifetime): The model property of type
            SavingsLifetime.
        present_value_of_savings_lifetime (PresentValueOfSavingsLifetime): The
            model property of type PresentValueOfSavingsLifetime.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "savings_year_1": 'savingsYear1',
        "savings_year_20": 'savingsYear20',
        "present_value_of_savings_year_20": 'presentValueOfSavingsYear20',
        "financially_viable": 'financiallyViable',
        "savings_lifetime": 'savingsLifetime',
        "present_value_of_savings_lifetime": 'presentValueOfSavingsLifetime'
    }

    def __init__(self,
                 savings_year_1=None,
                 savings_year_20=None,
                 present_value_of_savings_year_20=None,
                 financially_viable=None,
                 savings_lifetime=None,
                 present_value_of_savings_lifetime=None):
        """Constructor for the Savings class"""

        # Initialize members of the class
        self.savings_year_1 = savings_year_1 
        self.savings_year_20 = savings_year_20 
        self.present_value_of_savings_year_20 = present_value_of_savings_year_20 
        self.financially_viable = financially_viable 
        self.savings_lifetime = savings_lifetime 
        self.present_value_of_savings_lifetime = present_value_of_savings_lifetime 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        savings_year_1 = SavingsYear1.from_dictionary(dictionary.get('savingsYear1')) if dictionary.get('savingsYear1') else None
        savings_year_20 = SavingsYear1.from_dictionary(dictionary.get('savingsYear20')) if dictionary.get('savingsYear20') else None
        present_value_of_savings_year_20 = PresentValueOfSavingsYear20.from_dictionary(dictionary.get('presentValueOfSavingsYear20')) if dictionary.get('presentValueOfSavingsYear20') else None
        financially_viable = dictionary.get("financiallyViable") if "financiallyViable" in dictionary.keys() else None
        savings_lifetime = SavingsLifetime.from_dictionary(dictionary.get('savingsLifetime')) if dictionary.get('savingsLifetime') else None
        present_value_of_savings_lifetime = PresentValueOfSavingsLifetime.from_dictionary(dictionary.get('presentValueOfSavingsLifetime')) if dictionary.get('presentValueOfSavingsLifetime') else None
        # Return an object of this model
        return cls(savings_year_1,
                   savings_year_20,
                   present_value_of_savings_year_20,
                   financially_viable,
                   savings_lifetime,
                   present_value_of_savings_lifetime)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.savings_year_1,
                                           type_callable=lambda value: SavingsYear1.validate(value),
                                           is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.savings_year_20,
                                            type_callable=lambda value: SavingsYear1.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.present_value_of_savings_year_20,
                                            type_callable=lambda value: PresentValueOfSavingsYear20.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.financially_viable,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.savings_lifetime,
                                            type_callable=lambda value: SavingsLifetime.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.present_value_of_savings_lifetime,
                                            type_callable=lambda value: PresentValueOfSavingsLifetime.validate(value),
                                            is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('savingsYear1'),
                                       type_callable=lambda value: SavingsYear1.validate(value),
                                       is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('savingsYear20'),
                                        type_callable=lambda value: SavingsYear1.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('presentValueOfSavingsYear20'),
                                        type_callable=lambda value: PresentValueOfSavingsYear20.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('financiallyViable'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('savingsLifetime'),
                                        type_callable=lambda value: SavingsLifetime.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('presentValueOfSavingsLifetime'),
                                        type_callable=lambda value: PresentValueOfSavingsLifetime.validate(value),
                                        is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'savings_year_1={self.savings_year_1!r}, '
                f'savings_year_20={self.savings_year_20!r}, '
                f'present_value_of_savings_year_20={self.present_value_of_savings_year_20!r}, '
                f'financially_viable={self.financially_viable!r}, '
                f'savings_lifetime={self.savings_lifetime!r}, '
                f'present_value_of_savings_lifetime={self.present_value_of_savings_lifetime!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'savings_year_1={self.savings_year_1!s}, '
                f'savings_year_20={self.savings_year_20!s}, '
                f'present_value_of_savings_year_20={self.present_value_of_savings_year_20!s}, '
                f'financially_viable={self.financially_viable!s}, '
                f'savings_lifetime={self.savings_lifetime!s}, '
                f'present_value_of_savings_lifetime={self.present_value_of_savings_lifetime!s})')
