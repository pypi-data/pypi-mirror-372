# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Destination1(object):

    """Implementation of the 'Destination1' model.

    Attributes:
        geocoder_status (Any): The model property of type Any.
        mtype (List[str]): The model property of type List[str].
        place_id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "geocoder_status": 'geocoderStatus',
        "mtype": 'type',
        "place_id": 'placeId'
    }

    def __init__(self,
                 geocoder_status=None,
                 mtype=None,
                 place_id=None):
        """Constructor for the Destination1 class"""

        # Initialize members of the class
        self.geocoder_status = geocoder_status 
        self.mtype = mtype 
        self.place_id = place_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        geocoder_status = dictionary.get("geocoderStatus") if dictionary.get("geocoderStatus") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        place_id = dictionary.get("placeId") if dictionary.get("placeId") else None
        # Return an object of this model
        return cls(geocoder_status,
                   mtype,
                   place_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'geocoder_status={self.geocoder_status!r}, '
                f'mtype={self.mtype!r}, '
                f'place_id={self.place_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'geocoder_status={self.geocoder_status!s}, '
                f'mtype={self.mtype!s}, '
                f'place_id={self.place_id!s})')
