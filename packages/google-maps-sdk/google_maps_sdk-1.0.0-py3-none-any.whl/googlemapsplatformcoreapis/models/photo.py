# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class Photo(object):

    """Implementation of the 'Photo' model.

    Attributes:
        height (int): The model property of type int.
        html_attributions (List[str]): The model property of type List[str].
        photo_reference (str): The model property of type str.
        width (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "height": 'height',
        "html_attributions": 'html_attributions',
        "photo_reference": 'photo_reference',
        "width": 'width'
    }

    def __init__(self,
                 height=None,
                 html_attributions=None,
                 photo_reference=None,
                 width=None):
        """Constructor for the Photo class"""

        # Initialize members of the class
        self.height = height 
        self.html_attributions = html_attributions 
        self.photo_reference = photo_reference 
        self.width = width 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        height = dictionary.get("height") if dictionary.get("height") else None
        html_attributions = dictionary.get("html_attributions") if dictionary.get("html_attributions") else None
        photo_reference = dictionary.get("photo_reference") if dictionary.get("photo_reference") else None
        width = dictionary.get("width") if dictionary.get("width") else None
        # Return an object of this model
        return cls(height,
                   html_attributions,
                   photo_reference,
                   width)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.height,
                                           type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.html_attributions,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.photo_reference,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.width,
                                            type_callable=lambda value: isinstance(value, int))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('height'),
                                       type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('html_attributions'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('photo_reference'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('width'),
                                        type_callable=lambda value: isinstance(value, int))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'height={self.height!r}, '
                f'html_attributions={self.html_attributions!r}, '
                f'photo_reference={self.photo_reference!r}, '
                f'width={self.width!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'height={self.height!s}, '
                f'html_attributions={self.html_attributions!s}, '
                f'photo_reference={self.photo_reference!s}, '
                f'width={self.width!s})')
