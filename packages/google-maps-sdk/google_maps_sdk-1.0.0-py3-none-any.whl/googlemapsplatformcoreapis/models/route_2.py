# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.leg_2 import Leg2
from googlemapsplatformcoreapis.models.localized_values_1 import LocalizedValues1
from googlemapsplatformcoreapis.models.polyline_2 import Polyline2
from googlemapsplatformcoreapis.models.viewport_10 import Viewport10


class Route2(object):

    """Implementation of the 'Route2' model.

    Attributes:
        legs (List[Leg2]): The model property of type List[Leg2].
        distance_meters (int): The model property of type int.
        duration (str): The model property of type str.
        static_duration (str): The model property of type str.
        polyline (Polyline2): The model property of type Polyline2.
        description (str): The model property of type str.
        warnings (List[str]): The model property of type List[str].
        viewport (Viewport10): The model property of type Viewport10.
        travel_advisory (Any): The model property of type Any.
        localized_values (LocalizedValues1): The model property of type
            LocalizedValues1.
        route_labels (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "legs": 'legs',
        "distance_meters": 'distanceMeters',
        "duration": 'duration',
        "static_duration": 'staticDuration',
        "polyline": 'polyline',
        "description": 'description',
        "warnings": 'warnings',
        "viewport": 'viewport',
        "travel_advisory": 'travelAdvisory',
        "localized_values": 'localizedValues',
        "route_labels": 'routeLabels'
    }

    def __init__(self,
                 legs=None,
                 distance_meters=None,
                 duration=None,
                 static_duration=None,
                 polyline=None,
                 description=None,
                 warnings=None,
                 viewport=None,
                 travel_advisory=None,
                 localized_values=None,
                 route_labels=None):
        """Constructor for the Route2 class"""

        # Initialize members of the class
        self.legs = legs 
        self.distance_meters = distance_meters 
        self.duration = duration 
        self.static_duration = static_duration 
        self.polyline = polyline 
        self.description = description 
        self.warnings = warnings 
        self.viewport = viewport 
        self.travel_advisory = travel_advisory 
        self.localized_values = localized_values 
        self.route_labels = route_labels 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        legs = None
        if dictionary.get('legs') is not None:
            legs = [Leg2.from_dictionary(x) for x in dictionary.get('legs')]
        distance_meters = dictionary.get("distanceMeters") if dictionary.get("distanceMeters") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else None
        static_duration = dictionary.get("staticDuration") if dictionary.get("staticDuration") else None
        polyline = Polyline2.from_dictionary(dictionary.get('polyline')) if dictionary.get('polyline') else None
        description = dictionary.get("description") if dictionary.get("description") else None
        warnings = dictionary.get("warnings") if dictionary.get("warnings") else None
        viewport = Viewport10.from_dictionary(dictionary.get('viewport')) if dictionary.get('viewport') else None
        travel_advisory = dictionary.get("travelAdvisory") if dictionary.get("travelAdvisory") else None
        localized_values = LocalizedValues1.from_dictionary(dictionary.get('localizedValues')) if dictionary.get('localizedValues') else None
        route_labels = dictionary.get("routeLabels") if dictionary.get("routeLabels") else None
        # Return an object of this model
        return cls(legs,
                   distance_meters,
                   duration,
                   static_duration,
                   polyline,
                   description,
                   warnings,
                   viewport,
                   travel_advisory,
                   localized_values,
                   route_labels)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'legs={self.legs!r}, '
                f'distance_meters={self.distance_meters!r}, '
                f'duration={self.duration!r}, '
                f'static_duration={self.static_duration!r}, '
                f'polyline={self.polyline!r}, '
                f'description={self.description!r}, '
                f'warnings={self.warnings!r}, '
                f'viewport={self.viewport!r}, '
                f'travel_advisory={self.travel_advisory!r}, '
                f'localized_values={self.localized_values!r}, '
                f'route_labels={self.route_labels!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'legs={self.legs!s}, '
                f'distance_meters={self.distance_meters!s}, '
                f'duration={self.duration!s}, '
                f'static_duration={self.static_duration!s}, '
                f'polyline={self.polyline!s}, '
                f'description={self.description!s}, '
                f'warnings={self.warnings!s}, '
                f'viewport={self.viewport!s}, '
                f'travel_advisory={self.travel_advisory!s}, '
                f'localized_values={self.localized_values!s}, '
                f'route_labels={self.route_labels!s})')
