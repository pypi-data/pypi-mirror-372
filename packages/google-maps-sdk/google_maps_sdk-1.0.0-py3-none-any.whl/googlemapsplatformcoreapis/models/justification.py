# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.business_availability_attributes_justification import BusinessAvailabilityAttributesJustification
from googlemapsplatformcoreapis.models.review_justification import ReviewJustification


class Justification(object):

    """Implementation of the 'Justification' model.

    Attributes:
        review_justification (ReviewJustification): The model property of type
            ReviewJustification.
        business_availability_attributes_justification
            (BusinessAvailabilityAttributesJustification): The model property
            of type BusinessAvailabilityAttributesJustification.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "review_justification": 'reviewJustification',
        "business_availability_attributes_justification": 'businessAvailabilityAttributesJustification'
    }

    _optionals = [
        'review_justification',
        'business_availability_attributes_justification',
    ]

    def __init__(self,
                 review_justification=APIHelper.SKIP,
                 business_availability_attributes_justification=APIHelper.SKIP):
        """Constructor for the Justification class"""

        # Initialize members of the class
        if review_justification is not APIHelper.SKIP:
            self.review_justification = review_justification 
        if business_availability_attributes_justification is not APIHelper.SKIP:
            self.business_availability_attributes_justification = business_availability_attributes_justification 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        review_justification = ReviewJustification.from_dictionary(dictionary.get('reviewJustification')) if 'reviewJustification' in dictionary.keys() else APIHelper.SKIP
        business_availability_attributes_justification = BusinessAvailabilityAttributesJustification.from_dictionary(dictionary.get('businessAvailabilityAttributesJustification')) if 'businessAvailabilityAttributesJustification' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(review_justification,
                   business_availability_attributes_justification)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'review_justification={(self.review_justification if hasattr(self, "review_justification") else None)!r}, '
                f'business_availability_attributes_justification={(self.business_availability_attributes_justification if hasattr(self, "business_availability_attributes_justification") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'review_justification={(self.review_justification if hasattr(self, "review_justification") else None)!s}, '
                f'business_availability_attributes_justification={(self.business_availability_attributes_justification if hasattr(self, "business_availability_attributes_justification") else None)!s})')
