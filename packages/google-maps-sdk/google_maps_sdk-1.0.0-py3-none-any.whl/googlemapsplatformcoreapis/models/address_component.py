# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.component_name import ComponentName


class AddressComponent(object):

    """Implementation of the 'AddressComponent' model.

    Attributes:
        component_name (ComponentName): The model property of type
            ComponentName.
        component_type (str): The model property of type str.
        confirmation_level (str): The model property of type str.
        inferred (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "component_name": 'componentName',
        "component_type": 'componentType',
        "confirmation_level": 'confirmationLevel',
        "inferred": 'inferred'
    }

    _optionals = [
        'inferred',
    ]

    def __init__(self,
                 component_name=None,
                 component_type=None,
                 confirmation_level=None,
                 inferred=APIHelper.SKIP):
        """Constructor for the AddressComponent class"""

        # Initialize members of the class
        self.component_name = component_name 
        self.component_type = component_type 
        self.confirmation_level = confirmation_level 
        if inferred is not APIHelper.SKIP:
            self.inferred = inferred 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        component_name = ComponentName.from_dictionary(dictionary.get('componentName')) if dictionary.get('componentName') else None
        component_type = dictionary.get("componentType") if dictionary.get("componentType") else None
        confirmation_level = dictionary.get("confirmationLevel") if dictionary.get("confirmationLevel") else None
        inferred = dictionary.get("inferred") if "inferred" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(component_name,
                   component_type,
                   confirmation_level,
                   inferred)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'component_name={self.component_name!r}, '
                f'component_type={self.component_type!r}, '
                f'confirmation_level={self.confirmation_level!r}, '
                f'inferred={(self.inferred if hasattr(self, "inferred") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'component_name={self.component_name!s}, '
                f'component_type={self.component_type!s}, '
                f'confirmation_level={self.confirmation_level!s}, '
                f'inferred={(self.inferred if hasattr(self, "inferred") else None)!s})')
