# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.address_1 import Address1
from googlemapsplatformcoreapis.models.geocode import Geocode
from googlemapsplatformcoreapis.models.metadata import Metadata
from googlemapsplatformcoreapis.models.usps_data import UspsData
from googlemapsplatformcoreapis.models.verdict import Verdict


class Result(object):

    """Implementation of the 'Result' model.

    Attributes:
        verdict (Verdict): The model property of type Verdict.
        address (Address1): The model property of type Address1.
        geocode (Geocode): The model property of type Geocode.
        metadata (Metadata): The model property of type Metadata.
        usps_data (UspsData): The model property of type UspsData.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "verdict": 'verdict',
        "address": 'address',
        "geocode": 'geocode',
        "metadata": 'metadata',
        "usps_data": 'uspsData'
    }

    def __init__(self,
                 verdict=None,
                 address=None,
                 geocode=None,
                 metadata=None,
                 usps_data=None):
        """Constructor for the Result class"""

        # Initialize members of the class
        self.verdict = verdict 
        self.address = address 
        self.geocode = geocode 
        self.metadata = metadata 
        self.usps_data = usps_data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        verdict = Verdict.from_dictionary(dictionary.get('verdict')) if dictionary.get('verdict') else None
        address = Address1.from_dictionary(dictionary.get('address')) if dictionary.get('address') else None
        geocode = Geocode.from_dictionary(dictionary.get('geocode')) if dictionary.get('geocode') else None
        metadata = Metadata.from_dictionary(dictionary.get('metadata')) if dictionary.get('metadata') else None
        usps_data = UspsData.from_dictionary(dictionary.get('uspsData')) if dictionary.get('uspsData') else None
        # Return an object of this model
        return cls(verdict,
                   address,
                   geocode,
                   metadata,
                   usps_data)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'verdict={self.verdict!r}, '
                f'address={self.address!r}, '
                f'geocode={self.geocode!r}, '
                f'metadata={self.metadata!r}, '
                f'usps_data={self.usps_data!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'verdict={self.verdict!s}, '
                f'address={self.address!s}, '
                f'geocode={self.geocode!s}, '
                f'metadata={self.metadata!s}, '
                f'usps_data={self.usps_data!s})')
