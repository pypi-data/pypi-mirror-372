# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.accessibility_options_2 import AccessibilityOptions2
from googlemapsplatformcoreapis.models.address_component_6 import AddressComponent6
from googlemapsplatformcoreapis.models.current_opening_hours_2 import CurrentOpeningHours2
from googlemapsplatformcoreapis.models.display_name import DisplayName
from googlemapsplatformcoreapis.models.editorial_summary import EditorialSummary
from googlemapsplatformcoreapis.models.generative_summary import GenerativeSummary
from googlemapsplatformcoreapis.models.location import Location
from googlemapsplatformcoreapis.models.parking_options import ParkingOptions
from googlemapsplatformcoreapis.models.payment_options import PaymentOptions
from googlemapsplatformcoreapis.models.photo_6 import Photo6
from googlemapsplatformcoreapis.models.plus_code_8 import PlusCode8
from googlemapsplatformcoreapis.models.primary_type_display_name import PrimaryTypeDisplayName
from googlemapsplatformcoreapis.models.regular_opening_hours_2 import RegularOpeningHours2
from googlemapsplatformcoreapis.models.review_2 import Review2
from googlemapsplatformcoreapis.models.viewport_10 import Viewport10


class Place(object):

    """Implementation of the 'Place' model.

    Attributes:
        name (str): The model property of type str.
        id (str): The model property of type str.
        types (List[str]): The model property of type List[str].
        formatted_address (str): The model property of type str.
        address_components (List[AddressComponent6]): The model property of
            type List[AddressComponent6].
        plus_code (PlusCode8): The model property of type PlusCode8.
        location (Location): The model property of type Location.
        viewport (Viewport10): The model property of type Viewport10.
        rating (float | int): The model property of type float | int.
        google_maps_uri (str): The model property of type str.
        website_uri (str): The model property of type str.
        utc_offset_minutes (int): The model property of type int.
        adr_format_address (str): The model property of type str.
        business_status (str): The model property of type str.
        user_rating_count (int): The model property of type int.
        icon_mask_base_uri (str): The model property of type str.
        icon_background_color (str): The model property of type str.
        display_name (DisplayName): The model property of type DisplayName.
        short_formatted_address (str): The model property of type str.
        editorial_summary (EditorialSummary): The model property of type
            EditorialSummary.
        reviews (List[Review2]): The model property of type List[Review2].
        photos (List[Photo6]): The model property of type List[Photo6].
        good_for_children (bool): The model property of type bool.
        accessibility_options (AccessibilityOptions2): The model property of
            type AccessibilityOptions2.
        national_phone_number (str): The model property of type str.
        international_phone_number (str): The model property of type str.
        regular_opening_hours (RegularOpeningHours2): The model property of
            type RegularOpeningHours2.
        primary_type_display_name (PrimaryTypeDisplayName): The model property
            of type PrimaryTypeDisplayName.
        current_opening_hours (CurrentOpeningHours2): The model property of
            type CurrentOpeningHours2.
        primary_type (str): The model property of type str.
        allows_dogs (bool): The model property of type bool.
        restroom (bool): The model property of type bool.
        generative_summary (GenerativeSummary): The model property of type
            GenerativeSummary.
        parking_options (ParkingOptions): The model property of type
            ParkingOptions.
        price_level (str): The model property of type str.
        payment_options (PaymentOptions): The model property of type
            PaymentOptions.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "id": 'id',
        "types": 'types',
        "formatted_address": 'formattedAddress',
        "address_components": 'addressComponents',
        "plus_code": 'plusCode',
        "location": 'location',
        "viewport": 'viewport',
        "rating": 'rating',
        "google_maps_uri": 'googleMapsUri',
        "utc_offset_minutes": 'utcOffsetMinutes',
        "adr_format_address": 'adrFormatAddress',
        "business_status": 'businessStatus',
        "user_rating_count": 'userRatingCount',
        "icon_mask_base_uri": 'iconMaskBaseUri',
        "icon_background_color": 'iconBackgroundColor',
        "display_name": 'displayName',
        "short_formatted_address": 'shortFormattedAddress',
        "reviews": 'reviews',
        "photos": 'photos',
        "website_uri": 'websiteUri',
        "editorial_summary": 'editorialSummary',
        "good_for_children": 'goodForChildren',
        "accessibility_options": 'accessibilityOptions',
        "national_phone_number": 'nationalPhoneNumber',
        "international_phone_number": 'internationalPhoneNumber',
        "regular_opening_hours": 'regularOpeningHours',
        "primary_type_display_name": 'primaryTypeDisplayName',
        "current_opening_hours": 'currentOpeningHours',
        "primary_type": 'primaryType',
        "allows_dogs": 'allowsDogs',
        "restroom": 'restroom',
        "generative_summary": 'generativeSummary',
        "parking_options": 'parkingOptions',
        "price_level": 'priceLevel',
        "payment_options": 'paymentOptions'
    }

    _optionals = [
        'website_uri',
        'editorial_summary',
        'good_for_children',
        'accessibility_options',
        'national_phone_number',
        'international_phone_number',
        'regular_opening_hours',
        'primary_type_display_name',
        'current_opening_hours',
        'primary_type',
        'allows_dogs',
        'restroom',
        'generative_summary',
        'parking_options',
        'price_level',
        'payment_options',
    ]

    def __init__(self,
                 name=None,
                 id=None,
                 types=None,
                 formatted_address=None,
                 address_components=None,
                 plus_code=None,
                 location=None,
                 viewport=None,
                 rating=None,
                 google_maps_uri=None,
                 utc_offset_minutes=None,
                 adr_format_address=None,
                 business_status=None,
                 user_rating_count=None,
                 icon_mask_base_uri=None,
                 icon_background_color=None,
                 display_name=None,
                 short_formatted_address=None,
                 reviews=None,
                 photos=None,
                 website_uri=APIHelper.SKIP,
                 editorial_summary=APIHelper.SKIP,
                 good_for_children=APIHelper.SKIP,
                 accessibility_options=APIHelper.SKIP,
                 national_phone_number=APIHelper.SKIP,
                 international_phone_number=APIHelper.SKIP,
                 regular_opening_hours=APIHelper.SKIP,
                 primary_type_display_name=APIHelper.SKIP,
                 current_opening_hours=APIHelper.SKIP,
                 primary_type=APIHelper.SKIP,
                 allows_dogs=APIHelper.SKIP,
                 restroom=APIHelper.SKIP,
                 generative_summary=APIHelper.SKIP,
                 parking_options=APIHelper.SKIP,
                 price_level=APIHelper.SKIP,
                 payment_options=APIHelper.SKIP):
        """Constructor for the Place class"""

        # Initialize members of the class
        self.name = name 
        self.id = id 
        self.types = types 
        self.formatted_address = formatted_address 
        self.address_components = address_components 
        self.plus_code = plus_code 
        self.location = location 
        self.viewport = viewport 
        self.rating = rating 
        self.google_maps_uri = google_maps_uri 
        if website_uri is not APIHelper.SKIP:
            self.website_uri = website_uri 
        self.utc_offset_minutes = utc_offset_minutes 
        self.adr_format_address = adr_format_address 
        self.business_status = business_status 
        self.user_rating_count = user_rating_count 
        self.icon_mask_base_uri = icon_mask_base_uri 
        self.icon_background_color = icon_background_color 
        self.display_name = display_name 
        self.short_formatted_address = short_formatted_address 
        if editorial_summary is not APIHelper.SKIP:
            self.editorial_summary = editorial_summary 
        self.reviews = reviews 
        self.photos = photos 
        if good_for_children is not APIHelper.SKIP:
            self.good_for_children = good_for_children 
        if accessibility_options is not APIHelper.SKIP:
            self.accessibility_options = accessibility_options 
        if national_phone_number is not APIHelper.SKIP:
            self.national_phone_number = national_phone_number 
        if international_phone_number is not APIHelper.SKIP:
            self.international_phone_number = international_phone_number 
        if regular_opening_hours is not APIHelper.SKIP:
            self.regular_opening_hours = regular_opening_hours 
        if primary_type_display_name is not APIHelper.SKIP:
            self.primary_type_display_name = primary_type_display_name 
        if current_opening_hours is not APIHelper.SKIP:
            self.current_opening_hours = current_opening_hours 
        if primary_type is not APIHelper.SKIP:
            self.primary_type = primary_type 
        if allows_dogs is not APIHelper.SKIP:
            self.allows_dogs = allows_dogs 
        if restroom is not APIHelper.SKIP:
            self.restroom = restroom 
        if generative_summary is not APIHelper.SKIP:
            self.generative_summary = generative_summary 
        if parking_options is not APIHelper.SKIP:
            self.parking_options = parking_options 
        if price_level is not APIHelper.SKIP:
            self.price_level = price_level 
        if payment_options is not APIHelper.SKIP:
            self.payment_options = payment_options 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from googlemapsplatformcoreapis.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        types = dictionary.get("types") if dictionary.get("types") else None
        formatted_address = dictionary.get("formattedAddress") if dictionary.get("formattedAddress") else None
        address_components = None
        if dictionary.get('addressComponents') is not None:
            address_components = [AddressComponent6.from_dictionary(x) for x in dictionary.get('addressComponents')]
        plus_code = PlusCode8.from_dictionary(dictionary.get('plusCode')) if dictionary.get('plusCode') else None
        location = Location.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        viewport = Viewport10.from_dictionary(dictionary.get('viewport')) if dictionary.get('viewport') else None
        rating = APIHelper.deserialize_union_type(UnionTypeLookUp.get('PlaceRating'), dictionary.get('rating'), False) if dictionary.get('rating') is not None else None
        google_maps_uri = dictionary.get("googleMapsUri") if dictionary.get("googleMapsUri") else None
        utc_offset_minutes = dictionary.get("utcOffsetMinutes") if dictionary.get("utcOffsetMinutes") else None
        adr_format_address = dictionary.get("adrFormatAddress") if dictionary.get("adrFormatAddress") else None
        business_status = dictionary.get("businessStatus") if dictionary.get("businessStatus") else None
        user_rating_count = dictionary.get("userRatingCount") if dictionary.get("userRatingCount") else None
        icon_mask_base_uri = dictionary.get("iconMaskBaseUri") if dictionary.get("iconMaskBaseUri") else None
        icon_background_color = dictionary.get("iconBackgroundColor") if dictionary.get("iconBackgroundColor") else None
        display_name = DisplayName.from_dictionary(dictionary.get('displayName')) if dictionary.get('displayName') else None
        short_formatted_address = dictionary.get("shortFormattedAddress") if dictionary.get("shortFormattedAddress") else None
        reviews = None
        if dictionary.get('reviews') is not None:
            reviews = [Review2.from_dictionary(x) for x in dictionary.get('reviews')]
        photos = None
        if dictionary.get('photos') is not None:
            photos = [Photo6.from_dictionary(x) for x in dictionary.get('photos')]
        website_uri = dictionary.get("websiteUri") if dictionary.get("websiteUri") else APIHelper.SKIP
        editorial_summary = EditorialSummary.from_dictionary(dictionary.get('editorialSummary')) if 'editorialSummary' in dictionary.keys() else APIHelper.SKIP
        good_for_children = dictionary.get("goodForChildren") if "goodForChildren" in dictionary.keys() else APIHelper.SKIP
        accessibility_options = AccessibilityOptions2.from_dictionary(dictionary.get('accessibilityOptions')) if 'accessibilityOptions' in dictionary.keys() else APIHelper.SKIP
        national_phone_number = dictionary.get("nationalPhoneNumber") if dictionary.get("nationalPhoneNumber") else APIHelper.SKIP
        international_phone_number = dictionary.get("internationalPhoneNumber") if dictionary.get("internationalPhoneNumber") else APIHelper.SKIP
        regular_opening_hours = RegularOpeningHours2.from_dictionary(dictionary.get('regularOpeningHours')) if 'regularOpeningHours' in dictionary.keys() else APIHelper.SKIP
        primary_type_display_name = PrimaryTypeDisplayName.from_dictionary(dictionary.get('primaryTypeDisplayName')) if 'primaryTypeDisplayName' in dictionary.keys() else APIHelper.SKIP
        current_opening_hours = CurrentOpeningHours2.from_dictionary(dictionary.get('currentOpeningHours')) if 'currentOpeningHours' in dictionary.keys() else APIHelper.SKIP
        primary_type = dictionary.get("primaryType") if dictionary.get("primaryType") else APIHelper.SKIP
        allows_dogs = dictionary.get("allowsDogs") if "allowsDogs" in dictionary.keys() else APIHelper.SKIP
        restroom = dictionary.get("restroom") if "restroom" in dictionary.keys() else APIHelper.SKIP
        generative_summary = GenerativeSummary.from_dictionary(dictionary.get('generativeSummary')) if 'generativeSummary' in dictionary.keys() else APIHelper.SKIP
        parking_options = ParkingOptions.from_dictionary(dictionary.get('parkingOptions')) if 'parkingOptions' in dictionary.keys() else APIHelper.SKIP
        price_level = dictionary.get("priceLevel") if dictionary.get("priceLevel") else APIHelper.SKIP
        payment_options = PaymentOptions.from_dictionary(dictionary.get('paymentOptions')) if 'paymentOptions' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   id,
                   types,
                   formatted_address,
                   address_components,
                   plus_code,
                   location,
                   viewport,
                   rating,
                   google_maps_uri,
                   utc_offset_minutes,
                   adr_format_address,
                   business_status,
                   user_rating_count,
                   icon_mask_base_uri,
                   icon_background_color,
                   display_name,
                   short_formatted_address,
                   reviews,
                   photos,
                   website_uri,
                   editorial_summary,
                   good_for_children,
                   accessibility_options,
                   national_phone_number,
                   international_phone_number,
                   regular_opening_hours,
                   primary_type_display_name,
                   current_opening_hours,
                   primary_type,
                   allows_dogs,
                   restroom,
                   generative_summary,
                   parking_options,
                   price_level,
                   payment_options)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from googlemapsplatformcoreapis.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.name,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.types,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.formatted_address,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.address_components,
                                            type_callable=lambda value: AddressComponent6.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.plus_code,
                                            type_callable=lambda value: PlusCode8.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.location,
                                            type_callable=lambda value: Location.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.viewport,
                                            type_callable=lambda value: Viewport10.validate(value),
                                            is_model_dict=True) \
                and UnionTypeLookUp.get('PlaceRating').validate(dictionary.rating).is_valid \
                and APIHelper.is_valid_type(value=dictionary.google_maps_uri,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.utc_offset_minutes,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.adr_format_address,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.business_status,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.user_rating_count,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.icon_mask_base_uri,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.icon_background_color,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.display_name,
                                            type_callable=lambda value: DisplayName.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.short_formatted_address,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.reviews,
                                            type_callable=lambda value: Review2.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.photos,
                                            type_callable=lambda value: Photo6.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('name'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('types'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('formattedAddress'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('addressComponents'),
                                        type_callable=lambda value: AddressComponent6.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('plusCode'),
                                        type_callable=lambda value: PlusCode8.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('location'),
                                        type_callable=lambda value: Location.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('viewport'),
                                        type_callable=lambda value: Viewport10.validate(value),
                                        is_model_dict=True) \
            and UnionTypeLookUp.get('PlaceRating').validate(dictionary.get('rating')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('googleMapsUri'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('utcOffsetMinutes'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('adrFormatAddress'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('businessStatus'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('userRatingCount'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('iconMaskBaseUri'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('iconBackgroundColor'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('displayName'),
                                        type_callable=lambda value: DisplayName.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('shortFormattedAddress'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('reviews'),
                                        type_callable=lambda value: Review2.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('photos'),
                                        type_callable=lambda value: Photo6.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'id={self.id!r}, '
                f'types={self.types!r}, '
                f'formatted_address={self.formatted_address!r}, '
                f'address_components={self.address_components!r}, '
                f'plus_code={self.plus_code!r}, '
                f'location={self.location!r}, '
                f'viewport={self.viewport!r}, '
                f'rating={self.rating!r}, '
                f'google_maps_uri={self.google_maps_uri!r}, '
                f'website_uri={(self.website_uri if hasattr(self, "website_uri") else None)!r}, '
                f'utc_offset_minutes={self.utc_offset_minutes!r}, '
                f'adr_format_address={self.adr_format_address!r}, '
                f'business_status={self.business_status!r}, '
                f'user_rating_count={self.user_rating_count!r}, '
                f'icon_mask_base_uri={self.icon_mask_base_uri!r}, '
                f'icon_background_color={self.icon_background_color!r}, '
                f'display_name={self.display_name!r}, '
                f'short_formatted_address={self.short_formatted_address!r}, '
                f'editorial_summary={(self.editorial_summary if hasattr(self, "editorial_summary") else None)!r}, '
                f'reviews={self.reviews!r}, '
                f'photos={self.photos!r}, '
                f'good_for_children={(self.good_for_children if hasattr(self, "good_for_children") else None)!r}, '
                f'accessibility_options={(self.accessibility_options if hasattr(self, "accessibility_options") else None)!r}, '
                f'national_phone_number={(self.national_phone_number if hasattr(self, "national_phone_number") else None)!r}, '
                f'international_phone_number={(self.international_phone_number if hasattr(self, "international_phone_number") else None)!r}, '
                f'regular_opening_hours={(self.regular_opening_hours if hasattr(self, "regular_opening_hours") else None)!r}, '
                f'primary_type_display_name={(self.primary_type_display_name if hasattr(self, "primary_type_display_name") else None)!r}, '
                f'current_opening_hours={(self.current_opening_hours if hasattr(self, "current_opening_hours") else None)!r}, '
                f'primary_type={(self.primary_type if hasattr(self, "primary_type") else None)!r}, '
                f'allows_dogs={(self.allows_dogs if hasattr(self, "allows_dogs") else None)!r}, '
                f'restroom={(self.restroom if hasattr(self, "restroom") else None)!r}, '
                f'generative_summary={(self.generative_summary if hasattr(self, "generative_summary") else None)!r}, '
                f'parking_options={(self.parking_options if hasattr(self, "parking_options") else None)!r}, '
                f'price_level={(self.price_level if hasattr(self, "price_level") else None)!r}, '
                f'payment_options={(self.payment_options if hasattr(self, "payment_options") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'id={self.id!s}, '
                f'types={self.types!s}, '
                f'formatted_address={self.formatted_address!s}, '
                f'address_components={self.address_components!s}, '
                f'plus_code={self.plus_code!s}, '
                f'location={self.location!s}, '
                f'viewport={self.viewport!s}, '
                f'rating={self.rating!s}, '
                f'google_maps_uri={self.google_maps_uri!s}, '
                f'website_uri={(self.website_uri if hasattr(self, "website_uri") else None)!s}, '
                f'utc_offset_minutes={self.utc_offset_minutes!s}, '
                f'adr_format_address={self.adr_format_address!s}, '
                f'business_status={self.business_status!s}, '
                f'user_rating_count={self.user_rating_count!s}, '
                f'icon_mask_base_uri={self.icon_mask_base_uri!s}, '
                f'icon_background_color={self.icon_background_color!s}, '
                f'display_name={self.display_name!s}, '
                f'short_formatted_address={self.short_formatted_address!s}, '
                f'editorial_summary={(self.editorial_summary if hasattr(self, "editorial_summary") else None)!s}, '
                f'reviews={self.reviews!s}, '
                f'photos={self.photos!s}, '
                f'good_for_children={(self.good_for_children if hasattr(self, "good_for_children") else None)!s}, '
                f'accessibility_options={(self.accessibility_options if hasattr(self, "accessibility_options") else None)!s}, '
                f'national_phone_number={(self.national_phone_number if hasattr(self, "national_phone_number") else None)!s}, '
                f'international_phone_number={(self.international_phone_number if hasattr(self, "international_phone_number") else None)!s}, '
                f'regular_opening_hours={(self.regular_opening_hours if hasattr(self, "regular_opening_hours") else None)!s}, '
                f'primary_type_display_name={(self.primary_type_display_name if hasattr(self, "primary_type_display_name") else None)!s}, '
                f'current_opening_hours={(self.current_opening_hours if hasattr(self, "current_opening_hours") else None)!s}, '
                f'primary_type={(self.primary_type if hasattr(self, "primary_type") else None)!s}, '
                f'allows_dogs={(self.allows_dogs if hasattr(self, "allows_dogs") else None)!s}, '
                f'restroom={(self.restroom if hasattr(self, "restroom") else None)!s}, '
                f'generative_summary={(self.generative_summary if hasattr(self, "generative_summary") else None)!s}, '
                f'parking_options={(self.parking_options if hasattr(self, "parking_options") else None)!s}, '
                f'price_level={(self.price_level if hasattr(self, "price_level") else None)!s}, '
                f'payment_options={(self.payment_options if hasattr(self, "payment_options") else None)!s})')
