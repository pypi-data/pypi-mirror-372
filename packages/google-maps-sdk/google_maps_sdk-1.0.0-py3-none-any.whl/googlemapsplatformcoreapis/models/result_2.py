# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.location_2 import Location2


class Result2(object):

    """Implementation of the 'Result2' model.

    Attributes:
        elevation (float): The model property of type float.
        location (Location2): The model property of type Location2.
        resolution (float): The model property of type float.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "elevation": 'elevation',
        "location": 'location',
        "resolution": 'resolution'
    }

    def __init__(self,
                 elevation=None,
                 location=None,
                 resolution=None):
        """Constructor for the Result2 class"""

        # Initialize members of the class
        self.elevation = elevation 
        self.location = location 
        self.resolution = resolution 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        elevation = dictionary.get("elevation") if dictionary.get("elevation") else None
        location = Location2.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        resolution = dictionary.get("resolution") if dictionary.get("resolution") else None
        # Return an object of this model
        return cls(elevation,
                   location,
                   resolution)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'elevation={self.elevation!r}, '
                f'location={self.location!r}, '
                f'resolution={self.resolution!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'elevation={self.elevation!s}, '
                f'location={self.location!s}, '
                f'resolution={self.resolution!s})')
