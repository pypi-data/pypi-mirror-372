# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.close import Close
from googlemapsplatformcoreapis.models.open import Open


class Period(object):

    """Implementation of the 'Period' model.

    Attributes:
        close (Close): The model property of type Close.
        open (Open): The model property of type Open.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "close": 'close',
        "open": 'open'
    }

    def __init__(self,
                 close=None,
                 open=None):
        """Constructor for the Period class"""

        # Initialize members of the class
        self.close = close 
        self.open = open 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        close = Close.from_dictionary(dictionary.get('close')) if dictionary.get('close') else None
        open = Open.from_dictionary(dictionary.get('open')) if dictionary.get('open') else None
        # Return an object of this model
        return cls(close,
                   open)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'close={self.close!r}, '
                f'open={self.open!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'close={self.close!s}, '
                f'open={self.open!s})')
