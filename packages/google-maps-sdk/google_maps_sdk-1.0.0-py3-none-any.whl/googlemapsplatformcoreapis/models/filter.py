# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Filter(object):

    """Implementation of the 'Filter' model.

    Attributes:
        location_filter (Any): The model property of type Any.
        type_filter (Any): The model property of type Any.
        operating_status (List[str]): The model property of type List[str].
        price_levels (List[str]): The model property of type List[str].
        rating_filter (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "location_filter": 'locationFilter',
        "type_filter": 'typeFilter',
        "operating_status": 'operatingStatus',
        "price_levels": 'priceLevels',
        "rating_filter": 'ratingFilter'
    }

    def __init__(self,
                 location_filter=None,
                 type_filter=None,
                 operating_status=None,
                 price_levels=None,
                 rating_filter=None):
        """Constructor for the Filter class"""

        # Initialize members of the class
        self.location_filter = location_filter 
        self.type_filter = type_filter 
        self.operating_status = operating_status 
        self.price_levels = price_levels 
        self.rating_filter = rating_filter 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        location_filter = dictionary.get("locationFilter") if dictionary.get("locationFilter") else None
        type_filter = dictionary.get("typeFilter") if dictionary.get("typeFilter") else None
        operating_status = dictionary.get("operatingStatus") if dictionary.get("operatingStatus") else None
        price_levels = dictionary.get("priceLevels") if dictionary.get("priceLevels") else None
        rating_filter = dictionary.get("ratingFilter") if dictionary.get("ratingFilter") else None
        # Return an object of this model
        return cls(location_filter,
                   type_filter,
                   operating_status,
                   price_levels,
                   rating_filter)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'location_filter={self.location_filter!r}, '
                f'type_filter={self.type_filter!r}, '
                f'operating_status={self.operating_status!r}, '
                f'price_levels={self.price_levels!r}, '
                f'rating_filter={self.rating_filter!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'location_filter={self.location_filter!s}, '
                f'type_filter={self.type_filter!s}, '
                f'operating_status={self.operating_status!s}, '
                f'price_levels={self.price_levels!s}, '
                f'rating_filter={self.rating_filter!s})')
