# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class PlusCode8(object):

    """Implementation of the 'PlusCode8' model.

    Attributes:
        global_code (str): The model property of type str.
        compound_code (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "global_code": 'globalCode',
        "compound_code": 'compoundCode'
    }

    def __init__(self,
                 global_code=None,
                 compound_code=None):
        """Constructor for the PlusCode8 class"""

        # Initialize members of the class
        self.global_code = global_code 
        self.compound_code = compound_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        global_code = dictionary.get("globalCode") if dictionary.get("globalCode") else None
        compound_code = dictionary.get("compoundCode") if dictionary.get("compoundCode") else None
        # Return an object of this model
        return cls(global_code,
                   compound_code)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.global_code,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.compound_code,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('globalCode'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('compoundCode'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'global_code={self.global_code!r}, '
                f'compound_code={self.compound_code!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'global_code={self.global_code!s}, '
                f'compound_code={self.compound_code!s})')
