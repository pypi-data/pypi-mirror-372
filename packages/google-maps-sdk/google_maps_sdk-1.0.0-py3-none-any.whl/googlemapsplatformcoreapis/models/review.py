# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Review(object):

    """Implementation of the 'Review' model.

    Attributes:
        author_name (str): The model property of type str.
        author_url (str): The model property of type str.
        language (str): The model property of type str.
        profile_photo_url (str): The model property of type str.
        rating (int): The model property of type int.
        relative_time_description (str): The model property of type str.
        text (str): The model property of type str.
        time (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "author_name": 'author_name',
        "author_url": 'author_url',
        "language": 'language',
        "profile_photo_url": 'profile_photo_url',
        "rating": 'rating',
        "relative_time_description": 'relative_time_description',
        "text": 'text',
        "time": 'time'
    }

    def __init__(self,
                 author_name=None,
                 author_url=None,
                 language=None,
                 profile_photo_url=None,
                 rating=None,
                 relative_time_description=None,
                 text=None,
                 time=None):
        """Constructor for the Review class"""

        # Initialize members of the class
        self.author_name = author_name 
        self.author_url = author_url 
        self.language = language 
        self.profile_photo_url = profile_photo_url 
        self.rating = rating 
        self.relative_time_description = relative_time_description 
        self.text = text 
        self.time = time 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        author_name = dictionary.get("author_name") if dictionary.get("author_name") else None
        author_url = dictionary.get("author_url") if dictionary.get("author_url") else None
        language = dictionary.get("language") if dictionary.get("language") else None
        profile_photo_url = dictionary.get("profile_photo_url") if dictionary.get("profile_photo_url") else None
        rating = dictionary.get("rating") if dictionary.get("rating") else None
        relative_time_description = dictionary.get("relative_time_description") if dictionary.get("relative_time_description") else None
        text = dictionary.get("text") if dictionary.get("text") else None
        time = dictionary.get("time") if dictionary.get("time") else None
        # Return an object of this model
        return cls(author_name,
                   author_url,
                   language,
                   profile_photo_url,
                   rating,
                   relative_time_description,
                   text,
                   time)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'author_name={self.author_name!r}, '
                f'author_url={self.author_url!r}, '
                f'language={self.language!r}, '
                f'profile_photo_url={self.profile_photo_url!r}, '
                f'rating={self.rating!r}, '
                f'relative_time_description={self.relative_time_description!r}, '
                f'text={self.text!r}, '
                f'time={self.time!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'author_name={self.author_name!s}, '
                f'author_url={self.author_url!s}, '
                f'language={self.language!s}, '
                f'profile_photo_url={self.profile_photo_url!s}, '
                f'rating={self.rating!s}, '
                f'relative_time_description={self.relative_time_description!s}, '
                f'text={self.text!s}, '
                f'time={self.time!s})')
