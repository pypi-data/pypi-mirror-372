# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.bounding_box import BoundingBox
from googlemapsplatformcoreapis.models.center import Center
from googlemapsplatformcoreapis.models.imagery_date import ImageryDate
from googlemapsplatformcoreapis.models.imagery_processed_date import ImageryProcessedDate
from googlemapsplatformcoreapis.models.solar_potential import SolarPotential


class M200OK48(object):

    """Implementation of the '200 OK48' model.

    Attributes:
        name (str): The model property of type str.
        center (Center): The model property of type Center.
        imagery_date (ImageryDate): The model property of type ImageryDate.
        postal_code (str): The model property of type str.
        administrative_area (str): The model property of type str.
        statistical_area (str): The model property of type str.
        region_code (str): The model property of type str.
        solar_potential (SolarPotential): The model property of type
            SolarPotential.
        bounding_box (BoundingBox): The model property of type BoundingBox.
        imagery_quality (str): The model property of type str.
        imagery_processed_date (ImageryProcessedDate): The model property of
            type ImageryProcessedDate.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "center": 'center',
        "imagery_date": 'imageryDate',
        "postal_code": 'postalCode',
        "administrative_area": 'administrativeArea',
        "statistical_area": 'statisticalArea',
        "region_code": 'regionCode',
        "solar_potential": 'solarPotential',
        "bounding_box": 'boundingBox',
        "imagery_quality": 'imageryQuality',
        "imagery_processed_date": 'imageryProcessedDate'
    }

    def __init__(self,
                 name=None,
                 center=None,
                 imagery_date=None,
                 postal_code=None,
                 administrative_area=None,
                 statistical_area=None,
                 region_code=None,
                 solar_potential=None,
                 bounding_box=None,
                 imagery_quality=None,
                 imagery_processed_date=None):
        """Constructor for the M200OK48 class"""

        # Initialize members of the class
        self.name = name 
        self.center = center 
        self.imagery_date = imagery_date 
        self.postal_code = postal_code 
        self.administrative_area = administrative_area 
        self.statistical_area = statistical_area 
        self.region_code = region_code 
        self.solar_potential = solar_potential 
        self.bounding_box = bounding_box 
        self.imagery_quality = imagery_quality 
        self.imagery_processed_date = imagery_processed_date 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        center = Center.from_dictionary(dictionary.get('center')) if dictionary.get('center') else None
        imagery_date = ImageryDate.from_dictionary(dictionary.get('imageryDate')) if dictionary.get('imageryDate') else None
        postal_code = dictionary.get("postalCode") if dictionary.get("postalCode") else None
        administrative_area = dictionary.get("administrativeArea") if dictionary.get("administrativeArea") else None
        statistical_area = dictionary.get("statisticalArea") if dictionary.get("statisticalArea") else None
        region_code = dictionary.get("regionCode") if dictionary.get("regionCode") else None
        solar_potential = SolarPotential.from_dictionary(dictionary.get('solarPotential')) if dictionary.get('solarPotential') else None
        bounding_box = BoundingBox.from_dictionary(dictionary.get('boundingBox')) if dictionary.get('boundingBox') else None
        imagery_quality = dictionary.get("imageryQuality") if dictionary.get("imageryQuality") else None
        imagery_processed_date = ImageryProcessedDate.from_dictionary(dictionary.get('imageryProcessedDate')) if dictionary.get('imageryProcessedDate') else None
        # Return an object of this model
        return cls(name,
                   center,
                   imagery_date,
                   postal_code,
                   administrative_area,
                   statistical_area,
                   region_code,
                   solar_potential,
                   bounding_box,
                   imagery_quality,
                   imagery_processed_date)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'center={self.center!r}, '
                f'imagery_date={self.imagery_date!r}, '
                f'postal_code={self.postal_code!r}, '
                f'administrative_area={self.administrative_area!r}, '
                f'statistical_area={self.statistical_area!r}, '
                f'region_code={self.region_code!r}, '
                f'solar_potential={self.solar_potential!r}, '
                f'bounding_box={self.bounding_box!r}, '
                f'imagery_quality={self.imagery_quality!r}, '
                f'imagery_processed_date={self.imagery_processed_date!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'center={self.center!s}, '
                f'imagery_date={self.imagery_date!s}, '
                f'postal_code={self.postal_code!s}, '
                f'administrative_area={self.administrative_area!s}, '
                f'statistical_area={self.statistical_area!s}, '
                f'region_code={self.region_code!s}, '
                f'solar_potential={self.solar_potential!s}, '
                f'bounding_box={self.bounding_box!s}, '
                f'imagery_quality={self.imagery_quality!s}, '
                f'imagery_processed_date={self.imagery_processed_date!s})')
