# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.location_2 import Location2
from googlemapsplatformcoreapis.models.viewport import Viewport


class Geometry2(object):

    """Implementation of the 'Geometry2' model.

    Attributes:
        location (Location2): The model property of type Location2.
        viewport (Viewport): The model property of type Viewport.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "location": 'location',
        "viewport": 'viewport'
    }

    def __init__(self,
                 location=None,
                 viewport=None):
        """Constructor for the Geometry2 class"""

        # Initialize members of the class
        self.location = location 
        self.viewport = viewport 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        location = Location2.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        viewport = Viewport.from_dictionary(dictionary.get('viewport')) if dictionary.get('viewport') else None
        # Return an object of this model
        return cls(location,
                   viewport)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.location,
                                           type_callable=lambda value: Location2.validate(value),
                                           is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.viewport,
                                            type_callable=lambda value: Viewport.validate(value),
                                            is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('location'),
                                       type_callable=lambda value: Location2.validate(value),
                                       is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('viewport'),
                                        type_callable=lambda value: Viewport.validate(value),
                                        is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'location={self.location!r}, '
                f'viewport={self.viewport!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'location={self.location!s}, '
                f'viewport={self.viewport!s})')
