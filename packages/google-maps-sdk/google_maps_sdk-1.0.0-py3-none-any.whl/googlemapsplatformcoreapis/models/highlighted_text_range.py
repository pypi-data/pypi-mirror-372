# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class HighlightedTextRange(object):

    """Implementation of the 'HighlightedTextRange' model.

    Attributes:
        start_index (int): The model property of type int.
        end_index (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "start_index": 'startIndex',
        "end_index": 'endIndex'
    }

    def __init__(self,
                 start_index=None,
                 end_index=None):
        """Constructor for the HighlightedTextRange class"""

        # Initialize members of the class
        self.start_index = start_index 
        self.end_index = end_index 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        start_index = dictionary.get("startIndex") if dictionary.get("startIndex") else None
        end_index = dictionary.get("endIndex") if dictionary.get("endIndex") else None
        # Return an object of this model
        return cls(start_index,
                   end_index)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'start_index={self.start_index!r}, '
                f'end_index={self.end_index!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'start_index={self.start_index!s}, '
                f'end_index={self.end_index!s})')
