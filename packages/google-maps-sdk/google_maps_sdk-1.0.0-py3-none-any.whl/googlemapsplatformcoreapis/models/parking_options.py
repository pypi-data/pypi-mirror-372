# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class ParkingOptions(object):

    """Implementation of the 'ParkingOptions' model.

    Attributes:
        free_parking_lot (bool): The model property of type bool.
        paid_parking_lot (bool): The model property of type bool.
        free_street_parking (bool): The model property of type bool.
        paid_street_parking (bool): The model property of type bool.
        valet_parking (bool): The model property of type bool.
        free_garage_parking (bool): The model property of type bool.
        paid_garage_parking (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "free_parking_lot": 'freeParkingLot',
        "paid_parking_lot": 'paidParkingLot',
        "free_street_parking": 'freeStreetParking',
        "paid_street_parking": 'paidStreetParking',
        "valet_parking": 'valetParking',
        "free_garage_parking": 'freeGarageParking',
        "paid_garage_parking": 'paidGarageParking'
    }

    def __init__(self,
                 free_parking_lot=None,
                 paid_parking_lot=None,
                 free_street_parking=None,
                 paid_street_parking=None,
                 valet_parking=None,
                 free_garage_parking=None,
                 paid_garage_parking=None):
        """Constructor for the ParkingOptions class"""

        # Initialize members of the class
        self.free_parking_lot = free_parking_lot 
        self.paid_parking_lot = paid_parking_lot 
        self.free_street_parking = free_street_parking 
        self.paid_street_parking = paid_street_parking 
        self.valet_parking = valet_parking 
        self.free_garage_parking = free_garage_parking 
        self.paid_garage_parking = paid_garage_parking 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        free_parking_lot = dictionary.get("freeParkingLot") if "freeParkingLot" in dictionary.keys() else None
        paid_parking_lot = dictionary.get("paidParkingLot") if "paidParkingLot" in dictionary.keys() else None
        free_street_parking = dictionary.get("freeStreetParking") if "freeStreetParking" in dictionary.keys() else None
        paid_street_parking = dictionary.get("paidStreetParking") if "paidStreetParking" in dictionary.keys() else None
        valet_parking = dictionary.get("valetParking") if "valetParking" in dictionary.keys() else None
        free_garage_parking = dictionary.get("freeGarageParking") if "freeGarageParking" in dictionary.keys() else None
        paid_garage_parking = dictionary.get("paidGarageParking") if "paidGarageParking" in dictionary.keys() else None
        # Return an object of this model
        return cls(free_parking_lot,
                   paid_parking_lot,
                   free_street_parking,
                   paid_street_parking,
                   valet_parking,
                   free_garage_parking,
                   paid_garage_parking)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.free_parking_lot,
                                           type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.paid_parking_lot,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.free_street_parking,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.paid_street_parking,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.valet_parking,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.free_garage_parking,
                                            type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.paid_garage_parking,
                                            type_callable=lambda value: isinstance(value, bool))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('freeParkingLot'),
                                       type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('paidParkingLot'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('freeStreetParking'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('paidStreetParking'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('valetParking'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('freeGarageParking'),
                                        type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('paidGarageParking'),
                                        type_callable=lambda value: isinstance(value, bool))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'free_parking_lot={self.free_parking_lot!r}, '
                f'paid_parking_lot={self.paid_parking_lot!r}, '
                f'free_street_parking={self.free_street_parking!r}, '
                f'paid_street_parking={self.paid_street_parking!r}, '
                f'valet_parking={self.valet_parking!r}, '
                f'free_garage_parking={self.free_garage_parking!r}, '
                f'paid_garage_parking={self.paid_garage_parking!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'free_parking_lot={self.free_parking_lot!s}, '
                f'paid_parking_lot={self.paid_parking_lot!s}, '
                f'free_street_parking={self.free_street_parking!s}, '
                f'paid_street_parking={self.paid_street_parking!s}, '
                f'valet_parking={self.valet_parking!s}, '
                f'free_garage_parking={self.free_garage_parking!s}, '
                f'paid_garage_parking={self.paid_garage_parking!s})')
