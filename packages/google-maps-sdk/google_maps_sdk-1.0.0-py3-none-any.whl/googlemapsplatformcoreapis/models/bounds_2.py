# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.northeast import Northeast
from googlemapsplatformcoreapis.models.southwest import Southwest


class Bounds2(object):

    """Implementation of the 'Bounds2' model.

    Attributes:
        northeast (Northeast): The model property of type Northeast.
        southwest (Southwest): The model property of type Southwest.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "northeast": 'northeast',
        "southwest": 'southwest'
    }

    def __init__(self,
                 northeast=None,
                 southwest=None):
        """Constructor for the Bounds2 class"""

        # Initialize members of the class
        self.northeast = northeast 
        self.southwest = southwest 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        northeast = Northeast.from_dictionary(dictionary.get('northeast')) if dictionary.get('northeast') else None
        southwest = Southwest.from_dictionary(dictionary.get('southwest')) if dictionary.get('southwest') else None
        # Return an object of this model
        return cls(northeast,
                   southwest)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'northeast={self.northeast!r}, '
                f'southwest={self.southwest!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'northeast={self.northeast!s}, '
                f'southwest={self.southwest!s})')
