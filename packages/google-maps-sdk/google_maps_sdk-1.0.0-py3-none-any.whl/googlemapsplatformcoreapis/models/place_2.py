# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.accessibility_options_2 import AccessibilityOptions2
from googlemapsplatformcoreapis.models.address_component_6 import AddressComponent6
from googlemapsplatformcoreapis.models.current_opening_hours_4 import CurrentOpeningHours4
from googlemapsplatformcoreapis.models.current_secondary_opening_hour import CurrentSecondaryOpeningHour
from googlemapsplatformcoreapis.models.display_name import DisplayName
from googlemapsplatformcoreapis.models.editorial_summary import EditorialSummary
from googlemapsplatformcoreapis.models.generative_summary_2 import GenerativeSummary2
from googlemapsplatformcoreapis.models.location import Location
from googlemapsplatformcoreapis.models.parking_options_2 import ParkingOptions2
from googlemapsplatformcoreapis.models.payment_options_2 import PaymentOptions2
from googlemapsplatformcoreapis.models.photo_6 import Photo6
from googlemapsplatformcoreapis.models.plus_code_8 import PlusCode8
from googlemapsplatformcoreapis.models.primary_type_display_name import PrimaryTypeDisplayName
from googlemapsplatformcoreapis.models.regular_opening_hours import RegularOpeningHours
from googlemapsplatformcoreapis.models.regular_secondary_opening_hour import RegularSecondaryOpeningHour
from googlemapsplatformcoreapis.models.review_2 import Review2
from googlemapsplatformcoreapis.models.viewport_10 import Viewport10


class Place2(object):

    """Implementation of the 'Place2' model.

    Attributes:
        name (str): The model property of type str.
        id (str): The model property of type str.
        types (List[str]): The model property of type List[str].
        national_phone_number (str): The model property of type str.
        international_phone_number (str): The model property of type str.
        formatted_address (str): The model property of type str.
        address_components (List[AddressComponent6]): The model property of
            type List[AddressComponent6].
        plus_code (PlusCode8): The model property of type PlusCode8.
        location (Location): The model property of type Location.
        viewport (Viewport10): The model property of type Viewport10.
        rating (float): The model property of type float.
        google_maps_uri (str): The model property of type str.
        website_uri (str): The model property of type str.
        regular_opening_hours (RegularOpeningHours): The model property of
            type RegularOpeningHours.
        utc_offset_minutes (int): The model property of type int.
        adr_format_address (str): The model property of type str.
        business_status (str): The model property of type str.
        price_level (str): The model property of type str.
        user_rating_count (int): The model property of type int.
        icon_mask_base_uri (str): The model property of type str.
        icon_background_color (str): The model property of type str.
        display_name (DisplayName): The model property of type DisplayName.
        primary_type_display_name (PrimaryTypeDisplayName): The model property
            of type PrimaryTypeDisplayName.
        takeout (bool): The model property of type bool.
        delivery (bool): The model property of type bool.
        dine_in (bool): The model property of type bool.
        curbside_pickup (bool): The model property of type bool.
        serves_breakfast (bool): The model property of type bool.
        serves_lunch (bool): The model property of type bool.
        serves_dinner (bool): The model property of type bool.
        serves_brunch (bool): The model property of type bool.
        serves_vegetarian_food (bool): The model property of type bool.
        current_opening_hours (CurrentOpeningHours4): The model property of
            type CurrentOpeningHours4.
        primary_type (str): The model property of type str.
        short_formatted_address (str): The model property of type str.
        editorial_summary (EditorialSummary): The model property of type
            EditorialSummary.
        reviews (List[Review2]): The model property of type List[Review2].
        photos (List[Photo6]): The model property of type List[Photo6].
        outdoor_seating (bool): The model property of type bool.
        live_music (bool): The model property of type bool.
        menu_for_children (bool): The model property of type bool.
        serves_dessert (bool): The model property of type bool.
        serves_coffee (bool): The model property of type bool.
        good_for_children (bool): The model property of type bool.
        restroom (bool): The model property of type bool.
        good_for_groups (bool): The model property of type bool.
        good_for_watching_sports (bool): The model property of type bool.
        payment_options (PaymentOptions2): The model property of type
            PaymentOptions2.
        parking_options (ParkingOptions2): The model property of type
            ParkingOptions2.
        accessibility_options (AccessibilityOptions2): The model property of
            type AccessibilityOptions2.
        generative_summary (GenerativeSummary2): The model property of type
            GenerativeSummary2.
        reservable (bool): The model property of type bool.
        serves_beer (bool): The model property of type bool.
        serves_wine (bool): The model property of type bool.
        serves_cocktails (bool): The model property of type bool.
        current_secondary_opening_hours (List[CurrentSecondaryOpeningHour]):
            The model property of type List[CurrentSecondaryOpeningHour].
        regular_secondary_opening_hours (List[RegularSecondaryOpeningHour]):
            The model property of type List[RegularSecondaryOpeningHour].
        allows_dogs (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "id": 'id',
        "types": 'types',
        "formatted_address": 'formattedAddress',
        "address_components": 'addressComponents',
        "plus_code": 'plusCode',
        "location": 'location',
        "viewport": 'viewport',
        "rating": 'rating',
        "google_maps_uri": 'googleMapsUri',
        "website_uri": 'websiteUri',
        "regular_opening_hours": 'regularOpeningHours',
        "utc_offset_minutes": 'utcOffsetMinutes',
        "adr_format_address": 'adrFormatAddress',
        "business_status": 'businessStatus',
        "user_rating_count": 'userRatingCount',
        "icon_mask_base_uri": 'iconMaskBaseUri',
        "icon_background_color": 'iconBackgroundColor',
        "display_name": 'displayName',
        "takeout": 'takeout',
        "delivery": 'delivery',
        "serves_dinner": 'servesDinner',
        "serves_vegetarian_food": 'servesVegetarianFood',
        "current_opening_hours": 'currentOpeningHours',
        "short_formatted_address": 'shortFormattedAddress',
        "reviews": 'reviews',
        "photos": 'photos',
        "serves_dessert": 'servesDessert',
        "payment_options": 'paymentOptions',
        "national_phone_number": 'nationalPhoneNumber',
        "international_phone_number": 'internationalPhoneNumber',
        "price_level": 'priceLevel',
        "primary_type_display_name": 'primaryTypeDisplayName',
        "dine_in": 'dineIn',
        "curbside_pickup": 'curbsidePickup',
        "serves_breakfast": 'servesBreakfast',
        "serves_lunch": 'servesLunch',
        "serves_brunch": 'servesBrunch',
        "primary_type": 'primaryType',
        "editorial_summary": 'editorialSummary',
        "outdoor_seating": 'outdoorSeating',
        "live_music": 'liveMusic',
        "menu_for_children": 'menuForChildren',
        "serves_coffee": 'servesCoffee',
        "good_for_children": 'goodForChildren',
        "restroom": 'restroom',
        "good_for_groups": 'goodForGroups',
        "good_for_watching_sports": 'goodForWatchingSports',
        "parking_options": 'parkingOptions',
        "accessibility_options": 'accessibilityOptions',
        "generative_summary": 'generativeSummary',
        "reservable": 'reservable',
        "serves_beer": 'servesBeer',
        "serves_wine": 'servesWine',
        "serves_cocktails": 'servesCocktails',
        "current_secondary_opening_hours": 'currentSecondaryOpeningHours',
        "regular_secondary_opening_hours": 'regularSecondaryOpeningHours',
        "allows_dogs": 'allowsDogs'
    }

    _optionals = [
        'national_phone_number',
        'international_phone_number',
        'price_level',
        'primary_type_display_name',
        'dine_in',
        'curbside_pickup',
        'serves_breakfast',
        'serves_lunch',
        'serves_brunch',
        'primary_type',
        'editorial_summary',
        'outdoor_seating',
        'live_music',
        'menu_for_children',
        'serves_coffee',
        'good_for_children',
        'restroom',
        'good_for_groups',
        'good_for_watching_sports',
        'parking_options',
        'accessibility_options',
        'generative_summary',
        'reservable',
        'serves_beer',
        'serves_wine',
        'serves_cocktails',
        'current_secondary_opening_hours',
        'regular_secondary_opening_hours',
        'allows_dogs',
    ]

    def __init__(self,
                 name=None,
                 id=None,
                 types=None,
                 formatted_address=None,
                 address_components=None,
                 plus_code=None,
                 location=None,
                 viewport=None,
                 rating=None,
                 google_maps_uri=None,
                 website_uri=None,
                 regular_opening_hours=None,
                 utc_offset_minutes=None,
                 adr_format_address=None,
                 business_status=None,
                 user_rating_count=None,
                 icon_mask_base_uri=None,
                 icon_background_color=None,
                 display_name=None,
                 takeout=None,
                 delivery=None,
                 serves_dinner=None,
                 serves_vegetarian_food=None,
                 current_opening_hours=None,
                 short_formatted_address=None,
                 reviews=None,
                 photos=None,
                 serves_dessert=None,
                 payment_options=None,
                 national_phone_number=APIHelper.SKIP,
                 international_phone_number=APIHelper.SKIP,
                 price_level=APIHelper.SKIP,
                 primary_type_display_name=APIHelper.SKIP,
                 dine_in=APIHelper.SKIP,
                 curbside_pickup=APIHelper.SKIP,
                 serves_breakfast=APIHelper.SKIP,
                 serves_lunch=APIHelper.SKIP,
                 serves_brunch=APIHelper.SKIP,
                 primary_type=APIHelper.SKIP,
                 editorial_summary=APIHelper.SKIP,
                 outdoor_seating=APIHelper.SKIP,
                 live_music=APIHelper.SKIP,
                 menu_for_children=APIHelper.SKIP,
                 serves_coffee=APIHelper.SKIP,
                 good_for_children=APIHelper.SKIP,
                 restroom=APIHelper.SKIP,
                 good_for_groups=APIHelper.SKIP,
                 good_for_watching_sports=APIHelper.SKIP,
                 parking_options=APIHelper.SKIP,
                 accessibility_options=APIHelper.SKIP,
                 generative_summary=APIHelper.SKIP,
                 reservable=APIHelper.SKIP,
                 serves_beer=APIHelper.SKIP,
                 serves_wine=APIHelper.SKIP,
                 serves_cocktails=APIHelper.SKIP,
                 current_secondary_opening_hours=APIHelper.SKIP,
                 regular_secondary_opening_hours=APIHelper.SKIP,
                 allows_dogs=APIHelper.SKIP):
        """Constructor for the Place2 class"""

        # Initialize members of the class
        self.name = name 
        self.id = id 
        self.types = types 
        if national_phone_number is not APIHelper.SKIP:
            self.national_phone_number = national_phone_number 
        if international_phone_number is not APIHelper.SKIP:
            self.international_phone_number = international_phone_number 
        self.formatted_address = formatted_address 
        self.address_components = address_components 
        self.plus_code = plus_code 
        self.location = location 
        self.viewport = viewport 
        self.rating = rating 
        self.google_maps_uri = google_maps_uri 
        self.website_uri = website_uri 
        self.regular_opening_hours = regular_opening_hours 
        self.utc_offset_minutes = utc_offset_minutes 
        self.adr_format_address = adr_format_address 
        self.business_status = business_status 
        if price_level is not APIHelper.SKIP:
            self.price_level = price_level 
        self.user_rating_count = user_rating_count 
        self.icon_mask_base_uri = icon_mask_base_uri 
        self.icon_background_color = icon_background_color 
        self.display_name = display_name 
        if primary_type_display_name is not APIHelper.SKIP:
            self.primary_type_display_name = primary_type_display_name 
        self.takeout = takeout 
        self.delivery = delivery 
        if dine_in is not APIHelper.SKIP:
            self.dine_in = dine_in 
        if curbside_pickup is not APIHelper.SKIP:
            self.curbside_pickup = curbside_pickup 
        if serves_breakfast is not APIHelper.SKIP:
            self.serves_breakfast = serves_breakfast 
        if serves_lunch is not APIHelper.SKIP:
            self.serves_lunch = serves_lunch 
        self.serves_dinner = serves_dinner 
        if serves_brunch is not APIHelper.SKIP:
            self.serves_brunch = serves_brunch 
        self.serves_vegetarian_food = serves_vegetarian_food 
        self.current_opening_hours = current_opening_hours 
        if primary_type is not APIHelper.SKIP:
            self.primary_type = primary_type 
        self.short_formatted_address = short_formatted_address 
        if editorial_summary is not APIHelper.SKIP:
            self.editorial_summary = editorial_summary 
        self.reviews = reviews 
        self.photos = photos 
        if outdoor_seating is not APIHelper.SKIP:
            self.outdoor_seating = outdoor_seating 
        if live_music is not APIHelper.SKIP:
            self.live_music = live_music 
        if menu_for_children is not APIHelper.SKIP:
            self.menu_for_children = menu_for_children 
        self.serves_dessert = serves_dessert 
        if serves_coffee is not APIHelper.SKIP:
            self.serves_coffee = serves_coffee 
        if good_for_children is not APIHelper.SKIP:
            self.good_for_children = good_for_children 
        if restroom is not APIHelper.SKIP:
            self.restroom = restroom 
        if good_for_groups is not APIHelper.SKIP:
            self.good_for_groups = good_for_groups 
        if good_for_watching_sports is not APIHelper.SKIP:
            self.good_for_watching_sports = good_for_watching_sports 
        self.payment_options = payment_options 
        if parking_options is not APIHelper.SKIP:
            self.parking_options = parking_options 
        if accessibility_options is not APIHelper.SKIP:
            self.accessibility_options = accessibility_options 
        if generative_summary is not APIHelper.SKIP:
            self.generative_summary = generative_summary 
        if reservable is not APIHelper.SKIP:
            self.reservable = reservable 
        if serves_beer is not APIHelper.SKIP:
            self.serves_beer = serves_beer 
        if serves_wine is not APIHelper.SKIP:
            self.serves_wine = serves_wine 
        if serves_cocktails is not APIHelper.SKIP:
            self.serves_cocktails = serves_cocktails 
        if current_secondary_opening_hours is not APIHelper.SKIP:
            self.current_secondary_opening_hours = current_secondary_opening_hours 
        if regular_secondary_opening_hours is not APIHelper.SKIP:
            self.regular_secondary_opening_hours = regular_secondary_opening_hours 
        if allows_dogs is not APIHelper.SKIP:
            self.allows_dogs = allows_dogs 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        types = dictionary.get("types") if dictionary.get("types") else None
        formatted_address = dictionary.get("formattedAddress") if dictionary.get("formattedAddress") else None
        address_components = None
        if dictionary.get('addressComponents') is not None:
            address_components = [AddressComponent6.from_dictionary(x) for x in dictionary.get('addressComponents')]
        plus_code = PlusCode8.from_dictionary(dictionary.get('plusCode')) if dictionary.get('plusCode') else None
        location = Location.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        viewport = Viewport10.from_dictionary(dictionary.get('viewport')) if dictionary.get('viewport') else None
        rating = dictionary.get("rating") if dictionary.get("rating") else None
        google_maps_uri = dictionary.get("googleMapsUri") if dictionary.get("googleMapsUri") else None
        website_uri = dictionary.get("websiteUri") if dictionary.get("websiteUri") else None
        regular_opening_hours = RegularOpeningHours.from_dictionary(dictionary.get('regularOpeningHours')) if dictionary.get('regularOpeningHours') else None
        utc_offset_minutes = dictionary.get("utcOffsetMinutes") if dictionary.get("utcOffsetMinutes") else None
        adr_format_address = dictionary.get("adrFormatAddress") if dictionary.get("adrFormatAddress") else None
        business_status = dictionary.get("businessStatus") if dictionary.get("businessStatus") else None
        user_rating_count = dictionary.get("userRatingCount") if dictionary.get("userRatingCount") else None
        icon_mask_base_uri = dictionary.get("iconMaskBaseUri") if dictionary.get("iconMaskBaseUri") else None
        icon_background_color = dictionary.get("iconBackgroundColor") if dictionary.get("iconBackgroundColor") else None
        display_name = DisplayName.from_dictionary(dictionary.get('displayName')) if dictionary.get('displayName') else None
        takeout = dictionary.get("takeout") if "takeout" in dictionary.keys() else None
        delivery = dictionary.get("delivery") if "delivery" in dictionary.keys() else None
        serves_dinner = dictionary.get("servesDinner") if "servesDinner" in dictionary.keys() else None
        serves_vegetarian_food = dictionary.get("servesVegetarianFood") if "servesVegetarianFood" in dictionary.keys() else None
        current_opening_hours = CurrentOpeningHours4.from_dictionary(dictionary.get('currentOpeningHours')) if dictionary.get('currentOpeningHours') else None
        short_formatted_address = dictionary.get("shortFormattedAddress") if dictionary.get("shortFormattedAddress") else None
        reviews = None
        if dictionary.get('reviews') is not None:
            reviews = [Review2.from_dictionary(x) for x in dictionary.get('reviews')]
        photos = None
        if dictionary.get('photos') is not None:
            photos = [Photo6.from_dictionary(x) for x in dictionary.get('photos')]
        serves_dessert = dictionary.get("servesDessert") if "servesDessert" in dictionary.keys() else None
        payment_options = PaymentOptions2.from_dictionary(dictionary.get('paymentOptions')) if dictionary.get('paymentOptions') else None
        national_phone_number = dictionary.get("nationalPhoneNumber") if dictionary.get("nationalPhoneNumber") else APIHelper.SKIP
        international_phone_number = dictionary.get("internationalPhoneNumber") if dictionary.get("internationalPhoneNumber") else APIHelper.SKIP
        price_level = dictionary.get("priceLevel") if dictionary.get("priceLevel") else APIHelper.SKIP
        primary_type_display_name = PrimaryTypeDisplayName.from_dictionary(dictionary.get('primaryTypeDisplayName')) if 'primaryTypeDisplayName' in dictionary.keys() else APIHelper.SKIP
        dine_in = dictionary.get("dineIn") if "dineIn" in dictionary.keys() else APIHelper.SKIP
        curbside_pickup = dictionary.get("curbsidePickup") if "curbsidePickup" in dictionary.keys() else APIHelper.SKIP
        serves_breakfast = dictionary.get("servesBreakfast") if "servesBreakfast" in dictionary.keys() else APIHelper.SKIP
        serves_lunch = dictionary.get("servesLunch") if "servesLunch" in dictionary.keys() else APIHelper.SKIP
        serves_brunch = dictionary.get("servesBrunch") if "servesBrunch" in dictionary.keys() else APIHelper.SKIP
        primary_type = dictionary.get("primaryType") if dictionary.get("primaryType") else APIHelper.SKIP
        editorial_summary = EditorialSummary.from_dictionary(dictionary.get('editorialSummary')) if 'editorialSummary' in dictionary.keys() else APIHelper.SKIP
        outdoor_seating = dictionary.get("outdoorSeating") if "outdoorSeating" in dictionary.keys() else APIHelper.SKIP
        live_music = dictionary.get("liveMusic") if "liveMusic" in dictionary.keys() else APIHelper.SKIP
        menu_for_children = dictionary.get("menuForChildren") if "menuForChildren" in dictionary.keys() else APIHelper.SKIP
        serves_coffee = dictionary.get("servesCoffee") if "servesCoffee" in dictionary.keys() else APIHelper.SKIP
        good_for_children = dictionary.get("goodForChildren") if "goodForChildren" in dictionary.keys() else APIHelper.SKIP
        restroom = dictionary.get("restroom") if "restroom" in dictionary.keys() else APIHelper.SKIP
        good_for_groups = dictionary.get("goodForGroups") if "goodForGroups" in dictionary.keys() else APIHelper.SKIP
        good_for_watching_sports = dictionary.get("goodForWatchingSports") if "goodForWatchingSports" in dictionary.keys() else APIHelper.SKIP
        parking_options = ParkingOptions2.from_dictionary(dictionary.get('parkingOptions')) if 'parkingOptions' in dictionary.keys() else APIHelper.SKIP
        accessibility_options = AccessibilityOptions2.from_dictionary(dictionary.get('accessibilityOptions')) if 'accessibilityOptions' in dictionary.keys() else APIHelper.SKIP
        generative_summary = GenerativeSummary2.from_dictionary(dictionary.get('generativeSummary')) if 'generativeSummary' in dictionary.keys() else APIHelper.SKIP
        reservable = dictionary.get("reservable") if "reservable" in dictionary.keys() else APIHelper.SKIP
        serves_beer = dictionary.get("servesBeer") if "servesBeer" in dictionary.keys() else APIHelper.SKIP
        serves_wine = dictionary.get("servesWine") if "servesWine" in dictionary.keys() else APIHelper.SKIP
        serves_cocktails = dictionary.get("servesCocktails") if "servesCocktails" in dictionary.keys() else APIHelper.SKIP
        current_secondary_opening_hours = None
        if dictionary.get('currentSecondaryOpeningHours') is not None:
            current_secondary_opening_hours = [CurrentSecondaryOpeningHour.from_dictionary(x) for x in dictionary.get('currentSecondaryOpeningHours')]
        else:
            current_secondary_opening_hours = APIHelper.SKIP
        regular_secondary_opening_hours = None
        if dictionary.get('regularSecondaryOpeningHours') is not None:
            regular_secondary_opening_hours = [RegularSecondaryOpeningHour.from_dictionary(x) for x in dictionary.get('regularSecondaryOpeningHours')]
        else:
            regular_secondary_opening_hours = APIHelper.SKIP
        allows_dogs = dictionary.get("allowsDogs") if "allowsDogs" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   id,
                   types,
                   formatted_address,
                   address_components,
                   plus_code,
                   location,
                   viewport,
                   rating,
                   google_maps_uri,
                   website_uri,
                   regular_opening_hours,
                   utc_offset_minutes,
                   adr_format_address,
                   business_status,
                   user_rating_count,
                   icon_mask_base_uri,
                   icon_background_color,
                   display_name,
                   takeout,
                   delivery,
                   serves_dinner,
                   serves_vegetarian_food,
                   current_opening_hours,
                   short_formatted_address,
                   reviews,
                   photos,
                   serves_dessert,
                   payment_options,
                   national_phone_number,
                   international_phone_number,
                   price_level,
                   primary_type_display_name,
                   dine_in,
                   curbside_pickup,
                   serves_breakfast,
                   serves_lunch,
                   serves_brunch,
                   primary_type,
                   editorial_summary,
                   outdoor_seating,
                   live_music,
                   menu_for_children,
                   serves_coffee,
                   good_for_children,
                   restroom,
                   good_for_groups,
                   good_for_watching_sports,
                   parking_options,
                   accessibility_options,
                   generative_summary,
                   reservable,
                   serves_beer,
                   serves_wine,
                   serves_cocktails,
                   current_secondary_opening_hours,
                   regular_secondary_opening_hours,
                   allows_dogs)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'id={self.id!r}, '
                f'types={self.types!r}, '
                f'national_phone_number={(self.national_phone_number if hasattr(self, "national_phone_number") else None)!r}, '
                f'international_phone_number={(self.international_phone_number if hasattr(self, "international_phone_number") else None)!r}, '
                f'formatted_address={self.formatted_address!r}, '
                f'address_components={self.address_components!r}, '
                f'plus_code={self.plus_code!r}, '
                f'location={self.location!r}, '
                f'viewport={self.viewport!r}, '
                f'rating={self.rating!r}, '
                f'google_maps_uri={self.google_maps_uri!r}, '
                f'website_uri={self.website_uri!r}, '
                f'regular_opening_hours={self.regular_opening_hours!r}, '
                f'utc_offset_minutes={self.utc_offset_minutes!r}, '
                f'adr_format_address={self.adr_format_address!r}, '
                f'business_status={self.business_status!r}, '
                f'price_level={(self.price_level if hasattr(self, "price_level") else None)!r}, '
                f'user_rating_count={self.user_rating_count!r}, '
                f'icon_mask_base_uri={self.icon_mask_base_uri!r}, '
                f'icon_background_color={self.icon_background_color!r}, '
                f'display_name={self.display_name!r}, '
                f'primary_type_display_name={(self.primary_type_display_name if hasattr(self, "primary_type_display_name") else None)!r}, '
                f'takeout={self.takeout!r}, '
                f'delivery={self.delivery!r}, '
                f'dine_in={(self.dine_in if hasattr(self, "dine_in") else None)!r}, '
                f'curbside_pickup={(self.curbside_pickup if hasattr(self, "curbside_pickup") else None)!r}, '
                f'serves_breakfast={(self.serves_breakfast if hasattr(self, "serves_breakfast") else None)!r}, '
                f'serves_lunch={(self.serves_lunch if hasattr(self, "serves_lunch") else None)!r}, '
                f'serves_dinner={self.serves_dinner!r}, '
                f'serves_brunch={(self.serves_brunch if hasattr(self, "serves_brunch") else None)!r}, '
                f'serves_vegetarian_food={self.serves_vegetarian_food!r}, '
                f'current_opening_hours={self.current_opening_hours!r}, '
                f'primary_type={(self.primary_type if hasattr(self, "primary_type") else None)!r}, '
                f'short_formatted_address={self.short_formatted_address!r}, '
                f'editorial_summary={(self.editorial_summary if hasattr(self, "editorial_summary") else None)!r}, '
                f'reviews={self.reviews!r}, '
                f'photos={self.photos!r}, '
                f'outdoor_seating={(self.outdoor_seating if hasattr(self, "outdoor_seating") else None)!r}, '
                f'live_music={(self.live_music if hasattr(self, "live_music") else None)!r}, '
                f'menu_for_children={(self.menu_for_children if hasattr(self, "menu_for_children") else None)!r}, '
                f'serves_dessert={self.serves_dessert!r}, '
                f'serves_coffee={(self.serves_coffee if hasattr(self, "serves_coffee") else None)!r}, '
                f'good_for_children={(self.good_for_children if hasattr(self, "good_for_children") else None)!r}, '
                f'restroom={(self.restroom if hasattr(self, "restroom") else None)!r}, '
                f'good_for_groups={(self.good_for_groups if hasattr(self, "good_for_groups") else None)!r}, '
                f'good_for_watching_sports={(self.good_for_watching_sports if hasattr(self, "good_for_watching_sports") else None)!r}, '
                f'payment_options={self.payment_options!r}, '
                f'parking_options={(self.parking_options if hasattr(self, "parking_options") else None)!r}, '
                f'accessibility_options={(self.accessibility_options if hasattr(self, "accessibility_options") else None)!r}, '
                f'generative_summary={(self.generative_summary if hasattr(self, "generative_summary") else None)!r}, '
                f'reservable={(self.reservable if hasattr(self, "reservable") else None)!r}, '
                f'serves_beer={(self.serves_beer if hasattr(self, "serves_beer") else None)!r}, '
                f'serves_wine={(self.serves_wine if hasattr(self, "serves_wine") else None)!r}, '
                f'serves_cocktails={(self.serves_cocktails if hasattr(self, "serves_cocktails") else None)!r}, '
                f'current_secondary_opening_hours={(self.current_secondary_opening_hours if hasattr(self, "current_secondary_opening_hours") else None)!r}, '
                f'regular_secondary_opening_hours={(self.regular_secondary_opening_hours if hasattr(self, "regular_secondary_opening_hours") else None)!r}, '
                f'allows_dogs={(self.allows_dogs if hasattr(self, "allows_dogs") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'id={self.id!s}, '
                f'types={self.types!s}, '
                f'national_phone_number={(self.national_phone_number if hasattr(self, "national_phone_number") else None)!s}, '
                f'international_phone_number={(self.international_phone_number if hasattr(self, "international_phone_number") else None)!s}, '
                f'formatted_address={self.formatted_address!s}, '
                f'address_components={self.address_components!s}, '
                f'plus_code={self.plus_code!s}, '
                f'location={self.location!s}, '
                f'viewport={self.viewport!s}, '
                f'rating={self.rating!s}, '
                f'google_maps_uri={self.google_maps_uri!s}, '
                f'website_uri={self.website_uri!s}, '
                f'regular_opening_hours={self.regular_opening_hours!s}, '
                f'utc_offset_minutes={self.utc_offset_minutes!s}, '
                f'adr_format_address={self.adr_format_address!s}, '
                f'business_status={self.business_status!s}, '
                f'price_level={(self.price_level if hasattr(self, "price_level") else None)!s}, '
                f'user_rating_count={self.user_rating_count!s}, '
                f'icon_mask_base_uri={self.icon_mask_base_uri!s}, '
                f'icon_background_color={self.icon_background_color!s}, '
                f'display_name={self.display_name!s}, '
                f'primary_type_display_name={(self.primary_type_display_name if hasattr(self, "primary_type_display_name") else None)!s}, '
                f'takeout={self.takeout!s}, '
                f'delivery={self.delivery!s}, '
                f'dine_in={(self.dine_in if hasattr(self, "dine_in") else None)!s}, '
                f'curbside_pickup={(self.curbside_pickup if hasattr(self, "curbside_pickup") else None)!s}, '
                f'serves_breakfast={(self.serves_breakfast if hasattr(self, "serves_breakfast") else None)!s}, '
                f'serves_lunch={(self.serves_lunch if hasattr(self, "serves_lunch") else None)!s}, '
                f'serves_dinner={self.serves_dinner!s}, '
                f'serves_brunch={(self.serves_brunch if hasattr(self, "serves_brunch") else None)!s}, '
                f'serves_vegetarian_food={self.serves_vegetarian_food!s}, '
                f'current_opening_hours={self.current_opening_hours!s}, '
                f'primary_type={(self.primary_type if hasattr(self, "primary_type") else None)!s}, '
                f'short_formatted_address={self.short_formatted_address!s}, '
                f'editorial_summary={(self.editorial_summary if hasattr(self, "editorial_summary") else None)!s}, '
                f'reviews={self.reviews!s}, '
                f'photos={self.photos!s}, '
                f'outdoor_seating={(self.outdoor_seating if hasattr(self, "outdoor_seating") else None)!s}, '
                f'live_music={(self.live_music if hasattr(self, "live_music") else None)!s}, '
                f'menu_for_children={(self.menu_for_children if hasattr(self, "menu_for_children") else None)!s}, '
                f'serves_dessert={self.serves_dessert!s}, '
                f'serves_coffee={(self.serves_coffee if hasattr(self, "serves_coffee") else None)!s}, '
                f'good_for_children={(self.good_for_children if hasattr(self, "good_for_children") else None)!s}, '
                f'restroom={(self.restroom if hasattr(self, "restroom") else None)!s}, '
                f'good_for_groups={(self.good_for_groups if hasattr(self, "good_for_groups") else None)!s}, '
                f'good_for_watching_sports={(self.good_for_watching_sports if hasattr(self, "good_for_watching_sports") else None)!s}, '
                f'payment_options={self.payment_options!s}, '
                f'parking_options={(self.parking_options if hasattr(self, "parking_options") else None)!s}, '
                f'accessibility_options={(self.accessibility_options if hasattr(self, "accessibility_options") else None)!s}, '
                f'generative_summary={(self.generative_summary if hasattr(self, "generative_summary") else None)!s}, '
                f'reservable={(self.reservable if hasattr(self, "reservable") else None)!s}, '
                f'serves_beer={(self.serves_beer if hasattr(self, "serves_beer") else None)!s}, '
                f'serves_wine={(self.serves_wine if hasattr(self, "serves_wine") else None)!s}, '
                f'serves_cocktails={(self.serves_cocktails if hasattr(self, "serves_cocktails") else None)!s}, '
                f'current_secondary_opening_hours={(self.current_secondary_opening_hours if hasattr(self, "current_secondary_opening_hours") else None)!s}, '
                f'regular_secondary_opening_hours={(self.regular_secondary_opening_hours if hasattr(self, "regular_secondary_opening_hours") else None)!s}, '
                f'allows_dogs={(self.allows_dogs if hasattr(self, "allows_dogs") else None)!s})')
