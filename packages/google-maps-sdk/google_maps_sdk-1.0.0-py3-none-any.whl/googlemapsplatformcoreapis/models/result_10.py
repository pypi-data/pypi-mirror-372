# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.geometry_2 import Geometry2
from googlemapsplatformcoreapis.models.opening_hours_2 import OpeningHours2
from googlemapsplatformcoreapis.models.photo import Photo
from googlemapsplatformcoreapis.models.plus_code_2 import PlusCode2


class Result10(object):

    """Implementation of the 'Result10' model.

    Attributes:
        business_status (str): The model property of type str.
        formatted_address (str): The model property of type str.
        geometry (Geometry2): The model property of type Geometry2.
        icon (str): The model property of type str.
        icon_background_color (str): The model property of type str.
        icon_mask_base_uri (str): The model property of type str.
        name (str): The model property of type str.
        opening_hours (OpeningHours2): The model property of type
            OpeningHours2.
        photos (List[Photo]): The model property of type List[Photo].
        place_id (str): The model property of type str.
        plus_code (PlusCode2): The model property of type PlusCode2.
        price_level (int): The model property of type int.
        rating (float): The model property of type float.
        reference (str): The model property of type str.
        types (List[str]): The model property of type List[str].
        user_ratings_total (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "business_status": 'business_status',
        "formatted_address": 'formatted_address',
        "geometry": 'geometry',
        "icon": 'icon',
        "icon_background_color": 'icon_background_color',
        "icon_mask_base_uri": 'icon_mask_base_uri',
        "name": 'name',
        "opening_hours": 'opening_hours',
        "photos": 'photos',
        "place_id": 'place_id',
        "plus_code": 'plus_code',
        "rating": 'rating',
        "reference": 'reference',
        "types": 'types',
        "user_ratings_total": 'user_ratings_total',
        "price_level": 'price_level'
    }

    _optionals = [
        'price_level',
    ]

    def __init__(self,
                 business_status=None,
                 formatted_address=None,
                 geometry=None,
                 icon=None,
                 icon_background_color=None,
                 icon_mask_base_uri=None,
                 name=None,
                 opening_hours=None,
                 photos=None,
                 place_id=None,
                 plus_code=None,
                 rating=None,
                 reference=None,
                 types=None,
                 user_ratings_total=None,
                 price_level=APIHelper.SKIP):
        """Constructor for the Result10 class"""

        # Initialize members of the class
        self.business_status = business_status 
        self.formatted_address = formatted_address 
        self.geometry = geometry 
        self.icon = icon 
        self.icon_background_color = icon_background_color 
        self.icon_mask_base_uri = icon_mask_base_uri 
        self.name = name 
        self.opening_hours = opening_hours 
        self.photos = photos 
        self.place_id = place_id 
        self.plus_code = plus_code 
        if price_level is not APIHelper.SKIP:
            self.price_level = price_level 
        self.rating = rating 
        self.reference = reference 
        self.types = types 
        self.user_ratings_total = user_ratings_total 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        business_status = dictionary.get("business_status") if dictionary.get("business_status") else None
        formatted_address = dictionary.get("formatted_address") if dictionary.get("formatted_address") else None
        geometry = Geometry2.from_dictionary(dictionary.get('geometry')) if dictionary.get('geometry') else None
        icon = dictionary.get("icon") if dictionary.get("icon") else None
        icon_background_color = dictionary.get("icon_background_color") if dictionary.get("icon_background_color") else None
        icon_mask_base_uri = dictionary.get("icon_mask_base_uri") if dictionary.get("icon_mask_base_uri") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        opening_hours = OpeningHours2.from_dictionary(dictionary.get('opening_hours')) if dictionary.get('opening_hours') else None
        photos = None
        if dictionary.get('photos') is not None:
            photos = [Photo.from_dictionary(x) for x in dictionary.get('photos')]
        place_id = dictionary.get("place_id") if dictionary.get("place_id") else None
        plus_code = PlusCode2.from_dictionary(dictionary.get('plus_code')) if dictionary.get('plus_code') else None
        rating = dictionary.get("rating") if dictionary.get("rating") else None
        reference = dictionary.get("reference") if dictionary.get("reference") else None
        types = dictionary.get("types") if dictionary.get("types") else None
        user_ratings_total = dictionary.get("user_ratings_total") if dictionary.get("user_ratings_total") else None
        price_level = dictionary.get("price_level") if dictionary.get("price_level") else APIHelper.SKIP
        # Return an object of this model
        return cls(business_status,
                   formatted_address,
                   geometry,
                   icon,
                   icon_background_color,
                   icon_mask_base_uri,
                   name,
                   opening_hours,
                   photos,
                   place_id,
                   plus_code,
                   rating,
                   reference,
                   types,
                   user_ratings_total,
                   price_level)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'business_status={self.business_status!r}, '
                f'formatted_address={self.formatted_address!r}, '
                f'geometry={self.geometry!r}, '
                f'icon={self.icon!r}, '
                f'icon_background_color={self.icon_background_color!r}, '
                f'icon_mask_base_uri={self.icon_mask_base_uri!r}, '
                f'name={self.name!r}, '
                f'opening_hours={self.opening_hours!r}, '
                f'photos={self.photos!r}, '
                f'place_id={self.place_id!r}, '
                f'plus_code={self.plus_code!r}, '
                f'price_level={(self.price_level if hasattr(self, "price_level") else None)!r}, '
                f'rating={self.rating!r}, '
                f'reference={self.reference!r}, '
                f'types={self.types!r}, '
                f'user_ratings_total={self.user_ratings_total!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'business_status={self.business_status!s}, '
                f'formatted_address={self.formatted_address!s}, '
                f'geometry={self.geometry!s}, '
                f'icon={self.icon!s}, '
                f'icon_background_color={self.icon_background_color!s}, '
                f'icon_mask_base_uri={self.icon_mask_base_uri!s}, '
                f'name={self.name!s}, '
                f'opening_hours={self.opening_hours!s}, '
                f'photos={self.photos!s}, '
                f'place_id={self.place_id!s}, '
                f'plus_code={self.plus_code!s}, '
                f'price_level={(self.price_level if hasattr(self, "price_level") else None)!s}, '
                f'rating={self.rating!s}, '
                f'reference={self.reference!s}, '
                f'types={self.types!s}, '
                f'user_ratings_total={self.user_ratings_total!s})')
