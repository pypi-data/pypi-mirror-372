# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.overview import Overview


class GenerativeSummary(object):

    """Implementation of the 'GenerativeSummary' model.

    Attributes:
        overview (Overview): The model property of type Overview.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "overview": 'overview'
    }

    def __init__(self,
                 overview=None):
        """Constructor for the GenerativeSummary class"""

        # Initialize members of the class
        self.overview = overview 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        overview = Overview.from_dictionary(dictionary.get('overview')) if dictionary.get('overview') else None
        # Return an object of this model
        return cls(overview)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.overview,
                                           type_callable=lambda value: Overview.validate(value),
                                           is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('overview'),
                                       type_callable=lambda value: Overview.validate(value),
                                       is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'overview={self.overview!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'overview={self.overview!s})')
