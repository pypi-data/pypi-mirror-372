# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.high import High
from googlemapsplatformcoreapis.models.low import Low


class Viewport10(object):

    """Implementation of the 'Viewport10' model.

    Attributes:
        low (Low): The model property of type Low.
        high (High): The model property of type High.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "low": 'low',
        "high": 'high'
    }

    def __init__(self,
                 low=None,
                 high=None):
        """Constructor for the Viewport10 class"""

        # Initialize members of the class
        self.low = low 
        self.high = high 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        low = Low.from_dictionary(dictionary.get('low')) if dictionary.get('low') else None
        high = High.from_dictionary(dictionary.get('high')) if dictionary.get('high') else None
        # Return an object of this model
        return cls(low,
                   high)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.low,
                                           type_callable=lambda value: Low.validate(value),
                                           is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.high,
                                            type_callable=lambda value: High.validate(value),
                                            is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('low'),
                                       type_callable=lambda value: Low.validate(value),
                                       is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('high'),
                                        type_callable=lambda value: High.validate(value),
                                        is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'low={self.low!r}, '
                f'high={self.high!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'low={self.low!s}, '
                f'high={self.high!s})')
