# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.main_text_matched_substring import MainTextMatchedSubstring


class StructuredFormatting2(object):

    """Implementation of the 'StructuredFormatting2' model.

    Attributes:
        main_text (str): The model property of type str.
        main_text_matched_substrings (List[MainTextMatchedSubstring]): The
            model property of type List[MainTextMatchedSubstring].
        secondary_text (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "main_text": 'main_text',
        "main_text_matched_substrings": 'main_text_matched_substrings',
        "secondary_text": 'secondary_text'
    }

    def __init__(self,
                 main_text=None,
                 main_text_matched_substrings=None,
                 secondary_text=None):
        """Constructor for the StructuredFormatting2 class"""

        # Initialize members of the class
        self.main_text = main_text 
        self.main_text_matched_substrings = main_text_matched_substrings 
        self.secondary_text = secondary_text 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        main_text = dictionary.get("main_text") if dictionary.get("main_text") else None
        main_text_matched_substrings = None
        if dictionary.get('main_text_matched_substrings') is not None:
            main_text_matched_substrings = [MainTextMatchedSubstring.from_dictionary(x) for x in dictionary.get('main_text_matched_substrings')]
        secondary_text = dictionary.get("secondary_text") if dictionary.get("secondary_text") else None
        # Return an object of this model
        return cls(main_text,
                   main_text_matched_substrings,
                   secondary_text)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'main_text={self.main_text!r}, '
                f'main_text_matched_substrings={self.main_text_matched_substrings!r}, '
                f'secondary_text={self.secondary_text!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'main_text={self.main_text!s}, '
                f'main_text_matched_substrings={self.main_text_matched_substrings!s}, '
                f'secondary_text={self.secondary_text!s})')
