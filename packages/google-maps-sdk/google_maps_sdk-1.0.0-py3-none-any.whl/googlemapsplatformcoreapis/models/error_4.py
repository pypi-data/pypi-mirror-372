# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.error_5 import Error5


class Error4(object):

    """Implementation of the 'Error4' model.

    Attributes:
        code (int): The model property of type int.
        message (str): The model property of type str.
        errors (List[Error5]): The model property of type List[Error5].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'code',
        "message": 'message',
        "errors": 'errors'
    }

    def __init__(self,
                 code=None,
                 message=None,
                 errors=None):
        """Constructor for the Error4 class"""

        # Initialize members of the class
        self.code = code 
        self.message = message 
        self.errors = errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("code") if dictionary.get("code") else None
        message = dictionary.get("message") if dictionary.get("message") else None
        errors = None
        if dictionary.get('errors') is not None:
            errors = [Error5.from_dictionary(x) for x in dictionary.get('errors')]
        # Return an object of this model
        return cls(code,
                   message,
                   errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!r}, '
                f'message={self.message!r}, '
                f'errors={self.errors!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={self.code!s}, '
                f'message={self.message!s}, '
                f'errors={self.errors!s})')
