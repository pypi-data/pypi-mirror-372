# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.row import Row


class M200OK8(object):

    """Implementation of the '200 OK8' model.

    Attributes:
        destination_addresses (List[str]): The model property of type
            List[str].
        origin_addresses (List[str]): The model property of type List[str].
        rows (List[Row]): The model property of type List[Row].
        status (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "destination_addresses": 'destination_addresses',
        "origin_addresses": 'origin_addresses',
        "rows": 'rows',
        "status": 'status'
    }

    def __init__(self,
                 destination_addresses=None,
                 origin_addresses=None,
                 rows=None,
                 status=None):
        """Constructor for the M200OK8 class"""

        # Initialize members of the class
        self.destination_addresses = destination_addresses 
        self.origin_addresses = origin_addresses 
        self.rows = rows 
        self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        destination_addresses = dictionary.get("destination_addresses") if dictionary.get("destination_addresses") else None
        origin_addresses = dictionary.get("origin_addresses") if dictionary.get("origin_addresses") else None
        rows = None
        if dictionary.get('rows') is not None:
            rows = [Row.from_dictionary(x) for x in dictionary.get('rows')]
        status = dictionary.get("status") if dictionary.get("status") else None
        # Return an object of this model
        return cls(destination_addresses,
                   origin_addresses,
                   rows,
                   status)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'destination_addresses={self.destination_addresses!r}, '
                f'origin_addresses={self.origin_addresses!r}, '
                f'rows={self.rows!r}, '
                f'status={self.status!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'destination_addresses={self.destination_addresses!s}, '
                f'origin_addresses={self.origin_addresses!s}, '
                f'rows={self.rows!s}, '
                f'status={self.status!s})')
