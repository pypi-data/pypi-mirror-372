# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.dash import DASH
from googlemapsplatformcoreapis.models.hls import HLS
from googlemapsplatformcoreapis.models.image import IMAGE
from googlemapsplatformcoreapis.models.mp_4_high import MP4HIGH
from googlemapsplatformcoreapis.models.mp_4_low import MP4LOW
from googlemapsplatformcoreapis.models.mp_4_medium import MP4MEDIUM


class Uris(object):

    """Implementation of the 'Uris' model.

    Attributes:
        image (IMAGE): The model property of type IMAGE.
        mp_4_high (MP4HIGH): The model property of type MP4HIGH.
        mp_4_low (MP4LOW): The model property of type MP4LOW.
        mp_4_medium (MP4MEDIUM): The model property of type MP4MEDIUM.
        dash (DASH): The model property of type DASH.
        hls (HLS): The model property of type HLS.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "image": 'IMAGE',
        "mp_4_high": 'MP4_HIGH',
        "mp_4_low": 'MP4_LOW',
        "mp_4_medium": 'MP4_MEDIUM',
        "dash": 'DASH',
        "hls": 'HLS'
    }

    def __init__(self,
                 image=None,
                 mp_4_high=None,
                 mp_4_low=None,
                 mp_4_medium=None,
                 dash=None,
                 hls=None):
        """Constructor for the Uris class"""

        # Initialize members of the class
        self.image = image 
        self.mp_4_high = mp_4_high 
        self.mp_4_low = mp_4_low 
        self.mp_4_medium = mp_4_medium 
        self.dash = dash 
        self.hls = hls 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        image = IMAGE.from_dictionary(dictionary.get('IMAGE')) if dictionary.get('IMAGE') else None
        mp_4_high = MP4HIGH.from_dictionary(dictionary.get('MP4_HIGH')) if dictionary.get('MP4_HIGH') else None
        mp_4_low = MP4LOW.from_dictionary(dictionary.get('MP4_LOW')) if dictionary.get('MP4_LOW') else None
        mp_4_medium = MP4MEDIUM.from_dictionary(dictionary.get('MP4_MEDIUM')) if dictionary.get('MP4_MEDIUM') else None
        dash = DASH.from_dictionary(dictionary.get('DASH')) if dictionary.get('DASH') else None
        hls = HLS.from_dictionary(dictionary.get('HLS')) if dictionary.get('HLS') else None
        # Return an object of this model
        return cls(image,
                   mp_4_high,
                   mp_4_low,
                   mp_4_medium,
                   dash,
                   hls)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'image={self.image!r}, '
                f'mp_4_high={self.mp_4_high!r}, '
                f'mp_4_low={self.mp_4_low!r}, '
                f'mp_4_medium={self.mp_4_medium!r}, '
                f'dash={self.dash!r}, '
                f'hls={self.hls!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'image={self.image!s}, '
                f'mp_4_high={self.mp_4_high!s}, '
                f'mp_4_low={self.mp_4_low!s}, '
                f'mp_4_medium={self.mp_4_medium!s}, '
                f'dash={self.dash!s}, '
                f'hls={self.hls!s})')
