# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class ParkingOptions2(object):

    """Implementation of the 'ParkingOptions2' model.

    Attributes:
        paid_street_parking (bool): The model property of type bool.
        valet_parking (bool): The model property of type bool.
        paid_garage_parking (bool): The model property of type bool.
        free_street_parking (bool): The model property of type bool.
        free_parking_lot (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "paid_street_parking": 'paidStreetParking',
        "valet_parking": 'valetParking',
        "paid_garage_parking": 'paidGarageParking',
        "free_street_parking": 'freeStreetParking',
        "free_parking_lot": 'freeParkingLot'
    }

    _optionals = [
        'paid_street_parking',
        'valet_parking',
        'paid_garage_parking',
        'free_street_parking',
        'free_parking_lot',
    ]

    def __init__(self,
                 paid_street_parking=APIHelper.SKIP,
                 valet_parking=APIHelper.SKIP,
                 paid_garage_parking=APIHelper.SKIP,
                 free_street_parking=APIHelper.SKIP,
                 free_parking_lot=APIHelper.SKIP):
        """Constructor for the ParkingOptions2 class"""

        # Initialize members of the class
        if paid_street_parking is not APIHelper.SKIP:
            self.paid_street_parking = paid_street_parking 
        if valet_parking is not APIHelper.SKIP:
            self.valet_parking = valet_parking 
        if paid_garage_parking is not APIHelper.SKIP:
            self.paid_garage_parking = paid_garage_parking 
        if free_street_parking is not APIHelper.SKIP:
            self.free_street_parking = free_street_parking 
        if free_parking_lot is not APIHelper.SKIP:
            self.free_parking_lot = free_parking_lot 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        paid_street_parking = dictionary.get("paidStreetParking") if "paidStreetParking" in dictionary.keys() else APIHelper.SKIP
        valet_parking = dictionary.get("valetParking") if "valetParking" in dictionary.keys() else APIHelper.SKIP
        paid_garage_parking = dictionary.get("paidGarageParking") if "paidGarageParking" in dictionary.keys() else APIHelper.SKIP
        free_street_parking = dictionary.get("freeStreetParking") if "freeStreetParking" in dictionary.keys() else APIHelper.SKIP
        free_parking_lot = dictionary.get("freeParkingLot") if "freeParkingLot" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(paid_street_parking,
                   valet_parking,
                   paid_garage_parking,
                   free_street_parking,
                   free_parking_lot)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'paid_street_parking={(self.paid_street_parking if hasattr(self, "paid_street_parking") else None)!r}, '
                f'valet_parking={(self.valet_parking if hasattr(self, "valet_parking") else None)!r}, '
                f'paid_garage_parking={(self.paid_garage_parking if hasattr(self, "paid_garage_parking") else None)!r}, '
                f'free_street_parking={(self.free_street_parking if hasattr(self, "free_street_parking") else None)!r}, '
                f'free_parking_lot={(self.free_parking_lot if hasattr(self, "free_parking_lot") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'paid_street_parking={(self.paid_street_parking if hasattr(self, "paid_street_parking") else None)!s}, '
                f'valet_parking={(self.valet_parking if hasattr(self, "valet_parking") else None)!s}, '
                f'paid_garage_parking={(self.paid_garage_parking if hasattr(self, "paid_garage_parking") else None)!s}, '
                f'free_street_parking={(self.free_street_parking if hasattr(self, "free_street_parking") else None)!s}, '
                f'free_parking_lot={(self.free_parking_lot if hasattr(self, "free_parking_lot") else None)!s})')
