# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class M200OK46(object):

    """Implementation of the '200 OK46' model.

    Attributes:
        dst_offset (int): The model property of type int.
        raw_offset (int): The model property of type int.
        status (str): The model property of type str.
        time_zone_id (str): The model property of type str.
        time_zone_name (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "dst_offset": 'dstOffset',
        "raw_offset": 'rawOffset',
        "status": 'status',
        "time_zone_id": 'timeZoneId',
        "time_zone_name": 'timeZoneName'
    }

    def __init__(self,
                 dst_offset=None,
                 raw_offset=None,
                 status=None,
                 time_zone_id=None,
                 time_zone_name=None):
        """Constructor for the M200OK46 class"""

        # Initialize members of the class
        self.dst_offset = dst_offset 
        self.raw_offset = raw_offset 
        self.status = status 
        self.time_zone_id = time_zone_id 
        self.time_zone_name = time_zone_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        dst_offset = dictionary.get("dstOffset") if dictionary.get("dstOffset") else None
        raw_offset = dictionary.get("rawOffset") if dictionary.get("rawOffset") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        time_zone_id = dictionary.get("timeZoneId") if dictionary.get("timeZoneId") else None
        time_zone_name = dictionary.get("timeZoneName") if dictionary.get("timeZoneName") else None
        # Return an object of this model
        return cls(dst_offset,
                   raw_offset,
                   status,
                   time_zone_id,
                   time_zone_name)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'dst_offset={self.dst_offset!r}, '
                f'raw_offset={self.raw_offset!r}, '
                f'status={self.status!r}, '
                f'time_zone_id={self.time_zone_id!r}, '
                f'time_zone_name={self.time_zone_name!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'dst_offset={self.dst_offset!s}, '
                f'raw_offset={self.raw_offset!s}, '
                f'status={self.status!s}, '
                f'time_zone_id={self.time_zone_id!s}, '
                f'time_zone_name={self.time_zone_name!s})')
