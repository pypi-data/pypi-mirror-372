# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class ComponentName(object):

    """Implementation of the 'ComponentName' model.

    Attributes:
        text (str): The model property of type str.
        language_code (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "text": 'text',
        "language_code": 'languageCode'
    }

    _optionals = [
        'language_code',
    ]

    def __init__(self,
                 text=None,
                 language_code=APIHelper.SKIP):
        """Constructor for the ComponentName class"""

        # Initialize members of the class
        self.text = text 
        if language_code is not APIHelper.SKIP:
            self.language_code = language_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        text = dictionary.get("text") if dictionary.get("text") else None
        language_code = dictionary.get("languageCode") if dictionary.get("languageCode") else APIHelper.SKIP
        # Return an object of this model
        return cls(text,
                   language_code)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!r}, '
                f'language_code={(self.language_code if hasattr(self, "language_code") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!s}, '
                f'language_code={(self.language_code if hasattr(self, "language_code") else None)!s})')
