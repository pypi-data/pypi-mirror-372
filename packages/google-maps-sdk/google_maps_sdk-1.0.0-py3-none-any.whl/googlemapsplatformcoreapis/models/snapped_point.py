# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.location import Location


class SnappedPoint(object):

    """Implementation of the 'SnappedPoint' model.

    Attributes:
        location (Location): The model property of type Location.
        original_index (int): The model property of type int.
        place_id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "location": 'location',
        "original_index": 'originalIndex',
        "place_id": 'placeId'
    }

    def __init__(self,
                 location=None,
                 original_index=None,
                 place_id=None):
        """Constructor for the SnappedPoint class"""

        # Initialize members of the class
        self.location = location 
        self.original_index = original_index 
        self.place_id = place_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        location = Location.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        original_index = dictionary.get("originalIndex") if dictionary.get("originalIndex") else None
        place_id = dictionary.get("placeId") if dictionary.get("placeId") else None
        # Return an object of this model
        return cls(location,
                   original_index,
                   place_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'location={self.location!r}, '
                f'original_index={self.original_index!r}, '
                f'place_id={self.place_id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'location={self.location!s}, '
                f'original_index={self.original_index!s}, '
                f'place_id={self.place_id!s})')
