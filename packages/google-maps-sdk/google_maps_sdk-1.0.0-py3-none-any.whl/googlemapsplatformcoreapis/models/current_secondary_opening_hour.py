# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.period_11 import Period11


class CurrentSecondaryOpeningHour(object):

    """Implementation of the 'CurrentSecondaryOpeningHour' model.

    Attributes:
        open_now (bool): The model property of type bool.
        periods (List[Period11]): The model property of type List[Period11].
        weekday_descriptions (List[str]): The model property of type List[str].
        secondary_hours_type (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "open_now": 'openNow',
        "periods": 'periods',
        "weekday_descriptions": 'weekdayDescriptions',
        "secondary_hours_type": 'secondaryHoursType'
    }

    _optionals = [
        'secondary_hours_type',
    ]

    def __init__(self,
                 open_now=None,
                 periods=None,
                 weekday_descriptions=None,
                 secondary_hours_type=APIHelper.SKIP):
        """Constructor for the CurrentSecondaryOpeningHour class"""

        # Initialize members of the class
        self.open_now = open_now 
        self.periods = periods 
        self.weekday_descriptions = weekday_descriptions 
        if secondary_hours_type is not APIHelper.SKIP:
            self.secondary_hours_type = secondary_hours_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        open_now = dictionary.get("openNow") if "openNow" in dictionary.keys() else None
        periods = None
        if dictionary.get('periods') is not None:
            periods = [Period11.from_dictionary(x) for x in dictionary.get('periods')]
        weekday_descriptions = dictionary.get("weekdayDescriptions") if dictionary.get("weekdayDescriptions") else None
        secondary_hours_type = dictionary.get("secondaryHoursType") if dictionary.get("secondaryHoursType") else APIHelper.SKIP
        # Return an object of this model
        return cls(open_now,
                   periods,
                   weekday_descriptions,
                   secondary_hours_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'open_now={self.open_now!r}, '
                f'periods={self.periods!r}, '
                f'weekday_descriptions={self.weekday_descriptions!r}, '
                f'secondary_hours_type={(self.secondary_hours_type if hasattr(self, "secondary_hours_type") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'open_now={self.open_now!s}, '
                f'periods={self.periods!s}, '
                f'weekday_descriptions={self.weekday_descriptions!s}, '
                f'secondary_hours_type={(self.secondary_hours_type if hasattr(self, "secondary_hours_type") else None)!s})')
