# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.metadata_4 import Metadata4
from googlemapsplatformcoreapis.models.uris import Uris


class M200OK4(object):

    """Implementation of the '200 OK4' model.

    Attributes:
        uris (Uris): The model property of type Uris.
        state (str): The model property of type str.
        metadata (Metadata4): The model property of type Metadata4.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "uris": 'uris',
        "state": 'state',
        "metadata": 'metadata'
    }

    def __init__(self,
                 uris=None,
                 state=None,
                 metadata=None):
        """Constructor for the M200OK4 class"""

        # Initialize members of the class
        self.uris = uris 
        self.state = state 
        self.metadata = metadata 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        uris = Uris.from_dictionary(dictionary.get('uris')) if dictionary.get('uris') else None
        state = dictionary.get("state") if dictionary.get("state") else None
        metadata = Metadata4.from_dictionary(dictionary.get('metadata')) if dictionary.get('metadata') else None
        # Return an object of this model
        return cls(uris,
                   state,
                   metadata)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'uris={self.uris!r}, '
                f'state={self.state!r}, '
                f'metadata={self.metadata!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'uris={self.uris!s}, '
                f'state={self.state!s}, '
                f'metadata={self.metadata!s})')
