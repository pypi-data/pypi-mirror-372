# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class AddressComponent2(object):

    """Implementation of the 'AddressComponent2' model.

    Attributes:
        long_name (str): The model property of type str.
        short_name (str): The model property of type str.
        types (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "long_name": 'long_name',
        "short_name": 'short_name',
        "types": 'types'
    }

    def __init__(self,
                 long_name=None,
                 short_name=None,
                 types=None):
        """Constructor for the AddressComponent2 class"""

        # Initialize members of the class
        self.long_name = long_name 
        self.short_name = short_name 
        self.types = types 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        long_name = dictionary.get("long_name") if dictionary.get("long_name") else None
        short_name = dictionary.get("short_name") if dictionary.get("short_name") else None
        types = dictionary.get("types") if dictionary.get("types") else None
        # Return an object of this model
        return cls(long_name,
                   short_name,
                   types)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'long_name={self.long_name!r}, '
                f'short_name={self.short_name!r}, '
                f'types={self.types!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'long_name={self.long_name!s}, '
                f'short_name={self.short_name!s}, '
                f'types={self.types!s})')
