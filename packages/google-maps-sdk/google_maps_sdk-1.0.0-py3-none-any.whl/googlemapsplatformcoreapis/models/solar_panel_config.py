# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.roof_segment_summary import RoofSegmentSummary


class SolarPanelConfig(object):

    """Implementation of the 'SolarPanelConfig' model.

    Attributes:
        panels_count (int): The model property of type int.
        yearly_energy_dc_kwh (float | int): The model property of type float |
            int.
        roof_segment_summaries (List[RoofSegmentSummary]): The model property
            of type List[RoofSegmentSummary].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "panels_count": 'panelsCount',
        "yearly_energy_dc_kwh": 'yearlyEnergyDcKwh',
        "roof_segment_summaries": 'roofSegmentSummaries'
    }

    def __init__(self,
                 panels_count=None,
                 yearly_energy_dc_kwh=None,
                 roof_segment_summaries=None):
        """Constructor for the SolarPanelConfig class"""

        # Initialize members of the class
        self.panels_count = panels_count 
        self.yearly_energy_dc_kwh = yearly_energy_dc_kwh 
        self.roof_segment_summaries = roof_segment_summaries 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from googlemapsplatformcoreapis.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        panels_count = dictionary.get("panelsCount") if dictionary.get("panelsCount") else None
        yearly_energy_dc_kwh = APIHelper.deserialize_union_type(UnionTypeLookUp.get('SolarPanelConfigYearlyEnergyDcKwh'), dictionary.get('yearlyEnergyDcKwh'), False) if dictionary.get('yearlyEnergyDcKwh') is not None else None
        roof_segment_summaries = None
        if dictionary.get('roofSegmentSummaries') is not None:
            roof_segment_summaries = [RoofSegmentSummary.from_dictionary(x) for x in dictionary.get('roofSegmentSummaries')]
        # Return an object of this model
        return cls(panels_count,
                   yearly_energy_dc_kwh,
                   roof_segment_summaries)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from googlemapsplatformcoreapis.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.panels_count,
                                           type_callable=lambda value: isinstance(value, int)) \
                and UnionTypeLookUp.get('SolarPanelConfigYearlyEnergyDcKwh').validate(dictionary.yearly_energy_dc_kwh).is_valid \
                and APIHelper.is_valid_type(value=dictionary.roof_segment_summaries,
                                            type_callable=lambda value: RoofSegmentSummary.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('panelsCount'),
                                       type_callable=lambda value: isinstance(value, int)) \
            and UnionTypeLookUp.get('SolarPanelConfigYearlyEnergyDcKwh').validate(dictionary.get('yearlyEnergyDcKwh')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('roofSegmentSummaries'),
                                        type_callable=lambda value: RoofSegmentSummary.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'panels_count={self.panels_count!r}, '
                f'yearly_energy_dc_kwh={self.yearly_energy_dc_kwh!r}, '
                f'roof_segment_summaries={self.roof_segment_summaries!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'panels_count={self.panels_count!s}, '
                f'yearly_energy_dc_kwh={self.yearly_energy_dc_kwh!s}, '
                f'roof_segment_summaries={self.roof_segment_summaries!s})')
