# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.bounds_2 import Bounds2
from googlemapsplatformcoreapis.models.leg import Leg
from googlemapsplatformcoreapis.models.overview_polyline import OverviewPolyline


class Route(object):

    """Implementation of the 'Route' model.

    Attributes:
        bounds (Bounds2): The model property of type Bounds2.
        copyrights (str): The model property of type str.
        legs (List[Leg]): The model property of type List[Leg].
        overview_polyline (OverviewPolyline): The model property of type
            OverviewPolyline.
        summary (str): The model property of type str.
        warnings (List[str]): The model property of type List[str].
        waypoint_order (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bounds": 'bounds',
        "copyrights": 'copyrights',
        "legs": 'legs',
        "overview_polyline": 'overview_polyline',
        "summary": 'summary',
        "warnings": 'warnings',
        "waypoint_order": 'waypoint_order'
    }

    def __init__(self,
                 bounds=None,
                 copyrights=None,
                 legs=None,
                 overview_polyline=None,
                 summary=None,
                 warnings=None,
                 waypoint_order=None):
        """Constructor for the Route class"""

        # Initialize members of the class
        self.bounds = bounds 
        self.copyrights = copyrights 
        self.legs = legs 
        self.overview_polyline = overview_polyline 
        self.summary = summary 
        self.warnings = warnings 
        self.waypoint_order = waypoint_order 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bounds = Bounds2.from_dictionary(dictionary.get('bounds')) if dictionary.get('bounds') else None
        copyrights = dictionary.get("copyrights") if dictionary.get("copyrights") else None
        legs = None
        if dictionary.get('legs') is not None:
            legs = [Leg.from_dictionary(x) for x in dictionary.get('legs')]
        overview_polyline = OverviewPolyline.from_dictionary(dictionary.get('overview_polyline')) if dictionary.get('overview_polyline') else None
        summary = dictionary.get("summary") if dictionary.get("summary") else None
        warnings = dictionary.get("warnings") if dictionary.get("warnings") else None
        waypoint_order = dictionary.get("waypoint_order") if dictionary.get("waypoint_order") else None
        # Return an object of this model
        return cls(bounds,
                   copyrights,
                   legs,
                   overview_polyline,
                   summary,
                   warnings,
                   waypoint_order)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bounds={self.bounds!r}, '
                f'copyrights={self.copyrights!r}, '
                f'legs={self.legs!r}, '
                f'overview_polyline={self.overview_polyline!r}, '
                f'summary={self.summary!r}, '
                f'warnings={self.warnings!r}, '
                f'waypoint_order={self.waypoint_order!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bounds={self.bounds!s}, '
                f'copyrights={self.copyrights!s}, '
                f'legs={self.legs!s}, '
                f'overview_polyline={self.overview_polyline!s}, '
                f'summary={self.summary!s}, '
                f'warnings={self.warnings!s}, '
                f'waypoint_order={self.waypoint_order!s})')
