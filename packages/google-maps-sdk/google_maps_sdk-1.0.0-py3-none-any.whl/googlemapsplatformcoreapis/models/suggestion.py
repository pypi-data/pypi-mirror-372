# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.place_prediction import PlacePrediction
from googlemapsplatformcoreapis.models.query_prediction import QueryPrediction


class Suggestion(object):

    """Implementation of the 'Suggestion' model.

    Attributes:
        query_prediction (QueryPrediction): The model property of type
            QueryPrediction.
        place_prediction (PlacePrediction): The model property of type
            PlacePrediction.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "query_prediction": 'queryPrediction',
        "place_prediction": 'placePrediction'
    }

    _optionals = [
        'query_prediction',
        'place_prediction',
    ]

    def __init__(self,
                 query_prediction=APIHelper.SKIP,
                 place_prediction=APIHelper.SKIP):
        """Constructor for the Suggestion class"""

        # Initialize members of the class
        if query_prediction is not APIHelper.SKIP:
            self.query_prediction = query_prediction 
        if place_prediction is not APIHelper.SKIP:
            self.place_prediction = place_prediction 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        query_prediction = QueryPrediction.from_dictionary(dictionary.get('queryPrediction')) if 'queryPrediction' in dictionary.keys() else APIHelper.SKIP
        place_prediction = PlacePrediction.from_dictionary(dictionary.get('placePrediction')) if 'placePrediction' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(query_prediction,
                   place_prediction)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'query_prediction={(self.query_prediction if hasattr(self, "query_prediction") else None)!r}, '
                f'place_prediction={(self.place_prediction if hasattr(self, "place_prediction") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'query_prediction={(self.query_prediction if hasattr(self, "query_prediction") else None)!s}, '
                f'place_prediction={(self.place_prediction if hasattr(self, "place_prediction") else None)!s})')
