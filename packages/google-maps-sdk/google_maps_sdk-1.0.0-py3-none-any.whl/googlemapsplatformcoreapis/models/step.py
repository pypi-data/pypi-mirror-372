# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.distance import Distance
from googlemapsplatformcoreapis.models.duration import Duration
from googlemapsplatformcoreapis.models.end_location import EndLocation
from googlemapsplatformcoreapis.models.polyline import Polyline
from googlemapsplatformcoreapis.models.start_location import StartLocation


class Step(object):

    """Implementation of the 'Step' model.

    Attributes:
        distance (Distance): The model property of type Distance.
        duration (Duration): The model property of type Duration.
        end_location (EndLocation): The model property of type EndLocation.
        html_instructions (str): The model property of type str.
        polyline (Polyline): The model property of type Polyline.
        start_location (StartLocation): The model property of type
            StartLocation.
        travel_mode (str): The model property of type str.
        maneuver (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "distance": 'distance',
        "duration": 'duration',
        "end_location": 'end_location',
        "html_instructions": 'html_instructions',
        "polyline": 'polyline',
        "start_location": 'start_location',
        "travel_mode": 'travel_mode',
        "maneuver": 'maneuver'
    }

    _optionals = [
        'maneuver',
    ]

    def __init__(self,
                 distance=None,
                 duration=None,
                 end_location=None,
                 html_instructions=None,
                 polyline=None,
                 start_location=None,
                 travel_mode=None,
                 maneuver=APIHelper.SKIP):
        """Constructor for the Step class"""

        # Initialize members of the class
        self.distance = distance 
        self.duration = duration 
        self.end_location = end_location 
        self.html_instructions = html_instructions 
        self.polyline = polyline 
        self.start_location = start_location 
        self.travel_mode = travel_mode 
        if maneuver is not APIHelper.SKIP:
            self.maneuver = maneuver 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        distance = Distance.from_dictionary(dictionary.get('distance')) if dictionary.get('distance') else None
        duration = Duration.from_dictionary(dictionary.get('duration')) if dictionary.get('duration') else None
        end_location = EndLocation.from_dictionary(dictionary.get('end_location')) if dictionary.get('end_location') else None
        html_instructions = dictionary.get("html_instructions") if dictionary.get("html_instructions") else None
        polyline = Polyline.from_dictionary(dictionary.get('polyline')) if dictionary.get('polyline') else None
        start_location = StartLocation.from_dictionary(dictionary.get('start_location')) if dictionary.get('start_location') else None
        travel_mode = dictionary.get("travel_mode") if dictionary.get("travel_mode") else None
        maneuver = dictionary.get("maneuver") if dictionary.get("maneuver") else APIHelper.SKIP
        # Return an object of this model
        return cls(distance,
                   duration,
                   end_location,
                   html_instructions,
                   polyline,
                   start_location,
                   travel_mode,
                   maneuver)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'distance={self.distance!r}, '
                f'duration={self.duration!r}, '
                f'end_location={self.end_location!r}, '
                f'html_instructions={self.html_instructions!r}, '
                f'polyline={self.polyline!r}, '
                f'start_location={self.start_location!r}, '
                f'travel_mode={self.travel_mode!r}, '
                f'maneuver={(self.maneuver if hasattr(self, "maneuver") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'distance={self.distance!s}, '
                f'duration={self.duration!s}, '
                f'end_location={self.end_location!s}, '
                f'html_instructions={self.html_instructions!s}, '
                f'polyline={self.polyline!s}, '
                f'start_location={self.start_location!s}, '
                f'travel_mode={self.travel_mode!s}, '
                f'maneuver={(self.maneuver if hasattr(self, "maneuver") else None)!s})')
