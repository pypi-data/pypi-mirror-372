# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class StandardizedAddress(object):

    """Implementation of the 'StandardizedAddress' model.

    Attributes:
        first_address_line (str): The model property of type str.
        city_state_zip_address_line (str): The model property of type str.
        city (str): The model property of type str.
        state (str): The model property of type str.
        zip_code (str): The model property of type str.
        zip_code_extension (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "first_address_line": 'firstAddressLine',
        "city_state_zip_address_line": 'cityStateZipAddressLine',
        "city": 'city',
        "state": 'state',
        "zip_code": 'zipCode',
        "zip_code_extension": 'zipCodeExtension'
    }

    def __init__(self,
                 first_address_line=None,
                 city_state_zip_address_line=None,
                 city=None,
                 state=None,
                 zip_code=None,
                 zip_code_extension=None):
        """Constructor for the StandardizedAddress class"""

        # Initialize members of the class
        self.first_address_line = first_address_line 
        self.city_state_zip_address_line = city_state_zip_address_line 
        self.city = city 
        self.state = state 
        self.zip_code = zip_code 
        self.zip_code_extension = zip_code_extension 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        first_address_line = dictionary.get("firstAddressLine") if dictionary.get("firstAddressLine") else None
        city_state_zip_address_line = dictionary.get("cityStateZipAddressLine") if dictionary.get("cityStateZipAddressLine") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        zip_code = dictionary.get("zipCode") if dictionary.get("zipCode") else None
        zip_code_extension = dictionary.get("zipCodeExtension") if dictionary.get("zipCodeExtension") else None
        # Return an object of this model
        return cls(first_address_line,
                   city_state_zip_address_line,
                   city,
                   state,
                   zip_code,
                   zip_code_extension)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'first_address_line={self.first_address_line!r}, '
                f'city_state_zip_address_line={self.city_state_zip_address_line!r}, '
                f'city={self.city!r}, '
                f'state={self.state!r}, '
                f'zip_code={self.zip_code!r}, '
                f'zip_code_extension={self.zip_code_extension!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'first_address_line={self.first_address_line!s}, '
                f'city_state_zip_address_line={self.city_state_zip_address_line!s}, '
                f'city={self.city!s}, '
                f'state={self.state!s}, '
                f'zip_code={self.zip_code!s}, '
                f'zip_code_extension={self.zip_code_extension!s})')
