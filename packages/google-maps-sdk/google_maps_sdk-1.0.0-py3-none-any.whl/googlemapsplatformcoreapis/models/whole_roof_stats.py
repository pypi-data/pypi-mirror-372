# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class WholeRoofStats(object):

    """Implementation of the 'WholeRoofStats' model.

    Attributes:
        area_meters_2 (float): The model property of type float.
        sunshine_quantiles (List[float]): The model property of type
            List[float].
        ground_area_meters_2 (float): The model property of type float.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "area_meters_2": 'areaMeters2',
        "sunshine_quantiles": 'sunshineQuantiles',
        "ground_area_meters_2": 'groundAreaMeters2'
    }

    def __init__(self,
                 area_meters_2=None,
                 sunshine_quantiles=None,
                 ground_area_meters_2=None):
        """Constructor for the WholeRoofStats class"""

        # Initialize members of the class
        self.area_meters_2 = area_meters_2 
        self.sunshine_quantiles = sunshine_quantiles 
        self.ground_area_meters_2 = ground_area_meters_2 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        area_meters_2 = dictionary.get("areaMeters2") if dictionary.get("areaMeters2") else None
        sunshine_quantiles = dictionary.get("sunshineQuantiles") if dictionary.get("sunshineQuantiles") else None
        ground_area_meters_2 = dictionary.get("groundAreaMeters2") if dictionary.get("groundAreaMeters2") else None
        # Return an object of this model
        return cls(area_meters_2,
                   sunshine_quantiles,
                   ground_area_meters_2)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'area_meters_2={self.area_meters_2!r}, '
                f'sunshine_quantiles={self.sunshine_quantiles!r}, '
                f'ground_area_meters_2={self.ground_area_meters_2!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'area_meters_2={self.area_meters_2!s}, '
                f'sunshine_quantiles={self.sunshine_quantiles!s}, '
                f'ground_area_meters_2={self.ground_area_meters_2!s})')
