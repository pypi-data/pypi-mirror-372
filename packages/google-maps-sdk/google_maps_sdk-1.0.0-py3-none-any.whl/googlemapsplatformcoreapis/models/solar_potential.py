# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.building_stats import BuildingStats
from googlemapsplatformcoreapis.models.financial_analysis import FinancialAnalysis
from googlemapsplatformcoreapis.models.roof_segment_stat import RoofSegmentStat
from googlemapsplatformcoreapis.models.solar_panel import SolarPanel
from googlemapsplatformcoreapis.models.solar_panel_config import SolarPanelConfig
from googlemapsplatformcoreapis.models.whole_roof_stats import WholeRoofStats


class SolarPotential(object):

    """Implementation of the 'SolarPotential' model.

    Attributes:
        max_array_panels_count (int): The model property of type int.
        max_array_area_meters_2 (float): The model property of type float.
        max_sunshine_hours_per_year (float): The model property of type float.
        carbon_offset_factor_kg_per_mwh (float): The model property of type
            float.
        whole_roof_stats (WholeRoofStats): The model property of type
            WholeRoofStats.
        roof_segment_stats (List[RoofSegmentStat]): The model property of type
            List[RoofSegmentStat].
        solar_panel_configs (List[SolarPanelConfig]): The model property of
            type List[SolarPanelConfig].
        financial_analyses (List[FinancialAnalysis]): The model property of
            type List[FinancialAnalysis].
        panel_capacity_watts (int): The model property of type int.
        panel_height_meters (float): The model property of type float.
        panel_width_meters (float): The model property of type float.
        panel_lifetime_years (int): The model property of type int.
        building_stats (BuildingStats): The model property of type
            BuildingStats.
        solar_panels (List[SolarPanel]): The model property of type
            List[SolarPanel].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "max_array_panels_count": 'maxArrayPanelsCount',
        "max_array_area_meters_2": 'maxArrayAreaMeters2',
        "max_sunshine_hours_per_year": 'maxSunshineHoursPerYear',
        "carbon_offset_factor_kg_per_mwh": 'carbonOffsetFactorKgPerMwh',
        "whole_roof_stats": 'wholeRoofStats',
        "roof_segment_stats": 'roofSegmentStats',
        "solar_panel_configs": 'solarPanelConfigs',
        "financial_analyses": 'financialAnalyses',
        "panel_capacity_watts": 'panelCapacityWatts',
        "panel_height_meters": 'panelHeightMeters',
        "panel_width_meters": 'panelWidthMeters',
        "panel_lifetime_years": 'panelLifetimeYears',
        "building_stats": 'buildingStats',
        "solar_panels": 'solarPanels'
    }

    def __init__(self,
                 max_array_panels_count=None,
                 max_array_area_meters_2=None,
                 max_sunshine_hours_per_year=None,
                 carbon_offset_factor_kg_per_mwh=None,
                 whole_roof_stats=None,
                 roof_segment_stats=None,
                 solar_panel_configs=None,
                 financial_analyses=None,
                 panel_capacity_watts=None,
                 panel_height_meters=None,
                 panel_width_meters=None,
                 panel_lifetime_years=None,
                 building_stats=None,
                 solar_panels=None):
        """Constructor for the SolarPotential class"""

        # Initialize members of the class
        self.max_array_panels_count = max_array_panels_count 
        self.max_array_area_meters_2 = max_array_area_meters_2 
        self.max_sunshine_hours_per_year = max_sunshine_hours_per_year 
        self.carbon_offset_factor_kg_per_mwh = carbon_offset_factor_kg_per_mwh 
        self.whole_roof_stats = whole_roof_stats 
        self.roof_segment_stats = roof_segment_stats 
        self.solar_panel_configs = solar_panel_configs 
        self.financial_analyses = financial_analyses 
        self.panel_capacity_watts = panel_capacity_watts 
        self.panel_height_meters = panel_height_meters 
        self.panel_width_meters = panel_width_meters 
        self.panel_lifetime_years = panel_lifetime_years 
        self.building_stats = building_stats 
        self.solar_panels = solar_panels 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        max_array_panels_count = dictionary.get("maxArrayPanelsCount") if dictionary.get("maxArrayPanelsCount") else None
        max_array_area_meters_2 = dictionary.get("maxArrayAreaMeters2") if dictionary.get("maxArrayAreaMeters2") else None
        max_sunshine_hours_per_year = dictionary.get("maxSunshineHoursPerYear") if dictionary.get("maxSunshineHoursPerYear") else None
        carbon_offset_factor_kg_per_mwh = dictionary.get("carbonOffsetFactorKgPerMwh") if dictionary.get("carbonOffsetFactorKgPerMwh") else None
        whole_roof_stats = WholeRoofStats.from_dictionary(dictionary.get('wholeRoofStats')) if dictionary.get('wholeRoofStats') else None
        roof_segment_stats = None
        if dictionary.get('roofSegmentStats') is not None:
            roof_segment_stats = [RoofSegmentStat.from_dictionary(x) for x in dictionary.get('roofSegmentStats')]
        solar_panel_configs = None
        if dictionary.get('solarPanelConfigs') is not None:
            solar_panel_configs = [SolarPanelConfig.from_dictionary(x) for x in dictionary.get('solarPanelConfigs')]
        financial_analyses = None
        if dictionary.get('financialAnalyses') is not None:
            financial_analyses = [FinancialAnalysis.from_dictionary(x) for x in dictionary.get('financialAnalyses')]
        panel_capacity_watts = dictionary.get("panelCapacityWatts") if dictionary.get("panelCapacityWatts") else None
        panel_height_meters = dictionary.get("panelHeightMeters") if dictionary.get("panelHeightMeters") else None
        panel_width_meters = dictionary.get("panelWidthMeters") if dictionary.get("panelWidthMeters") else None
        panel_lifetime_years = dictionary.get("panelLifetimeYears") if dictionary.get("panelLifetimeYears") else None
        building_stats = BuildingStats.from_dictionary(dictionary.get('buildingStats')) if dictionary.get('buildingStats') else None
        solar_panels = None
        if dictionary.get('solarPanels') is not None:
            solar_panels = [SolarPanel.from_dictionary(x) for x in dictionary.get('solarPanels')]
        # Return an object of this model
        return cls(max_array_panels_count,
                   max_array_area_meters_2,
                   max_sunshine_hours_per_year,
                   carbon_offset_factor_kg_per_mwh,
                   whole_roof_stats,
                   roof_segment_stats,
                   solar_panel_configs,
                   financial_analyses,
                   panel_capacity_watts,
                   panel_height_meters,
                   panel_width_meters,
                   panel_lifetime_years,
                   building_stats,
                   solar_panels)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'max_array_panels_count={self.max_array_panels_count!r}, '
                f'max_array_area_meters_2={self.max_array_area_meters_2!r}, '
                f'max_sunshine_hours_per_year={self.max_sunshine_hours_per_year!r}, '
                f'carbon_offset_factor_kg_per_mwh={self.carbon_offset_factor_kg_per_mwh!r}, '
                f'whole_roof_stats={self.whole_roof_stats!r}, '
                f'roof_segment_stats={self.roof_segment_stats!r}, '
                f'solar_panel_configs={self.solar_panel_configs!r}, '
                f'financial_analyses={self.financial_analyses!r}, '
                f'panel_capacity_watts={self.panel_capacity_watts!r}, '
                f'panel_height_meters={self.panel_height_meters!r}, '
                f'panel_width_meters={self.panel_width_meters!r}, '
                f'panel_lifetime_years={self.panel_lifetime_years!r}, '
                f'building_stats={self.building_stats!r}, '
                f'solar_panels={self.solar_panels!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'max_array_panels_count={self.max_array_panels_count!s}, '
                f'max_array_area_meters_2={self.max_array_area_meters_2!s}, '
                f'max_sunshine_hours_per_year={self.max_sunshine_hours_per_year!s}, '
                f'carbon_offset_factor_kg_per_mwh={self.carbon_offset_factor_kg_per_mwh!s}, '
                f'whole_roof_stats={self.whole_roof_stats!s}, '
                f'roof_segment_stats={self.roof_segment_stats!s}, '
                f'solar_panel_configs={self.solar_panel_configs!s}, '
                f'financial_analyses={self.financial_analyses!s}, '
                f'panel_capacity_watts={self.panel_capacity_watts!s}, '
                f'panel_height_meters={self.panel_height_meters!s}, '
                f'panel_width_meters={self.panel_width_meters!s}, '
                f'panel_lifetime_years={self.panel_lifetime_years!s}, '
                f'building_stats={self.building_stats!s}, '
                f'solar_panels={self.solar_panels!s})')
