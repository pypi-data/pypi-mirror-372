# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.bounds import Bounds
from googlemapsplatformcoreapis.models.location import Location
from googlemapsplatformcoreapis.models.plus_code import PlusCode


class Geocode(object):

    """Implementation of the 'Geocode' model.

    Attributes:
        location (Location): The model property of type Location.
        plus_code (PlusCode): The model property of type PlusCode.
        bounds (Bounds): The model property of type Bounds.
        place_id (str): The model property of type str.
        place_types (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "location": 'location',
        "plus_code": 'plusCode',
        "bounds": 'bounds',
        "place_id": 'placeId',
        "place_types": 'placeTypes'
    }

    def __init__(self,
                 location=None,
                 plus_code=None,
                 bounds=None,
                 place_id=None,
                 place_types=None):
        """Constructor for the Geocode class"""

        # Initialize members of the class
        self.location = location 
        self.plus_code = plus_code 
        self.bounds = bounds 
        self.place_id = place_id 
        self.place_types = place_types 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        location = Location.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        plus_code = PlusCode.from_dictionary(dictionary.get('plusCode')) if dictionary.get('plusCode') else None
        bounds = Bounds.from_dictionary(dictionary.get('bounds')) if dictionary.get('bounds') else None
        place_id = dictionary.get("placeId") if dictionary.get("placeId") else None
        place_types = dictionary.get("placeTypes") if dictionary.get("placeTypes") else None
        # Return an object of this model
        return cls(location,
                   plus_code,
                   bounds,
                   place_id,
                   place_types)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'location={self.location!r}, '
                f'plus_code={self.plus_code!r}, '
                f'bounds={self.bounds!r}, '
                f'place_id={self.place_id!r}, '
                f'place_types={self.place_types!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'location={self.location!s}, '
                f'plus_code={self.plus_code!s}, '
                f'bounds={self.bounds!s}, '
                f'place_id={self.place_id!s}, '
                f'place_types={self.place_types!s})')
