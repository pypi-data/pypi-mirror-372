# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.address_component_2 import AddressComponent2
from googlemapsplatformcoreapis.models.geometry import Geometry


class Result4(object):

    """Implementation of the 'Result4' model.

    Attributes:
        address_components (List[AddressComponent2]): The model property of
            type List[AddressComponent2].
        formatted_address (str): The model property of type str.
        geometry (Geometry): The model property of type Geometry.
        place_id (str): The model property of type str.
        types (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "address_components": 'address_components',
        "formatted_address": 'formatted_address',
        "geometry": 'geometry',
        "place_id": 'place_id',
        "types": 'types'
    }

    def __init__(self,
                 address_components=None,
                 formatted_address=None,
                 geometry=None,
                 place_id=None,
                 types=None):
        """Constructor for the Result4 class"""

        # Initialize members of the class
        self.address_components = address_components 
        self.formatted_address = formatted_address 
        self.geometry = geometry 
        self.place_id = place_id 
        self.types = types 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        address_components = None
        if dictionary.get('address_components') is not None:
            address_components = [AddressComponent2.from_dictionary(x) for x in dictionary.get('address_components')]
        formatted_address = dictionary.get("formatted_address") if dictionary.get("formatted_address") else None
        geometry = Geometry.from_dictionary(dictionary.get('geometry')) if dictionary.get('geometry') else None
        place_id = dictionary.get("place_id") if dictionary.get("place_id") else None
        types = dictionary.get("types") if dictionary.get("types") else None
        # Return an object of this model
        return cls(address_components,
                   formatted_address,
                   geometry,
                   place_id,
                   types)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'address_components={self.address_components!r}, '
                f'formatted_address={self.formatted_address!r}, '
                f'geometry={self.geometry!r}, '
                f'place_id={self.place_id!r}, '
                f'types={self.types!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'address_components={self.address_components!s}, '
                f'formatted_address={self.formatted_address!s}, '
                f'geometry={self.geometry!s}, '
                f'place_id={self.place_id!s}, '
                f'types={self.types!s})')
