# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class AuthorAttribution(object):

    """Implementation of the 'AuthorAttribution' model.

    Attributes:
        display_name (str): The model property of type str.
        uri (str): The model property of type str.
        photo_uri (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "display_name": 'displayName',
        "uri": 'uri',
        "photo_uri": 'photoUri'
    }

    def __init__(self,
                 display_name=None,
                 uri=None,
                 photo_uri=None):
        """Constructor for the AuthorAttribution class"""

        # Initialize members of the class
        self.display_name = display_name 
        self.uri = uri 
        self.photo_uri = photo_uri 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        display_name = dictionary.get("displayName") if dictionary.get("displayName") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        photo_uri = dictionary.get("photoUri") if dictionary.get("photoUri") else None
        # Return an object of this model
        return cls(display_name,
                   uri,
                   photo_uri)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.display_name,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.uri,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.photo_uri,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('displayName'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('uri'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('photoUri'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'display_name={self.display_name!r}, '
                f'uri={self.uri!r}, '
                f'photo_uri={self.photo_uri!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'display_name={self.display_name!s}, '
                f'uri={self.uri!s}, '
                f'photo_uri={self.photo_uri!s})')
