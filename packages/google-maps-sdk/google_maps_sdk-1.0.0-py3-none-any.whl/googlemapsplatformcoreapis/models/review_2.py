# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.author_attribution import AuthorAttribution
from googlemapsplatformcoreapis.models.original_text import OriginalText
from googlemapsplatformcoreapis.models.text_4 import Text4


class Review2(object):

    """Implementation of the 'Review2' model.

    Attributes:
        name (str): The model property of type str.
        relative_publish_time_description (str): The model property of type
            str.
        rating (int): The model property of type int.
        text (Text4): The model property of type Text4.
        original_text (OriginalText): The model property of type OriginalText.
        author_attribution (AuthorAttribution): The model property of type
            AuthorAttribution.
        publish_time (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "relative_publish_time_description": 'relativePublishTimeDescription',
        "rating": 'rating',
        "text": 'text',
        "original_text": 'originalText',
        "author_attribution": 'authorAttribution',
        "publish_time": 'publishTime'
    }

    def __init__(self,
                 name=None,
                 relative_publish_time_description=None,
                 rating=None,
                 text=None,
                 original_text=None,
                 author_attribution=None,
                 publish_time=None):
        """Constructor for the Review2 class"""

        # Initialize members of the class
        self.name = name 
        self.relative_publish_time_description = relative_publish_time_description 
        self.rating = rating 
        self.text = text 
        self.original_text = original_text 
        self.author_attribution = author_attribution 
        self.publish_time = publish_time 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        relative_publish_time_description = dictionary.get("relativePublishTimeDescription") if dictionary.get("relativePublishTimeDescription") else None
        rating = dictionary.get("rating") if dictionary.get("rating") else None
        text = Text4.from_dictionary(dictionary.get('text')) if dictionary.get('text') else None
        original_text = OriginalText.from_dictionary(dictionary.get('originalText')) if dictionary.get('originalText') else None
        author_attribution = AuthorAttribution.from_dictionary(dictionary.get('authorAttribution')) if dictionary.get('authorAttribution') else None
        publish_time = dictionary.get("publishTime") if dictionary.get("publishTime") else None
        # Return an object of this model
        return cls(name,
                   relative_publish_time_description,
                   rating,
                   text,
                   original_text,
                   author_attribution,
                   publish_time)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.name,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.relative_publish_time_description,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.rating,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.text,
                                            type_callable=lambda value: Text4.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.original_text,
                                            type_callable=lambda value: OriginalText.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.author_attribution,
                                            type_callable=lambda value: AuthorAttribution.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.publish_time,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('name'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('relativePublishTimeDescription'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('rating'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('text'),
                                        type_callable=lambda value: Text4.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('originalText'),
                                        type_callable=lambda value: OriginalText.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('authorAttribution'),
                                        type_callable=lambda value: AuthorAttribution.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('publishTime'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'relative_publish_time_description={self.relative_publish_time_description!r}, '
                f'rating={self.rating!r}, '
                f'text={self.text!r}, '
                f'original_text={self.original_text!r}, '
                f'author_attribution={self.author_attribution!r}, '
                f'publish_time={self.publish_time!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'relative_publish_time_description={self.relative_publish_time_description!s}, '
                f'rating={self.rating!s}, '
                f'text={self.text!s}, '
                f'original_text={self.original_text!s}, '
                f'author_attribution={self.author_attribution!s}, '
                f'publish_time={self.publish_time!s})')
