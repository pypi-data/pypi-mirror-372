# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.matched_substring import MatchedSubstring
from googlemapsplatformcoreapis.models.structured_formatting_2 import StructuredFormatting2
from googlemapsplatformcoreapis.models.term import Term


class Prediction2(object):

    """Implementation of the 'Prediction2' model.

    Attributes:
        description (str): The model property of type str.
        matched_substrings (List[MatchedSubstring]): The model property of
            type List[MatchedSubstring].
        place_id (str): The model property of type str.
        reference (str): The model property of type str.
        structured_formatting (StructuredFormatting2): The model property of
            type StructuredFormatting2.
        terms (List[Term]): The model property of type List[Term].
        types (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "description": 'description',
        "matched_substrings": 'matched_substrings',
        "place_id": 'place_id',
        "reference": 'reference',
        "structured_formatting": 'structured_formatting',
        "terms": 'terms',
        "types": 'types'
    }

    def __init__(self,
                 description=None,
                 matched_substrings=None,
                 place_id=None,
                 reference=None,
                 structured_formatting=None,
                 terms=None,
                 types=None):
        """Constructor for the Prediction2 class"""

        # Initialize members of the class
        self.description = description 
        self.matched_substrings = matched_substrings 
        self.place_id = place_id 
        self.reference = reference 
        self.structured_formatting = structured_formatting 
        self.terms = terms 
        self.types = types 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        description = dictionary.get("description") if dictionary.get("description") else None
        matched_substrings = None
        if dictionary.get('matched_substrings') is not None:
            matched_substrings = [MatchedSubstring.from_dictionary(x) for x in dictionary.get('matched_substrings')]
        place_id = dictionary.get("place_id") if dictionary.get("place_id") else None
        reference = dictionary.get("reference") if dictionary.get("reference") else None
        structured_formatting = StructuredFormatting2.from_dictionary(dictionary.get('structured_formatting')) if dictionary.get('structured_formatting') else None
        terms = None
        if dictionary.get('terms') is not None:
            terms = [Term.from_dictionary(x) for x in dictionary.get('terms')]
        types = dictionary.get("types") if dictionary.get("types") else None
        # Return an object of this model
        return cls(description,
                   matched_substrings,
                   place_id,
                   reference,
                   structured_formatting,
                   terms,
                   types)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'description={self.description!r}, '
                f'matched_substrings={self.matched_substrings!r}, '
                f'place_id={self.place_id!r}, '
                f'reference={self.reference!r}, '
                f'structured_formatting={self.structured_formatting!r}, '
                f'terms={self.terms!r}, '
                f'types={self.types!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'description={self.description!s}, '
                f'matched_substrings={self.matched_substrings!s}, '
                f'place_id={self.place_id!s}, '
                f'reference={self.reference!s}, '
                f'structured_formatting={self.structured_formatting!s}, '
                f'terms={self.terms!s}, '
                f'types={self.types!s})')
