# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.configuration import Server
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from googlemapsplatformcoreapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from googlemapsplatformcoreapis.models.m_200_ok_20 import M200OK20
from googlemapsplatformcoreapis.models.m_200_ok_22 import M200OK22
from googlemapsplatformcoreapis.models.m_200_ok_24 import M200OK24
from googlemapsplatformcoreapis.models.m_200_ok_26 import M200OK26


class PlacesAPILegacyController(BaseController):

    """A Controller to access Endpoints in the googlemapsplatformcoreapis API."""
    def __init__(self, config):
        super(PlacesAPILegacyController, self).__init__(config)

    def place_details(self,
                      place_id,
                      accept):
        """Does a GET request to /place/details/json.

        The Places API is a service that returns information about places
        using HTTP requests. Places are defined within this API as
        establishments, geographic locations, or prominent points of interest.

        Args:
            place_id (str): (Required) A textual identifier that uniquely
                identifies a place, returned from a [Place
                Search](https://developers.google.com/maps/documentation/places
                /web-service/search). For more information about place IDs,
                see the [place ID
                overview](https://developers.google.com/maps/documentation/plac
                es/web-service/place-id).
            accept (str): The request header parameter.

        Returns:
            M200OK20: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/place/details/json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('place_id')
                         .value(place_id))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK20.from_dictionary)
        ).execute()

    def find_place_from_text(self,
                             input,
                             inputtype,
                             accept):
        """Does a GET request to /place/findplacefromtext/json.

        A Find Place request takes a text input and returns a place. The input
        can be any kind of Places text data, such as a name, address, or phone
        number. The request must be a string. A Find Place request using
        non-string data such as a lat/lng coordinate or plus code generates an
        error.
        <div class="note">Note: If you omit the fields parameter from a Find
        Place request, only the place_id for the result will be returned.</div>

        Args:
            input (str): (Required) The text string on which to search, for
                example: "restaurant" or "123 Main Street". This must be a
                place name, address, or category of establishments. Any other
                types of input can generate errors and are not guaranteed to
                return valid results. The Places API will return candidate
                matches based on this string and order the results based on
                their perceived relevance.
            inputtype (str): (Required) The type of input. This can be one of
                either `textquery` or `phonenumber`. Phone numbers must be in
                international format (prefixed by a plus sign ("+"), followed
                by the country code, then the phone number itself). See [E.164
                ITU recommendation](https://en.wikipedia.org/wiki/E.164) for
                more information.
            accept (str): The request header parameter.

        Returns:
            M200OK22: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/place/findplacefromtext/json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('input')
                         .value(input))
            .query_param(Parameter()
                         .key('inputtype')
                         .value(inputtype))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK22.from_dictionary)
        ).execute()

    def nearby_search(self,
                      location,
                      name,
                      accept):
        """Does a GET request to /place/nearbysearch/json.

        A Nearby Search lets you search for places within a specified area.
        You can refine your search request by supplying keywords or specifying
        the type of place you are searching for.

        Args:
            location (str): (Required) The point around which to retrieve
                place information. This must be specified as
                `latitude,longitude`.
            name (str): Equivalent to `keyword`. Values in this field are
                combined with values in the `keyword` field and passed as part
                of the same search string.
            accept (str): The request header parameter.

        Returns:
            M200OK24: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/place/nearbysearch/json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('location')
                         .value(location))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK24.from_dictionary)
        ).execute()

    def text_search(self,
                    query,
                    accept):
        """Does a GET request to /place/textsearch/json.

        The Google Places API Text Search Service is a web service that
        returns information about a set of places based on a string â€” for
        example "pizza in New York" or "shoe stores near Ottawa" or "123 Main
        Street". The service responds with a list of places matching the text
        string and any location bias that has been set.
        The service is especially useful for making [ambiguous
        address](https://developers.google.com/maps/documentation/geocoding/bes
        t-practices) queries in an automated system, and non-address
        components of the string may match businesses as well as addresses.
        Examples of ambiguous address queries are incomplete addresses, poorly
        formatted addresses, or a request that includes non-address components
        such as business names.
        The search response will include a list of places. You can send a
        Place Details request for more information about any of the places in
        the response.

        Args:
            query (str): (Required) The text string on which to search, for
                example: "restaurant" or "123 Main Street". This must a place
                name, address, or category of establishments. Any other types
                of input can generate errors and are not guaranteed to return
                valid results. The Google Places service will return candidate
                matches based on this string and order the results based on
                their perceived relevance.
            accept (str): The request header parameter.

        Returns:
            M200OK26: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/place/textsearch/json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('query')
                         .value(query))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK26.from_dictionary)
        ).execute()

    def place_photo(self,
                    photo_reference,
                    accept):
        """Does a GET request to /place/photo.

        The Place Photo service, part of the Places API, is a read- only API
        that allows you to add high quality photographic content to your
        application. The Place Photo service gives you access to the millions
        of photos stored in the Places database. When you get place
        information using a Place Details request, photo references will be
        returned for relevant photographic content. Find Place, Nearby Search,
        and Text Search requests also return a single photo reference per
        place, when relevant. Using the Photo service you can then access the
        referenced photos and resize the image to the optimal size for your
        application.
        Photos returned by the Photo service are sourced from a variety of
        locations, including business owners and user contributed photos. In
        most cases, these photos can be used without attribution, or will have
        the required attribution included as a part of the image. However, if
        the returned photo element includes a value in the html_attributions
        field, you will have to include the additional attribution in your
        application wherever you display the image.

        Args:
            photo_reference (str): (Required) A string identifier that
                uniquely identifies a photo. Photo references are returned
                from either a Place Search or Place Details request.
            accept (str): The request header parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/place/photo')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('photo_reference')
                         .value(photo_reference))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()
