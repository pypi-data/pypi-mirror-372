# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.configuration import Server
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from googlemapsplatformcoreapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from googlemapsplatformcoreapis.models.m_200_ok_48 import M200OK48
from googlemapsplatformcoreapis.models.m_200_ok_50 import M200OK50


class SolarAPIController(BaseController):

    """A Controller to access Endpoints in the googlemapsplatformcoreapis API."""
    def __init__(self, config):
        super(SolarAPIController, self).__init__(config)

    def get_building_insights(self,
                              location_latitude,
                              location_longitude,
                              required_quality):
        """Does a GET request to /buildingInsights:findClosest.

        The [buildingInsights](https://developers.google.com/maps/documentation
        /solar/reference/rest/v1/buildingInsights) endpoint provides insights
        about the location, dimensions, and solar potential of a building. In
        particular, you can get information about:
        - Solar potential, including solar panel size, annual amount of
        sunshine, carbon offset factors, and more

        - Solar panel position, orientation, and energy production

        - Estimated monthly energy bill of optimal solar layout and associated
        costs and benefits

        To learn more about how the Solar API defines solar potential and
        sunniness, see [Solar API
        Concepts](https://developers.google.com/maps/documentation/solar/concep
        ts).

        Args:
            location_latitude (str): The request query parameter.
            location_longitude (str): The request query parameter.
            required_quality (str): The request query parameter.

        Returns:
            M200OK48: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/buildingInsights:findClosest')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('location.latitude')
                         .value(location_latitude))
            .query_param(Parameter()
                         .key('location.longitude')
                         .value(location_longitude))
            .query_param(Parameter()
                         .key('requiredQuality')
                         .value(required_quality))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK48.from_dictionary)
        ).execute()

    def get_data_layers(self,
                        location_latitude,
                        location_longitude,
                        radius_meters,
                        view,
                        required_quality,
                        pixel_size_meters):
        """Does a GET request to /dataLayers:get.

        The
        [dataLayers](https://developers.google.com/maps/documentation/solar/ref
        erence/rest/v1/dataLayers) endpoint provides detailed solar
        information for a region surrounding a specified location. The
        endpoint returns 17 downloadable TIFF files, including:
        - Digital surface model (DSM)

        - RGB composite layer (aerial imagery)

        - A mask layer that identifies the boundaries of the analysis

        - Annual solar flux, or the annual yield of a given surface

        - Monthly solar flux, or the monthly yield of a given surface

        - Hourly shade (24 hours)

        For more information about how the Solar API defines flux, see [Solar
        API
        Concepts](https://developers.google.com/maps/documentation/solar/concep
        ts).

        Args:
            location_latitude (str): The request query parameter.
            location_longitude (str): The request query parameter.
            radius_meters (int): The request query parameter.
            view (str): The request query parameter.
            required_quality (str): The request query parameter.
            pixel_size_meters (float): The request query parameter.

        Returns:
            M200OK50: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/dataLayers:get')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('location.latitude')
                         .value(location_latitude))
            .query_param(Parameter()
                         .key('location.longitude')
                         .value(location_longitude))
            .query_param(Parameter()
                         .key('radiusMeters')
                         .value(radius_meters))
            .query_param(Parameter()
                         .key('view')
                         .value(view))
            .query_param(Parameter()
                         .key('requiredQuality')
                         .value(required_quality))
            .query_param(Parameter()
                         .key('pixelSizeMeters')
                         .value(pixel_size_meters))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK50.from_dictionary)
        ).execute()
