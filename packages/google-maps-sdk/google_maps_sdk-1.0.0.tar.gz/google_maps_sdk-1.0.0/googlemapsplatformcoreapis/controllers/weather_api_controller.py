# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.configuration import Server
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from googlemapsplatformcoreapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single


class WeatherAPIController(BaseController):

    """A Controller to access Endpoints in the googlemapsplatformcoreapis API."""
    def __init__(self, config):
        super(WeatherAPIController, self).__init__(config)

    def current_conditions(self,
                           location_latitude,
                           location_longitude,
                           units_system,
                           language_code):
        """Does a GET request to /currentConditions:lookup.

        Args:
            location_latitude (str): Required. The latitude for the location
                where weather is being requested
            location_longitude (str): Required. The longitude for the location
                where weather is being requested
            units_system (str): Optional. The units system to use for the
                returned weather conditions. If not provided, the returned
                weather conditions will be in the metric system (default =
                METRIC).
            language_code (str): Optional. Allows the client to choose the
                language for the response. If data cannot be provided for that
                language, the API uses the closest match. Allowed values rely
                on the IETF BCP-47 standard. The default value is "en".

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_12)
            .path('/currentConditions:lookup')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('location.latitude')
                         .value(location_latitude))
            .query_param(Parameter()
                         .key('location.longitude')
                         .value(location_longitude))
            .query_param(Parameter()
                         .key('unitsSystem')
                         .value(units_system))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def forecast_days(self,
                      location_latitude,
                      location_longitude,
                      page_size,
                      page_token,
                      days,
                      language_code):
        """Does a GET request to /forecast/days:lookup.

        Args:
            location_latitude (str): Required. The latitude to get the daily
                forecast for the requested location.
            location_longitude (str): Required. The longitude to get the daily
                forecast for the requested location.
            page_size (str): Optional. The maximum number of daily forecast
                records to return per page - a value from 1 to 10 (inclusive).
                The default value is 5.
            page_token (str): Optional. A page token received from a previous
                request. It is used to retrieve the subsequent page.
            days (str): Optional. Limits the amount of total days to fetch
                starting from the current day - a value from 1 to 10
                (inclusive). The default value is the maximum allowed value of
                10.
            language_code (str): Optional. Allows the client to choose the
                language for the response. If data cannot be provided for that
                language, the API uses the closest match. Allowed values rely
                on the IETF BCP-47 standard. The default value is "en".

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_12)
            .path('/forecast/days:lookup')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('location.latitude')
                         .value(location_latitude))
            .query_param(Parameter()
                         .key('location.longitude')
                         .value(location_longitude))
            .query_param(Parameter()
                         .key('pageSize')
                         .value(page_size))
            .query_param(Parameter()
                         .key('pageToken')
                         .value(page_token))
            .query_param(Parameter()
                         .key('days')
                         .value(days))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def forecast_hours(self,
                       location_latitude,
                       location_longitude,
                       units_system,
                       page_size,
                       page_token,
                       days,
                       language_code):
        """Does a GET request to /forecast/hours:lookup.

        Args:
            location_latitude (str): Required. The latitude to get the daily
                forecast for the requested location.
            location_longitude (str): Required. The longitude to get the daily
                forecast for the requested location.
            units_system (str): Optional. The units system to use for the
                returned weather conditions. If not provided, the returned
                weather conditions will be in the metric system (default =
                METRIC).
            page_size (str): Optional. The maximum number of hourly forecast
                records to return per page - a value from 1 to 24 (inclusive).
                The default is the maximum allowed value of 24.
            page_token (str): Optional. A page token received from a previous
                request. It is used to retrieve the subsequent page.
            days (str): Optional. Limits the amount of total hours to fetch
                starting from the current hour - a value from 1 to 240
                (inclusive). The default is the maximum allowed value of 240.
            language_code (str): Optional. Allows the client to choose the
                language for the response. If data cannot be provided for that
                language, the API uses the closest match. Allowed values rely
                on the IETF BCP-47 standard. The default value is "en".

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_12)
            .path('/forecast/hours:lookup')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('location.latitude')
                         .value(location_latitude))
            .query_param(Parameter()
                         .key('location.longitude')
                         .value(location_longitude))
            .query_param(Parameter()
                         .key('unitsSystem')
                         .value(units_system))
            .query_param(Parameter()
                         .key('pageSize')
                         .value(page_size))
            .query_param(Parameter()
                         .key('pageToken')
                         .value(page_token))
            .query_param(Parameter()
                         .key('days')
                         .value(days))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def history_hours(self,
                      location_latitude,
                      location_longitude,
                      units_system,
                      page_size,
                      page_token,
                      hours,
                      language_code):
        """Does a GET request to /history/hours:lookup.

        Args:
            location_latitude (str): Required. The latitude to get the daily
                forecast for the requested location.
            location_longitude (str): Required. The longitude to get the daily
                forecast for the requested location.
            units_system (str): Optional. The units system to use for the
                returned weather conditions. If not provided, the returned
                weather conditions will be in the metric system (default =
                METRIC).
            page_size (str): Optional. The maximum number of hourly historical
                records to return per page - a value from 1 to 24 (inclusive).
                The default is the maximum allowed value of 24.
            page_token (str): Optional. A page token received from a previous
                request. It is used to retrieve the subsequent page.
            hours (str): Optional. Limits the amount of total hours to fetch
                starting from the last hour - a from 1 to 24 (inclusive). The
                default is the maximum allowed value of 24.
            language_code (str): Optional. Allows the client to choose the
                language for the response. If data cannot be provided for that
                language, the API uses the closest match. Allowed values rely
                on the IETF BCP-47 standard. The default value is "en".

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_12)
            .path('/history/hours:lookup')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('location.latitude')
                         .value(location_latitude))
            .query_param(Parameter()
                         .key('location.longitude')
                         .value(location_longitude))
            .query_param(Parameter()
                         .key('unitsSystem')
                         .value(units_system))
            .query_param(Parameter()
                         .key('pageSize')
                         .value(page_size))
            .query_param(Parameter()
                         .key('pageToken')
                         .value(page_token))
            .query_param(Parameter()
                         .key('hours')
                         .value(hours))
            .query_param(Parameter()
                         .key('languageCode')
                         .value(language_code))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
