# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.configuration import Server
from googlemapsplatformcoreapis.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from googlemapsplatformcoreapis.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from googlemapsplatformcoreapis.models.m_200_ok_16 import M200OK16
from googlemapsplatformcoreapis.models.m_200_ok_18 import M200OK18


class AutocompleteController(BaseController):

    """A Controller to access Endpoints in the googlemapsplatformcoreapis API."""
    def __init__(self, config):
        super(AutocompleteController, self).__init__(config)

    def query_autocomplete(self,
                           input,
                           accept):
        """Does a GET request to /place/queryautocomplete/json.

        The Query Autocomplete service can be used to provide a query
        prediction for text-based geographic searches, by returning suggested
        queries as you type.
        The Query Autocomplete service allows you to add on-the-fly geographic
        query predictions to your application. Instead of searching for a
        specific location, a user can type in a categorical search, such as
        "pizza near New York" and the service responds with a list of
        suggested queries matching the string. As the Query Autocomplete
        service can match on both full words and substrings, applications can
        send queries as the user types to provide on-the-fly predictions.

        Args:
            input (str): (Required) The text string on which to search. The
                Place Autocomplete service will return candidate matches based
                on this string and order results based on their perceived
                relevance.
            accept (str): The request header parameter.

        Returns:
            M200OK16: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/place/queryautocomplete/json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('input')
                         .value(input))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK16.from_dictionary)
        ).execute()

    def autocomplete(self,
                     input,
                     accept):
        """Does a GET request to /place/autocomplete/json.

        The Place Autocomplete service is a web service that returns place
        predictions in response to an HTTP request. The request specifies a
        textual search string and optional geographic bounds. The service can
        be used to provide autocomplete functionality for text-based
        geographic searches, by returning places such as businesses, addresses
        and points of interest as a user types.
        <div class="note">Note: You can use Place Autocomplete even without a
        map. If you do show a map, it must be a Google map. When you display
        predictions from the Place Autocomplete service without a map, you
        must include the ['Powered by
        Google'](https://developers.google.com/maps/documentation/places/web-se
        rvice/policies#logo_requirementshttps://developers.google.com/maps/docu
        mentation/places/web-service/policies#logo_requirements) logo.</div>
        The Place Autocomplete service can match on full words and substrings,
        resolving place names, addresses, and plus codes. Applications can
        therefore send queries as the user types, to provide on-the-fly place
        predictions.
        The returned predictions are designed to be presented to the user to
        aid them in selecting the desired place. You can send a [Place
        Details](https://developers.google.com/maps/documentation/places/web-se
        rvice/details#PlaceDetailsRequests) request for more information about
        any of the places which are returned.

        Args:
            input (str): (Required) The text string on which to search. The
                Place Autocomplete service will return candidate matches based
                on this string and order results based on their perceived
                relevance.
            accept (str): The request header parameter.

        Returns:
            M200OK18: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/place/autocomplete/json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('input')
                         .value(input))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('apiKey'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(M200OK18.from_dictionary)
        ).execute()
