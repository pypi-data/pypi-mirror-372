# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.distance import Distance
from googlemapsplatformcoreapis.models.duration import Duration
from googlemapsplatformcoreapis.models.end_location import EndLocation
from googlemapsplatformcoreapis.models.start_location import StartLocation
from googlemapsplatformcoreapis.models.step import Step


class Leg(object):

    """Implementation of the 'Leg' model.

    Attributes:
        distance (Distance): The model property of type Distance.
        duration (Duration): The model property of type Duration.
        end_address (str): The model property of type str.
        end_location (EndLocation): The model property of type EndLocation.
        start_address (str): The model property of type str.
        start_location (StartLocation): The model property of type
            StartLocation.
        steps (List[Step]): The model property of type List[Step].
        traffic_speed_entry (List[str]): The model property of type List[str].
        via_waypoint (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "distance": 'distance',
        "duration": 'duration',
        "end_address": 'end_address',
        "end_location": 'end_location',
        "start_address": 'start_address',
        "start_location": 'start_location',
        "steps": 'steps',
        "traffic_speed_entry": 'traffic_speed_entry',
        "via_waypoint": 'via_waypoint'
    }

    def __init__(self,
                 distance=None,
                 duration=None,
                 end_address=None,
                 end_location=None,
                 start_address=None,
                 start_location=None,
                 steps=None,
                 traffic_speed_entry=None,
                 via_waypoint=None):
        """Constructor for the Leg class"""

        # Initialize members of the class
        self.distance = distance 
        self.duration = duration 
        self.end_address = end_address 
        self.end_location = end_location 
        self.start_address = start_address 
        self.start_location = start_location 
        self.steps = steps 
        self.traffic_speed_entry = traffic_speed_entry 
        self.via_waypoint = via_waypoint 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        distance = Distance.from_dictionary(dictionary.get('distance')) if dictionary.get('distance') else None
        duration = Duration.from_dictionary(dictionary.get('duration')) if dictionary.get('duration') else None
        end_address = dictionary.get("end_address") if dictionary.get("end_address") else None
        end_location = EndLocation.from_dictionary(dictionary.get('end_location')) if dictionary.get('end_location') else None
        start_address = dictionary.get("start_address") if dictionary.get("start_address") else None
        start_location = StartLocation.from_dictionary(dictionary.get('start_location')) if dictionary.get('start_location') else None
        steps = None
        if dictionary.get('steps') is not None:
            steps = [Step.from_dictionary(x) for x in dictionary.get('steps')]
        traffic_speed_entry = dictionary.get("traffic_speed_entry") if dictionary.get("traffic_speed_entry") else None
        via_waypoint = dictionary.get("via_waypoint") if dictionary.get("via_waypoint") else None
        # Return an object of this model
        return cls(distance,
                   duration,
                   end_address,
                   end_location,
                   start_address,
                   start_location,
                   steps,
                   traffic_speed_entry,
                   via_waypoint)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'distance={self.distance!r}, '
                f'duration={self.duration!r}, '
                f'end_address={self.end_address!r}, '
                f'end_location={self.end_location!r}, '
                f'start_address={self.start_address!r}, '
                f'start_location={self.start_location!r}, '
                f'steps={self.steps!r}, '
                f'traffic_speed_entry={self.traffic_speed_entry!r}, '
                f'via_waypoint={self.via_waypoint!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'distance={self.distance!s}, '
                f'duration={self.duration!s}, '
                f'end_address={self.end_address!s}, '
                f'end_location={self.end_location!s}, '
                f'start_address={self.start_address!s}, '
                f'start_location={self.start_location!s}, '
                f'steps={self.steps!s}, '
                f'traffic_speed_entry={self.traffic_speed_entry!s}, '
                f'via_waypoint={self.via_waypoint!s})')
