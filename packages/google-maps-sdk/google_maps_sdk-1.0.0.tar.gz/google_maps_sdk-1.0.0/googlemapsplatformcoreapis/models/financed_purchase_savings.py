# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.annual_loan_payment import AnnualLoanPayment
from googlemapsplatformcoreapis.models.rebate_value_1 import RebateValue1
from googlemapsplatformcoreapis.models.savings import Savings


class FinancedPurchaseSavings(object):

    """Implementation of the 'FinancedPurchaseSavings' model.

    Attributes:
        annual_loan_payment (AnnualLoanPayment): The model property of type
            AnnualLoanPayment.
        rebate_value (RebateValue1): The model property of type RebateValue1.
        loan_interest_rate (float): The model property of type float.
        savings (Savings): The model property of type Savings.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "annual_loan_payment": 'annualLoanPayment',
        "rebate_value": 'rebateValue',
        "loan_interest_rate": 'loanInterestRate',
        "savings": 'savings'
    }

    def __init__(self,
                 annual_loan_payment=None,
                 rebate_value=None,
                 loan_interest_rate=None,
                 savings=None):
        """Constructor for the FinancedPurchaseSavings class"""

        # Initialize members of the class
        self.annual_loan_payment = annual_loan_payment 
        self.rebate_value = rebate_value 
        self.loan_interest_rate = loan_interest_rate 
        self.savings = savings 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        annual_loan_payment = AnnualLoanPayment.from_dictionary(dictionary.get('annualLoanPayment')) if dictionary.get('annualLoanPayment') else None
        rebate_value = RebateValue1.from_dictionary(dictionary.get('rebateValue')) if dictionary.get('rebateValue') else None
        loan_interest_rate = dictionary.get("loanInterestRate") if dictionary.get("loanInterestRate") else None
        savings = Savings.from_dictionary(dictionary.get('savings')) if dictionary.get('savings') else None
        # Return an object of this model
        return cls(annual_loan_payment,
                   rebate_value,
                   loan_interest_rate,
                   savings)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'annual_loan_payment={self.annual_loan_payment!r}, '
                f'rebate_value={self.rebate_value!r}, '
                f'loan_interest_rate={self.loan_interest_rate!r}, '
                f'savings={self.savings!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'annual_loan_payment={self.annual_loan_payment!s}, '
                f'rebate_value={self.rebate_value!s}, '
                f'loan_interest_rate={self.loan_interest_rate!s}, '
                f'savings={self.savings!s})')
