# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.filter import Filter


class AggregatePreviewRequest(object):

    """Implementation of the 'aggregate (Preview) Request' model.

    Attributes:
        insights (List[str]): The model property of type List[str].
        filter (Filter): The model property of type Filter.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "insights": 'insights',
        "filter": 'filter'
    }

    def __init__(self,
                 insights=None,
                 filter=None):
        """Constructor for the AggregatePreviewRequest class"""

        # Initialize members of the class
        self.insights = insights 
        self.filter = filter 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        insights = dictionary.get("insights") if dictionary.get("insights") else None
        filter = Filter.from_dictionary(dictionary.get('filter')) if dictionary.get('filter') else None
        # Return an object of this model
        return cls(insights,
                   filter)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'insights={self.insights!r}, '
                f'filter={self.filter!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'insights={self.insights!s}, '
                f'filter={self.filter!s})')
