# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.period import Period


class OpeningHours(object):

    """Implementation of the 'OpeningHours' model.

    Attributes:
        open_now (bool): The model property of type bool.
        periods (List[Period]): The model property of type List[Period].
        weekday_text (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "open_now": 'open_now',
        "periods": 'periods',
        "weekday_text": 'weekday_text'
    }

    def __init__(self,
                 open_now=None,
                 periods=None,
                 weekday_text=None):
        """Constructor for the OpeningHours class"""

        # Initialize members of the class
        self.open_now = open_now 
        self.periods = periods 
        self.weekday_text = weekday_text 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        open_now = dictionary.get("open_now") if "open_now" in dictionary.keys() else None
        periods = None
        if dictionary.get('periods') is not None:
            periods = [Period.from_dictionary(x) for x in dictionary.get('periods')]
        weekday_text = dictionary.get("weekday_text") if dictionary.get("weekday_text") else None
        # Return an object of this model
        return cls(open_now,
                   periods,
                   weekday_text)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'open_now={self.open_now!r}, '
                f'periods={self.periods!r}, '
                f'weekday_text={self.weekday_text!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'open_now={self.open_now!s}, '
                f'periods={self.periods!s}, '
                f'weekday_text={self.weekday_text!s})')
