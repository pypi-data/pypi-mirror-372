# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.end_location_4 import EndLocation4
from googlemapsplatformcoreapis.models.localized_values_1 import LocalizedValues1
from googlemapsplatformcoreapis.models.polyline_2 import Polyline2
from googlemapsplatformcoreapis.models.start_location_4 import StartLocation4
from googlemapsplatformcoreapis.models.step_2 import Step2


class Leg2(object):

    """Implementation of the 'Leg2' model.

    Attributes:
        distance_meters (int): The model property of type int.
        duration (str): The model property of type str.
        static_duration (str): The model property of type str.
        polyline (Polyline2): The model property of type Polyline2.
        start_location (StartLocation4): The model property of type
            StartLocation4.
        end_location (EndLocation4): The model property of type EndLocation4.
        steps (List[Step2]): The model property of type List[Step2].
        localized_values (LocalizedValues1): The model property of type
            LocalizedValues1.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "distance_meters": 'distanceMeters',
        "duration": 'duration',
        "static_duration": 'staticDuration',
        "polyline": 'polyline',
        "start_location": 'startLocation',
        "end_location": 'endLocation',
        "steps": 'steps',
        "localized_values": 'localizedValues'
    }

    def __init__(self,
                 distance_meters=None,
                 duration=None,
                 static_duration=None,
                 polyline=None,
                 start_location=None,
                 end_location=None,
                 steps=None,
                 localized_values=None):
        """Constructor for the Leg2 class"""

        # Initialize members of the class
        self.distance_meters = distance_meters 
        self.duration = duration 
        self.static_duration = static_duration 
        self.polyline = polyline 
        self.start_location = start_location 
        self.end_location = end_location 
        self.steps = steps 
        self.localized_values = localized_values 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        distance_meters = dictionary.get("distanceMeters") if dictionary.get("distanceMeters") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else None
        static_duration = dictionary.get("staticDuration") if dictionary.get("staticDuration") else None
        polyline = Polyline2.from_dictionary(dictionary.get('polyline')) if dictionary.get('polyline') else None
        start_location = StartLocation4.from_dictionary(dictionary.get('startLocation')) if dictionary.get('startLocation') else None
        end_location = EndLocation4.from_dictionary(dictionary.get('endLocation')) if dictionary.get('endLocation') else None
        steps = None
        if dictionary.get('steps') is not None:
            steps = [Step2.from_dictionary(x) for x in dictionary.get('steps')]
        localized_values = LocalizedValues1.from_dictionary(dictionary.get('localizedValues')) if dictionary.get('localizedValues') else None
        # Return an object of this model
        return cls(distance_meters,
                   duration,
                   static_duration,
                   polyline,
                   start_location,
                   end_location,
                   steps,
                   localized_values)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'distance_meters={self.distance_meters!r}, '
                f'duration={self.duration!r}, '
                f'static_duration={self.static_duration!r}, '
                f'polyline={self.polyline!r}, '
                f'start_location={self.start_location!r}, '
                f'end_location={self.end_location!r}, '
                f'steps={self.steps!r}, '
                f'localized_values={self.localized_values!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'distance_meters={self.distance_meters!s}, '
                f'duration={self.duration!s}, '
                f'static_duration={self.static_duration!s}, '
                f'polyline={self.polyline!s}, '
                f'start_location={self.start_location!s}, '
                f'end_location={self.end_location!s}, '
                f'steps={self.steps!s}, '
                f'localized_values={self.localized_values!s})')
