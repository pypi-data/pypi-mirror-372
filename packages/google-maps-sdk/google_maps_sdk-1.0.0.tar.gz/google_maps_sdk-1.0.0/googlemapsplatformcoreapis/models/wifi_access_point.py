# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class WifiAccessPoint(object):

    """Implementation of the 'WifiAccessPoint' model.

    Attributes:
        mac_address (str): The model property of type str.
        signal_strength (str): The model property of type str.
        signal_to_noise_ratio (str): The model property of type str.
        age (str): The model property of type str.
        channel (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mac_address": 'macAddress',
        "signal_strength": 'signalStrength',
        "signal_to_noise_ratio": 'signalToNoiseRatio',
        "age": 'age',
        "channel": 'channel'
    }

    def __init__(self,
                 mac_address=None,
                 signal_strength=None,
                 signal_to_noise_ratio=None,
                 age=None,
                 channel=None):
        """Constructor for the WifiAccessPoint class"""

        # Initialize members of the class
        self.mac_address = mac_address 
        self.signal_strength = signal_strength 
        self.signal_to_noise_ratio = signal_to_noise_ratio 
        self.age = age 
        self.channel = channel 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mac_address = dictionary.get("macAddress") if dictionary.get("macAddress") else None
        signal_strength = dictionary.get("signalStrength") if dictionary.get("signalStrength") else None
        signal_to_noise_ratio = dictionary.get("signalToNoiseRatio") if dictionary.get("signalToNoiseRatio") else None
        age = dictionary.get("age") if dictionary.get("age") else None
        channel = dictionary.get("channel") if dictionary.get("channel") else None
        # Return an object of this model
        return cls(mac_address,
                   signal_strength,
                   signal_to_noise_ratio,
                   age,
                   channel)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mac_address={self.mac_address!r}, '
                f'signal_strength={self.signal_strength!r}, '
                f'signal_to_noise_ratio={self.signal_to_noise_ratio!r}, '
                f'age={self.age!r}, '
                f'channel={self.channel!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mac_address={self.mac_address!s}, '
                f'signal_strength={self.signal_strength!s}, '
                f'signal_to_noise_ratio={self.signal_to_noise_ratio!s}, '
                f'age={self.age!s}, '
                f'channel={self.channel!s})')
