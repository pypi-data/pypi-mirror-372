# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.contextual_content import ContextualContent
from googlemapsplatformcoreapis.models.place_2 import Place2


class M200OK34(object):

    """Implementation of the '200 OK34' model.

    Attributes:
        places (List[Place2]): The model property of type List[Place2].
        contextual_contents (List[ContextualContent]): The model property of
            type List[ContextualContent].
        next_page_token (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "places": 'places',
        "contextual_contents": 'contextualContents',
        "next_page_token": 'nextPageToken'
    }

    def __init__(self,
                 places=None,
                 contextual_contents=None,
                 next_page_token=None):
        """Constructor for the M200OK34 class"""

        # Initialize members of the class
        self.places = places 
        self.contextual_contents = contextual_contents 
        self.next_page_token = next_page_token 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        places = None
        if dictionary.get('places') is not None:
            places = [Place2.from_dictionary(x) for x in dictionary.get('places')]
        contextual_contents = None
        if dictionary.get('contextualContents') is not None:
            contextual_contents = [ContextualContent.from_dictionary(x) for x in dictionary.get('contextualContents')]
        next_page_token = dictionary.get("nextPageToken") if dictionary.get("nextPageToken") else None
        # Return an object of this model
        return cls(places,
                   contextual_contents,
                   next_page_token)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'places={self.places!r}, '
                f'contextual_contents={self.contextual_contents!r}, '
                f'next_page_token={self.next_page_token!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'places={self.places!s}, '
                f'contextual_contents={self.contextual_contents!s}, '
                f'next_page_token={self.next_page_token!s})')
