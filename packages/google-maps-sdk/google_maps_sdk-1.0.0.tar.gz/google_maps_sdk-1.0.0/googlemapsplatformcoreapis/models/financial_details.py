# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.cost_of_electricity_without_solar import CostOfElectricityWithoutSolar
from googlemapsplatformcoreapis.models.federal_incentive import FederalIncentive
from googlemapsplatformcoreapis.models.lifetime_srec_total import LifetimeSrecTotal
from googlemapsplatformcoreapis.models.remaining_lifetime_utility_bill import RemainingLifetimeUtilityBill
from googlemapsplatformcoreapis.models.state_incentive import StateIncentive
from googlemapsplatformcoreapis.models.utility_incentive import UtilityIncentive


class FinancialDetails(object):

    """Implementation of the 'FinancialDetails' model.

    Attributes:
        initial_ac_kwh_per_year (float): The model property of type float.
        remaining_lifetime_utility_bill (RemainingLifetimeUtilityBill): The
            model property of type RemainingLifetimeUtilityBill.
        federal_incentive (FederalIncentive): The model property of type
            FederalIncentive.
        state_incentive (StateIncentive): The model property of type
            StateIncentive.
        utility_incentive (UtilityIncentive): The model property of type
            UtilityIncentive.
        lifetime_srec_total (LifetimeSrecTotal): The model property of type
            LifetimeSrecTotal.
        cost_of_electricity_without_solar (CostOfElectricityWithoutSolar): The
            model property of type CostOfElectricityWithoutSolar.
        net_metering_allowed (bool): The model property of type bool.
        solar_percentage (float): The model property of type float.
        percentage_exported_to_grid (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "initial_ac_kwh_per_year": 'initialAcKwhPerYear',
        "remaining_lifetime_utility_bill": 'remainingLifetimeUtilityBill',
        "federal_incentive": 'federalIncentive',
        "state_incentive": 'stateIncentive',
        "utility_incentive": 'utilityIncentive',
        "lifetime_srec_total": 'lifetimeSrecTotal',
        "cost_of_electricity_without_solar": 'costOfElectricityWithoutSolar',
        "net_metering_allowed": 'netMeteringAllowed',
        "solar_percentage": 'solarPercentage',
        "percentage_exported_to_grid": 'percentageExportedToGrid'
    }

    def __init__(self,
                 initial_ac_kwh_per_year=None,
                 remaining_lifetime_utility_bill=None,
                 federal_incentive=None,
                 state_incentive=None,
                 utility_incentive=None,
                 lifetime_srec_total=None,
                 cost_of_electricity_without_solar=None,
                 net_metering_allowed=None,
                 solar_percentage=None,
                 percentage_exported_to_grid=None):
        """Constructor for the FinancialDetails class"""

        # Initialize members of the class
        self.initial_ac_kwh_per_year = initial_ac_kwh_per_year 
        self.remaining_lifetime_utility_bill = remaining_lifetime_utility_bill 
        self.federal_incentive = federal_incentive 
        self.state_incentive = state_incentive 
        self.utility_incentive = utility_incentive 
        self.lifetime_srec_total = lifetime_srec_total 
        self.cost_of_electricity_without_solar = cost_of_electricity_without_solar 
        self.net_metering_allowed = net_metering_allowed 
        self.solar_percentage = solar_percentage 
        self.percentage_exported_to_grid = percentage_exported_to_grid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        initial_ac_kwh_per_year = dictionary.get("initialAcKwhPerYear") if dictionary.get("initialAcKwhPerYear") else None
        remaining_lifetime_utility_bill = RemainingLifetimeUtilityBill.from_dictionary(dictionary.get('remainingLifetimeUtilityBill')) if dictionary.get('remainingLifetimeUtilityBill') else None
        federal_incentive = FederalIncentive.from_dictionary(dictionary.get('federalIncentive')) if dictionary.get('federalIncentive') else None
        state_incentive = StateIncentive.from_dictionary(dictionary.get('stateIncentive')) if dictionary.get('stateIncentive') else None
        utility_incentive = UtilityIncentive.from_dictionary(dictionary.get('utilityIncentive')) if dictionary.get('utilityIncentive') else None
        lifetime_srec_total = LifetimeSrecTotal.from_dictionary(dictionary.get('lifetimeSrecTotal')) if dictionary.get('lifetimeSrecTotal') else None
        cost_of_electricity_without_solar = CostOfElectricityWithoutSolar.from_dictionary(dictionary.get('costOfElectricityWithoutSolar')) if dictionary.get('costOfElectricityWithoutSolar') else None
        net_metering_allowed = dictionary.get("netMeteringAllowed") if "netMeteringAllowed" in dictionary.keys() else None
        solar_percentage = dictionary.get("solarPercentage") if dictionary.get("solarPercentage") else None
        percentage_exported_to_grid = dictionary.get("percentageExportedToGrid") if dictionary.get("percentageExportedToGrid") else None
        # Return an object of this model
        return cls(initial_ac_kwh_per_year,
                   remaining_lifetime_utility_bill,
                   federal_incentive,
                   state_incentive,
                   utility_incentive,
                   lifetime_srec_total,
                   cost_of_electricity_without_solar,
                   net_metering_allowed,
                   solar_percentage,
                   percentage_exported_to_grid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'initial_ac_kwh_per_year={self.initial_ac_kwh_per_year!r}, '
                f'remaining_lifetime_utility_bill={self.remaining_lifetime_utility_bill!r}, '
                f'federal_incentive={self.federal_incentive!r}, '
                f'state_incentive={self.state_incentive!r}, '
                f'utility_incentive={self.utility_incentive!r}, '
                f'lifetime_srec_total={self.lifetime_srec_total!r}, '
                f'cost_of_electricity_without_solar={self.cost_of_electricity_without_solar!r}, '
                f'net_metering_allowed={self.net_metering_allowed!r}, '
                f'solar_percentage={self.solar_percentage!r}, '
                f'percentage_exported_to_grid={self.percentage_exported_to_grid!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'initial_ac_kwh_per_year={self.initial_ac_kwh_per_year!s}, '
                f'remaining_lifetime_utility_bill={self.remaining_lifetime_utility_bill!s}, '
                f'federal_incentive={self.federal_incentive!s}, '
                f'state_incentive={self.state_incentive!s}, '
                f'utility_incentive={self.utility_incentive!s}, '
                f'lifetime_srec_total={self.lifetime_srec_total!s}, '
                f'cost_of_electricity_without_solar={self.cost_of_electricity_without_solar!s}, '
                f'net_metering_allowed={self.net_metering_allowed!s}, '
                f'solar_percentage={self.solar_percentage!s}, '
                f'percentage_exported_to_grid={self.percentage_exported_to_grid!s})')
