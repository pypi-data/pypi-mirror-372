# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class AccessibilityOptions(object):

    """Implementation of the 'AccessibilityOptions' model.

    Attributes:
        wheelchair_accessible_parking (bool): The model property of type bool.
        wheelchair_accessible_entrance (bool): The model property of type bool.
        wheelchair_accessible_restroom (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "wheelchair_accessible_parking": 'wheelchairAccessibleParking',
        "wheelchair_accessible_entrance": 'wheelchairAccessibleEntrance',
        "wheelchair_accessible_restroom": 'wheelchairAccessibleRestroom'
    }

    def __init__(self,
                 wheelchair_accessible_parking=None,
                 wheelchair_accessible_entrance=None,
                 wheelchair_accessible_restroom=None):
        """Constructor for the AccessibilityOptions class"""

        # Initialize members of the class
        self.wheelchair_accessible_parking = wheelchair_accessible_parking 
        self.wheelchair_accessible_entrance = wheelchair_accessible_entrance 
        self.wheelchair_accessible_restroom = wheelchair_accessible_restroom 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        wheelchair_accessible_parking = dictionary.get("wheelchairAccessibleParking") if "wheelchairAccessibleParking" in dictionary.keys() else None
        wheelchair_accessible_entrance = dictionary.get("wheelchairAccessibleEntrance") if "wheelchairAccessibleEntrance" in dictionary.keys() else None
        wheelchair_accessible_restroom = dictionary.get("wheelchairAccessibleRestroom") if "wheelchairAccessibleRestroom" in dictionary.keys() else None
        # Return an object of this model
        return cls(wheelchair_accessible_parking,
                   wheelchair_accessible_entrance,
                   wheelchair_accessible_restroom)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'wheelchair_accessible_parking={self.wheelchair_accessible_parking!r}, '
                f'wheelchair_accessible_entrance={self.wheelchair_accessible_entrance!r}, '
                f'wheelchair_accessible_restroom={self.wheelchair_accessible_restroom!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'wheelchair_accessible_parking={self.wheelchair_accessible_parking!s}, '
                f'wheelchair_accessible_entrance={self.wheelchair_accessible_entrance!s}, '
                f'wheelchair_accessible_restroom={self.wheelchair_accessible_restroom!s})')
