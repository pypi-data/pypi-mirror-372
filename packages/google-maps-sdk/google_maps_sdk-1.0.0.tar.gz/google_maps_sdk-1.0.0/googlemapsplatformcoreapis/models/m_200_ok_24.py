# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.result_8 import Result8


class M200OK24(object):

    """Implementation of the '200 OK24' model.

    Attributes:
        html_attributions (List[str]): The model property of type List[str].
        results (List[Result8]): The model property of type List[Result8].
        status (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "html_attributions": 'html_attributions',
        "results": 'results',
        "status": 'status'
    }

    def __init__(self,
                 html_attributions=None,
                 results=None,
                 status=None):
        """Constructor for the M200OK24 class"""

        # Initialize members of the class
        self.html_attributions = html_attributions 
        self.results = results 
        self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        html_attributions = dictionary.get("html_attributions") if dictionary.get("html_attributions") else None
        results = None
        if dictionary.get('results') is not None:
            results = [Result8.from_dictionary(x) for x in dictionary.get('results')]
        status = dictionary.get("status") if dictionary.get("status") else None
        # Return an object of this model
        return cls(html_attributions,
                   results,
                   status)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'html_attributions={self.html_attributions!r}, '
                f'results={self.results!r}, '
                f'status={self.status!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'html_attributions={self.html_attributions!s}, '
                f'results={self.results!s}, '
                f'status={self.status!s})')
