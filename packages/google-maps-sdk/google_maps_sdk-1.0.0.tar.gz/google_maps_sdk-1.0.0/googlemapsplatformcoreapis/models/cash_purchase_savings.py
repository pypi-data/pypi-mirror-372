# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.out_of_pocket_cost import OutOfPocketCost
from googlemapsplatformcoreapis.models.rebate_value import RebateValue
from googlemapsplatformcoreapis.models.savings import Savings
from googlemapsplatformcoreapis.models.upfront_cost import UpfrontCost


class CashPurchaseSavings(object):

    """Implementation of the 'CashPurchaseSavings' model.

    Attributes:
        out_of_pocket_cost (OutOfPocketCost): The model property of type
            OutOfPocketCost.
        upfront_cost (UpfrontCost): The model property of type UpfrontCost.
        rebate_value (RebateValue): The model property of type RebateValue.
        payback_years (float | int): The model property of type float | int.
        savings (Savings): The model property of type Savings.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "out_of_pocket_cost": 'outOfPocketCost',
        "upfront_cost": 'upfrontCost',
        "rebate_value": 'rebateValue',
        "payback_years": 'paybackYears',
        "savings": 'savings'
    }

    def __init__(self,
                 out_of_pocket_cost=None,
                 upfront_cost=None,
                 rebate_value=None,
                 payback_years=None,
                 savings=None):
        """Constructor for the CashPurchaseSavings class"""

        # Initialize members of the class
        self.out_of_pocket_cost = out_of_pocket_cost 
        self.upfront_cost = upfront_cost 
        self.rebate_value = rebate_value 
        self.payback_years = payback_years 
        self.savings = savings 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from googlemapsplatformcoreapis.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        out_of_pocket_cost = OutOfPocketCost.from_dictionary(dictionary.get('outOfPocketCost')) if dictionary.get('outOfPocketCost') else None
        upfront_cost = UpfrontCost.from_dictionary(dictionary.get('upfrontCost')) if dictionary.get('upfrontCost') else None
        rebate_value = RebateValue.from_dictionary(dictionary.get('rebateValue')) if dictionary.get('rebateValue') else None
        payback_years = APIHelper.deserialize_union_type(UnionTypeLookUp.get('CashPurchaseSavingsPaybackYears'), dictionary.get('paybackYears'), False) if dictionary.get('paybackYears') is not None else None
        savings = Savings.from_dictionary(dictionary.get('savings')) if dictionary.get('savings') else None
        # Return an object of this model
        return cls(out_of_pocket_cost,
                   upfront_cost,
                   rebate_value,
                   payback_years,
                   savings)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from googlemapsplatformcoreapis.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.out_of_pocket_cost,
                                           type_callable=lambda value: OutOfPocketCost.validate(value),
                                           is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.upfront_cost,
                                            type_callable=lambda value: UpfrontCost.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.rebate_value,
                                            type_callable=lambda value: RebateValue.validate(value),
                                            is_model_dict=True) \
                and UnionTypeLookUp.get('CashPurchaseSavingsPaybackYears').validate(dictionary.payback_years).is_valid \
                and APIHelper.is_valid_type(value=dictionary.savings,
                                            type_callable=lambda value: Savings.validate(value),
                                            is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('outOfPocketCost'),
                                       type_callable=lambda value: OutOfPocketCost.validate(value),
                                       is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('upfrontCost'),
                                        type_callable=lambda value: UpfrontCost.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('rebateValue'),
                                        type_callable=lambda value: RebateValue.validate(value),
                                        is_model_dict=True) \
            and UnionTypeLookUp.get('CashPurchaseSavingsPaybackYears').validate(dictionary.get('paybackYears')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('savings'),
                                        type_callable=lambda value: Savings.validate(value),
                                        is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'out_of_pocket_cost={self.out_of_pocket_cost!r}, '
                f'upfront_cost={self.upfront_cost!r}, '
                f'rebate_value={self.rebate_value!r}, '
                f'payback_years={self.payback_years!r}, '
                f'savings={self.savings!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'out_of_pocket_cost={self.out_of_pocket_cost!s}, '
                f'upfront_cost={self.upfront_cost!s}, '
                f'rebate_value={self.rebate_value!s}, '
                f'payback_years={self.payback_years!s}, '
                f'savings={self.savings!s})')
