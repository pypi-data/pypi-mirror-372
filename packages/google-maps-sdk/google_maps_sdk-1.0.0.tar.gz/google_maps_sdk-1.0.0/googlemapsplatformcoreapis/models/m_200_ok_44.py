# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.location_2 import Location2


class M200OK44(object):

    """Implementation of the '200 OK44' model.

    Attributes:
        copyright (str): The model property of type str.
        date (str): The model property of type str.
        location (Location2): The model property of type Location2.
        pano_id (str): The model property of type str.
        status (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "copyright": 'copyright',
        "date": 'date',
        "location": 'location',
        "pano_id": 'pano_id',
        "status": 'status'
    }

    def __init__(self,
                 copyright=None,
                 date=None,
                 location=None,
                 pano_id=None,
                 status=None):
        """Constructor for the M200OK44 class"""

        # Initialize members of the class
        self.copyright = copyright 
        self.date = date 
        self.location = location 
        self.pano_id = pano_id 
        self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        copyright = dictionary.get("copyright") if dictionary.get("copyright") else None
        date = dictionary.get("date") if dictionary.get("date") else None
        location = Location2.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        pano_id = dictionary.get("pano_id") if dictionary.get("pano_id") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        # Return an object of this model
        return cls(copyright,
                   date,
                   location,
                   pano_id,
                   status)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'copyright={self.copyright!r}, '
                f'date={self.date!r}, '
                f'location={self.location!r}, '
                f'pano_id={self.pano_id!r}, '
                f'status={self.status!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'copyright={self.copyright!s}, '
                f'date={self.date!s}, '
                f'location={self.location!s}, '
                f'pano_id={self.pano_id!s}, '
                f'status={self.status!s})')
