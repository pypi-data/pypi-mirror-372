# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class PrimaryTypeDisplayName(object):

    """Implementation of the 'PrimaryTypeDisplayName' model.

    Attributes:
        text (str): The model property of type str.
        language_code (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "text": 'text',
        "language_code": 'languageCode'
    }

    def __init__(self,
                 text=None,
                 language_code=None):
        """Constructor for the PrimaryTypeDisplayName class"""

        # Initialize members of the class
        self.text = text 
        self.language_code = language_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        text = dictionary.get("text") if dictionary.get("text") else None
        language_code = dictionary.get("languageCode") if dictionary.get("languageCode") else None
        # Return an object of this model
        return cls(text,
                   language_code)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.text,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.language_code,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('text'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('languageCode'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!r}, '
                f'language_code={self.language_code!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!s}, '
                f'language_code={self.language_code!s})')
