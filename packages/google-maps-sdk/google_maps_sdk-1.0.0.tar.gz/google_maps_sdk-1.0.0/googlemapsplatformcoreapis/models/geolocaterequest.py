# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.cell_tower import CellTower
from googlemapsplatformcoreapis.models.wifi_access_point import WifiAccessPoint


class Geolocaterequest(object):

    """Implementation of the 'geolocaterequest' model.

    Attributes:
        home_mobile_country_code (str): The model property of type str.
        home_mobile_network_code (str): The model property of type str.
        radio_type (str): The model property of type str.
        carrier (str): The model property of type str.
        consider_ip (str): The model property of type str.
        cell_towers (List[CellTower]): The model property of type
            List[CellTower].
        wifi_access_points (List[WifiAccessPoint]): The model property of type
            List[WifiAccessPoint].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "home_mobile_country_code": 'homeMobileCountryCode',
        "home_mobile_network_code": 'homeMobileNetworkCode',
        "radio_type": 'radioType',
        "carrier": 'carrier',
        "consider_ip": 'considerIp',
        "cell_towers": 'cellTowers',
        "wifi_access_points": 'wifiAccessPoints'
    }

    def __init__(self,
                 home_mobile_country_code=None,
                 home_mobile_network_code=None,
                 radio_type=None,
                 carrier=None,
                 consider_ip=None,
                 cell_towers=None,
                 wifi_access_points=None):
        """Constructor for the Geolocaterequest class"""

        # Initialize members of the class
        self.home_mobile_country_code = home_mobile_country_code 
        self.home_mobile_network_code = home_mobile_network_code 
        self.radio_type = radio_type 
        self.carrier = carrier 
        self.consider_ip = consider_ip 
        self.cell_towers = cell_towers 
        self.wifi_access_points = wifi_access_points 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        home_mobile_country_code = dictionary.get("homeMobileCountryCode") if dictionary.get("homeMobileCountryCode") else None
        home_mobile_network_code = dictionary.get("homeMobileNetworkCode") if dictionary.get("homeMobileNetworkCode") else None
        radio_type = dictionary.get("radioType") if dictionary.get("radioType") else None
        carrier = dictionary.get("carrier") if dictionary.get("carrier") else None
        consider_ip = dictionary.get("considerIp") if dictionary.get("considerIp") else None
        cell_towers = None
        if dictionary.get('cellTowers') is not None:
            cell_towers = [CellTower.from_dictionary(x) for x in dictionary.get('cellTowers')]
        wifi_access_points = None
        if dictionary.get('wifiAccessPoints') is not None:
            wifi_access_points = [WifiAccessPoint.from_dictionary(x) for x in dictionary.get('wifiAccessPoints')]
        # Return an object of this model
        return cls(home_mobile_country_code,
                   home_mobile_network_code,
                   radio_type,
                   carrier,
                   consider_ip,
                   cell_towers,
                   wifi_access_points)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'home_mobile_country_code={self.home_mobile_country_code!r}, '
                f'home_mobile_network_code={self.home_mobile_network_code!r}, '
                f'radio_type={self.radio_type!r}, '
                f'carrier={self.carrier!r}, '
                f'consider_ip={self.consider_ip!r}, '
                f'cell_towers={self.cell_towers!r}, '
                f'wifi_access_points={self.wifi_access_points!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'home_mobile_country_code={self.home_mobile_country_code!s}, '
                f'home_mobile_network_code={self.home_mobile_network_code!s}, '
                f'radio_type={self.radio_type!s}, '
                f'carrier={self.carrier!s}, '
                f'consider_ip={self.consider_ip!s}, '
                f'cell_towers={self.cell_towers!s}, '
                f'wifi_access_points={self.wifi_access_points!s})')
