# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.close_2 import Close2
from googlemapsplatformcoreapis.models.open_2 import Open2


class Period6(object):

    """Implementation of the 'Period6' model.

    Attributes:
        open (Open2): The model property of type Open2.
        close (Close2): The model property of type Close2.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "open": 'open',
        "close": 'close'
    }

    _optionals = [
        'close',
    ]

    def __init__(self,
                 open=None,
                 close=APIHelper.SKIP):
        """Constructor for the Period6 class"""

        # Initialize members of the class
        self.open = open 
        if close is not APIHelper.SKIP:
            self.close = close 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        open = Open2.from_dictionary(dictionary.get('open')) if dictionary.get('open') else None
        close = Close2.from_dictionary(dictionary.get('close')) if 'close' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(open,
                   close)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.open,
                                           type_callable=lambda value: Open2.validate(value),
                                           is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('open'),
                                       type_callable=lambda value: Open2.validate(value),
                                       is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'open={self.open!r}, '
                f'close={(self.close if hasattr(self, "close") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'open={self.open!s}, '
                f'close={(self.close if hasattr(self, "close") else None)!s})')
