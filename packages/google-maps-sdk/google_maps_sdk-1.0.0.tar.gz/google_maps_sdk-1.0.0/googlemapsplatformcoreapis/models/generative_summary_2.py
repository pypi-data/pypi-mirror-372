# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.description import Description
from googlemapsplatformcoreapis.models.overview import Overview
from googlemapsplatformcoreapis.models.references import References


class GenerativeSummary2(object):

    """Implementation of the 'GenerativeSummary2' model.

    Attributes:
        overview (Overview): The model property of type Overview.
        description (Description): The model property of type Description.
        references (References): The model property of type References.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "overview": 'overview',
        "description": 'description',
        "references": 'references'
    }

    _optionals = [
        'description',
        'references',
    ]

    def __init__(self,
                 overview=None,
                 description=APIHelper.SKIP,
                 references=APIHelper.SKIP):
        """Constructor for the GenerativeSummary2 class"""

        # Initialize members of the class
        self.overview = overview 
        if description is not APIHelper.SKIP:
            self.description = description 
        if references is not APIHelper.SKIP:
            self.references = references 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        overview = Overview.from_dictionary(dictionary.get('overview')) if dictionary.get('overview') else None
        description = Description.from_dictionary(dictionary.get('description')) if 'description' in dictionary.keys() else APIHelper.SKIP
        references = References.from_dictionary(dictionary.get('references')) if 'references' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(overview,
                   description,
                   references)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'overview={self.overview!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'references={(self.references if hasattr(self, "references") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'overview={self.overview!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'references={(self.references if hasattr(self, "references") else None)!s})')
