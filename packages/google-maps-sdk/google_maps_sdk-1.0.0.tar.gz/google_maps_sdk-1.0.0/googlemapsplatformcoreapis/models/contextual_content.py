# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.justification import Justification
from googlemapsplatformcoreapis.models.photo_6 import Photo6
from googlemapsplatformcoreapis.models.review_2 import Review2


class ContextualContent(object):

    """Implementation of the 'ContextualContent' model.

    Attributes:
        reviews (List[Review2]): The model property of type List[Review2].
        photos (List[Photo6]): The model property of type List[Photo6].
        justifications (List[Justification]): The model property of type
            List[Justification].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "photos": 'photos',
        "justifications": 'justifications',
        "reviews": 'reviews'
    }

    _optionals = [
        'reviews',
    ]

    def __init__(self,
                 photos=None,
                 justifications=None,
                 reviews=APIHelper.SKIP):
        """Constructor for the ContextualContent class"""

        # Initialize members of the class
        if reviews is not APIHelper.SKIP:
            self.reviews = reviews 
        self.photos = photos 
        self.justifications = justifications 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        photos = None
        if dictionary.get('photos') is not None:
            photos = [Photo6.from_dictionary(x) for x in dictionary.get('photos')]
        justifications = None
        if dictionary.get('justifications') is not None:
            justifications = [Justification.from_dictionary(x) for x in dictionary.get('justifications')]
        reviews = None
        if dictionary.get('reviews') is not None:
            reviews = [Review2.from_dictionary(x) for x in dictionary.get('reviews')]
        else:
            reviews = APIHelper.SKIP
        # Return an object of this model
        return cls(photos,
                   justifications,
                   reviews)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'reviews={(self.reviews if hasattr(self, "reviews") else None)!r}, '
                f'photos={self.photos!r}, '
                f'justifications={self.justifications!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'reviews={(self.reviews if hasattr(self, "reviews") else None)!s}, '
                f'photos={self.photos!s}, '
                f'justifications={self.justifications!s})')
