# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class BusinessAvailabilityAttributesJustification(object):

    """Implementation of the 'BusinessAvailabilityAttributesJustification' model.

    Attributes:
        takeout (bool): The model property of type bool.
        dine_in (bool): The model property of type bool.
        delivery (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "takeout": 'takeout',
        "dine_in": 'dineIn',
        "delivery": 'delivery'
    }

    _optionals = [
        'takeout',
        'dine_in',
        'delivery',
    ]

    def __init__(self,
                 takeout=APIHelper.SKIP,
                 dine_in=APIHelper.SKIP,
                 delivery=APIHelper.SKIP):
        """Constructor for the BusinessAvailabilityAttributesJustification class"""

        # Initialize members of the class
        if takeout is not APIHelper.SKIP:
            self.takeout = takeout 
        if dine_in is not APIHelper.SKIP:
            self.dine_in = dine_in 
        if delivery is not APIHelper.SKIP:
            self.delivery = delivery 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        takeout = dictionary.get("takeout") if "takeout" in dictionary.keys() else APIHelper.SKIP
        dine_in = dictionary.get("dineIn") if "dineIn" in dictionary.keys() else APIHelper.SKIP
        delivery = dictionary.get("delivery") if "delivery" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(takeout,
                   dine_in,
                   delivery)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'takeout={(self.takeout if hasattr(self, "takeout") else None)!r}, '
                f'dine_in={(self.dine_in if hasattr(self, "dine_in") else None)!r}, '
                f'delivery={(self.delivery if hasattr(self, "delivery") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'takeout={(self.takeout if hasattr(self, "takeout") else None)!s}, '
                f'dine_in={(self.dine_in if hasattr(self, "dine_in") else None)!s}, '
                f'delivery={(self.delivery if hasattr(self, "delivery") else None)!s})')
