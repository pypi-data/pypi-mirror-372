# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ImageryProcessedDate(object):

    """Implementation of the 'ImageryProcessedDate' model.

    Attributes:
        year (int): The model property of type int.
        month (int): The model property of type int.
        day (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "year": 'year',
        "month": 'month',
        "day": 'day'
    }

    def __init__(self,
                 year=None,
                 month=None,
                 day=None):
        """Constructor for the ImageryProcessedDate class"""

        # Initialize members of the class
        self.year = year 
        self.month = month 
        self.day = day 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        year = dictionary.get("year") if dictionary.get("year") else None
        month = dictionary.get("month") if dictionary.get("month") else None
        day = dictionary.get("day") if dictionary.get("day") else None
        # Return an object of this model
        return cls(year,
                   month,
                   day)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'year={self.year!r}, '
                f'month={self.month!r}, '
                f'day={self.day!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'year={self.year!s}, '
                f'month={self.month!s}, '
                f'day={self.day!s})')
