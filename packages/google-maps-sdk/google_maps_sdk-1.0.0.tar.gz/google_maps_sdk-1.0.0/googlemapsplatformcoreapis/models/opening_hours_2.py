# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class OpeningHours2(object):

    """Implementation of the 'OpeningHours2' model.

    Attributes:
        open_now (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "open_now": 'open_now'
    }

    def __init__(self,
                 open_now=None):
        """Constructor for the OpeningHours2 class"""

        # Initialize members of the class
        self.open_now = open_now 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        open_now = dictionary.get("open_now") if "open_now" in dictionary.keys() else None
        # Return an object of this model
        return cls(open_now)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.open_now,
                                           type_callable=lambda value: isinstance(value, bool))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('open_now'),
                                       type_callable=lambda value: isinstance(value, bool))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'open_now={self.open_now!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'open_now={self.open_now!s})')
