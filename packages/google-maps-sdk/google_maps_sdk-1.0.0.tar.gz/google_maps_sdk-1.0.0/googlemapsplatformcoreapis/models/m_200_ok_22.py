# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.candidate import Candidate


class M200OK22(object):

    """Implementation of the '200 OK22' model.

    Attributes:
        candidates (List[Candidate]): The model property of type
            List[Candidate].
        status (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "candidates": 'candidates',
        "status": 'status'
    }

    def __init__(self,
                 candidates=None,
                 status=None):
        """Constructor for the M200OK22 class"""

        # Initialize members of the class
        self.candidates = candidates 
        self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        candidates = None
        if dictionary.get('candidates') is not None:
            candidates = [Candidate.from_dictionary(x) for x in dictionary.get('candidates')]
        status = dictionary.get("status") if dictionary.get("status") else None
        # Return an object of this model
        return cls(candidates,
                   status)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'candidates={self.candidates!r}, '
                f'status={self.status!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'candidates={self.candidates!s}, '
                f'status={self.status!s})')
