# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.highlighted_text import HighlightedText
from googlemapsplatformcoreapis.models.review_2 import Review2


class ReviewJustification(object):

    """Implementation of the 'ReviewJustification' model.

    Attributes:
        highlighted_text (HighlightedText): The model property of type
            HighlightedText.
        review (Review2): The model property of type Review2.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "highlighted_text": 'highlightedText',
        "review": 'review'
    }

    def __init__(self,
                 highlighted_text=None,
                 review=None):
        """Constructor for the ReviewJustification class"""

        # Initialize members of the class
        self.highlighted_text = highlighted_text 
        self.review = review 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        highlighted_text = HighlightedText.from_dictionary(dictionary.get('highlightedText')) if dictionary.get('highlightedText') else None
        review = Review2.from_dictionary(dictionary.get('review')) if dictionary.get('review') else None
        # Return an object of this model
        return cls(highlighted_text,
                   review)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'highlighted_text={self.highlighted_text!r}, '
                f'review={self.review!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'highlighted_text={self.highlighted_text!s}, '
                f'review={self.review!s})')
