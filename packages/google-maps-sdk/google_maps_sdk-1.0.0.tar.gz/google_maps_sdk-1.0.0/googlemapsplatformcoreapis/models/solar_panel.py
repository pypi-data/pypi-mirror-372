# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.center import Center


class SolarPanel(object):

    """Implementation of the 'SolarPanel' model.

    Attributes:
        center (Center): The model property of type Center.
        orientation (str): The model property of type str.
        yearly_energy_dc_kwh (float): The model property of type float.
        segment_index (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "center": 'center',
        "orientation": 'orientation',
        "yearly_energy_dc_kwh": 'yearlyEnergyDcKwh',
        "segment_index": 'segmentIndex'
    }

    def __init__(self,
                 center=None,
                 orientation=None,
                 yearly_energy_dc_kwh=None,
                 segment_index=None):
        """Constructor for the SolarPanel class"""

        # Initialize members of the class
        self.center = center 
        self.orientation = orientation 
        self.yearly_energy_dc_kwh = yearly_energy_dc_kwh 
        self.segment_index = segment_index 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        center = Center.from_dictionary(dictionary.get('center')) if dictionary.get('center') else None
        orientation = dictionary.get("orientation") if dictionary.get("orientation") else None
        yearly_energy_dc_kwh = dictionary.get("yearlyEnergyDcKwh") if dictionary.get("yearlyEnergyDcKwh") else None
        segment_index = dictionary.get("segmentIndex") if dictionary.get("segmentIndex") else None
        # Return an object of this model
        return cls(center,
                   orientation,
                   yearly_energy_dc_kwh,
                   segment_index)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'center={self.center!r}, '
                f'orientation={self.orientation!r}, '
                f'yearly_energy_dc_kwh={self.yearly_energy_dc_kwh!r}, '
                f'segment_index={self.segment_index!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'center={self.center!s}, '
                f'orientation={self.orientation!s}, '
                f'yearly_energy_dc_kwh={self.yearly_energy_dc_kwh!s}, '
                f'segment_index={self.segment_index!s})')
