# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.imagery_date import ImageryDate
from googlemapsplatformcoreapis.models.imagery_processed_date import ImageryProcessedDate


class M200OK50(object):

    """Implementation of the '200 OK50' model.

    Attributes:
        imagery_date (ImageryDate): The model property of type ImageryDate.
        imagery_processed_date (ImageryProcessedDate): The model property of
            type ImageryProcessedDate.
        dsm_url (str): The model property of type str.
        rgb_url (str): The model property of type str.
        mask_url (str): The model property of type str.
        annual_flux_url (str): The model property of type str.
        monthly_flux_url (str): The model property of type str.
        hourly_shade_urls (List[str]): The model property of type List[str].
        imagery_quality (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "imagery_date": 'imageryDate',
        "imagery_processed_date": 'imageryProcessedDate',
        "dsm_url": 'dsmUrl',
        "rgb_url": 'rgbUrl',
        "mask_url": 'maskUrl',
        "annual_flux_url": 'annualFluxUrl',
        "monthly_flux_url": 'monthlyFluxUrl',
        "hourly_shade_urls": 'hourlyShadeUrls',
        "imagery_quality": 'imageryQuality'
    }

    def __init__(self,
                 imagery_date=None,
                 imagery_processed_date=None,
                 dsm_url=None,
                 rgb_url=None,
                 mask_url=None,
                 annual_flux_url=None,
                 monthly_flux_url=None,
                 hourly_shade_urls=None,
                 imagery_quality=None):
        """Constructor for the M200OK50 class"""

        # Initialize members of the class
        self.imagery_date = imagery_date 
        self.imagery_processed_date = imagery_processed_date 
        self.dsm_url = dsm_url 
        self.rgb_url = rgb_url 
        self.mask_url = mask_url 
        self.annual_flux_url = annual_flux_url 
        self.monthly_flux_url = monthly_flux_url 
        self.hourly_shade_urls = hourly_shade_urls 
        self.imagery_quality = imagery_quality 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        imagery_date = ImageryDate.from_dictionary(dictionary.get('imageryDate')) if dictionary.get('imageryDate') else None
        imagery_processed_date = ImageryProcessedDate.from_dictionary(dictionary.get('imageryProcessedDate')) if dictionary.get('imageryProcessedDate') else None
        dsm_url = dictionary.get("dsmUrl") if dictionary.get("dsmUrl") else None
        rgb_url = dictionary.get("rgbUrl") if dictionary.get("rgbUrl") else None
        mask_url = dictionary.get("maskUrl") if dictionary.get("maskUrl") else None
        annual_flux_url = dictionary.get("annualFluxUrl") if dictionary.get("annualFluxUrl") else None
        monthly_flux_url = dictionary.get("monthlyFluxUrl") if dictionary.get("monthlyFluxUrl") else None
        hourly_shade_urls = dictionary.get("hourlyShadeUrls") if dictionary.get("hourlyShadeUrls") else None
        imagery_quality = dictionary.get("imageryQuality") if dictionary.get("imageryQuality") else None
        # Return an object of this model
        return cls(imagery_date,
                   imagery_processed_date,
                   dsm_url,
                   rgb_url,
                   mask_url,
                   annual_flux_url,
                   monthly_flux_url,
                   hourly_shade_urls,
                   imagery_quality)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'imagery_date={self.imagery_date!r}, '
                f'imagery_processed_date={self.imagery_processed_date!r}, '
                f'dsm_url={self.dsm_url!r}, '
                f'rgb_url={self.rgb_url!r}, '
                f'mask_url={self.mask_url!r}, '
                f'annual_flux_url={self.annual_flux_url!r}, '
                f'monthly_flux_url={self.monthly_flux_url!r}, '
                f'hourly_shade_urls={self.hourly_shade_urls!r}, '
                f'imagery_quality={self.imagery_quality!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'imagery_date={self.imagery_date!s}, '
                f'imagery_processed_date={self.imagery_processed_date!s}, '
                f'dsm_url={self.dsm_url!s}, '
                f'rgb_url={self.rgb_url!s}, '
                f'mask_url={self.mask_url!s}, '
                f'annual_flux_url={self.annual_flux_url!s}, '
                f'monthly_flux_url={self.monthly_flux_url!s}, '
                f'hourly_shade_urls={self.hourly_shade_urls!s}, '
                f'imagery_quality={self.imagery_quality!s})')
