# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Address(object):

    """Implementation of the 'Address' model.

    Attributes:
        region_code (str): The model property of type str.
        locality (str): The model property of type str.
        address_lines (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "region_code": 'regionCode',
        "locality": 'locality',
        "address_lines": 'addressLines'
    }

    def __init__(self,
                 region_code=None,
                 locality=None,
                 address_lines=None):
        """Constructor for the Address class"""

        # Initialize members of the class
        self.region_code = region_code 
        self.locality = locality 
        self.address_lines = address_lines 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        region_code = dictionary.get("regionCode") if dictionary.get("regionCode") else None
        locality = dictionary.get("locality") if dictionary.get("locality") else None
        address_lines = dictionary.get("addressLines") if dictionary.get("addressLines") else None
        # Return an object of this model
        return cls(region_code,
                   locality,
                   address_lines)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'region_code={self.region_code!r}, '
                f'locality={self.locality!r}, '
                f'address_lines={self.address_lines!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'region_code={self.region_code!s}, '
                f'locality={self.locality!s}, '
                f'address_lines={self.address_lines!s})')
