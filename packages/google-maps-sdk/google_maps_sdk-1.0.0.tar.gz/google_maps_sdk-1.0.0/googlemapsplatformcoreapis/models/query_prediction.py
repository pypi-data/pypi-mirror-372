# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.structured_format import StructuredFormat
from googlemapsplatformcoreapis.models.text import Text


class QueryPrediction(object):

    """Implementation of the 'QueryPrediction' model.

    Attributes:
        text (Text): The model property of type Text.
        structured_format (StructuredFormat): The model property of type
            StructuredFormat.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "text": 'text',
        "structured_format": 'structuredFormat'
    }

    def __init__(self,
                 text=None,
                 structured_format=None):
        """Constructor for the QueryPrediction class"""

        # Initialize members of the class
        self.text = text 
        self.structured_format = structured_format 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        text = Text.from_dictionary(dictionary.get('text')) if dictionary.get('text') else None
        structured_format = StructuredFormat.from_dictionary(dictionary.get('structuredFormat')) if dictionary.get('structuredFormat') else None
        # Return an object of this model
        return cls(text,
                   structured_format)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!r}, '
                f'structured_format={self.structured_format!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'text={self.text!s}, '
                f'structured_format={self.structured_format!s})')
