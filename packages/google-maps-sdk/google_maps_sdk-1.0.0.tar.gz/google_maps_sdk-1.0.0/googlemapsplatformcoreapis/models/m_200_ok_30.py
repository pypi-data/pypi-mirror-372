# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.accessibility_options import AccessibilityOptions
from googlemapsplatformcoreapis.models.address_component_6 import AddressComponent6
from googlemapsplatformcoreapis.models.current_opening_hours import CurrentOpeningHours
from googlemapsplatformcoreapis.models.display_name import DisplayName
from googlemapsplatformcoreapis.models.editorial_summary import EditorialSummary
from googlemapsplatformcoreapis.models.location import Location
from googlemapsplatformcoreapis.models.photo_6 import Photo6
from googlemapsplatformcoreapis.models.plus_code_8 import PlusCode8
from googlemapsplatformcoreapis.models.primary_type_display_name import PrimaryTypeDisplayName
from googlemapsplatformcoreapis.models.regular_opening_hours import RegularOpeningHours
from googlemapsplatformcoreapis.models.review_2 import Review2
from googlemapsplatformcoreapis.models.viewport_10 import Viewport10


class M200OK30(object):

    """Implementation of the '200 OK30' model.

    Attributes:
        name (str): The model property of type str.
        id (str): The model property of type str.
        types (List[str]): The model property of type List[str].
        formatted_address (str): The model property of type str.
        address_components (List[AddressComponent6]): The model property of
            type List[AddressComponent6].
        plus_code (PlusCode8): The model property of type PlusCode8.
        location (Location): The model property of type Location.
        viewport (Viewport10): The model property of type Viewport10.
        rating (float): The model property of type float.
        google_maps_uri (str): The model property of type str.
        website_uri (str): The model property of type str.
        regular_opening_hours (RegularOpeningHours): The model property of
            type RegularOpeningHours.
        utc_offset_minutes (int): The model property of type int.
        adr_format_address (str): The model property of type str.
        business_status (str): The model property of type str.
        user_rating_count (int): The model property of type int.
        icon_mask_base_uri (str): The model property of type str.
        icon_background_color (str): The model property of type str.
        display_name (DisplayName): The model property of type DisplayName.
        primary_type_display_name (PrimaryTypeDisplayName): The model property
            of type PrimaryTypeDisplayName.
        current_opening_hours (CurrentOpeningHours): The model property of
            type CurrentOpeningHours.
        primary_type (str): The model property of type str.
        short_formatted_address (str): The model property of type str.
        editorial_summary (EditorialSummary): The model property of type
            EditorialSummary.
        reviews (List[Review2]): The model property of type List[Review2].
        photos (List[Photo6]): The model property of type List[Photo6].
        good_for_children (bool): The model property of type bool.
        accessibility_options (AccessibilityOptions): The model property of
            type AccessibilityOptions.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "id": 'id',
        "types": 'types',
        "formatted_address": 'formattedAddress',
        "address_components": 'addressComponents',
        "plus_code": 'plusCode',
        "location": 'location',
        "viewport": 'viewport',
        "rating": 'rating',
        "google_maps_uri": 'googleMapsUri',
        "website_uri": 'websiteUri',
        "regular_opening_hours": 'regularOpeningHours',
        "utc_offset_minutes": 'utcOffsetMinutes',
        "adr_format_address": 'adrFormatAddress',
        "business_status": 'businessStatus',
        "user_rating_count": 'userRatingCount',
        "icon_mask_base_uri": 'iconMaskBaseUri',
        "icon_background_color": 'iconBackgroundColor',
        "display_name": 'displayName',
        "primary_type_display_name": 'primaryTypeDisplayName',
        "current_opening_hours": 'currentOpeningHours',
        "primary_type": 'primaryType',
        "short_formatted_address": 'shortFormattedAddress',
        "editorial_summary": 'editorialSummary',
        "reviews": 'reviews',
        "photos": 'photos',
        "good_for_children": 'goodForChildren',
        "accessibility_options": 'accessibilityOptions'
    }

    def __init__(self,
                 name=None,
                 id=None,
                 types=None,
                 formatted_address=None,
                 address_components=None,
                 plus_code=None,
                 location=None,
                 viewport=None,
                 rating=None,
                 google_maps_uri=None,
                 website_uri=None,
                 regular_opening_hours=None,
                 utc_offset_minutes=None,
                 adr_format_address=None,
                 business_status=None,
                 user_rating_count=None,
                 icon_mask_base_uri=None,
                 icon_background_color=None,
                 display_name=None,
                 primary_type_display_name=None,
                 current_opening_hours=None,
                 primary_type=None,
                 short_formatted_address=None,
                 editorial_summary=None,
                 reviews=None,
                 photos=None,
                 good_for_children=None,
                 accessibility_options=None):
        """Constructor for the M200OK30 class"""

        # Initialize members of the class
        self.name = name 
        self.id = id 
        self.types = types 
        self.formatted_address = formatted_address 
        self.address_components = address_components 
        self.plus_code = plus_code 
        self.location = location 
        self.viewport = viewport 
        self.rating = rating 
        self.google_maps_uri = google_maps_uri 
        self.website_uri = website_uri 
        self.regular_opening_hours = regular_opening_hours 
        self.utc_offset_minutes = utc_offset_minutes 
        self.adr_format_address = adr_format_address 
        self.business_status = business_status 
        self.user_rating_count = user_rating_count 
        self.icon_mask_base_uri = icon_mask_base_uri 
        self.icon_background_color = icon_background_color 
        self.display_name = display_name 
        self.primary_type_display_name = primary_type_display_name 
        self.current_opening_hours = current_opening_hours 
        self.primary_type = primary_type 
        self.short_formatted_address = short_formatted_address 
        self.editorial_summary = editorial_summary 
        self.reviews = reviews 
        self.photos = photos 
        self.good_for_children = good_for_children 
        self.accessibility_options = accessibility_options 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        types = dictionary.get("types") if dictionary.get("types") else None
        formatted_address = dictionary.get("formattedAddress") if dictionary.get("formattedAddress") else None
        address_components = None
        if dictionary.get('addressComponents') is not None:
            address_components = [AddressComponent6.from_dictionary(x) for x in dictionary.get('addressComponents')]
        plus_code = PlusCode8.from_dictionary(dictionary.get('plusCode')) if dictionary.get('plusCode') else None
        location = Location.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        viewport = Viewport10.from_dictionary(dictionary.get('viewport')) if dictionary.get('viewport') else None
        rating = dictionary.get("rating") if dictionary.get("rating") else None
        google_maps_uri = dictionary.get("googleMapsUri") if dictionary.get("googleMapsUri") else None
        website_uri = dictionary.get("websiteUri") if dictionary.get("websiteUri") else None
        regular_opening_hours = RegularOpeningHours.from_dictionary(dictionary.get('regularOpeningHours')) if dictionary.get('regularOpeningHours') else None
        utc_offset_minutes = dictionary.get("utcOffsetMinutes") if dictionary.get("utcOffsetMinutes") else None
        adr_format_address = dictionary.get("adrFormatAddress") if dictionary.get("adrFormatAddress") else None
        business_status = dictionary.get("businessStatus") if dictionary.get("businessStatus") else None
        user_rating_count = dictionary.get("userRatingCount") if dictionary.get("userRatingCount") else None
        icon_mask_base_uri = dictionary.get("iconMaskBaseUri") if dictionary.get("iconMaskBaseUri") else None
        icon_background_color = dictionary.get("iconBackgroundColor") if dictionary.get("iconBackgroundColor") else None
        display_name = DisplayName.from_dictionary(dictionary.get('displayName')) if dictionary.get('displayName') else None
        primary_type_display_name = PrimaryTypeDisplayName.from_dictionary(dictionary.get('primaryTypeDisplayName')) if dictionary.get('primaryTypeDisplayName') else None
        current_opening_hours = CurrentOpeningHours.from_dictionary(dictionary.get('currentOpeningHours')) if dictionary.get('currentOpeningHours') else None
        primary_type = dictionary.get("primaryType") if dictionary.get("primaryType") else None
        short_formatted_address = dictionary.get("shortFormattedAddress") if dictionary.get("shortFormattedAddress") else None
        editorial_summary = EditorialSummary.from_dictionary(dictionary.get('editorialSummary')) if dictionary.get('editorialSummary') else None
        reviews = None
        if dictionary.get('reviews') is not None:
            reviews = [Review2.from_dictionary(x) for x in dictionary.get('reviews')]
        photos = None
        if dictionary.get('photos') is not None:
            photos = [Photo6.from_dictionary(x) for x in dictionary.get('photos')]
        good_for_children = dictionary.get("goodForChildren") if "goodForChildren" in dictionary.keys() else None
        accessibility_options = AccessibilityOptions.from_dictionary(dictionary.get('accessibilityOptions')) if dictionary.get('accessibilityOptions') else None
        # Return an object of this model
        return cls(name,
                   id,
                   types,
                   formatted_address,
                   address_components,
                   plus_code,
                   location,
                   viewport,
                   rating,
                   google_maps_uri,
                   website_uri,
                   regular_opening_hours,
                   utc_offset_minutes,
                   adr_format_address,
                   business_status,
                   user_rating_count,
                   icon_mask_base_uri,
                   icon_background_color,
                   display_name,
                   primary_type_display_name,
                   current_opening_hours,
                   primary_type,
                   short_formatted_address,
                   editorial_summary,
                   reviews,
                   photos,
                   good_for_children,
                   accessibility_options)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'id={self.id!r}, '
                f'types={self.types!r}, '
                f'formatted_address={self.formatted_address!r}, '
                f'address_components={self.address_components!r}, '
                f'plus_code={self.plus_code!r}, '
                f'location={self.location!r}, '
                f'viewport={self.viewport!r}, '
                f'rating={self.rating!r}, '
                f'google_maps_uri={self.google_maps_uri!r}, '
                f'website_uri={self.website_uri!r}, '
                f'regular_opening_hours={self.regular_opening_hours!r}, '
                f'utc_offset_minutes={self.utc_offset_minutes!r}, '
                f'adr_format_address={self.adr_format_address!r}, '
                f'business_status={self.business_status!r}, '
                f'user_rating_count={self.user_rating_count!r}, '
                f'icon_mask_base_uri={self.icon_mask_base_uri!r}, '
                f'icon_background_color={self.icon_background_color!r}, '
                f'display_name={self.display_name!r}, '
                f'primary_type_display_name={self.primary_type_display_name!r}, '
                f'current_opening_hours={self.current_opening_hours!r}, '
                f'primary_type={self.primary_type!r}, '
                f'short_formatted_address={self.short_formatted_address!r}, '
                f'editorial_summary={self.editorial_summary!r}, '
                f'reviews={self.reviews!r}, '
                f'photos={self.photos!r}, '
                f'good_for_children={self.good_for_children!r}, '
                f'accessibility_options={self.accessibility_options!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'id={self.id!s}, '
                f'types={self.types!s}, '
                f'formatted_address={self.formatted_address!s}, '
                f'address_components={self.address_components!s}, '
                f'plus_code={self.plus_code!s}, '
                f'location={self.location!s}, '
                f'viewport={self.viewport!s}, '
                f'rating={self.rating!s}, '
                f'google_maps_uri={self.google_maps_uri!s}, '
                f'website_uri={self.website_uri!s}, '
                f'regular_opening_hours={self.regular_opening_hours!s}, '
                f'utc_offset_minutes={self.utc_offset_minutes!s}, '
                f'adr_format_address={self.adr_format_address!s}, '
                f'business_status={self.business_status!s}, '
                f'user_rating_count={self.user_rating_count!s}, '
                f'icon_mask_base_uri={self.icon_mask_base_uri!s}, '
                f'icon_background_color={self.icon_background_color!s}, '
                f'display_name={self.display_name!s}, '
                f'primary_type_display_name={self.primary_type_display_name!s}, '
                f'current_opening_hours={self.current_opening_hours!s}, '
                f'primary_type={self.primary_type!s}, '
                f'short_formatted_address={self.short_formatted_address!s}, '
                f'editorial_summary={self.editorial_summary!s}, '
                f'reviews={self.reviews!s}, '
                f'photos={self.photos!s}, '
                f'good_for_children={self.good_for_children!s}, '
                f'accessibility_options={self.accessibility_options!s})')
