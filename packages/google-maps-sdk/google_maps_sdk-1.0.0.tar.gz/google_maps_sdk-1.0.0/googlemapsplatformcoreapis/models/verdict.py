# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Verdict(object):

    """Implementation of the 'Verdict' model.

    Attributes:
        input_granularity (str): The model property of type str.
        validation_granularity (str): The model property of type str.
        geocode_granularity (str): The model property of type str.
        address_complete (bool): The model property of type bool.
        has_inferred_components (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "input_granularity": 'inputGranularity',
        "validation_granularity": 'validationGranularity',
        "geocode_granularity": 'geocodeGranularity',
        "address_complete": 'addressComplete',
        "has_inferred_components": 'hasInferredComponents'
    }

    def __init__(self,
                 input_granularity=None,
                 validation_granularity=None,
                 geocode_granularity=None,
                 address_complete=None,
                 has_inferred_components=None):
        """Constructor for the Verdict class"""

        # Initialize members of the class
        self.input_granularity = input_granularity 
        self.validation_granularity = validation_granularity 
        self.geocode_granularity = geocode_granularity 
        self.address_complete = address_complete 
        self.has_inferred_components = has_inferred_components 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        input_granularity = dictionary.get("inputGranularity") if dictionary.get("inputGranularity") else None
        validation_granularity = dictionary.get("validationGranularity") if dictionary.get("validationGranularity") else None
        geocode_granularity = dictionary.get("geocodeGranularity") if dictionary.get("geocodeGranularity") else None
        address_complete = dictionary.get("addressComplete") if "addressComplete" in dictionary.keys() else None
        has_inferred_components = dictionary.get("hasInferredComponents") if "hasInferredComponents" in dictionary.keys() else None
        # Return an object of this model
        return cls(input_granularity,
                   validation_granularity,
                   geocode_granularity,
                   address_complete,
                   has_inferred_components)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'input_granularity={self.input_granularity!r}, '
                f'validation_granularity={self.validation_granularity!r}, '
                f'geocode_granularity={self.geocode_granularity!r}, '
                f'address_complete={self.address_complete!r}, '
                f'has_inferred_components={self.has_inferred_components!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'input_granularity={self.input_granularity!s}, '
                f'validation_granularity={self.validation_granularity!s}, '
                f'geocode_granularity={self.geocode_granularity!s}, '
                f'address_complete={self.address_complete!s}, '
                f'has_inferred_components={self.has_inferred_components!s})')
