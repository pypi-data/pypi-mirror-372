# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.destination_1 import Destination1
from googlemapsplatformcoreapis.models.origin_1 import Origin1


class GeocodingResults(object):

    """Implementation of the 'GeocodingResults' model.

    Attributes:
        origin (Origin1): The model property of type Origin1.
        destination (Destination1): The model property of type Destination1.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "origin": 'origin',
        "destination": 'destination'
    }

    def __init__(self,
                 origin=None,
                 destination=None):
        """Constructor for the GeocodingResults class"""

        # Initialize members of the class
        self.origin = origin 
        self.destination = destination 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        origin = Origin1.from_dictionary(dictionary.get('origin')) if dictionary.get('origin') else None
        destination = Destination1.from_dictionary(dictionary.get('destination')) if dictionary.get('destination') else None
        # Return an object of this model
        return cls(origin,
                   destination)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'origin={self.origin!r}, '
                f'destination={self.destination!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'origin={self.origin!s}, '
                f'destination={self.destination!s})')
