# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.bounds_2 import Bounds2
from googlemapsplatformcoreapis.models.location_2 import Location2
from googlemapsplatformcoreapis.models.viewport import Viewport


class Geometry(object):

    """Implementation of the 'Geometry' model.

    Attributes:
        bounds (Bounds2): The model property of type Bounds2.
        location (Location2): The model property of type Location2.
        location_type (str): The model property of type str.
        viewport (Viewport): The model property of type Viewport.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bounds": 'bounds',
        "location": 'location',
        "location_type": 'location_type',
        "viewport": 'viewport'
    }

    def __init__(self,
                 bounds=None,
                 location=None,
                 location_type=None,
                 viewport=None):
        """Constructor for the Geometry class"""

        # Initialize members of the class
        self.bounds = bounds 
        self.location = location 
        self.location_type = location_type 
        self.viewport = viewport 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bounds = Bounds2.from_dictionary(dictionary.get('bounds')) if dictionary.get('bounds') else None
        location = Location2.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        location_type = dictionary.get("location_type") if dictionary.get("location_type") else None
        viewport = Viewport.from_dictionary(dictionary.get('viewport')) if dictionary.get('viewport') else None
        # Return an object of this model
        return cls(bounds,
                   location,
                   location_type,
                   viewport)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bounds={self.bounds!r}, '
                f'location={self.location!r}, '
                f'location_type={self.location_type!r}, '
                f'viewport={self.viewport!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bounds={self.bounds!s}, '
                f'location={self.location!s}, '
                f'location_type={self.location_type!s}, '
                f'viewport={self.viewport!s})')
