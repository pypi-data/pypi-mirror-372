# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.geocoding_results import GeocodingResults
from googlemapsplatformcoreapis.models.route_2 import Route2


class M200OK40(object):

    """Implementation of the '200 OK40' model.

    Attributes:
        routes (List[Route2]): The model property of type List[Route2].
        geocoding_results (GeocodingResults): The model property of type
            GeocodingResults.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "routes": 'routes',
        "geocoding_results": 'geocodingResults'
    }

    def __init__(self,
                 routes=None,
                 geocoding_results=None):
        """Constructor for the M200OK40 class"""

        # Initialize members of the class
        self.routes = routes 
        self.geocoding_results = geocoding_results 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        routes = None
        if dictionary.get('routes') is not None:
            routes = [Route2.from_dictionary(x) for x in dictionary.get('routes')]
        geocoding_results = GeocodingResults.from_dictionary(dictionary.get('geocodingResults')) if dictionary.get('geocodingResults') else None
        # Return an object of this model
        return cls(routes,
                   geocoding_results)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'routes={self.routes!r}, '
                f'geocoding_results={self.geocoding_results!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'routes={self.routes!s}, '
                f'geocoding_results={self.geocoding_results!s})')
