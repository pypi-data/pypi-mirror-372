# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.period_6 import Period6


class RegularOpeningHours2(object):

    """Implementation of the 'RegularOpeningHours2' model.

    Attributes:
        open_now (bool): The model property of type bool.
        periods (List[Period6]): The model property of type List[Period6].
        weekday_descriptions (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "open_now": 'openNow',
        "periods": 'periods',
        "weekday_descriptions": 'weekdayDescriptions'
    }

    def __init__(self,
                 open_now=None,
                 periods=None,
                 weekday_descriptions=None):
        """Constructor for the RegularOpeningHours2 class"""

        # Initialize members of the class
        self.open_now = open_now 
        self.periods = periods 
        self.weekday_descriptions = weekday_descriptions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        open_now = dictionary.get("openNow") if "openNow" in dictionary.keys() else None
        periods = None
        if dictionary.get('periods') is not None:
            periods = [Period6.from_dictionary(x) for x in dictionary.get('periods')]
        weekday_descriptions = dictionary.get("weekdayDescriptions") if dictionary.get("weekdayDescriptions") else None
        # Return an object of this model
        return cls(open_now,
                   periods,
                   weekday_descriptions)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.open_now,
                                           type_callable=lambda value: isinstance(value, bool)) \
                and APIHelper.is_valid_type(value=dictionary.periods,
                                            type_callable=lambda value: Period6.validate(value),
                                            is_model_dict=True,
                                            is_inner_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.weekday_descriptions,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('openNow'),
                                       type_callable=lambda value: isinstance(value, bool)) \
            and APIHelper.is_valid_type(value=dictionary.get('periods'),
                                        type_callable=lambda value: Period6.validate(value),
                                        is_model_dict=True,
                                        is_inner_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('weekdayDescriptions'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'open_now={self.open_now!r}, '
                f'periods={self.periods!r}, '
                f'weekday_descriptions={self.weekday_descriptions!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'open_now={self.open_now!s}, '
                f'periods={self.periods!s}, '
                f'weekday_descriptions={self.weekday_descriptions!s})')
