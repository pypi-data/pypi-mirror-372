# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class High(object):

    """Implementation of the 'High' model.

    Attributes:
        latitude (float): The model property of type float.
        longitude (float): The model property of type float.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "latitude": 'latitude',
        "longitude": 'longitude'
    }

    def __init__(self,
                 latitude=None,
                 longitude=None):
        """Constructor for the High class"""

        # Initialize members of the class
        self.latitude = latitude 
        self.longitude = longitude 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else None
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else None
        # Return an object of this model
        return cls(latitude,
                   longitude)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.latitude,
                                           type_callable=lambda value: isinstance(value, float)) \
                and APIHelper.is_valid_type(value=dictionary.longitude,
                                            type_callable=lambda value: isinstance(value, float))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('latitude'),
                                       type_callable=lambda value: isinstance(value, float)) \
            and APIHelper.is_valid_type(value=dictionary.get('longitude'),
                                        type_callable=lambda value: isinstance(value, float))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'latitude={self.latitude!r}, '
                f'longitude={self.longitude!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'latitude={self.latitude!s}, '
                f'longitude={self.longitude!s})')
