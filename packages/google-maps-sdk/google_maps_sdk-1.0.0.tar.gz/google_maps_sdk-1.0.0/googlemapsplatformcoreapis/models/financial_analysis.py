# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.cash_purchase_savings import CashPurchaseSavings
from googlemapsplatformcoreapis.models.financed_purchase_savings import FinancedPurchaseSavings
from googlemapsplatformcoreapis.models.financial_details import FinancialDetails
from googlemapsplatformcoreapis.models.leasing_savings import LeasingSavings
from googlemapsplatformcoreapis.models.monthly_bill import MonthlyBill


class FinancialAnalysis(object):

    """Implementation of the 'FinancialAnalysis' model.

    Attributes:
        monthly_bill (MonthlyBill): The model property of type MonthlyBill.
        panel_config_index (int): The model property of type int.
        financial_details (FinancialDetails): The model property of type
            FinancialDetails.
        leasing_savings (LeasingSavings): The model property of type
            LeasingSavings.
        cash_purchase_savings (CashPurchaseSavings): The model property of
            type CashPurchaseSavings.
        financed_purchase_savings (FinancedPurchaseSavings): The model
            property of type FinancedPurchaseSavings.
        default_bill (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "monthly_bill": 'monthlyBill',
        "panel_config_index": 'panelConfigIndex',
        "financial_details": 'financialDetails',
        "leasing_savings": 'leasingSavings',
        "cash_purchase_savings": 'cashPurchaseSavings',
        "financed_purchase_savings": 'financedPurchaseSavings',
        "default_bill": 'defaultBill'
    }

    _optionals = [
        'financial_details',
        'leasing_savings',
        'cash_purchase_savings',
        'financed_purchase_savings',
        'default_bill',
    ]

    def __init__(self,
                 monthly_bill=None,
                 panel_config_index=None,
                 financial_details=APIHelper.SKIP,
                 leasing_savings=APIHelper.SKIP,
                 cash_purchase_savings=APIHelper.SKIP,
                 financed_purchase_savings=APIHelper.SKIP,
                 default_bill=APIHelper.SKIP):
        """Constructor for the FinancialAnalysis class"""

        # Initialize members of the class
        self.monthly_bill = monthly_bill 
        self.panel_config_index = panel_config_index 
        if financial_details is not APIHelper.SKIP:
            self.financial_details = financial_details 
        if leasing_savings is not APIHelper.SKIP:
            self.leasing_savings = leasing_savings 
        if cash_purchase_savings is not APIHelper.SKIP:
            self.cash_purchase_savings = cash_purchase_savings 
        if financed_purchase_savings is not APIHelper.SKIP:
            self.financed_purchase_savings = financed_purchase_savings 
        if default_bill is not APIHelper.SKIP:
            self.default_bill = default_bill 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        monthly_bill = MonthlyBill.from_dictionary(dictionary.get('monthlyBill')) if dictionary.get('monthlyBill') else None
        panel_config_index = dictionary.get("panelConfigIndex") if dictionary.get("panelConfigIndex") else None
        financial_details = FinancialDetails.from_dictionary(dictionary.get('financialDetails')) if 'financialDetails' in dictionary.keys() else APIHelper.SKIP
        leasing_savings = LeasingSavings.from_dictionary(dictionary.get('leasingSavings')) if 'leasingSavings' in dictionary.keys() else APIHelper.SKIP
        cash_purchase_savings = CashPurchaseSavings.from_dictionary(dictionary.get('cashPurchaseSavings')) if 'cashPurchaseSavings' in dictionary.keys() else APIHelper.SKIP
        financed_purchase_savings = FinancedPurchaseSavings.from_dictionary(dictionary.get('financedPurchaseSavings')) if 'financedPurchaseSavings' in dictionary.keys() else APIHelper.SKIP
        default_bill = dictionary.get("defaultBill") if "defaultBill" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(monthly_bill,
                   panel_config_index,
                   financial_details,
                   leasing_savings,
                   cash_purchase_savings,
                   financed_purchase_savings,
                   default_bill)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'monthly_bill={self.monthly_bill!r}, '
                f'panel_config_index={self.panel_config_index!r}, '
                f'financial_details={(self.financial_details if hasattr(self, "financial_details") else None)!r}, '
                f'leasing_savings={(self.leasing_savings if hasattr(self, "leasing_savings") else None)!r}, '
                f'cash_purchase_savings={(self.cash_purchase_savings if hasattr(self, "cash_purchase_savings") else None)!r}, '
                f'financed_purchase_savings={(self.financed_purchase_savings if hasattr(self, "financed_purchase_savings") else None)!r}, '
                f'default_bill={(self.default_bill if hasattr(self, "default_bill") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'monthly_bill={self.monthly_bill!s}, '
                f'panel_config_index={self.panel_config_index!s}, '
                f'financial_details={(self.financial_details if hasattr(self, "financial_details") else None)!s}, '
                f'leasing_savings={(self.leasing_savings if hasattr(self, "leasing_savings") else None)!s}, '
                f'cash_purchase_savings={(self.cash_purchase_savings if hasattr(self, "cash_purchase_savings") else None)!s}, '
                f'financed_purchase_savings={(self.financed_purchase_savings if hasattr(self, "financed_purchase_savings") else None)!s}, '
                f'default_bill={(self.default_bill if hasattr(self, "default_bill") else None)!s})')
