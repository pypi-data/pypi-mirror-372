# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper
from googlemapsplatformcoreapis.models.ne import Ne
from googlemapsplatformcoreapis.models.sw import Sw


class BoundingBox(object):

    """Implementation of the 'BoundingBox' model.

    Attributes:
        sw (Sw): The model property of type Sw.
        ne (Ne): The model property of type Ne.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sw": 'sw',
        "ne": 'ne'
    }

    def __init__(self,
                 sw=None,
                 ne=None):
        """Constructor for the BoundingBox class"""

        # Initialize members of the class
        self.sw = sw 
        self.ne = ne 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sw = Sw.from_dictionary(dictionary.get('sw')) if dictionary.get('sw') else None
        ne = Ne.from_dictionary(dictionary.get('ne')) if dictionary.get('ne') else None
        # Return an object of this model
        return cls(sw,
                   ne)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.sw,
                                           type_callable=lambda value: Sw.validate(value),
                                           is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.ne,
                                            type_callable=lambda value: Ne.validate(value),
                                            is_model_dict=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('sw'),
                                       type_callable=lambda value: Sw.validate(value),
                                       is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('ne'),
                                        type_callable=lambda value: Ne.validate(value),
                                        is_model_dict=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sw={self.sw!r}, '
                f'ne={self.ne!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sw={self.sw!s}, '
                f'ne={self.ne!s})')
