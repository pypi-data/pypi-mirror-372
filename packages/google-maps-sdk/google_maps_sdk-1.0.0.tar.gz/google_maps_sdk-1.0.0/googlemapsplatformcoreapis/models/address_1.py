# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.address_component import AddressComponent
from googlemapsplatformcoreapis.models.postal_address import PostalAddress


class Address1(object):

    """Implementation of the 'Address1' model.

    Attributes:
        formatted_address (str): The model property of type str.
        postal_address (PostalAddress): The model property of type
            PostalAddress.
        address_components (List[AddressComponent]): The model property of
            type List[AddressComponent].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "formatted_address": 'formattedAddress',
        "postal_address": 'postalAddress',
        "address_components": 'addressComponents'
    }

    def __init__(self,
                 formatted_address=None,
                 postal_address=None,
                 address_components=None):
        """Constructor for the Address1 class"""

        # Initialize members of the class
        self.formatted_address = formatted_address 
        self.postal_address = postal_address 
        self.address_components = address_components 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        formatted_address = dictionary.get("formattedAddress") if dictionary.get("formattedAddress") else None
        postal_address = PostalAddress.from_dictionary(dictionary.get('postalAddress')) if dictionary.get('postalAddress') else None
        address_components = None
        if dictionary.get('addressComponents') is not None:
            address_components = [AddressComponent.from_dictionary(x) for x in dictionary.get('addressComponents')]
        # Return an object of this model
        return cls(formatted_address,
                   postal_address,
                   address_components)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'formatted_address={self.formatted_address!r}, '
                f'postal_address={self.postal_address!r}, '
                f'address_components={self.address_components!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'formatted_address={self.formatted_address!s}, '
                f'postal_address={self.postal_address!s}, '
                f'address_components={self.address_components!s})')
