# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.annual_leasing_cost import AnnualLeasingCost
from googlemapsplatformcoreapis.models.savings import Savings


class LeasingSavings(object):

    """Implementation of the 'LeasingSavings' model.

    Attributes:
        leases_allowed (bool): The model property of type bool.
        leases_supported (bool): The model property of type bool.
        annual_leasing_cost (AnnualLeasingCost): The model property of type
            AnnualLeasingCost.
        savings (Savings): The model property of type Savings.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "leases_allowed": 'leasesAllowed',
        "leases_supported": 'leasesSupported',
        "annual_leasing_cost": 'annualLeasingCost',
        "savings": 'savings'
    }

    def __init__(self,
                 leases_allowed=None,
                 leases_supported=None,
                 annual_leasing_cost=None,
                 savings=None):
        """Constructor for the LeasingSavings class"""

        # Initialize members of the class
        self.leases_allowed = leases_allowed 
        self.leases_supported = leases_supported 
        self.annual_leasing_cost = annual_leasing_cost 
        self.savings = savings 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        leases_allowed = dictionary.get("leasesAllowed") if "leasesAllowed" in dictionary.keys() else None
        leases_supported = dictionary.get("leasesSupported") if "leasesSupported" in dictionary.keys() else None
        annual_leasing_cost = AnnualLeasingCost.from_dictionary(dictionary.get('annualLeasingCost')) if dictionary.get('annualLeasingCost') else None
        savings = Savings.from_dictionary(dictionary.get('savings')) if dictionary.get('savings') else None
        # Return an object of this model
        return cls(leases_allowed,
                   leases_supported,
                   annual_leasing_cost,
                   savings)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'leases_allowed={self.leases_allowed!r}, '
                f'leases_supported={self.leases_supported!r}, '
                f'annual_leasing_cost={self.annual_leasing_cost!r}, '
                f'savings={self.savings!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'leases_allowed={self.leases_allowed!s}, '
                f'leases_supported={self.leases_supported!s}, '
                f'annual_leasing_cost={self.annual_leasing_cost!s}, '
                f'savings={self.savings!s})')
