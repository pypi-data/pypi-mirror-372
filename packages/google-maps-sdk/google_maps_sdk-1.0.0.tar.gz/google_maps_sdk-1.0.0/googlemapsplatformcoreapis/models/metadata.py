# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Metadata(object):

    """Implementation of the 'Metadata' model.

    Attributes:
        business (bool): The model property of type bool.
        residential (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "business": 'business',
        "residential": 'residential'
    }

    def __init__(self,
                 business=None,
                 residential=None):
        """Constructor for the Metadata class"""

        # Initialize members of the class
        self.business = business 
        self.residential = residential 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        business = dictionary.get("business") if "business" in dictionary.keys() else None
        residential = dictionary.get("residential") if "residential" in dictionary.keys() else None
        # Return an object of this model
        return cls(business,
                   residential)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'business={self.business!r}, '
                f'residential={self.residential!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'business={self.business!s}, '
                f'residential={self.residential!s})')
