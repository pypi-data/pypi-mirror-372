# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.field_violation import FieldViolation


class Detail(object):

    """Implementation of the 'Detail' model.

    Attributes:
        mtype (str): The model property of type str.
        field_violations (List[FieldViolation]): The model property of type
            List[FieldViolation].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": '@type',
        "field_violations": 'fieldViolations'
    }

    def __init__(self,
                 mtype=None,
                 field_violations=None):
        """Constructor for the Detail class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.field_violations = field_violations 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("@type") if dictionary.get("@type") else None
        field_violations = None
        if dictionary.get('fieldViolations') is not None:
            field_violations = [FieldViolation.from_dictionary(x) for x in dictionary.get('fieldViolations')]
        # Return an object of this model
        return cls(mtype,
                   field_violations)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'field_violations={self.field_violations!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'field_violations={self.field_violations!s})')
