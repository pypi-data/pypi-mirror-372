# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.api_helper import APIHelper


class RoofSegmentSummary(object):

    """Implementation of the 'RoofSegmentSummary' model.

    Attributes:
        pitch_degrees (float): The model property of type float.
        azimuth_degrees (int | float): The model property of type int | float.
        panels_count (int): The model property of type int.
        yearly_energy_dc_kwh (float): The model property of type float.
        segment_index (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "pitch_degrees": 'pitchDegrees',
        "azimuth_degrees": 'azimuthDegrees',
        "panels_count": 'panelsCount',
        "yearly_energy_dc_kwh": 'yearlyEnergyDcKwh',
        "segment_index": 'segmentIndex'
    }

    def __init__(self,
                 pitch_degrees=None,
                 azimuth_degrees=None,
                 panels_count=None,
                 yearly_energy_dc_kwh=None,
                 segment_index=None):
        """Constructor for the RoofSegmentSummary class"""

        # Initialize members of the class
        self.pitch_degrees = pitch_degrees 
        self.azimuth_degrees = azimuth_degrees 
        self.panels_count = panels_count 
        self.yearly_energy_dc_kwh = yearly_energy_dc_kwh 
        self.segment_index = segment_index 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from googlemapsplatformcoreapis.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        pitch_degrees = dictionary.get("pitchDegrees") if dictionary.get("pitchDegrees") else None
        azimuth_degrees = APIHelper.deserialize_union_type(UnionTypeLookUp.get('RoofSegmentSummaryAzimuthDegrees'), dictionary.get('azimuthDegrees'), False) if dictionary.get('azimuthDegrees') is not None else None
        panels_count = dictionary.get("panelsCount") if dictionary.get("panelsCount") else None
        yearly_energy_dc_kwh = dictionary.get("yearlyEnergyDcKwh") if dictionary.get("yearlyEnergyDcKwh") else None
        segment_index = dictionary.get("segmentIndex") if dictionary.get("segmentIndex") else None
        # Return an object of this model
        return cls(pitch_degrees,
                   azimuth_degrees,
                   panels_count,
                   yearly_energy_dc_kwh,
                   segment_index)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from googlemapsplatformcoreapis.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.pitch_degrees,
                                           type_callable=lambda value: isinstance(value, float)) \
                and UnionTypeLookUp.get('RoofSegmentSummaryAzimuthDegrees').validate(dictionary.azimuth_degrees).is_valid \
                and APIHelper.is_valid_type(value=dictionary.panels_count,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.yearly_energy_dc_kwh,
                                            type_callable=lambda value: isinstance(value, float)) \
                and APIHelper.is_valid_type(value=dictionary.segment_index,
                                            type_callable=lambda value: isinstance(value, int))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('pitchDegrees'),
                                       type_callable=lambda value: isinstance(value, float)) \
            and UnionTypeLookUp.get('RoofSegmentSummaryAzimuthDegrees').validate(dictionary.get('azimuthDegrees')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('panelsCount'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('yearlyEnergyDcKwh'),
                                        type_callable=lambda value: isinstance(value, float)) \
            and APIHelper.is_valid_type(value=dictionary.get('segmentIndex'),
                                        type_callable=lambda value: isinstance(value, int))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'pitch_degrees={self.pitch_degrees!r}, '
                f'azimuth_degrees={self.azimuth_degrees!r}, '
                f'panels_count={self.panels_count!r}, '
                f'yearly_energy_dc_kwh={self.yearly_energy_dc_kwh!r}, '
                f'segment_index={self.segment_index!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'pitch_degrees={self.pitch_degrees!s}, '
                f'azimuth_degrees={self.azimuth_degrees!s}, '
                f'panels_count={self.panels_count!s}, '
                f'yearly_energy_dc_kwh={self.yearly_energy_dc_kwh!s}, '
                f'segment_index={self.segment_index!s})')
