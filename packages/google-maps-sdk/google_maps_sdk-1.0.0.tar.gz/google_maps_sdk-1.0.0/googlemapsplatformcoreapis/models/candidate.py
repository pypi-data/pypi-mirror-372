# -*- coding: utf-8 -*-

"""
googlemapsplatformcoreapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from googlemapsplatformcoreapis.models.geometry_2 import Geometry2
from googlemapsplatformcoreapis.models.opening_hours_2 import OpeningHours2


class Candidate(object):

    """Implementation of the 'Candidate' model.

    Attributes:
        formatted_address (str): The model property of type str.
        geometry (Geometry2): The model property of type Geometry2.
        name (str): The model property of type str.
        opening_hours (OpeningHours2): The model property of type
            OpeningHours2.
        rating (float): The model property of type float.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "formatted_address": 'formatted_address',
        "geometry": 'geometry',
        "name": 'name',
        "opening_hours": 'opening_hours',
        "rating": 'rating'
    }

    def __init__(self,
                 formatted_address=None,
                 geometry=None,
                 name=None,
                 opening_hours=None,
                 rating=None):
        """Constructor for the Candidate class"""

        # Initialize members of the class
        self.formatted_address = formatted_address 
        self.geometry = geometry 
        self.name = name 
        self.opening_hours = opening_hours 
        self.rating = rating 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        formatted_address = dictionary.get("formatted_address") if dictionary.get("formatted_address") else None
        geometry = Geometry2.from_dictionary(dictionary.get('geometry')) if dictionary.get('geometry') else None
        name = dictionary.get("name") if dictionary.get("name") else None
        opening_hours = OpeningHours2.from_dictionary(dictionary.get('opening_hours')) if dictionary.get('opening_hours') else None
        rating = dictionary.get("rating") if dictionary.get("rating") else None
        # Return an object of this model
        return cls(formatted_address,
                   geometry,
                   name,
                   opening_hours,
                   rating)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'formatted_address={self.formatted_address!r}, '
                f'geometry={self.geometry!r}, '
                f'name={self.name!r}, '
                f'opening_hours={self.opening_hours!r}, '
                f'rating={self.rating!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'formatted_address={self.formatted_address!s}, '
                f'geometry={self.geometry!s}, '
                f'name={self.name!s}, '
                f'opening_hours={self.opening_hours!s}, '
                f'rating={self.rating!s})')
