"""农历转换工具模块"""

import json
from datetime import datetime, timedelta
from typing import Dict, Any, List, Tuple, Optional
from mcp.types import Tool, TextContent

# 导入错误处理和日志模块
try:
    from ..utils.logger import get_logger, log_function_call
    from ..utils.error_handler import handle_errors, validate_date_string, validate_year, validate_month, validate_day, ValidationError, DataError, create_error_response
except ImportError:
    try:
        from src.utils.logger import get_logger, log_function_call
        from src.utils.error_handler import handle_errors, validate_date_string, validate_year, validate_month, validate_day, ValidationError, DataError, create_error_response
        from src.utils.cache import cache_result
        from src.utils.performance import monitor_performance
    except ImportError:
        # 如果导入失败，定义简单的替代函数
        def get_logger(name):
            import logging
            return logging.getLogger(name)
        
        def log_function_call(*args, **kwargs):
            pass
        
        def handle_errors(*args, **kwargs):
            def decorator(func):
                return func
            return decorator
        
        def validate_date_string(date_str):
            return True
        
        def validate_year(year):
            return int(year)
        
        def validate_month(month):
            return int(month)
        
        def validate_day(day):
            return int(day)
        
        def cache_result(ttl=None, key_func=None, enabled=True):
            def decorator(func):
                return func
            return decorator
        
        def monitor_performance(include_system_metrics=False):
            def decorator(func):
                return func
            return decorator
        
        def create_error_response(error):
            return {"error": str(error)}
        
        class ValidationError(Exception):
            pass
        
        class DataError(Exception):
            pass

# 导入新的计算模块
try:
    from ..data.solar_terms import (
        get_solar_term_for_date, 
        get_solar_terms_for_month, 
        get_next_solar_term,
        get_season_by_solar_term
    )
    from ..data.bazi_calculator import calculate_bazi, get_wuxing_for_ganzhi
except ImportError:
    # 如果相对导入失败，尝试绝对导入
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(__file__)))
    from data.solar_terms import (
        get_solar_term_for_date, 
        get_solar_terms_for_month, 
        get_next_solar_term,
        get_season_by_solar_term
    )
    from data.bazi_calculator import calculate_bazi, get_wuxing_for_ganzhi

# 初始化日志记录器
logger = get_logger(__name__)


class LunarTools:
    """农历转换工具类"""
    
    # 农历数据
    LUNAR_DATA = (
        1198, 2647, 330317, 3366, 3477, 265557, 1386, 2477, 18781, 1198,
        398491, 2637, 3365, 334501, 2900, 3434, 133485, 2395, 461111, 1175,
        2635, 333387, 1701, 1748, 267701, 694, 2391, 133423, 1175, 396438,
        3402, 3749, 331177, 1453, 694, 201326, 2350, 465197, 3221, 3402,
        400202, 2901, 1386, 267611, 605, 2349, 137515, 2709, 464533, 1738,
        2901, 330421, 1242, 2651, 199255, 1323, 529706, 3733, 1706, 398762,
        2741, 1206, 267438, 2647, 1318, 204070, 3477, 461653, 1386, 2413,
        330077, 1197, 2637, 268877, 3365, 531109, 2900, 2922, 398042, 2395,
        1179, 267415, 2635, 661067, 1701, 1748, 398772, 2742, 2391, 330031,
        1175, 1611, 200010, 3749, 527717, 1452, 2742, 332397, 2350, 3222,
        268949, 3402, 3493, 133973, 1386, 464219, 605, 2349, 334123, 2709,
        2890, 267946, 2773, 592565, 1210, 2651, 395863, 1323, 2707, 265877,
        1706, 2773, 18869, 1206, 51799, 2638, 3366, 44691, 3411, 1450,
        26293, 2413, 92509, 1197, 2637, 55883, 3365, 3410, 44458, 2906,
        1389, 18779, 1179, 62615, 2635, 2725, 46757, 1746, 2778, 27319
    )
    
    # 二十四节气数据
    SOLAR_TERMS_DATA = (
        0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1901 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1902 
    0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, #1903 
    0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, #1904 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1905 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1906 
    0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, #1907 
    0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1908 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1909 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1910 
    0x96, 0xA5, 0x87, 0x96, 0x87, 0x87, 0x79, 0x69, 0x69, 0x69, 0x78, 0x78, #1911 
    0x86, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1912 
    0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1913 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1914 
    0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, #1915 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1916 
    0x95, 0xB4, 0x96, 0xA6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, #1917 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77, #1918 
    0x96, 0xA5, 0x97, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, #1919 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1920 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, #1921 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x77, #1922 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x69, 0x69, 0x78, 0x78, #1923 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1924 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x87, #1925 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1926 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1927 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1928 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1929 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1930 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x87, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1931 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1932 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1933 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1934 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1935 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1936 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1937 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1938 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1939 
    0x96, 0xA5, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1940 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1941 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1942 
    0x96, 0xA4, 0x96, 0x96, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1943 
    0x96, 0xA5, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1944 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1945 
    0x95, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1946 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1947 
    0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1948 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x79, 0x77, 0x87, #1949 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1950 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x79, 0x79, 0x79, 0x69, 0x78, 0x78, #1951 
    0x96, 0xA5, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1952 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1953 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x68, 0x78, 0x87, #1954 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1955 
    0x96, 0xA5, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1956 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1957 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1958 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1959 
    0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1960 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1961 
    0x96, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1962 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1963 
    0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1964 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1965 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1966 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1967 
    0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1968 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1969 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1970 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x79, 0x69, 0x78, 0x77, #1971 
    0x96, 0xA4, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1972 
    0xA5, 0xB5, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1973 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1974 
    0x96, 0xB4, 0x96, 0xA6, 0x97, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1975 
    0x96, 0xA4, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x89, 0x88, 0x78, 0x87, 0x87, #1976 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1977 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, #1978 
    0x96, 0xB4, 0x96, 0xA6, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1979 
    0x96, 0xA4, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1980 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x77, 0x87, #1981 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1982 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x78, 0x79, 0x78, 0x69, 0x78, 0x77, #1983 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, #1984 
    0xA5, 0xB4, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #1985 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1986 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x79, 0x78, 0x69, 0x78, 0x87, #1987 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #1988 
    0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1989 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #1990 
    0x95, 0xB4, 0x96, 0xA5, 0x86, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1991 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #1992 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1993 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1994 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x76, 0x78, 0x69, 0x78, 0x87, #1995 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #1996 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #1997 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #1998 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #1999 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2000 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2001 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #2002 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #2003 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2004 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2005 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2006 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x69, 0x78, 0x87, #2007 
    0x96, 0xB4, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2008 
    0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2009 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2010 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x78, 0x87, #2011 
    0x96, 0xB4, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2012 
    0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, #2013 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2014 
    0x95, 0xB4, 0x96, 0xA5, 0x96, 0x97, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #2015 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2016 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, #2017 
    0xA5, 0xB4, 0xA6, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2018 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #2019 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86, #2020 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2021 
    0xA5, 0xB4, 0xA5, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2022 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x79, 0x77, 0x87, #2023 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2024 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2025 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2026 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #2027 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2028 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2029 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2030 
    0xA5, 0xB4, 0x96, 0xA5, 0x96, 0x96, 0x88, 0x78, 0x78, 0x78, 0x87, 0x87, #2031 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2032 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x86, #2033 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x78, 0x88, 0x78, 0x87, 0x87, #2034 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2035 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2036 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x86, #2037 
    0xA5, 0xB3, 0xA5, 0xA5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2038 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2039 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x96, #2040 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2041 
    0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x88, 0x88, 0x88, 0x78, 0x87, 0x87, #2042 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2043 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x88, 0x87, 0x96, #2044 
    0xA5, 0xC3, 0xA5, 0xB4, 0xA5, 0xA6, 0x87, 0x88, 0x87, 0x78, 0x87, 0x86, #2045 
    0xA5, 0xB3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x88, 0x78, 0x87, 0x87, #2046 
    0xA5, 0xB4, 0x96, 0xA5, 0xA6, 0x96, 0x88, 0x88, 0x78, 0x78, 0x87, 0x87, #2047 
    0x95, 0xB4, 0xA5, 0xB4, 0xA5, 0xA5, 0x97, 0x87, 0x87, 0x88, 0x86, 0x96, #2048 
    0xA4, 0xC3, 0xA5, 0xA5, 0xA5, 0xA6, 0x97, 0x87, 0x87, 0x78, 0x87, 0x86, #2049 
    0xA5, 0xC3, 0xA5, 0xB5, 0xA6, 0xA6, 0x87, 0x88, 0x78, 0x78, 0x87, 0x87  # 2050
    )
    
    # 天干地支
    TIAN_GAN = ("甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸")
    DI_ZHI = ("子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥")
    
    # 生肖
    ZODIAC = ("鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪")
    
    # 农历日期名
    LUNAR_DAY_NAMES = (
        "", "初一", "初二", "初三", "初四", "初五", "初六", "初七", "初八", "初九", "初十",
        "十一", "十二", "十三", "十四", "十五", "十六", "十七", "十八", "十九", "二十",
        "廿一", "廿二", "廿三", "廿四", "廿五", "廿六", "廿七", "廿八", "廿九", "三十"
    )
    
    # 农历月份名
    LUNAR_MONTH_NAMES = (
        "", "正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "腊"
    )
    
    # 二十四节气名称
    SOLAR_TERMS = (
        "小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨",
        "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑",
        "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至"
    )
    
    @staticmethod
    def get_tools() -> List[Tool]:
        """获取所有农历相关工具"""
        return [
            Tool(
                name="gregorian_to_lunar",
                description="公历转农历",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "公历日期，格式：YYYY-MM-DD"
                        }
                    },
                    "required": ["date"]
                }
            ),
            Tool(
                name="lunar_to_gregorian",
                description="农历转公历。用于换算中国传统节日的阳历日期。如查询七夕节是几号，根据经验七夕节固定在农历七月初七，则传入农历日期获取公历日期。",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "year": {
                            "type": "integer",
                            "description": "农历年份"
                        },
                        "month": {
                            "type": "integer",
                            "description": "农历月份"
                        },
                        "day": {
                            "type": "integer",
                            "description": "农历日期"
                        },
                        "is_leap": {
                            "type": "boolean",
                            "description": "是否闰月",
                            "default": False
                        }
                    },
                    "required": ["year", "month", "day"]
                }
            ),
            Tool(
                name="get_lunar_string",
                description="获取农历日期的生肖/干支纪年",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "公历日期，格式：YYYY-MM-DD"
                        }
                    },
                    "required": ["date"]
                }
            ),
            Tool(
                name="get_24_lunar_feast",
                description="获取当月的二十四节气信息",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "公历日期，格式：YYYY-MM-DD"
                        }
                    },
                    "required": ["date"]
                }
            ),
            Tool(
                name="get_8zi",
                description="计算八字（四柱）",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "公历日期，格式：YYYY-MM-DD"
                        },
                        "hour": {
                            "type": "integer",
                            "description": "小时（0-23）",
                            "default": 12
                        },
                        "minute": {
                            "type": "integer",
                            "description": "分钟（0-59）",
                            "default": 0
                        }
                    },
                    "required": ["date"]
                }
            )
        ]
    
    @staticmethod
    @handle_errors(return_on_error=(None, None, None, False))
    def gregorian_to_lunar(year: int, month: int, day: int) -> Tuple[Optional[int], Optional[int], Optional[int], bool]:
        """公历转农历"""
        try:
            # 公历每月前面的天数
            month_add = (0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334)
            
            # 计算到初始时间1901年2月19日的天数
            the_date = (year - 1901) * 365 + (year - 1901) // 4 + day + month_add[month - 1] - 38 - 11
            
            if the_date <= 0:
                return None, None, None, False
            
            # 闰年处理
            if (year % 4 == 0) and (month > 2):
                the_date += 1
            
            # 计算农历天干、地支、月、日
            is_end = False
            m = 0
            
            while not is_end:
                if LunarTools.LUNAR_DATA[m] < 4095:
                    k = 11
                else:
                    k = 12
                
                n = k
                while n >= 0:
                    bit = LunarTools.LUNAR_DATA[m]
                    for i in range(1, n + 1):
                        bit = bit // 2
                    bit = bit % 2
                    
                    if the_date <= (29 + bit):
                        is_end = True
                        break
                    
                    the_date = the_date - 29 - bit
                    n = n - 1
                
                if is_end:
                    break
                m = m + 1
            
            cur_year = 1901 + m
            cur_month = k - n + 1
            cur_day = the_date
            
            if cur_day < 0:
                return None, None, None, False
            
            # 处理闰月
            embolism = False
            if k == 12:
                if cur_month == LunarTools.LUNAR_DATA[m] // 65536 + 1:
                    cur_month = 1 - cur_month
                elif cur_month > LunarTools.LUNAR_DATA[m] // 65536 + 1:
                    cur_month = cur_month - 1
            
            if cur_month < 1:
                lunar_month = -cur_month
                embolism = True
            else:
                lunar_month = cur_month
                embolism = False
            
            return cur_year, lunar_month, cur_day, embolism
            
        except Exception as e:
            print(f"公历转农历失败: {e}")
            return None, None, None, False
    
    @staticmethod
    @handle_errors(return_on_error=(None, None, None))
    def lunar_to_gregorian(lunar_year: int, lunar_month: int, lunar_day: int, is_leap: bool = False) -> Tuple[Optional[int], Optional[int], Optional[int]]:
        """农历转公历"""
        try:
            # 从农历年份开始，逐日查找对应的公历日期
            start_date = datetime(lunar_year, lunar_month, lunar_day)
            
            for i in range(101):  # 最多查找101天
                test_date = start_date.replace(day=1) + timedelta(days=i)
                lunar_result = LunarTools.gregorian_to_lunar(test_date.year, test_date.month, test_date.day)
                
                if (lunar_result[0] == lunar_year and 
                    lunar_result[1] == lunar_month and 
                    lunar_result[2] == lunar_day and 
                    lunar_result[3] == is_leap):
                    return test_date.year, test_date.month, test_date.day
            
            return None, None, None
            
        except Exception as e:
            print(f"农历转公历失败: {e}")
            return None, None, None
    
    @staticmethod
    @handle_errors(return_on_error={"error": "农历信息获取失败"})
    def get_lunar_string(year: int, month: int, day: int) -> Dict[str, Any]:
        """获取农历日期的中文描述"""
        try:
            date_str = f"{year:04d}-{month:02d}-{day:02d}"
            lunar_result = LunarTools.gregorian_to_lunar(year, month, day)
            
            if lunar_result[0] is None:
                return {"error": "无法转换为农历"}
            
            lunar_year, lunar_month, lunar_day, is_leap = lunar_result
            
            # 生成属相
            zodiac_index = ((lunar_year - 4) % 60) % 12
            zodiac = LunarTools.ZODIAC[zodiac_index]
            
            # 生成天干地支
            tian_gan_index = ((lunar_year - 4) % 60) % 10
            di_zhi_index = ((lunar_year - 4) % 60) % 12
            tian_gan = LunarTools.TIAN_GAN[tian_gan_index]
            di_zhi = LunarTools.DI_ZHI[di_zhi_index]
            
            # 生成农历月份
            lunar_month_name = LunarTools.LUNAR_MONTH_NAMES[lunar_month] + "月"
            if is_leap:
                lunar_month_name = "闰" + lunar_month_name
            
            # 生成农历日期
            lunar_day_name = LunarTools.LUNAR_DAY_NAMES[lunar_day]
            
            return {
                "gregorian_date": date_str,
                "lunar_year": lunar_year,
                "lunar_month": lunar_month,
                "lunar_day": lunar_day,
                "is_leap_month": is_leap,
                "zodiac": zodiac,
                "year_gan_zhi": tian_gan + di_zhi,
                "tian_gan": tian_gan,
                "di_zhi": di_zhi,
                "lunar_month_name": lunar_month_name,
                "lunar_day_name": lunar_day_name,
                "lunar_string": f"{tian_gan}{di_zhi}年 {lunar_month_name} {lunar_day_name}"
            }
            
        except Exception as e:
            print(f"获取农历字符串失败: {e}")
            return {"error": f"转换失败: {str(e)}"}
    
    @staticmethod
    @handle_errors(return_on_error={"error": "节气信息获取失败"})
    def get_24_lunar_feast(year: int, month: int) -> Dict[str, Any]:
        """获取二十四节气信息"""
        try:
            from datetime import datetime
            
            # 获取该月份的所有节气
            month_terms = get_solar_terms_for_month(year, month)
            
            # 获取当前日期用于计算倒计时
            current_date = datetime.now().date()
            
            solar_terms_list = []
            for term_name, term_day in month_terms:
                term_date = f"{year:04d}-{month:02d}-{term_day:02d}"
                season = get_season_by_solar_term(term_name)
                
                # 计算距离该节气的天数
                term_date_obj = datetime(year, month, term_day).date()
                days_until = (term_date_obj - current_date).days
                
                solar_terms_list.append({
                    "name": term_name,
                    "date": term_date,
                    "days_until": days_until,
                    "season": season
                })
            
            result = {
                "year": year,
                "month": month,
                "solar_terms": solar_terms_list
            }
            
            return result
            
        except Exception as e:
            print(f"获取节气信息失败: {e}")
            return {"error": f"查询失败: {str(e)}"}
    
    @staticmethod
    @handle_errors(return_on_error={"error": "八字计算失败"})
    def get_8zi(year: int, month: int, day: int, hour: int = 12) -> Dict[str, Any]:
        """计算八字（四柱）"""
        try:
            # 使用新的八字计算模块
            bazi_result = calculate_bazi(year, month, day, hour)
            
            # 只返回八字字符串
            result = {
                "eight_characters": bazi_result["eight_characters"]
            }
            
            return result
            
        except Exception as e:
            print(f"计算八字失败: {e}")
            return {"error": f"计算失败: {str(e)}"}
    
    @staticmethod
    @handle_errors(return_on_error=[TextContent(type="text", text="工具调用失败")])
    async def handle_tool_call(name: str, arguments: Dict[str, Any]) -> List[TextContent]:
        """处理工具调用"""
        try:
            if name == "gregorian_to_lunar":
                try:
                    date_str = arguments.get("date")
                    if not date_str:
                        raise ValidationError("请提供日期参数", "date", date_str)
                    
                    # 验证日期格式
                    validate_date_string(date_str)
                    
                    # 解析日期字符串
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    year, month, day = date_obj.year, date_obj.month, date_obj.day
                    
                    # 验证日期范围
                    validate_year(year)
                    validate_month(month)
                    validate_day(day)
                    
                    lunar_result = LunarTools.gregorian_to_lunar(year, month, day)
                except (ValidationError, ValueError) as e:
                    error_response = create_error_response(e)
                    return [TextContent(type="text", text=json.dumps(error_response, ensure_ascii=False, indent=2))]
                
                if lunar_result[0] is None:
                    result = {"error": "转换失败"}
                else:
                    result = {
                        "gregorian_date": date_str,
                        "lunar_year": lunar_result[0],
                        "lunar_month": lunar_result[1],
                        "lunar_day": lunar_result[2],
                        "is_leap_month": lunar_result[3]
                    }
                    
            elif name == "lunar_to_gregorian":
                try:
                    lunar_year = arguments.get("year")
                    lunar_month = arguments.get("month")
                    lunar_day = arguments.get("day")
                    is_leap = arguments.get("is_leap", False)
                    
                    if not all([lunar_year is not None, lunar_month is not None, lunar_day is not None]):
                        raise ValidationError("请提供完整的农历日期参数")
                    
                    # 验证参数
                    year = validate_year(lunar_year)
                    month = validate_month(lunar_month)
                    day = validate_day(lunar_day)
                    
                    gregorian_result = LunarTools.lunar_to_gregorian(year, month, day, bool(is_leap))
                except (ValidationError, ValueError) as e:
                    error_response = create_error_response(e)
                    return [TextContent(type="text", text=json.dumps(error_response, ensure_ascii=False, indent=2))]
                
                if gregorian_result[0] is None:
                    result = {"error": "转换失败"}
                else:
                    result = {
                        "lunar_date": f"{lunar_year}-{lunar_month:02d}-{lunar_day:02d}",
                        "is_leap_month": is_leap,
                        "gregorian_year": gregorian_result[0],
                        "gregorian_month": gregorian_result[1],
                        "gregorian_day": gregorian_result[2],
                        "gregorian_date": f"{gregorian_result[0]}-{gregorian_result[1]:02d}-{gregorian_result[2]:02d}"
                    }
                    
            elif name == "get_lunar_string":
                try:
                    date_str = arguments.get("date")
                    if not date_str:
                        raise ValidationError("请提供日期参数", "date", date_str)
                    
                    # 验证日期格式
                    validate_date_string(date_str)
                    
                    # 解析日期字符串
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    year, month, day = date_obj.year, date_obj.month, date_obj.day
                    
                    # 验证日期范围
                    validate_year(year)
                    validate_month(month)
                    validate_day(day)
                    
                    result = LunarTools.get_lunar_string(year, month, day)
                except (ValidationError, ValueError) as e:
                    error_response = create_error_response(e)
                    return [TextContent(type="text", text=json.dumps(error_response, ensure_ascii=False, indent=2))]
                
            elif name == "get_24_lunar_feast":
                try:
                    date_str = arguments.get("date")
                    if not date_str:
                        raise ValidationError("请提供日期参数", "date", date_str)
                    
                    # 验证日期格式
                    validate_date_string(date_str)
                    
                    # 解析日期字符串
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    year, month = date_obj.year, date_obj.month
                    
                    # 验证日期范围
                    validate_year(year)
                    validate_month(month)
                    
                    result = LunarTools.get_24_lunar_feast(year, month)
                except (ValidationError, ValueError) as e:
                    error_response = create_error_response(e)
                    return [TextContent(type="text", text=json.dumps(error_response, ensure_ascii=False, indent=2))]
                
            elif name == "get_8zi":
                try:
                    date_str = arguments.get("date")
                    if not date_str:
                        raise ValidationError("请提供日期参数", "date", date_str)
                    
                    # 验证日期格式
                    validate_date_string(date_str)
                    
                    # 解析日期字符串
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    year, month, day = date_obj.year, date_obj.month, date_obj.day
                    
                    # 验证日期范围
                    validate_year(year)
                    validate_month(month)
                    validate_day(day)
                    
                    hour = arguments.get("hour", 12)
                    minute = arguments.get("minute", 0)
                    
                    # 验证时间参数
                    if not (0 <= hour <= 23):
                        raise ValidationError("小时必须在0-23之间", "hour", hour)
                    if not (0 <= minute <= 59):
                        raise ValidationError("分钟必须在0-59之间", "minute", minute)
                    
                    result = LunarTools.get_8zi(year, month, day, hour, minute)
                except (ValidationError, ValueError) as e:
                    error_response = create_error_response(e)
                    return [TextContent(type="text", text=json.dumps(error_response, ensure_ascii=False, indent=2))]
                
            else:
                result = {"error": f"未知的工具: {name}"}
            
            return [TextContent(type="text", text=json.dumps(result, ensure_ascii=False, indent=2))]
            
        except Exception as e:
            print(f"处理农历工具调用失败: {e}")
            error_result = {"error": f"工具调用失败: {str(e)}"}
            return [TextContent(type="text", text=json.dumps(error_result, ensure_ascii=False, indent=2))]