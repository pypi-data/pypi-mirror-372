# ---- Project Info and Dependencies ----

[project.urls]
Repository = "https://github.com/jlevy/kash-shell"
# Homepage = "https://..."
# Documentation = "https://..."

[project]
name = "kash-shell"
description = "The knowledge agent shell (core)"
authors = [
    { name="Joshua Levy", email="joshua@cal.berkeley.edu" },
]
readme = "README.md"
license = "AGPL-3.0-or-later"
requires-python = ">=3.11,<4.0"
dynamic = ["version"]

# https://pypi.org/classifiers/
# Adjust as needed:
classifiers = [
    # Adjust as needed:
    "Development Status :: 4 - Beta",
    # "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
    # Include this to avoid accidentally publishing to PyPI:
    # "Private :: Do Not Upload",
]


# ---- Main dependencies ----

dependencies = [
    "dunamai>=1.23.0",
    "pydantic>=2.10.6",
    "typing-extensions>=4.12.2",
    # My tools:
    "strif>=3.0.1",
    "funlog>=0.2.0",
    "prettyfmt>=0.4.1",
    "flowmark>=0.5.3",
    "frontmatter-format>=0.2.3",
    "sidematter-format>=0.0.5",
    "chopdiff>=0.2.6",
    "clideps>=0.1.4",
    "tminify>=0.1.6",
    # Shell and file essentials:
    # python-magic is most current and works with libmagic on macOS and Linux.
    # on Windows, python-magic-bin seems like the best option.
    "python-magic>=0.4.27; platform_system == 'Linux' or platform_system == 'Darwin'",
    "python-magic-bin>=0.4.14; platform_system == 'Windows'",
    "regex>=2024.11.6",
    "cachetools>=5.5.2",
    "humanfriendly>=10.0",
    "xonsh>=0.19.3",
    "prompt-toolkit>=3.0.50",
    "rich>=14.0.0",
    "rich-argparse>=1.7.0",
    "setproctitle>=1.3.5",
    "python-dotenv>=1.0.1",
    "send2trash>=1.8.3",
    "ripgrepy>=2.1.0",
    "pyperclip>=1.9.0",
    "colour>=0.1.5",
    "thefuzz>=0.22.1",
    "tldr>=3.3.0",
    "jinja2>=3.1.6",
    "pygments>=2.19.1",
    "tenacity>=9.0.0",
    "lazyasd>=0.1.4",
    "pathspec>=0.12.1",
    "patch-ng>=1.18.1",
    "inquirerpy>=0.3.4",
    "questionary>=2.0.0",
    # HTTP clients:
    "httpx[brotli]>=0.28.1", # Include brotli for better compression and browser fingerprint.
    "curl-cffi>=0.11.4",
    "truststore>=0.10.4",
    # LLM and API essentials:
    "tiktoken>=0.9.0",
    "openai==1.99.9", # FIXME: Pinning for now due to import errors (ImportError: cannot import name 'ResponseTextConfig' from 'openai.types.responses.response')
    "litellm>=1.74.15.post1",
    "pyrate-limiter>=3.7.0",
    "aiolimiter>=1.2.1",
    # Basic text handling and web scraping:
    "selectolax>=0.3.32",
    "readabilipy>=0.3.0",
    "markdownify>=0.13.1",
    "justext>=3.0.2",
    "cssselect>=1.2.0",
    "pluralizer>=1.2.0",
    # Minimal media handling:
    "pydub>=0.25.1",
    # audioop-lts is a backport of audioop for Python 3.13 and later needed for pydub.
    "audioop-lts>=0.2.1; python_version >= '3.13'",
    "deepgram-sdk>=3.10.1",
    # Data science:
    "pandas>=2.2.3",
    # Server deps:
    "fastapi>=0.115.11",
    "uvicorn>=0.34.0",
    # MCP:
    "mcp>=1.6.0",
    "anyio>=4.8.0",
    "mcp-proxy>=0.5.0",
]

# ---- Dev dependencies ----

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-sugar>=1.0.0",
    "ruff>=0.11.0",
    "codespell>=2.4.1",
    "rich>=14.0.0",
    "basedpyright==1.29.5",  # TODO: Upgrade when Cursor supports it.
    "funlog>=0.2.0",
]

[project.scripts]
kash = "kash.shell.shell_main:main"
kash-mcp = "kash.mcp.mcp_cli:main"

[tool.uv.sources]
# For local development:
# flowmark = { path = "../flowmark", editable = true }
# clideps = { path = "../clideps", editable = true }
# tminify = { path = "../tminify", editable = true }
# chopdiff = { path = "../chopdiff", editable = true }
# sidematter-format = { path = "../sidematter-format", editable = true }
# frontmatter-format = { path = "../frontmatter-format", editable = true }

# ---- Build system ----

# Dynamic versioning from:
# https://github.com/ninoseki/uv-dynamic-versioning/

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"
# Note JSON schemas don't seem to be right for tool.hatch.version.source so
# this may cause false warnings in IDEs.
# https://github.com/ninoseki/uv-dynamic-versioning/issues/21

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true

# Explicitly configure top-level namespace for hatch.
[tool.hatch.build.targets.wheel]
packages = ["src/kash"]

[tool.hatch.build.targets.wheel.sources]
"src/kash" = "kash"

# ---- Settings ----

[tool.ruff]
# Set as desired, typically 88 (black standard) or 100 (wide).
line-length = 100

[tool.ruff.lint]
select = [
    # See: https://docs.astral.sh/ruff/rules/
    # Basic list from: https://docs.astral.sh/ruff/linter/#rule-selection
    "E", # https://docs.astral.sh/ruff/rules/#error-e
    "F", # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "UP", # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "B", # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "I", # https://docs.astral.sh/ruff/rules/#isort-i
    # Other possibilities:
    # "D" # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    # "Q" # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    # "COM" # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    # "SIM", # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim

]
ignore = [
    # Disable some rules that are overly pedantic. Add/remove as desired:
    "E501", # https://docs.astral.sh/ruff/rules/line-too-long/
    "E402", # https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/
    "E731", # https://docs.astral.sh/ruff/rules/lambda-assignment/
    # TODO: Consider cleaning these up:
    "E712",
    "UP031",
    "UP007",
    "B904",
    "UP038",
    "B007",
    "B008",
    "B026",
    # We use both ruff formatter and linter so some rules should always be disabled.
    # See: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191", # https://docs.astral.sh/ruff/rules/tab-indentation/
    "E111", # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple/
    "E114", # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple-comment/
    "E117", # https://docs.astral.sh/ruff/rules/over-indented/
    "D206", # https://docs.astral.sh/ruff/rules/docstring-tab-indentation/
    "D300", # https://docs.astral.sh/ruff/rules/triple-single-quotes/
    "Q000", # https://docs.astral.sh/ruff/rules/bad-quotes-inline-string/
    "Q001", # https://docs.astral.sh/ruff/rules/bad-quotes-multiline-string/
    "Q002", # https://docs.astral.sh/ruff/rules/bad-quotes-docstring/
    "Q003", # https://docs.astral.sh/ruff/rules/avoidable-escaped-quote/
    "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/
    "COM819", # https://docs.astral.sh/ruff/rules/prohibited-trailing-comma/
    "ISC002", # https://docs.astral.sh/ruff/rules/multi-line-implicit-string-concatenation/
]

# BasedPyright currently seems like the best type checker option, much faster
# than mypy and with a good extension for VSCode/Cursor.
# https://marketplace.visualstudio.com/items?itemName=detachhead.basedpyright
# https://docs.basedpyright.com/latest/configuration/config-files/#sample-pyprojecttoml-file
[tool.basedpyright]
include = ["src", "tests", "devtools"]
reportUnusedParameter = "warning"
# These likely worth revisiting and re-enabling:
reportImplicitOverride = false
reportImportCycles = false
reportUnknownMemberType = false
reportPrivateUsage = false
reportPrivateLocalImportUsage = false
reportUnknownParameterType = false
reportMissingParameterType = false
reportUnannotatedClassAttribute = false
reportUninitializedInstanceVariable = false
reportCallInDefaultInitializer = false
reportUntypedBaseClass = false
# Make ignoring easier:
reportIgnoreCommentWithoutRule = false
reportUnnecessaryTypeIgnoreComment = false
# Seem generally harmless:
reportImplicitStringConcatenation = false
reportUnknownLambdaType = false
# Typically noisy:
reportMissingTypeStubs = false
reportUnusedCallResult = false
reportMissingImports = false
reportUnnecessaryIsInstance = false
reportUnreachable = false
reportAny = false
reportExplicitAny = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportMissingTypeArgument = false
reportUnusedImport = false
reportIncompatibleVariableOverride = false
reportUnusedFunction = false
reportPrivateImportUsage = false


[tool.codespell]
ignore-words-list = "iTerm,Numbe,caf"
# skip = "foo.py,bar.py"


[tool.pytest.ini_options]
python_files = ["*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = [
    "src",
    "tests",
]
norecursedirs = ["src/kash/xontrib"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore:.*deprecated.*",
    "ignore:.*Deprecation.*",
    "ignore::RuntimeWarning:xonsh.tools",
    "ignore::SyntaxWarning:pydub.utils",
    "ignore::UserWarning:pydantic",
]
# Dev convenience: Temporarily rename a file to a stash pattern to stop tracking it.
addopts = "--ignore-glob='stash.*' --ignore-glob='*.stash.*'"
