from __future__ import annotations

from pathlib import Path
from typing import TYPE_CHECKING

from kash.utils.common.url import Url

# We wrap each command as a convenient way to customize CLI docs and to make
# all imports lazy, since some of these actions have a lot of dependencies that
# make imports slow. This way CLI help etc feels snappy.
if TYPE_CHECKING:
    from kash.model import ActionResult


def help() -> None:
    """
    Show additional help and example usage.
    """
    from clideps.ui.rich_output import print_heading
    from kash.utils.rich_custom.rich_markdown_fork import Markdown
    from rich import print as rprint

    from textpress.cli.cli_docs import HELP_PAGE

    print_heading(message="Using Textpress")

    rprint()
    rprint(Markdown(HELP_PAGE))


def setup(show: bool = False) -> None:
    """
    Run this first! Set up your API key to use with Textpress.

    You can rerun this to get your API key again or use `--show` to confirm
    your setup. (If you prefer, you can instead set the `TEXTPRESS_API_KEY`
    environment variable yourself.)
    """
    from textpress.cli.cli_setup import interactive_setup, show_setup

    if show:
        show_setup()
    else:
        interactive_setup()


def paste(title: str, plaintext: bool = False) -> Path:
    """
    Paste the contents of the OS (system) clipboard into a file in the workspace.

    Copy content elsewhere (like a doc or chat session) and use this command to
    paste into a file for use by Textpress. Presumes Markdown format unless the
    `--plaintext` flag is set.
    """

    import pyperclip
    from kash.model import Format, Item, ItemType
    from kash.workspaces import current_ws

    contents = pyperclip.paste()
    if not contents.strip():
        raise ValueError("Clipboard is empty")

    ws = current_ws()
    format = Format.plaintext if plaintext else Format.markdown
    store_path = ws.save(Item(type=ItemType.resource, format=format, title=title, body=contents))

    return store_path


def files(all: bool = False) -> None:
    """
    List the files in the workspace.

    This holds pasted text files, imported docs and URLs, converted Markdown files, and
    exported Markdown and HTML outputs. Workspace files can be removed any time if you
    don't need them (and they will be regenerated by new runs).
    """
    from kash.commands.base.files_command import files
    from kash.workspaces import current_ws
    from rich import print as rprint

    ws = current_ws()
    rprint()
    files(ws.base_dir, overview=True, all=all)


def convert(md_path: Path | Url, pdf_converter: str = "marker") -> ActionResult:
    """
    Convert a document to clean Markdown.

    Handles HTML, PDF, and docx files. It's not guaranteed to be perfect but it's
    often quite good. To fix any issues, run `convert`, then manually make edits
    to the result before using `format` or `publish`.
    This is designed to work well to convert Gemini Deep Research docx files:
    To try this out, use Gemini Deep Research to get a report, then
    click to export a report to Google Docs, then select `File >
    Download > Microsoft Word (.docx)`.

    Uses Marker (for PDF) and MarkItDown/Mammoth (for docx) as well as Markdownify
    and flowmark to get clean Markdown formatting results.
    """
    from kash.exec import prepare_action_input
    from kash.kits.docs.actions.text.markdownify_doc import markdownify_doc
    from kash.model import ActionResult

    input = prepare_action_input(md_path)
    return ActionResult(items=[markdownify_doc(input.items[0], pdf_converter=pdf_converter)])


def format(
    md_path: Path | Url, add_classes: str | None = None, no_minify: bool = False
) -> ActionResult:
    """
    Convert and format documents to pretty, formatted, minified HTML using the TextPress template.

    Input can be text or Markdown or any format handled by `convert`.
    Result contains clean Markdown and HTML. Supports GFM-flavored Markdown
    and HTML, including GFM-flavored Markdown tables and footnotes.
    Calls `convert` (with the default "marker" converter) to do necessary
    conversions.
    """
    from kash.exec import prepare_action_input

    from textpress.actions.textpress_format import textpress_format

    input = prepare_action_input(md_path)
    return textpress_format(input, add_classes=add_classes, no_minify=no_minify)


def publish(
    path: Path | Url, add_classes: str | None = None, no_minify: bool = False
) -> ActionResult:
    """
    Publish (or re-publish) a document as a Textpress webpage.

    Uses `format` to convert and format the content and publishes the result.
    """
    from kash.exec import prepare_action_input

    from textpress.actions.textpress_publish import textpress_publish

    input = prepare_action_input(path)
    return textpress_publish(input, add_classes=add_classes, no_minify=no_minify)


def export(md_path: Path | Url) -> ActionResult:
    """
    Export a document as new, clean .pdf and .docx files.

    You can use the .docx file in Word or in Google Docs.
    """
    from kash.exec import prepare_action_input

    from textpress.actions.textpress_export import textpress_export

    input = prepare_action_input(md_path)
    return textpress_export(input)
