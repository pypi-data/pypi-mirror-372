[project]
name = "eas-3d-pattern"
dynamic = []
description = "A tool to visualize 3D antenna pattern files in JSON format."
authors = [
    {name = "Georg Polownikow",email = "georg.polownikow@ericsson.com"}
]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.11,<3.14"
keywords = ["antenna", "pattern", "3d pattern", "visualization", "NGMN", "BASTA", "RF", "JSON"]

dependencies = [
    "numpy (>=2.0.0,<3.0.0)",
    "pandas (>=2.2.2,<3.0.0)",
    "openpyxl (>=3.1.5, <4.0.0)",
    "jsonschema (>=4.24.0,<5.0.0)",
    "xarray (>=2025.3.1,<2026.0.0)",
    "plotly (>=5.24.1,<6.0.0)",
    "kaleido (>=0.1.0, <0.2.0)",
    "requests (>=2.32.2,<3.0.0)",
    "tqdm (>=4.67.1,<5.0.0)",
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Telecommunications Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Visualization",
]
version = "0.1.2"

[project.urls]
homepage = "https://www.ericsson.com/antenna-system"
repository = "https://github.com/Ericsson/eas-3d-pattern"

[tool.poetry]
packages = [{include = "eas_3d_pattern", from = "src"}]

include = [
    "eas_3d_pattern/schemas/*.json",
    "eas_3d_pattern/sample_data/*.json",
]

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.17.1"
nbformat = "^5.10.4"
ruff = "^0.11.12"
mypy = "^1.16.0"
pre-commit = "^4.2.0"
pandas-stubs = "2.2.2.240909"
plotly-stubs = "^0.0.5"
types-requests = "^2.32.4.20250611"
types-jsonschema = "^4.24.0.20250528"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"

[build-system]
requires = ["poetry-core>=2.0.0", "poetry-dynamic-versioning>=1.8.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
target-version = "py313"
line-length = 88 # default but is ignored
fix = true
show-fixes = true
src = ["src"]


[tool.ruff.lint]
select = [
    "E", "W", # pycodestyle errors and warnings
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "I",      # isort (import sorting)
    "D",      # pydocstyle
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "PT",     # flake8-pytest-style (if using pytest)
    "RUF",    # Ruff-specific rules
    "NPY",    # NumPy specific rules (if applicable, can be strict)
]
ignore = [
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "E501",   # Line too long
    "SIM102", # Useless string constant
    ]

[tool.ruff.lint.per-file-ignores]
"src/eas_3d_pattern/parser.py" = [
    "D102", # Missing docstring in public method (very common for test methods)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["eas_3d_pattern"] # Help Ruff group your own imports

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true


[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
check_untyped_defs = true
disallow_incomplete_defs = true
