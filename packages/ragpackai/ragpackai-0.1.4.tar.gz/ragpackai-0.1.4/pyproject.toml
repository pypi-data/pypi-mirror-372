[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ragpackai"
version = "0.1.4"
description = "Portable Retrieval-Augmented Generation Library"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "ragpackai Team", email = "aistudentlearn4@gmail.com"}
]
maintainers = [
    {name = "ragpackai Team", email = "aistudentlearn4@gmail.com"}
]
keywords = [
    "rag", "retrieval", "augmented", "generation", "llm", "embeddings", 
    "vectorstore", "ai", "nlp", "machine-learning", "langchain"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
# Minimal core dependencies - only what's absolutely required
dependencies = [
    "pydantic>=2.0.0,<3.0.0",
    "tqdm>=4.60.0,<5.0.0",
    "cryptography>=3.4.0,<50.0.0",
]

[project.optional-dependencies]
# Core RAG functionality
core = [
    "langchain>=0.2.0,<0.3.0",
    "langchain-community>=0.2.0,<0.3.0",
    "chromadb>=0.5.0,<0.6.0",
    "langchain-chroma>=0.1.0,<0.3.0",
]

# Document processing
documents = [
    "PyPDF2>=3.0.0,<4.0.0",
]

# Embeddings
embeddings = [
    "sentence-transformers>=2.0.0,<3.0.0",
]

# Vector search (problematic on some systems)
faiss = [
    "faiss-cpu>=1.7.0,<2.0.0",
]

# LLM providers
openai = [
    "langchain-openai>=0.1.0,<0.2.0",
    "openai>=1.30.0,<2.0.0",
]

google = [
    "langchain-google-genai>=1.0.0,<2.0.0",
    "langchain-google-vertexai>=1.0.0,<2.0.0",
]

groq = [
    "groq>=0.4.0,<1.0.0",
    "langchain-groq>=0.1.0,<1.0.0",
]

cerebras = [
    "cerebras-cloud-sdk>=1.0.0,<2.0.0",
    "langchain-cerebras>=0.1.0,<1.0.0",
]

nvidia = [
    "langchain-nvidia-ai-endpoints>=0.1.0,<1.0.0",
]

# Common combinations
standard = [
    "langchain>=0.2.0,<0.3.0",
    "langchain-community>=0.2.0,<0.3.0",
    "langchain-openai>=0.1.0,<0.2.0",
    "openai>=1.30.0,<2.0.0",
    "chromadb>=0.5.0,<0.6.0",
    "langchain-chroma>=0.1.0,<0.3.0",
    "sentence-transformers>=2.0.0,<3.0.0",
    "PyPDF2>=3.0.0,<4.0.0",
]

# All features (may have installation issues on some systems)
all = [
    "langchain>=0.2.0,<0.3.0",
    "langchain-community>=0.2.0,<0.3.0",
    "langchain-openai>=0.1.0,<0.2.0",
    "openai>=1.30.0,<2.0.0",
    "chromadb>=0.5.0,<0.6.0",
    "langchain-chroma>=0.1.0,<0.3.0",
    "sentence-transformers>=2.0.0,<3.0.0",
    "PyPDF2>=3.0.0,<4.0.0",
    "faiss-cpu>=1.7.0,<2.0.0",
    "langchain-google-genai>=1.0.0,<2.0.0",
    "langchain-google-vertexai>=1.0.0,<2.0.0",
    "groq>=0.4.0,<1.0.0",
    "langchain-groq>=0.1.0,<1.0.0",
    "cerebras-cloud-sdk>=1.0.0,<2.0.0",
    "langchain-cerebras>=0.1.0,<1.0.0",
    "langchain-nvidia-ai-endpoints>=0.1.0,<1.0.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0,<8.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "black>=22.0.0,<25.0.0",
    "flake8>=5.0.0,<7.0.0",
    "mypy>=1.0.0,<2.0.0",
    "pre-commit>=2.20.0,<4.0.0",
    "build>=0.8.0,<1.0.0",
    "twine>=4.0.0,<5.0.0",
]

[project.scripts]
ragpackai = "ragpackai.cli:main"

[project.urls]
Homepage = "https://github.com/AIMLDev726/ragpackai"
Documentation = "https://AIMLDev726.readthedocs.io/"
Repository = "https://github.com/AIMLDev726/ragpackai"
"Bug Reports" = "https://github.com/AIMLDev726/ragpackai/issues"
Changelog = "https://github.com/AIMLDev726/ragpackai/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["ragpackai", "ragpackai.embeddings", "ragpackai.llms"]

[tool.setuptools.package-data]
ragpackai = ["*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true