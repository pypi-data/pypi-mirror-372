Metadata-Version: 2.1
Name: utils-api-pipefy
Version: 0.5.3
Summary: Ferramentas para otimizar o consumo paralelizado de api do pipefy, trantando os retornos.
Home-page: https://github.com/YuriMotoshima/utils-api-pipefy
License: MIT
Author: Yuri Motoshima
Author-email: yurimotoshima@gmail.com
Requires-Python: >=3.9
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: python-dotenv (>=0.19.2)
Requires-Dist: requests (>=2.27.1)
Project-URL: GitHub, https://github.com/YuriMotoshima/utils-api-pipefy
Project-URL: Repository, https://github.com/YuriMotoshima/utils-api-pipefy
Description-Content-Type: text/markdown

# utils-api-pipefy

Biblioteca que possui um kit de ferramentas úteis para ações usualmente rotineiras de quem trabalha com Pipefy, desde consulta de cards a criação de Pipes, Tables e atualizações em geral.

Utilizamos como apoio as collection requests e python-dotenv.

## Instalação

```sh
pip install utils-api-pipefy
```

## .env
>> HOST_PIPE=app or seu_host_pipefy<br>
>> PIPE= seu_numero_pipe<br>
>> NONPHASES= [id das fases que devem ser ignoradas]<br>
>> TOKEN= seu_token<br>
>> LOGENV = DEV or PROD [ PROD remove urlib3 logs ]<br>
>> LOGNAME = nome_arquivo_logs<br>
>> DISABLELOG = True or False [True desabilita a criação de pasta e arquivo de logs, temos essa opção para utilização em plataformas como Google Cloud Platform, neste caso o logging apenas imprime da tela, sem salvar o log.]<br>

## Exemplo de uso

```py
import os
import json
import time
import logging
from utils_api_pipefy import Engine
from utils_api_pipefy import exceptions

if __name__ == "__main__":
    
    try:
        eng = Engine()
        
        # ALGUMAS DAS UTILIDADES DO ENGINE
        logging.info(eng.columns)
        print(json.dumps(eng.phases_id, ensure_ascii=False, indent=2))
        print(json.dumps(eng.fields, ensure_ascii=False, indent=2))
        print(json.dumps(eng.phases, ensure_ascii=False, indent=2))
                
        a = time.time()
        data=eng.run_all_data_phases()
        print(f"\n\nTempo total: {time.time()-a}\n\n")
        print()
    except Exception as err:
        raise exceptions(err)
```
