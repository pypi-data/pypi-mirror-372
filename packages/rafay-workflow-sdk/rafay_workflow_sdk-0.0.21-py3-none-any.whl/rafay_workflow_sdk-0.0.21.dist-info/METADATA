Metadata-Version: 2.4
Name: rafay_workflow_sdk
Version: 0.0.21
Summary: Rafay workflow handler Python function SDK
Project-URL: Homepage, https://github.com/RafaySystems/function-templates
Project-URL: Issues, https://github.com/RafaySystems/function-templates/issues
Author-email: Bheema Sarat Chandra Kaki <sarat@rafay.co>, Avinash Varma <avinash@rafay.co>
License-File: LICENSE
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.11
Requires-Dist: fastapi>=0.104.0
Requires-Dist: requests-toolbelt>=1.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: uvicorn[standard]>=0.24.0
Description-Content-Type: text/markdown

# Workflow Handler Python Function SDK

This SDK provides a framework for building Python functions that can be deployed as part of Rafay workflows.

## Features

- FastAPI-based web framework for high performance
- Built-in logging and activity tracking
- Error handling with retry mechanisms
- Async/await support with thread pool execution for synchronous handlers
- Configurable concurrency for handling multiple requests

## Concurrency Model

The SDK uses FastAPI with async request handling. Since user handler functions are typically synchronous, the SDK runs them in a ThreadPoolExecutor to avoid blocking the event loop.

### Environment Variables

- `FUNCTION_NAME`: Name of the function (default: "default-function-name")
- `LOG_LEVEL`: Logging level (default: "INFO")
- `LOG_BUFFER_CAPACITY`: Number of log messages to buffer (default: 10)
- `MAX_WORKERS`: Thread pool size for handling concurrent requests (default: 40)
- `LOG_FLUSH_TIMEOUT`: Timeout for flushing logs (default: 10)
- `skip_tls_verify`: Skip TLS verification (default: "false")

### Concurrency Explanation

- **FastAPI Event Loop**: Handles incoming HTTP requests asynchronously
- **ThreadPoolExecutor**: Executes synchronous user handler functions in separate threads
- **MAX_WORKERS=40**: Up to 40 concurrent handler executions (similar to Flask's WSGI_THREADS=40)

This design provides excellent concurrency for I/O-bound operations while maintaining compatibility with synchronous handler functions.
