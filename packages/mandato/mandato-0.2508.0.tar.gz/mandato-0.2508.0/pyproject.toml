[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "mandato"
description = "ORMA's brother"
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
authors = [
    {name = "Kairix Devteam", email = "devteam@kairix.dev"},
]

dependencies = [
    "click==8.*",
]

[project.urls]
Homepage = "https://github.com/kairix-dev/mandato"
Documentation = "https://github.com/kairix-dev/mandato/README.md"
Repository = "https://github.com/kairix-dev/mandato"
"Bug Tracker" = "https://github.com/kairix-dev/mandato/issues"
Changelog = "https://github.com/kairix-dev/mandato/blob/main/CHANGELOG.md"

[project.scripts]
mandato = "mandato.__main__:main"

[project.optional-dependencies]

dev = [
    "pre-commit==4.*",
    "memray==1.*",
]

ci = [
    "radon==6.*",
    "black==25.*",
    "pyright==1.*",
    "mypy==1.*",
    "isort==6.*",
    "autoflake==2.*",
    "pytest==8.*",
    "pytest-cov==6.*",
]



[tool.setuptools.packages.find]
where = ["."]
include = ["mandato*"]

[tool.setuptools.dynamic]
version = {attr = "mandato.__version__"}


[tool.black]
line-length = 79
force-exclude = """
/(
\\.git
| build
| node_modules
| data
)/
"""

[tool.isort]
profile = "black"
line_length = 79

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config --cov=mandato --cov-config=.coveragerc.toml"
testpaths = ["tests"]

[tool.coverage.run]
source = ["mandato"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.autoflake]
ignore-init-module-imports = true
remove-all-unused-imports = true
remove-duplicate-keys = true
in-place = true
recursive = true

[tool.pyright]
include = ["mandato", "tests"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".git",
    "build",
    "data",
]
ignore = []
defineConstant = { DEBUG = true }
typeCheckingMode = "strict"
reportCallInDefaultInitializer = "error"
reportImplicitOverride = "information"
reportImplicitStringConcatenation = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportMissingImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = false
reportMissingTypeStubs = false
pythonVersion = "3.12"
pythonPlatform = "Linux"

[[tool.pyright.executionEnvironments]]
root = "."
reportMissingImports = "warning"


# ... other project metadata fields as specified in:
#     https://packaging.python.org/en/latest/specifications/declaring-project-metadata/