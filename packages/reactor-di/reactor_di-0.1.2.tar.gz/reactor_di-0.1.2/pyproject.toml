[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]

[dependency-groups]
dev = [
    "black>=24.0.0",
    "mypy>=1.14.0",
    "pytest-cov>=4.0.0",
    "pytest>=8.0.0",
    "ruff>=0.12.4",
]

[project]
authors = [
    { name = "Christian Schlichtherle" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = []
description = "A code generator for dependency injection (DI) in Python which is based on the mediator and factory patterns"
dynamic = ["version"]
keywords = ["dependency-injection", "di", "code-generation", "mediator", "factory"]
license = { text = "MIT" }
name = "reactor-di"
readme = "README.md"
requires-python = ">=3.8"

[project.urls]
Homepage = "https://github.com/christian-schlichtherle/reactor-di-python"
Issues = "https://github.com/christian-schlichtherle/reactor-di-python/issues"
Repository = "https://github.com/christian-schlichtherle/reactor-di-python"

[tool.black]
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 88
target-version = ['py38']

[tool.coverage.report]
exclude_lines = [
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    "def __repr__",
    "if 0:",
    "if __name__ == .__main__.:",
    "if self.debug:",
    "if settings.DEBUG",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]
fail_under = 90
show_missing = true
skip_covered = false

[tool.coverage.run]
branch = true
omit = [
    "*/__pycache__/*",
    "*/conftest.py",
    "*/test_*.py",
    "*/tests/*",
]
source = ["src"]

[tool.hatch.version]
source = "vcs"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
python_version = "3.8"
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disallow_untyped_defs = false
module = ["tests.*", "examples.*"]

[tool.pytest.ini_options]
addopts = [
    "--cov-report=html",
    "--cov-report=term",
    "--cov-report=xml",
]
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
python_classes = ["Test*"]
python_files = ["test_*.py", "examples/*.py"]
python_functions = ["test_*"]
testpaths = ["examples", "tests"]

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "ARG001", # unused-function-args
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "E", # pycodestyle errors
    "F", # pyflakes
    "FBT", # flake8-boolean-trap
    "I", # isort
    "ICN", # flake8-import-conventions
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle warnings
]
ignore = [
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "E501", # line too long, handled by black
    "FBT002", # boolean default positional argument
    "FBT003", # boolean positional value in function call
    "T201", # print statements (can be useful for debugging)
    "UP006", # use type instead of Type (need Type for Python 3.8)
    "UP007", # use X | Y instead of Union (need Union for Python 3.8)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ARG",
    "FBT",
    "SIM",
    "T20",
]
"examples/*" = [
    "ARG",
    "FBT",
    "SIM",
    "T20",
]
