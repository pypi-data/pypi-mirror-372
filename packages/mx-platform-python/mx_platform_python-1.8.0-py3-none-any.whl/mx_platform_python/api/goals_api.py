# coding: utf-8

"""
    MX Platform API

    The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import Optional

from mx_platform_python.models.goal_request_body import GoalRequestBody
from mx_platform_python.models.goal_response_body import GoalResponseBody
from mx_platform_python.models.goals_response_body import GoalsResponseBody
from mx_platform_python.models.reposition_request_body import RepositionRequestBody
from mx_platform_python.models.reposition_response_body import RepositionResponseBody
from mx_platform_python.models.update_goal_request_body import UpdateGoalRequestBody

from mx_platform_python.api_client import ApiClient
from mx_platform_python.api_response import ApiResponse
from mx_platform_python.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class GoalsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def users_user_guid_goals_get(self, user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for the user.")], page : Annotated[Optional[StrictStr], Field(description="Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified.")] = None, records_per_age : Annotated[Optional[StrictStr], Field(description="The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used.")] = None, **kwargs) -> GoalsResponseBody:  # noqa: E501
        """List goals  # noqa: E501

        List all goals a user can set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_get(user_guid, page, records_per_age, async_req=True)
        >>> result = thread.get()

        :param user_guid: The unique identifier for the user. (required)
        :type user_guid: str
        :param page: Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified.
        :type page: str
        :param records_per_age: The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used.
        :type records_per_age: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GoalsResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the users_user_guid_goals_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.users_user_guid_goals_get_with_http_info(user_guid, page, records_per_age, **kwargs)  # noqa: E501

    @validate_arguments
    def users_user_guid_goals_get_with_http_info(self, user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for the user.")], page : Annotated[Optional[StrictStr], Field(description="Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified.")] = None, records_per_age : Annotated[Optional[StrictStr], Field(description="The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List goals  # noqa: E501

        List all goals a user can set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_get_with_http_info(user_guid, page, records_per_age, async_req=True)
        >>> result = thread.get()

        :param user_guid: The unique identifier for the user. (required)
        :type user_guid: str
        :param page: Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified.
        :type page: str
        :param records_per_age: The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used.
        :type records_per_age: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GoalsResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_guid',
            'page',
            'records_per_age'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_guid_goals_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_guid']:
            _path_params['user_guid'] = _params['user_guid']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('records_per_age') is not None:  # noqa: E501
            _query_params.append(('records_per_age', _params['records_per_age']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "GoalsResponseBody",
        }

        return self.api_client.call_api(
            '/users/{user_guid}/goals', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def users_user_guid_goals_goal_guid_delete(self, goal_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a goal. Defined by MX.")], user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a user.")], **kwargs) -> None:  # noqa: E501
        """Delete a goal  # noqa: E501

        Delete a goal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_goal_guid_delete(goal_guid, user_guid, async_req=True)
        >>> result = thread.get()

        :param goal_guid: The unique identifier for a goal. Defined by MX. (required)
        :type goal_guid: str
        :param user_guid: The unique identifier for a user. (required)
        :type user_guid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the users_user_guid_goals_goal_guid_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.users_user_guid_goals_goal_guid_delete_with_http_info(goal_guid, user_guid, **kwargs)  # noqa: E501

    @validate_arguments
    def users_user_guid_goals_goal_guid_delete_with_http_info(self, goal_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a goal. Defined by MX.")], user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a user.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a goal  # noqa: E501

        Delete a goal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_goal_guid_delete_with_http_info(goal_guid, user_guid, async_req=True)
        >>> result = thread.get()

        :param goal_guid: The unique identifier for a goal. Defined by MX. (required)
        :type goal_guid: str
        :param user_guid: The unique identifier for a user. (required)
        :type user_guid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'goal_guid',
            'user_guid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_guid_goals_goal_guid_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['goal_guid']:
            _path_params['goal_guid'] = _params['goal_guid']

        if _params['user_guid']:
            _path_params['user_guid'] = _params['user_guid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/users/{user_guid}/goals/{goal_guid}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def users_user_guid_goals_goal_guid_get(self, goal_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a goal. Defined by MX.")], user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a user.")], **kwargs) -> GoalResponseBody:  # noqa: E501
        """Read a goal  # noqa: E501

        Read a specific goal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_goal_guid_get(goal_guid, user_guid, async_req=True)
        >>> result = thread.get()

        :param goal_guid: The unique identifier for a goal. Defined by MX. (required)
        :type goal_guid: str
        :param user_guid: The unique identifier for a user. (required)
        :type user_guid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GoalResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the users_user_guid_goals_goal_guid_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.users_user_guid_goals_goal_guid_get_with_http_info(goal_guid, user_guid, **kwargs)  # noqa: E501

    @validate_arguments
    def users_user_guid_goals_goal_guid_get_with_http_info(self, goal_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a goal. Defined by MX.")], user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a user.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Read a goal  # noqa: E501

        Read a specific goal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_goal_guid_get_with_http_info(goal_guid, user_guid, async_req=True)
        >>> result = thread.get()

        :param goal_guid: The unique identifier for a goal. Defined by MX. (required)
        :type goal_guid: str
        :param user_guid: The unique identifier for a user. (required)
        :type user_guid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GoalResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'goal_guid',
            'user_guid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_guid_goals_goal_guid_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['goal_guid']:
            _path_params['goal_guid'] = _params['goal_guid']

        if _params['user_guid']:
            _path_params['user_guid'] = _params['user_guid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "GoalResponseBody",
        }

        return self.api_client.call_api(
            '/users/{user_guid}/goals/{goal_guid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def users_user_guid_goals_goal_guid_put(self, goal_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a goal. Defined by MX.")], user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a user.")], update_goal_request_body : UpdateGoalRequestBody, **kwargs) -> GoalResponseBody:  # noqa: E501
        """Update a goal  # noqa: E501

        This endpoint updates a specific goal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_goal_guid_put(goal_guid, user_guid, update_goal_request_body, async_req=True)
        >>> result = thread.get()

        :param goal_guid: The unique identifier for a goal. Defined by MX. (required)
        :type goal_guid: str
        :param user_guid: The unique identifier for a user. (required)
        :type user_guid: str
        :param update_goal_request_body: (required)
        :type update_goal_request_body: UpdateGoalRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GoalResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the users_user_guid_goals_goal_guid_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.users_user_guid_goals_goal_guid_put_with_http_info(goal_guid, user_guid, update_goal_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def users_user_guid_goals_goal_guid_put_with_http_info(self, goal_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a goal. Defined by MX.")], user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for a user.")], update_goal_request_body : UpdateGoalRequestBody, **kwargs) -> ApiResponse:  # noqa: E501
        """Update a goal  # noqa: E501

        This endpoint updates a specific goal.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_goal_guid_put_with_http_info(goal_guid, user_guid, update_goal_request_body, async_req=True)
        >>> result = thread.get()

        :param goal_guid: The unique identifier for a goal. Defined by MX. (required)
        :type goal_guid: str
        :param user_guid: The unique identifier for a user. (required)
        :type user_guid: str
        :param update_goal_request_body: (required)
        :type update_goal_request_body: UpdateGoalRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GoalResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'goal_guid',
            'user_guid',
            'update_goal_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_guid_goals_goal_guid_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['goal_guid']:
            _path_params['goal_guid'] = _params['goal_guid']

        if _params['user_guid']:
            _path_params['user_guid'] = _params['user_guid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_goal_request_body'] is not None:
            _body_params = _params['update_goal_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "GoalResponseBody",
        }

        return self.api_client.call_api(
            '/users/{user_guid}/goals/{goal_guid}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def users_user_guid_goals_post(self, user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for the user.")], goal_request_body : GoalRequestBody, **kwargs) -> GoalResponseBody:  # noqa: E501
        """Create a goal  # noqa: E501

        Create a goal. This endpoint accepts the optional `MX-Skip-Webhook` header and `skip_webhook` parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_post(user_guid, goal_request_body, async_req=True)
        >>> result = thread.get()

        :param user_guid: The unique identifier for the user. (required)
        :type user_guid: str
        :param goal_request_body: (required)
        :type goal_request_body: GoalRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GoalResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the users_user_guid_goals_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.users_user_guid_goals_post_with_http_info(user_guid, goal_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def users_user_guid_goals_post_with_http_info(self, user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for the user.")], goal_request_body : GoalRequestBody, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a goal  # noqa: E501

        Create a goal. This endpoint accepts the optional `MX-Skip-Webhook` header and `skip_webhook` parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_post_with_http_info(user_guid, goal_request_body, async_req=True)
        >>> result = thread.get()

        :param user_guid: The unique identifier for the user. (required)
        :type user_guid: str
        :param goal_request_body: (required)
        :type goal_request_body: GoalRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GoalResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_guid',
            'goal_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_guid_goals_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_guid']:
            _path_params['user_guid'] = _params['user_guid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['goal_request_body'] is not None:
            _body_params = _params['goal_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "GoalResponseBody",
        }

        return self.api_client.call_api(
            '/users/{user_guid}/goals', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def users_user_guid_goals_reposition_put(self, user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for the user.")], reposition_request_body : RepositionRequestBody, **kwargs) -> RepositionResponseBody:  # noqa: E501
        """Reposition goals  # noqa: E501

        This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_reposition_put(user_guid, reposition_request_body, async_req=True)
        >>> result = thread.get()

        :param user_guid: The unique identifier for the user. (required)
        :type user_guid: str
        :param reposition_request_body: (required)
        :type reposition_request_body: RepositionRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RepositionResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the users_user_guid_goals_reposition_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.users_user_guid_goals_reposition_put_with_http_info(user_guid, reposition_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def users_user_guid_goals_reposition_put_with_http_info(self, user_guid : Annotated[StrictStr, Field(..., description="The unique identifier for the user.")], reposition_request_body : RepositionRequestBody, **kwargs) -> ApiResponse:  # noqa: E501
        """Reposition goals  # noqa: E501

        This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.users_user_guid_goals_reposition_put_with_http_info(user_guid, reposition_request_body, async_req=True)
        >>> result = thread.get()

        :param user_guid: The unique identifier for the user. (required)
        :type user_guid: str
        :param reposition_request_body: (required)
        :type reposition_request_body: RepositionRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RepositionResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_guid',
            'reposition_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_user_guid_goals_reposition_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_guid']:
            _path_params['user_guid'] = _params['user_guid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['reposition_request_body'] is not None:
            _body_params = _params['reposition_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "RepositionResponseBody",
        }

        return self.api_client.call_api(
            '/users/{user_guid}/goals/reposition', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
