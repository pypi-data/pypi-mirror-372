# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.configuration import Server
from whatsappcloudapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from whatsappcloudapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from whatsappcloudapi.models.set_encryption_public_key import SetEncryptionPublicKey
from whatsappcloudapi.models.get_encryption_public_key import GetEncryptionPublicKey


class SetupEndpointEncryptionController(BaseController):

    """A Controller to access Endpoints in the whatsappcloudapi API."""
    def __init__(self, config):
        super(SetupEndpointEncryptionController, self).__init__(config)

    def set_encryption_public_key(self,
                                  business_public_key,
                                  phone_number_id):
        """Does a POST request to /{Phone-Number-ID}/whatsapp_business_encryption.

        Sets the public key that is used for encrypting the data channel
        requests

        Args:
            business_public_key (str): The request form parameter.
            phone_number_id (str): The request template parameter.

        Returns:
            SetEncryptionPublicKey: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Phone-Number-ID}/whatsapp_business_encryption')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('business_public_key')
                        .value(business_public_key))
            .template_param(Parameter()
                            .key('Phone-Number-ID')
                            .value(phone_number_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SetEncryptionPublicKey.from_dictionary)
        ).execute()

    def get_encryption_public_key(self,
                                  phone_number_id):
        """Does a GET request to /{Phone-Number-ID}/whatsapp_business_encryption.

        Args:
            phone_number_id (str): The request template parameter.

        Returns:
            GetEncryptionPublicKey: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Phone-Number-ID}/whatsapp_business_encryption')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Phone-Number-ID')
                            .value(phone_number_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetEncryptionPublicKey.from_dictionary)
        ).execute()
