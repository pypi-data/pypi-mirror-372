# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.configuration import Server
from whatsappcloudapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from whatsappcloudapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from whatsappcloudapi.models.create_flow import CreateFlow
from whatsappcloudapi.models.migrate_flows import MigrateFlows
from whatsappcloudapi.models.get_flow import GetFlow
from whatsappcloudapi.models.get_preview_url import GetPreviewURL
from whatsappcloudapi.models.list_flows import ListFlows


class CreateFlowController(BaseController):

    """A Controller to access Endpoints in the whatsappcloudapi API."""
    def __init__(self, config):
        super(CreateFlowController, self).__init__(config)

    def create_flow(self,
                    name,
                    categories,
                    waba_id):
        """Does a POST request to /{WABA-ID}/flows.

        Creates a new flow. To clone an existing flow you can add the parameter
        `"clone_flow_id": "original-flow-id"`

        Args:
            name (str): The request form parameter.
            categories (List[str]): A list of Flow categories. Multiple values
                are possible, but at least one is required. Choose the values
                which represent your business use case.   Possible values:
                "SIGN_UP", "SIGN_IN", "APPOINTMENT_BOOKING",
                "LEAD_GENERATION", "CONTACT_US", "CUSTOMER_SUPPORT", "SURVEY",
                "OTHER"
            waba_id (str): The request template parameter.

        Returns:
            CreateFlow: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{WABA-ID}/flows')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('categories')
                        .value(categories))
            .template_param(Parameter()
                            .key('WABA-ID')
                            .value(waba_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CreateFlow.from_dictionary)
        ).execute()

    def migrate_flows(self,
                      source_waba_id,
                      source_flow_names,
                      waba_id):
        """Does a POST request to /{WABA-ID}/migrate_flows.

        Creates a copy of existing flows from source WABA to destination WABA
        with the same names.

        Args:
            source_waba_id (str): The ID of the source WABA from which the
                flows will be copied
            source_flow_names (List[str]): [Optional] The names of the flows
                that will be copied from the source WABA. If not specified,
                all flows in the source WABA will be copied
            waba_id (str): The request template parameter.

        Returns:
            MigrateFlows: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{WABA-ID}/migrate_flows')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('source_waba_id')
                        .value(source_waba_id))
            .form_param(Parameter()
                        .key('source_flow_names')
                        .value(source_flow_names))
            .template_param(Parameter()
                            .key('WABA-ID')
                            .value(waba_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(MigrateFlows.from_dictionary)
        ).execute()

    def get_flow(self,
                 fields,
                 flow_id):
        """Does a GET request to /{Flow-ID}.

        Can request specific fields by enabling the \`fields\` query param

        Args:
            fields (str): Return specific fields in the response
            flow_id (str): The request template parameter.

        Returns:
            GetFlow: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Flow-ID}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .template_param(Parameter()
                            .key('Flow-ID')
                            .value(flow_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetFlow.from_dictionary)
        ).execute()

    def get_preview_url(self,
                        fields,
                        flow_id):
        """Does a GET request to /{Flow-ID}.

        Returns link to web page with preview of the flow. The link has an
        expiry time which is returned in the response. The same link will be
        returned as long as it's still valid, a new link will be generated
        when it expires.
        To generate a new link and invalidate the existing link, set
        `fields=preview.invalidate(true)`

        Args:
            fields (str): Set to true to generate a new preview link and
                expire old link
            flow_id (str): The request template parameter.

        Returns:
            GetPreviewURL: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Flow-ID}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('fields')
                         .value(fields))
            .template_param(Parameter()
                            .key('Flow-ID')
                            .value(flow_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetPreviewURL.from_dictionary)
        ).execute()

    def list_flows(self,
                   waba_id):
        """Does a GET request to /{WABA-ID}/flows.

        Args:
            waba_id (str): The request template parameter.

        Returns:
            ListFlows: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{WABA-ID}/flows')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('WABA-ID')
                            .value(waba_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListFlows.from_dictionary)
        ).execute()
