# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.configuration import Server
from whatsappcloudapi.utilities.file_wrapper import FileWrapper
from whatsappcloudapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from whatsappcloudapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from whatsappcloudapi.models.upload_flow_json_asset import UploadFlowJSONAsset
from whatsappcloudapi.models.publish_flow import PublishFlow
from whatsappcloudapi.models.update_flow_metadata import UpdateFlowMetadata
from whatsappcloudapi.models.list_assets import ListAssets
from whatsappcloudapi.models.deprecate_flow import DeprecateFlow
from whatsappcloudapi.models.delete_flow import DeleteFlow


class UpdateFlowController(BaseController):

    """A Controller to access Endpoints in the whatsappcloudapi API."""
    def __init__(self, config):
        super(UpdateFlowController, self).__init__(config)

    def update_flow_json(self,
                         file,
                         name,
                         asset_type,
                         flow_id):
        """Does a POST request to /{Flow-ID}/assets.

        Used to upload a flow JSON file with the flow content. Refer to flow
        JSON documentation here
        [https://developers.facebook.com/docs/whatsapp/flows/reference/flowjson
        ](https://developers.facebook.com/docs/whatsapp/flows/reference/flowjso
        n)
        The file must be attached as from data. The response will include any
        validation errors in the JSON file

        Args:
            file (typing.BinaryIO): The request form parameter.
            name (str): The request form parameter.
            asset_type (str): The request form parameter.
            flow_id (str): The request template parameter.

        Returns:
            UploadFlowJSONAsset: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Flow-ID}/assets')
            .http_method(HttpMethodEnum.POST)
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('asset_type')
                        .value(asset_type))
            .template_param(Parameter()
                            .key('Flow-ID')
                            .value(flow_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadFlowJSONAsset.from_dictionary)
        ).execute()

    def publish_flow(self,
                     flow_id):
        """Does a POST request to /{Flow-ID}/publish.

        Updates the status of the flow as "PUBLISHED". This action is not
        reversible. The flow and its assets become immutable once published.
        To update the flow, you must create a new flow and specify the
        previous flow id as the \`clone_flow_id\` parameter

        Args:
            flow_id (str): The request template parameter.

        Returns:
            PublishFlow: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Flow-ID}/publish')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Flow-ID')
                            .value(flow_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PublishFlow.from_dictionary)
        ).execute()

    def update_flow_metadata(self,
                             name,
                             categories,
                             endpoint_uri,
                             flow_id):
        """Does a POST request to /{Flow-ID}.

        Args:
            name (str): The request form parameter.
            categories (List[str]): A list of Flow categories. Multiple values
                are possible, but at least one is required. Choose the values
                which represent your business use case.   Allowed values:
                "SIGN_UP", "SIGN_IN", "APPOINTMENT_BOOKING",
                "LEAD_GENERATION", "CONTACT_US", "CUSTOMER_SUPPORT", "SURVEY",
                "OTHER"
            endpoint_uri (str): Endpoint URI for the Flow
            flow_id (str): The request template parameter.

        Returns:
            UpdateFlowMetadata: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Flow-ID}')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('name')
                        .value(name))
            .form_param(Parameter()
                        .key('categories')
                        .value(categories))
            .form_param(Parameter()
                        .key('endpoint_uri')
                        .value(endpoint_uri))
            .template_param(Parameter()
                            .key('Flow-ID')
                            .value(flow_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UpdateFlowMetadata.from_dictionary)
        ).execute()

    def list_assets_get_flow_json_url(self,
                                      flow_id):
        """Does a GET request to /{Flow-ID}/assets.

        Returns all assets attached to the flow. Currently only FLOW_JSON
        asset is supported

        Args:
            flow_id (str): The request template parameter.

        Returns:
            ListAssets: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Flow-ID}/assets')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Flow-ID')
                            .value(flow_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListAssets.from_dictionary)
        ).execute()

    def deprecate_flow(self,
                       flow_id):
        """Does a POST request to /{Flow-ID}/deprecate.

        Updates the status of the flow as "DEPRECATED". This action is not
        reversible. Only a published flow can be deprecated to prevent sending
        or opening it.

        Args:
            flow_id (str): The request template parameter.

        Returns:
            DeprecateFlow: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Flow-ID}/deprecate')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Flow-ID')
                            .value(flow_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeprecateFlow.from_dictionary)
        ).execute()

    def delete_flow(self,
                    flow_id):
        """Does a DELETE request to /{Flow-ID}.

        Deletes the flow entirely. This action is not reversible. Only a DRAFT
        flow can be deleted.

        Args:
            flow_id (str): The request template parameter.

        Returns:
            DeleteFlow: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Flow-ID}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Flow-ID')
                            .value(flow_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeleteFlow.from_dictionary)
        ).execute()
