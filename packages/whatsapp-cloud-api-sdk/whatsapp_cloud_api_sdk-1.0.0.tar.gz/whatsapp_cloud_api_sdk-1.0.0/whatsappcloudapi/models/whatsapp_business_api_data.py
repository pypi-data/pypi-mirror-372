# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class WhatsappBusinessApiData(object):

    """Implementation of the 'WhatsappBusinessApiData' model.

    Attributes:
        link (str): The model property of type str.
        name (str): The model property of type str.
        id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "link": 'link',
        "name": 'name',
        "id": 'id'
    }

    def __init__(self,
                 link=None,
                 name=None,
                 id=None):
        """Constructor for the WhatsappBusinessApiData class"""

        # Initialize members of the class
        self.link = link 
        self.name = name 
        self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        link = dictionary.get("link") if dictionary.get("link") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        # Return an object of this model
        return cls(link,
                   name,
                   id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'link={self.link!r}, '
                f'name={self.name!r}, '
                f'id={self.id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'link={self.link!s}, '
                f'name={self.name!s}, '
                f'id={self.id!s})')
