# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.data_point import DataPoint


class Metric(object):

    """Implementation of the 'Metric' model.

    Attributes:
        granularity (str): The model property of type str.
        name (str): The model property of type str.
        data_points (List[DataPoint]): The model property of type
            List[DataPoint].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "granularity": 'granularity',
        "name": 'name',
        "data_points": 'data_points'
    }

    def __init__(self,
                 granularity=None,
                 name=None,
                 data_points=None):
        """Constructor for the Metric class"""

        # Initialize members of the class
        self.granularity = granularity 
        self.name = name 
        self.data_points = data_points 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        granularity = dictionary.get("granularity") if dictionary.get("granularity") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        data_points = None
        if dictionary.get('data_points') is not None:
            data_points = [DataPoint.from_dictionary(x) for x in dictionary.get('data_points')]
        # Return an object of this model
        return cls(granularity,
                   name,
                   data_points)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'granularity={self.granularity!r}, '
                f'name={self.name!r}, '
                f'data_points={self.data_points!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'granularity={self.granularity!s}, '
                f'name={self.name!s}, '
                f'data_points={self.data_points!s})')
