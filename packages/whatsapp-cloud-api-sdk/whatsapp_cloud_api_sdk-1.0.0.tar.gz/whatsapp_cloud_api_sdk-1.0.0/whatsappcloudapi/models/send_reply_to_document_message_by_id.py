# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.contact import Contact
from whatsappcloudapi.models.message import Message


class SendReplyToDocumentMessageByID(object):

    """Implementation of the 'Send Reply to Document Message by ID' model.

    Attributes:
        messaging_product (str): The model property of type str.
        contacts (List[Contact]): The model property of type List[Contact].
        messages (List[Message]): The model property of type List[Message].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "messaging_product": 'messaging_product',
        "contacts": 'contacts',
        "messages": 'messages'
    }

    def __init__(self,
                 messaging_product=None,
                 contacts=None,
                 messages=None):
        """Constructor for the SendReplyToDocumentMessageByID class"""

        # Initialize members of the class
        self.messaging_product = messaging_product 
        self.contacts = contacts 
        self.messages = messages 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        messaging_product = dictionary.get("messaging_product") if dictionary.get("messaging_product") else None
        contacts = None
        if dictionary.get('contacts') is not None:
            contacts = [Contact.from_dictionary(x) for x in dictionary.get('contacts')]
        messages = None
        if dictionary.get('messages') is not None:
            messages = [Message.from_dictionary(x) for x in dictionary.get('messages')]
        # Return an object of this model
        return cls(messaging_product,
                   contacts,
                   messages)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'messaging_product={self.messaging_product!r}, '
                f'contacts={self.contacts!r}, '
                f'messages={self.messages!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'messaging_product={self.messaging_product!s}, '
                f'contacts={self.contacts!s}, '
                f'messages={self.messages!s})')
