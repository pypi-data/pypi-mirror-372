# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Data15(object):

    """Implementation of the 'Data15' model.

    Attributes:
        prefilled_message (str): The model property of type str.
        deep_link_url (str): The model property of type str.
        qr_image_url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "prefilled_message": 'prefilled_message',
        "deep_link_url": 'deep_link_url',
        "qr_image_url": 'qr_image_url'
    }

    def __init__(self,
                 prefilled_message=None,
                 deep_link_url=None,
                 qr_image_url=None):
        """Constructor for the Data15 class"""

        # Initialize members of the class
        self.prefilled_message = prefilled_message 
        self.deep_link_url = deep_link_url 
        self.qr_image_url = qr_image_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        prefilled_message = dictionary.get("prefilled_message") if dictionary.get("prefilled_message") else None
        deep_link_url = dictionary.get("deep_link_url") if dictionary.get("deep_link_url") else None
        qr_image_url = dictionary.get("qr_image_url") if dictionary.get("qr_image_url") else None
        # Return an object of this model
        return cls(prefilled_message,
                   deep_link_url,
                   qr_image_url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'prefilled_message={self.prefilled_message!r}, '
                f'deep_link_url={self.deep_link_url!r}, '
                f'qr_image_url={self.qr_image_url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'prefilled_message={self.prefilled_message!s}, '
                f'deep_link_url={self.deep_link_url!s}, '
                f'qr_image_url={self.qr_image_url!s})')
