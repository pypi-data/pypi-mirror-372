# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.api_helper import APIHelper


class Button9(object):

    """Implementation of the 'Button9' model.

    Attributes:
        mtype (str): The model property of type str.
        text (str): The model property of type str.
        phone_number (str): The model property of type str.
        url (str): The model property of type str.
        example (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "text": 'text',
        "phone_number": 'phone_number',
        "url": 'url',
        "example": 'example'
    }

    _optionals = [
        'phone_number',
        'url',
        'example',
    ]

    def __init__(self,
                 mtype=None,
                 text=None,
                 phone_number=APIHelper.SKIP,
                 url=APIHelper.SKIP,
                 example=APIHelper.SKIP):
        """Constructor for the Button9 class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.text = text 
        if phone_number is not APIHelper.SKIP:
            self.phone_number = phone_number 
        if url is not APIHelper.SKIP:
            self.url = url 
        if example is not APIHelper.SKIP:
            self.example = example 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        text = dictionary.get("text") if dictionary.get("text") else None
        phone_number = dictionary.get("phone_number") if dictionary.get("phone_number") else APIHelper.SKIP
        url = dictionary.get("url") if dictionary.get("url") else APIHelper.SKIP
        example = dictionary.get("example") if dictionary.get("example") else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   text,
                   phone_number,
                   url,
                   example)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'text={self.text!r}, '
                f'phone_number={(self.phone_number if hasattr(self, "phone_number") else None)!r}, '
                f'url={(self.url if hasattr(self, "url") else None)!r}, '
                f'example={(self.example if hasattr(self, "example") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'text={self.text!s}, '
                f'phone_number={(self.phone_number if hasattr(self, "phone_number") else None)!s}, '
                f'url={(self.url if hasattr(self, "url") else None)!s}, '
                f'example={(self.example if hasattr(self, "example") else None)!s})')
