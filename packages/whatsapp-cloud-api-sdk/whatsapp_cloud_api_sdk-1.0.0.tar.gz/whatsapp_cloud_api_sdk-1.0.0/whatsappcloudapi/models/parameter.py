# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.models.currency import Currency
from whatsappcloudapi.models.date_time import DateTime


class Parameter(object):

    """Implementation of the 'Parameter' model.

    Attributes:
        mtype (str): The model property of type str.
        text (str): The model property of type str.
        currency (Currency): The model property of type Currency.
        date_time (DateTime): The model property of type DateTime.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "text": 'text',
        "currency": 'currency',
        "date_time": 'date_time'
    }

    _optionals = [
        'text',
        'currency',
        'date_time',
    ]

    def __init__(self,
                 mtype=None,
                 text=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 date_time=APIHelper.SKIP):
        """Constructor for the Parameter class"""

        # Initialize members of the class
        self.mtype = mtype 
        if text is not APIHelper.SKIP:
            self.text = text 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if date_time is not APIHelper.SKIP:
            self.date_time = APIHelper.apply_datetime_converter(date_time, APIHelper.RFC3339DateTime) if date_time else None 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        currency = Currency.from_dictionary(dictionary.get('currency')) if 'currency' in dictionary.keys() else APIHelper.SKIP
        date_time = DateTime.from_dictionary(dictionary.get('date_time')) if 'date_time' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   text,
                   currency,
                   date_time)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'text={(self.text if hasattr(self, "text") else None)!r}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!r}, '
                f'date_time={(self.date_time if hasattr(self, "date_time") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'text={(self.text if hasattr(self, "text") else None)!s}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!s}, '
                f'date_time={(self.date_time if hasattr(self, "date_time") else None)!s})')
