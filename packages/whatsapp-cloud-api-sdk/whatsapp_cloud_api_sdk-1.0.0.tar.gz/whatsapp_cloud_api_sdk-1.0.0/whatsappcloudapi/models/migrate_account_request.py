# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.backup import Backup


class MigrateAccountRequest(object):

    """Implementation of the 'Migrate Account Request' model.

    Attributes:
        messaging_product (str): The model property of type str.
        pin (str): The model property of type str.
        backup (Backup): The model property of type Backup.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "messaging_product": 'messaging_product',
        "pin": 'pin',
        "backup": 'backup'
    }

    def __init__(self,
                 messaging_product=None,
                 pin=None,
                 backup=None):
        """Constructor for the MigrateAccountRequest class"""

        # Initialize members of the class
        self.messaging_product = messaging_product 
        self.pin = pin 
        self.backup = backup 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        messaging_product = dictionary.get("messaging_product") if dictionary.get("messaging_product") else None
        pin = dictionary.get("pin") if dictionary.get("pin") else None
        backup = Backup.from_dictionary(dictionary.get('backup')) if dictionary.get('backup') else None
        # Return an object of this model
        return cls(messaging_product,
                   pin,
                   backup)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'messaging_product={self.messaging_product!r}, '
                f'pin={self.pin!r}, '
                f'backup={self.backup!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'messaging_product={self.messaging_product!s}, '
                f'pin={self.pin!s}, '
                f'backup={self.backup!s})')
