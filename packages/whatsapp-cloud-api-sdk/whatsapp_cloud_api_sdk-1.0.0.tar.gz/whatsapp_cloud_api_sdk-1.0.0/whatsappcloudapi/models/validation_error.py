# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.api_helper import APIHelper


class ValidationError(object):

    """Implementation of the 'ValidationError' model.

    Attributes:
        error (str): The model property of type str.
        error_type (str): The model property of type str.
        message (str): The model property of type str.
        line_start (int): The model property of type int.
        line_end (int): The model property of type int.
        column_start (int): The model property of type int.
        column_end (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "error": 'error',
        "error_type": 'error_type',
        "message": 'message',
        "line_start": 'line_start',
        "line_end": 'line_end',
        "column_start": 'column_start',
        "column_end": 'column_end'
    }

    _optionals = [
        'error',
        'error_type',
        'message',
        'line_start',
        'line_end',
        'column_start',
        'column_end',
    ]

    def __init__(self,
                 error=APIHelper.SKIP,
                 error_type=APIHelper.SKIP,
                 message=APIHelper.SKIP,
                 line_start=APIHelper.SKIP,
                 line_end=APIHelper.SKIP,
                 column_start=APIHelper.SKIP,
                 column_end=APIHelper.SKIP):
        """Constructor for the ValidationError class"""

        # Initialize members of the class
        if error is not APIHelper.SKIP:
            self.error = error 
        if error_type is not APIHelper.SKIP:
            self.error_type = error_type 
        if message is not APIHelper.SKIP:
            self.message = message 
        if line_start is not APIHelper.SKIP:
            self.line_start = line_start 
        if line_end is not APIHelper.SKIP:
            self.line_end = line_end 
        if column_start is not APIHelper.SKIP:
            self.column_start = column_start 
        if column_end is not APIHelper.SKIP:
            self.column_end = column_end 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        error = dictionary.get("error") if dictionary.get("error") else APIHelper.SKIP
        error_type = dictionary.get("error_type") if dictionary.get("error_type") else APIHelper.SKIP
        message = dictionary.get("message") if dictionary.get("message") else APIHelper.SKIP
        line_start = dictionary.get("line_start") if dictionary.get("line_start") else APIHelper.SKIP
        line_end = dictionary.get("line_end") if dictionary.get("line_end") else APIHelper.SKIP
        column_start = dictionary.get("column_start") if dictionary.get("column_start") else APIHelper.SKIP
        column_end = dictionary.get("column_end") if dictionary.get("column_end") else APIHelper.SKIP
        # Return an object of this model
        return cls(error,
                   error_type,
                   message,
                   line_start,
                   line_end,
                   column_start,
                   column_end)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return True

        if not isinstance(dictionary, dict):
            return False

        return True

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'error={(self.error if hasattr(self, "error") else None)!r}, '
                f'error_type={(self.error_type if hasattr(self, "error_type") else None)!r}, '
                f'message={(self.message if hasattr(self, "message") else None)!r}, '
                f'line_start={(self.line_start if hasattr(self, "line_start") else None)!r}, '
                f'line_end={(self.line_end if hasattr(self, "line_end") else None)!r}, '
                f'column_start={(self.column_start if hasattr(self, "column_start") else None)!r}, '
                f'column_end={(self.column_end if hasattr(self, "column_end") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'error={(self.error if hasattr(self, "error") else None)!s}, '
                f'error_type={(self.error_type if hasattr(self, "error_type") else None)!s}, '
                f'message={(self.message if hasattr(self, "message") else None)!s}, '
                f'line_start={(self.line_start if hasattr(self, "line_start") else None)!s}, '
                f'line_end={(self.line_end if hasattr(self, "line_end") else None)!s}, '
                f'column_start={(self.column_start if hasattr(self, "column_start") else None)!s}, '
                f'column_end={(self.column_end if hasattr(self, "column_end") else None)!s})')
