# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Button13(object):

    """Implementation of the 'Button13' model.

    Attributes:
        mtype (str): The model property of type str.
        text (str): The model property of type str.
        flow_name (str): The model property of type str.
        navigate_screen (str): The model property of type str.
        flow_action (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "text": 'text',
        "flow_name": 'flow_name',
        "navigate_screen": 'navigate_screen',
        "flow_action": 'flow_action'
    }

    def __init__(self,
                 mtype=None,
                 text=None,
                 flow_name=None,
                 navigate_screen=None,
                 flow_action=None):
        """Constructor for the Button13 class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.text = text 
        self.flow_name = flow_name 
        self.navigate_screen = navigate_screen 
        self.flow_action = flow_action 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        text = dictionary.get("text") if dictionary.get("text") else None
        flow_name = dictionary.get("flow_name") if dictionary.get("flow_name") else None
        navigate_screen = dictionary.get("navigate_screen") if dictionary.get("navigate_screen") else None
        flow_action = dictionary.get("flow_action") if dictionary.get("flow_action") else None
        # Return an object of this model
        return cls(mtype,
                   text,
                   flow_name,
                   navigate_screen,
                   flow_action)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'text={self.text!r}, '
                f'flow_name={self.flow_name!r}, '
                f'navigate_screen={self.navigate_screen!r}, '
                f'flow_action={self.flow_action!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'text={self.text!s}, '
                f'flow_name={self.flow_name!s}, '
                f'navigate_screen={self.navigate_screen!s}, '
                f'flow_action={self.flow_action!s})')
