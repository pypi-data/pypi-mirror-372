# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.models.parameters_1 import Parameters1


class Component3(object):

    """Implementation of the 'Component3' model.

    Attributes:
        mtype (str): The model property of type str.
        parameters (List[Parameters1]): The model property of type
            List[Parameters1].
        sub_type (str): The model property of type str.
        index (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "parameters": 'parameters',
        "sub_type": 'sub_type',
        "index": 'index'
    }

    _optionals = [
        'sub_type',
        'index',
    ]

    def __init__(self,
                 mtype=None,
                 parameters=None,
                 sub_type=APIHelper.SKIP,
                 index=APIHelper.SKIP):
        """Constructor for the Component3 class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.parameters = parameters 
        if sub_type is not APIHelper.SKIP:
            self.sub_type = sub_type 
        if index is not APIHelper.SKIP:
            self.index = index 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        parameters = None
        if dictionary.get('parameters') is not None:
            parameters = [Parameters1.from_dictionary(x) for x in dictionary.get('parameters')]
        sub_type = dictionary.get("sub_type") if dictionary.get("sub_type") else APIHelper.SKIP
        index = dictionary.get("index") if dictionary.get("index") else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   parameters,
                   sub_type,
                   index)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'parameters={self.parameters!r}, '
                f'sub_type={(self.sub_type if hasattr(self, "sub_type") else None)!r}, '
                f'index={(self.index if hasattr(self, "index") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'parameters={self.parameters!s}, '
                f'sub_type={(self.sub_type if hasattr(self, "sub_type") else None)!s}, '
                f'index={(self.index if hasattr(self, "index") else None)!s})')
