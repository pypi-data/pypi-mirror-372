# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.api_helper import APIHelper


class Datum8(object):

    """Implementation of the 'Datum8' model.

    Attributes:
        name (str): The model property of type str.
        status (str): The model property of type str.
        categories (List[str]): The model property of type List[str].
        validation_errors (List[ValidationError | ValidationError1]): The
            model property of type List[ValidationError | ValidationError1].
        id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "status": 'status',
        "categories": 'categories',
        "validation_errors": 'validation_errors',
        "id": 'id'
    }

    def __init__(self,
                 name=None,
                 status=None,
                 categories=None,
                 validation_errors=None,
                 id=None):
        """Constructor for the Datum8 class"""

        # Initialize members of the class
        self.name = name 
        self.status = status 
        self.categories = categories 
        self.validation_errors = validation_errors 
        self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from whatsappcloudapi.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        categories = dictionary.get("categories") if dictionary.get("categories") else None
        validation_errors = APIHelper.deserialize_union_type(UnionTypeLookUp.get('Datum8ValidationErrors'), dictionary.get('validation_errors'), False) if dictionary.get('validation_errors') is not None else None
        id = dictionary.get("id") if dictionary.get("id") else None
        # Return an object of this model
        return cls(name,
                   status,
                   categories,
                   validation_errors,
                   id)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from whatsappcloudapi.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.name,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.status,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.categories,
                                            type_callable=lambda value: isinstance(value, str)) \
                and UnionTypeLookUp.get('Datum8ValidationErrors').validate(dictionary.validation_errors).is_valid \
                and APIHelper.is_valid_type(value=dictionary.id,
                                            type_callable=lambda value: isinstance(value, str))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('name'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('status'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('categories'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and UnionTypeLookUp.get('Datum8ValidationErrors').validate(dictionary.get('validation_errors')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('id'),
                                        type_callable=lambda value: isinstance(value, str))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'status={self.status!r}, '
                f'categories={self.categories!r}, '
                f'validation_errors={self.validation_errors!r}, '
                f'id={self.id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'status={self.status!s}, '
                f'categories={self.categories!s}, '
                f'validation_errors={self.validation_errors!s}, '
                f'id={self.id!s})')
