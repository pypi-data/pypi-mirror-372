# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class DateTime(object):

    """Implementation of the 'DateTime' model.

    Attributes:
        fallback_value (str): The model property of type str.
        day_of_week (int): The model property of type int.
        year (int): The model property of type int.
        month (int): The model property of type int.
        day_of_month (int): The model property of type int.
        hour (int): The model property of type int.
        minute (int): The model property of type int.
        calendar (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "fallback_value": 'fallback_value',
        "day_of_week": 'day_of_week',
        "year": 'year',
        "month": 'month',
        "day_of_month": 'day_of_month',
        "hour": 'hour',
        "minute": 'minute',
        "calendar": 'calendar'
    }

    def __init__(self,
                 fallback_value=None,
                 day_of_week=None,
                 year=None,
                 month=None,
                 day_of_month=None,
                 hour=None,
                 minute=None,
                 calendar=None):
        """Constructor for the DateTime class"""

        # Initialize members of the class
        self.fallback_value = fallback_value 
        self.day_of_week = day_of_week 
        self.year = year 
        self.month = month 
        self.day_of_month = day_of_month 
        self.hour = hour 
        self.minute = minute 
        self.calendar = calendar 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        fallback_value = dictionary.get("fallback_value") if dictionary.get("fallback_value") else None
        day_of_week = dictionary.get("day_of_week") if dictionary.get("day_of_week") else None
        year = dictionary.get("year") if dictionary.get("year") else None
        month = dictionary.get("month") if dictionary.get("month") else None
        day_of_month = dictionary.get("day_of_month") if dictionary.get("day_of_month") else None
        hour = dictionary.get("hour") if dictionary.get("hour") else None
        minute = dictionary.get("minute") if dictionary.get("minute") else None
        calendar = dictionary.get("calendar") if dictionary.get("calendar") else None
        # Return an object of this model
        return cls(fallback_value,
                   day_of_week,
                   year,
                   month,
                   day_of_month,
                   hour,
                   minute,
                   calendar)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'fallback_value={self.fallback_value!r}, '
                f'day_of_week={self.day_of_week!r}, '
                f'year={self.year!r}, '
                f'month={self.month!r}, '
                f'day_of_month={self.day_of_month!r}, '
                f'hour={self.hour!r}, '
                f'minute={self.minute!r}, '
                f'calendar={self.calendar!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'fallback_value={self.fallback_value!s}, '
                f'day_of_week={self.day_of_week!s}, '
                f'year={self.year!s}, '
                f'month={self.month!s}, '
                f'day_of_month={self.day_of_month!s}, '
                f'hour={self.hour!s}, '
                f'minute={self.minute!s}, '
                f'calendar={self.calendar!s})')
