# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.data_point_5 import DataPoint5


class Analytics(object):

    """Implementation of the 'Analytics' model.

    Attributes:
        phone_numbers (List[str]): The model property of type List[str].
        country_codes (List[str]): The model property of type List[str].
        granularity (str): The model property of type str.
        data_points (List[DataPoint5]): The model property of type
            List[DataPoint5].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "phone_numbers": 'phone_numbers',
        "country_codes": 'country_codes',
        "granularity": 'granularity',
        "data_points": 'data_points'
    }

    def __init__(self,
                 phone_numbers=None,
                 country_codes=None,
                 granularity=None,
                 data_points=None):
        """Constructor for the Analytics class"""

        # Initialize members of the class
        self.phone_numbers = phone_numbers 
        self.country_codes = country_codes 
        self.granularity = granularity 
        self.data_points = data_points 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        phone_numbers = dictionary.get("phone_numbers") if dictionary.get("phone_numbers") else None
        country_codes = dictionary.get("country_codes") if dictionary.get("country_codes") else None
        granularity = dictionary.get("granularity") if dictionary.get("granularity") else None
        data_points = None
        if dictionary.get('data_points') is not None:
            data_points = [DataPoint5.from_dictionary(x) for x in dictionary.get('data_points')]
        # Return an object of this model
        return cls(phone_numbers,
                   country_codes,
                   granularity,
                   data_points)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'phone_numbers={self.phone_numbers!r}, '
                f'country_codes={self.country_codes!r}, '
                f'granularity={self.granularity!r}, '
                f'data_points={self.data_points!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'phone_numbers={self.phone_numbers!s}, '
                f'country_codes={self.country_codes!s}, '
                f'granularity={self.granularity!s}, '
                f'data_points={self.data_points!s})')
