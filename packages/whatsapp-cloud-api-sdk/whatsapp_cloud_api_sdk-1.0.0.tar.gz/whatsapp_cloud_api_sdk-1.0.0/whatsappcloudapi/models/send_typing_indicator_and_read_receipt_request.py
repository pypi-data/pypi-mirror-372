# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.typing_indicator import TypingIndicator


class SendTypingIndicatorAndReadReceiptRequest(object):

    """Implementation of the 'Send typing indicator and read receipt Request' model.

    Attributes:
        messaging_product (str): The model property of type str.
        status (str): The model property of type str.
        message_id (str): The model property of type str.
        typing_indicator (TypingIndicator): The model property of type
            TypingIndicator.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "messaging_product": 'messaging_product',
        "status": 'status',
        "message_id": 'message_id',
        "typing_indicator": 'typing_indicator'
    }

    def __init__(self,
                 messaging_product=None,
                 status=None,
                 message_id=None,
                 typing_indicator=None):
        """Constructor for the SendTypingIndicatorAndReadReceiptRequest class"""

        # Initialize members of the class
        self.messaging_product = messaging_product 
        self.status = status 
        self.message_id = message_id 
        self.typing_indicator = typing_indicator 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        messaging_product = dictionary.get("messaging_product") if dictionary.get("messaging_product") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        message_id = dictionary.get("message_id") if dictionary.get("message_id") else None
        typing_indicator = TypingIndicator.from_dictionary(dictionary.get('typing_indicator')) if dictionary.get('typing_indicator') else None
        # Return an object of this model
        return cls(messaging_product,
                   status,
                   message_id,
                   typing_indicator)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'messaging_product={self.messaging_product!r}, '
                f'status={self.status!r}, '
                f'message_id={self.message_id!r}, '
                f'typing_indicator={self.typing_indicator!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'messaging_product={self.messaging_product!s}, '
                f'status={self.status!s}, '
                f'message_id={self.message_id!s}, '
                f'typing_indicator={self.typing_indicator!s})')
