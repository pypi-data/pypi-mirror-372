# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.amount import Amount
from whatsappcloudapi.models.sale_amount import SaleAmount


class Item(object):

    """Implementation of the 'Item' model.

    Attributes:
        retailer_id (str): The model property of type str.
        name (str): The model property of type str.
        amount (Amount): The model property of type Amount.
        sale_amount (SaleAmount): The model property of type SaleAmount.
        quantity (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "retailer_id": 'retailer_id',
        "name": 'name',
        "amount": 'amount',
        "sale_amount": 'sale_amount',
        "quantity": 'quantity'
    }

    def __init__(self,
                 retailer_id=None,
                 name=None,
                 amount=None,
                 sale_amount=None,
                 quantity=None):
        """Constructor for the Item class"""

        # Initialize members of the class
        self.retailer_id = retailer_id 
        self.name = name 
        self.amount = amount 
        self.sale_amount = sale_amount 
        self.quantity = quantity 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        retailer_id = dictionary.get("retailer_id") if dictionary.get("retailer_id") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        amount = Amount.from_dictionary(dictionary.get('amount')) if dictionary.get('amount') else None
        sale_amount = SaleAmount.from_dictionary(dictionary.get('sale_amount')) if dictionary.get('sale_amount') else None
        quantity = dictionary.get("quantity") if dictionary.get("quantity") else None
        # Return an object of this model
        return cls(retailer_id,
                   name,
                   amount,
                   sale_amount,
                   quantity)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'retailer_id={self.retailer_id!r}, '
                f'name={self.name!r}, '
                f'amount={self.amount!r}, '
                f'sale_amount={self.sale_amount!r}, '
                f'quantity={self.quantity!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'retailer_id={self.retailer_id!s}, '
                f'name={self.name!s}, '
                f'amount={self.amount!s}, '
                f'sale_amount={self.sale_amount!s}, '
                f'quantity={self.quantity!s})')
