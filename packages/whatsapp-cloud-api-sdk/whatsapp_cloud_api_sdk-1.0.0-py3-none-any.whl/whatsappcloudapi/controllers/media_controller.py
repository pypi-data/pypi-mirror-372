# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.configuration import Server
from whatsappcloudapi.utilities.file_wrapper import FileWrapper
from whatsappcloudapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from whatsappcloudapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from whatsappcloudapi.models.upload_image_form_data import UploadImageFormData
from whatsappcloudapi.models.upload_sticker_file_form_data import UploadStickerFileFormData
from whatsappcloudapi.models.upload_audio_form_data import UploadAudioFormData
from whatsappcloudapi.models.retrieve_media_url import RetrieveMediaURL
from whatsappcloudapi.models.delete_media import DeleteMedia


class MediaController(BaseController):

    """A Controller to access Endpoints in the whatsappcloudapi API."""
    def __init__(self, config):
        super(MediaController, self).__init__(config)

    def upload_image(self,
                     messaging_product,
                     file,
                     phone_number_id):
        """Does a POST request to /{Phone-Number-ID}/media.

        This request uploads an image as .jpeg. The parameters are specified
        as **form-data** in the request **body**.

        Args:
            messaging_product (str): The request form parameter.
            file (typing.BinaryIO): The request form parameter.
            phone_number_id (str): The request template parameter.

        Returns:
            UploadImageFormData: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Phone-Number-ID}/media')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('messaging_product')
                        .value(messaging_product))
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .template_param(Parameter()
                            .key('Phone-Number-ID')
                            .value(phone_number_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadImageFormData.from_dictionary)
        ).execute()

    def upload_sticker(self,
                       messaging_product,
                       file,
                       phone_number_id):
        """Does a POST request to /{Phone-Number-ID}/media.

        This request uploads a sticker as .webp. The parameters are specified
        as **form-data** in the request **body**.

        Args:
            messaging_product (str): The request form parameter.
            file (typing.BinaryIO): The request form parameter.
            phone_number_id (str): The request template parameter.

        Returns:
            UploadStickerFileFormData: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Phone-Number-ID}/media')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('messaging_product')
                        .value(messaging_product))
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .template_param(Parameter()
                            .key('Phone-Number-ID')
                            .value(phone_number_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadStickerFileFormData.from_dictionary)
        ).execute()

    def upload_audio(self,
                     body,
                     phone_number_id):
        """Does a POST request to /{Phone-Number-ID}/media.

        This request uploads an audio as .ogg. The parameters are specified as
        **form-data** in the request **body**.

        Args:
            body (UploadAudioRequest): The request body parameter.
            phone_number_id (str): The request template parameter.

        Returns:
            UploadAudioFormData: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Phone-Number-ID}/media')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('Phone-Number-ID')
                            .value(phone_number_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadAudioFormData.from_dictionary)
        ).execute()

    def retrieve_media_url(self,
                           phone_number_id,
                           media_id):
        """Does a GET request to /{Media-ID}.

        To retrieve your mediaâ€™s URL, make a **GET** call to
        **`/{{Media-ID}}`**. Use the returned URL to download the media file.
        Note that clicking this URL (i.e. performing a generic GET) will not
        return the media; you must include an access token. For more
        information, see [Download
        Media](https://developers.facebook.com/docs/whatsapp/cloud-api/referenc
        e/media#download-media).
        You can also use the optional query **`?phone_number_id`** for
        **`Retrieve Media URL`** and **`Delete Media`**. This parameter checks
        to make sure the media belongs to the phone number before retrieval or
        deletion.
        #### Response
        A successful response includes an object with a media URL. The URL is
        only valid for 5 minutes. To use this URL, see [Download
        Media](https://developers.facebook.com/docs/whatsapp/cloud-api/referenc
        e/media#download-media).

        Args:
            phone_number_id (str): Specifies that this action only be
                performed if the media belongs to the provided phone number.
            media_id (str): The request template parameter.

        Returns:
            RetrieveMediaURL: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Media-ID}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('phone_number_id')
                         .value(phone_number_id))
            .template_param(Parameter()
                            .key('Media-ID')
                            .value(media_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveMediaURL.from_dictionary)
        ).execute()

    def delete_media(self,
                     phone_number_id,
                     media_id):
        """Does a DELETE request to /{Media-ID}.

        To delete media, make a **DELETE** call to the ID of the media you
        want to delete.
        ## Prerequisites
        - [User Access
        Token](https://developers.facebook.com/docs/facebook-login/access-token
        s#usertokens) with **`whatsapp_business_messaging`** permission
        - Media object ID from either uploading media endpoint or media
        message Webhooks
        ## Request
        [Perform requests in Graph API
        Explorer](https://developers.facebook.com/tools/explorer/?method=DELETE
        &path=media_id&version=v8.0)

        Args:
            phone_number_id (str): Specifies that deletion of the media  only
                be performed if the media belongs to the provided phone number.
            media_id (str): The request template parameter.

        Returns:
            DeleteMedia: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Media-ID}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('phone_number_id')
                         .value(phone_number_id))
            .template_param(Parameter()
                            .key('Media-ID')
                            .value(media_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeleteMedia.from_dictionary)
        ).execute()

    def download_media(self,
                       media_url):
        """Does a GET request to /{Media-URL}.

        When you retrieve a media URL through the **GET** Media endpoint, you
        must use a User Access Token to download media content from the URL.
        If you click the URL from a browser, you will get an access error.
        <br/>
        > **Note**: all media URLs will expire after 5 minutes, you need to
        retrieve the media URL again if it expires.
        ## Prerequisites
        - [User Access
        Token](https://developers.facebook.com/docs/facebook-login/access-token
        s#usertokens) with **`whatsapp_business_messaging`** permission
        - A media URL obtained from retrieving media url endpoint 
        ## Response:
        If successful,  you receive the binary data of media saved in
        **`media_file`**, response headers contain a `content-type` header to
        indicate the mime type of returned data. For more information, see
        [Supported Media
        Types](https://developers.facebook.com/docs/whatsapp/cloud-api/referenc
        e/media#supported-media-types).
        If media fails to download, you receive a **404 Not Found** response
        code. In that case, we recommend that you try to [Retrieve Media
        URL](https://developers.facebook.com/docs/whatsapp/cloud-api/reference/
        media#retrieve-media-url) and download again. If doing so doesn't
        resolve the issue, please try to renew the **`USER_ACCESS_TOKEN`**
        then retry downloading the media.

        Args:
            media_url (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{Media-URL}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Media-URL')
                            .value(media_url)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
