# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.configuration import Server
from whatsappcloudapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from whatsappcloudapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from whatsappcloudapi.models.subscribe_to_awaba import SubscribeToAWABA
from whatsappcloudapi.models.get_all_subscriptions_for_awaba import GetAllSubscriptionsForAWABA
from whatsappcloudapi.models.unsubscribe_from_awaba import UnsubscribeFromAWABA
from whatsappcloudapi.models.override_callback_url import OverrideCallbackURL


class WebhookSubscriptionsController(BaseController):

    """A Controller to access Endpoints in the whatsappcloudapi API."""
    def __init__(self, config):
        super(WebhookSubscriptionsController, self).__init__(config)

    def subscribe_to_a_waba(self,
                            waba_id):
        """Does a POST request to /{WABA-ID}/subscribed_apps.

        Subscribe an app to a WhatsApp Business Account. For more information
        about subscribing to a WhatsApp Business Account, see [Subscribe to a
        WhatsApp Business
        Account](https://developers.facebook.com/docs/whatsapp/embedded-signup/
        webhooks#subscribe-to-a-whatsapp-business-account).

        Args:
            waba_id (str): The request template parameter.

        Returns:
            SubscribeToAWABA: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{WABA-ID}/subscribed_apps')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('WABA-ID')
                            .value(waba_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscribeToAWABA.from_dictionary)
        ).execute()

    def get_all_subscriptions_for_a_waba(self,
                                         waba_id):
        """Does a GET request to /{WABA-ID}/subscribed_apps.

        To get a list of apps subscribed to Webhooks for a WABA, send a
        **GET** request to the **`subscribed_apps`** endpoint on the WABA:

        Args:
            waba_id (str): The request template parameter.

        Returns:
            GetAllSubscriptionsForAWABA: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{WABA-ID}/subscribed_apps')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('WABA-ID')
                            .value(waba_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetAllSubscriptionsForAWABA.from_dictionary)
        ).execute()

    def unsubscribe_from_a_waba(self,
                                waba_id):
        """Does a DELETE request to /{WABA-ID}/subscribed_apps.

        To unsubscribe your app from webhooks for a WhatsApp Business Account,
        send a **DELETE** request to the `/subscribed_apps/` endpoint on the
        WABA.

        Args:
            waba_id (str): The request template parameter.

        Returns:
            UnsubscribeFromAWABA: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{WABA-ID}/subscribed_apps')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('WABA-ID')
                            .value(waba_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UnsubscribeFromAWABA.from_dictionary)
        ).execute()

    def override_callback_url(self,
                              body,
                              waba_id):
        """Does a POST request to /{WABA-ID}/subscribed_apps.

        If you want to subscribe to Webhooks for multiple WhatsApp Business
        Accounts but want messages field Webhooks notifications to be sent to
        different callback URLs for each WABA, you can override the callback
        URL when subscribing to Webhooks for each WABA.
        To do this, first verify that the alternate Webhook endpoint can
        receive and process Webhooks notifications. Then, subscribe to
        Webhooks for the WABA as your normally would, but include the
        alternate endpoint's callback URL along with its verification token as
        a JSON payload:
        For more information, see [Overriding the Callback
        URL](https://developers.facebook.com/docs/whatsapp/embedded-signup/webh
        ooks#overriding-the-callback-url).

        Args:
            body (OverrideCallbackURLRequest): The request body parameter.
            waba_id (str): The request template parameter.

        Returns:
            OverrideCallbackURL: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{WABA-ID}/subscribed_apps')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('WABA-ID')
                            .value(waba_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OverrideCallbackURL.from_dictionary)
        ).execute()
