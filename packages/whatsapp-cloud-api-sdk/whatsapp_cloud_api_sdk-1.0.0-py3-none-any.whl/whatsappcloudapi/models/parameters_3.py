# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.flow_action_payload import FlowActionPayload


class Parameters3(object):

    """Implementation of the 'Parameters3' model.

    Attributes:
        flow_message_version (str): The model property of type str.
        flow_action (str): The model property of type str.
        flow_token (str): The model property of type str.
        flow_id (str): The model property of type str.
        flow_cta (str): The model property of type str.
        mode (str): The model property of type str.
        flow_action_payload (FlowActionPayload): The model property of type
            FlowActionPayload.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "flow_message_version": 'flow_message_version',
        "flow_action": 'flow_action',
        "flow_token": 'flow_token',
        "flow_id": 'flow_id',
        "flow_cta": 'flow_cta',
        "mode": 'mode',
        "flow_action_payload": 'flow_action_payload'
    }

    def __init__(self,
                 flow_message_version=None,
                 flow_action=None,
                 flow_token=None,
                 flow_id=None,
                 flow_cta=None,
                 mode=None,
                 flow_action_payload=None):
        """Constructor for the Parameters3 class"""

        # Initialize members of the class
        self.flow_message_version = flow_message_version 
        self.flow_action = flow_action 
        self.flow_token = flow_token 
        self.flow_id = flow_id 
        self.flow_cta = flow_cta 
        self.mode = mode 
        self.flow_action_payload = flow_action_payload 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        flow_message_version = dictionary.get("flow_message_version") if dictionary.get("flow_message_version") else None
        flow_action = dictionary.get("flow_action") if dictionary.get("flow_action") else None
        flow_token = dictionary.get("flow_token") if dictionary.get("flow_token") else None
        flow_id = dictionary.get("flow_id") if dictionary.get("flow_id") else None
        flow_cta = dictionary.get("flow_cta") if dictionary.get("flow_cta") else None
        mode = dictionary.get("mode") if dictionary.get("mode") else None
        flow_action_payload = FlowActionPayload.from_dictionary(dictionary.get('flow_action_payload')) if dictionary.get('flow_action_payload') else None
        # Return an object of this model
        return cls(flow_message_version,
                   flow_action,
                   flow_token,
                   flow_id,
                   flow_cta,
                   mode,
                   flow_action_payload)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'flow_message_version={self.flow_message_version!r}, '
                f'flow_action={self.flow_action!r}, '
                f'flow_token={self.flow_token!r}, '
                f'flow_id={self.flow_id!r}, '
                f'flow_cta={self.flow_cta!r}, '
                f'mode={self.mode!r}, '
                f'flow_action_payload={self.flow_action_payload!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'flow_message_version={self.flow_message_version!s}, '
                f'flow_action={self.flow_action!s}, '
                f'flow_token={self.flow_token!s}, '
                f'flow_id={self.flow_id!s}, '
                f'flow_cta={self.flow_cta!s}, '
                f'mode={self.mode!s}, '
                f'flow_action_payload={self.flow_action_payload!s})')
