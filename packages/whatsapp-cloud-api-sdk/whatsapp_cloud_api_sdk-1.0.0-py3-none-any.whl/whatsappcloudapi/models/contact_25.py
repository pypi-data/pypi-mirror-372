# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.address import Address
from whatsappcloudapi.models.email import Email
from whatsappcloudapi.models.name import Name
from whatsappcloudapi.models.org import Org
from whatsappcloudapi.models.phone import Phone
from whatsappcloudapi.models.url import Url


class Contact25(object):

    """Implementation of the 'Contact25' model.

    Attributes:
        addresses (List[Address]): The model property of type List[Address].
        birthday (str): The model property of type str.
        emails (List[Email]): The model property of type List[Email].
        name (Name): The model property of type Name.
        org (Org): The model property of type Org.
        phones (List[Phone]): The model property of type List[Phone].
        urls (List[Url]): The model property of type List[Url].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "addresses": 'addresses',
        "birthday": 'birthday',
        "emails": 'emails',
        "name": 'name',
        "org": 'org',
        "phones": 'phones',
        "urls": 'urls'
    }

    def __init__(self,
                 addresses=None,
                 birthday=None,
                 emails=None,
                 name=None,
                 org=None,
                 phones=None,
                 urls=None):
        """Constructor for the Contact25 class"""

        # Initialize members of the class
        self.addresses = addresses 
        self.birthday = birthday 
        self.emails = emails 
        self.name = name 
        self.org = org 
        self.phones = phones 
        self.urls = urls 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        addresses = None
        if dictionary.get('addresses') is not None:
            addresses = [Address.from_dictionary(x) for x in dictionary.get('addresses')]
        birthday = dictionary.get("birthday") if dictionary.get("birthday") else None
        emails = None
        if dictionary.get('emails') is not None:
            emails = [Email.from_dictionary(x) for x in dictionary.get('emails')]
        name = Name.from_dictionary(dictionary.get('name')) if dictionary.get('name') else None
        org = Org.from_dictionary(dictionary.get('org')) if dictionary.get('org') else None
        phones = None
        if dictionary.get('phones') is not None:
            phones = [Phone.from_dictionary(x) for x in dictionary.get('phones')]
        urls = None
        if dictionary.get('urls') is not None:
            urls = [Url.from_dictionary(x) for x in dictionary.get('urls')]
        # Return an object of this model
        return cls(addresses,
                   birthday,
                   emails,
                   name,
                   org,
                   phones,
                   urls)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'addresses={self.addresses!r}, '
                f'birthday={self.birthday!r}, '
                f'emails={self.emails!r}, '
                f'name={self.name!r}, '
                f'org={self.org!r}, '
                f'phones={self.phones!r}, '
                f'urls={self.urls!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'addresses={self.addresses!s}, '
                f'birthday={self.birthday!s}, '
                f'emails={self.emails!s}, '
                f'name={self.name!s}, '
                f'org={self.org!s}, '
                f'phones={self.phones!s}, '
                f'urls={self.urls!s})')
