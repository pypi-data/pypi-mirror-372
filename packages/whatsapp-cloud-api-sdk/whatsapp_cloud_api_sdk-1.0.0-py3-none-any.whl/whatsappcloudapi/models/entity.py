# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.models.error import Error


class Entity(object):

    """Implementation of the 'Entity' model.

    Attributes:
        entity_type (str): The model property of type str.
        id (str): The model property of type str.
        can_send_message (str): The model property of type str.
        errors (List[Error]): The model property of type List[Error].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "entity_type": 'entity_type',
        "id": 'id',
        "can_send_message": 'can_send_message',
        "errors": 'errors'
    }

    _optionals = [
        'errors',
    ]

    def __init__(self,
                 entity_type=None,
                 id=None,
                 can_send_message=None,
                 errors=APIHelper.SKIP):
        """Constructor for the Entity class"""

        # Initialize members of the class
        self.entity_type = entity_type 
        self.id = id 
        self.can_send_message = can_send_message 
        if errors is not APIHelper.SKIP:
            self.errors = errors 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        entity_type = dictionary.get("entity_type") if dictionary.get("entity_type") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        can_send_message = dictionary.get("can_send_message") if dictionary.get("can_send_message") else None
        errors = None
        if dictionary.get('errors') is not None:
            errors = [Error.from_dictionary(x) for x in dictionary.get('errors')]
        else:
            errors = APIHelper.SKIP
        # Return an object of this model
        return cls(entity_type,
                   id,
                   can_send_message,
                   errors)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'entity_type={self.entity_type!r}, '
                f'id={self.id!r}, '
                f'can_send_message={self.can_send_message!r}, '
                f'errors={(self.errors if hasattr(self, "errors") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'entity_type={self.entity_type!s}, '
                f'id={self.id!s}, '
                f'can_send_message={self.can_send_message!s}, '
                f'errors={(self.errors if hasattr(self, "errors") else None)!s})')
