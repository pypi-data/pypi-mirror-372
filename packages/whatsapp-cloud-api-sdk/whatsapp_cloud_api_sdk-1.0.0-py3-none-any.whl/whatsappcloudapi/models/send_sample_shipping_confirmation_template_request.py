# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.template_7 import Template7


class SendSampleShippingConfirmationTemplateRequest(object):

    """Implementation of the 'Send Sample Shipping Confirmation Template Request' model.

    Attributes:
        messaging_product (str): The model property of type str.
        to (str): The model property of type str.
        mtype (str): The model property of type str.
        template (Template7): The model property of type Template7.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "messaging_product": 'messaging_product',
        "to": 'to',
        "mtype": 'type',
        "template": 'template'
    }

    def __init__(self,
                 messaging_product=None,
                 to=None,
                 mtype=None,
                 template=None):
        """Constructor for the SendSampleShippingConfirmationTemplateRequest class"""

        # Initialize members of the class
        self.messaging_product = messaging_product 
        self.to = to 
        self.mtype = mtype 
        self.template = template 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        messaging_product = dictionary.get("messaging_product") if dictionary.get("messaging_product") else None
        to = dictionary.get("to") if dictionary.get("to") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        template = Template7.from_dictionary(dictionary.get('template')) if dictionary.get('template') else None
        # Return an object of this model
        return cls(messaging_product,
                   to,
                   mtype,
                   template)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'messaging_product={self.messaging_product!r}, '
                f'to={self.to!r}, '
                f'mtype={self.mtype!r}, '
                f'template={self.template!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'messaging_product={self.messaging_product!s}, '
                f'to={self.to!s}, '
                f'mtype={self.mtype!s}, '
                f'template={self.template!s})')
