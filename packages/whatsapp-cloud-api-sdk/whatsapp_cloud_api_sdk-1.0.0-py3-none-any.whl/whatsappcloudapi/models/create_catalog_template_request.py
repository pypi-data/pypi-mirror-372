# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.component_9 import Component9


class CreateCatalogTemplateRequest(object):

    """Implementation of the 'Create catalog template Request' model.

    Attributes:
        name (str): The model property of type str.
        language (str): The model property of type str.
        category (str): The model property of type str.
        components (List[Component9]): The model property of type
            List[Component9].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "language": 'language',
        "category": 'category',
        "components": 'components'
    }

    def __init__(self,
                 name=None,
                 language=None,
                 category=None,
                 components=None):
        """Constructor for the CreateCatalogTemplateRequest class"""

        # Initialize members of the class
        self.name = name 
        self.language = language 
        self.category = category 
        self.components = components 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        language = dictionary.get("language") if dictionary.get("language") else None
        category = dictionary.get("category") if dictionary.get("category") else None
        components = None
        if dictionary.get('components') is not None:
            components = [Component9.from_dictionary(x) for x in dictionary.get('components')]
        # Return an object of this model
        return cls(name,
                   language,
                   category,
                   components)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'language={self.language!r}, '
                f'category={self.category!r}, '
                f'components={self.components!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'language={self.language!s}, '
                f'category={self.category!s}, '
                f'components={self.components!s})')
