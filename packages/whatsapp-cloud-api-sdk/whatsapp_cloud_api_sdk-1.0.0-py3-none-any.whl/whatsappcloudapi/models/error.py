# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Error(object):

    """Implementation of the 'Error' model.

    Attributes:
        error_code (int): The model property of type int.
        error_description (str): The model property of type str.
        possible_solution (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "error_code": 'error_code',
        "error_description": 'error_description',
        "possible_solution": 'possible_solution'
    }

    def __init__(self,
                 error_code=None,
                 error_description=None,
                 possible_solution=None):
        """Constructor for the Error class"""

        # Initialize members of the class
        self.error_code = error_code 
        self.error_description = error_description 
        self.possible_solution = possible_solution 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        error_code = dictionary.get("error_code") if dictionary.get("error_code") else None
        error_description = dictionary.get("error_description") if dictionary.get("error_description") else None
        possible_solution = dictionary.get("possible_solution") if dictionary.get("possible_solution") else None
        # Return an object of this model
        return cls(error_code,
                   error_description,
                   possible_solution)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'error_code={self.error_code!r}, '
                f'error_description={self.error_description!r}, '
                f'possible_solution={self.possible_solution!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'error_code={self.error_code!s}, '
                f'error_description={self.error_description!s}, '
                f'possible_solution={self.possible_solution!s})')
