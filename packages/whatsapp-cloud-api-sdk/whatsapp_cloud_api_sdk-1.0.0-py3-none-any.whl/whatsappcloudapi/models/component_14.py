# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.models.button_11 import Button11
from whatsappcloudapi.models.example_6 import Example6


class Component14(object):

    """Implementation of the 'Component14' model.

    Attributes:
        mtype (str): The model property of type str.
        format (str): The model property of type str.
        example (Example6): The model property of type Example6.
        text (str): The model property of type str.
        buttons (List[Button11]): The model property of type List[Button11].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "format": 'format',
        "example": 'example',
        "text": 'text',
        "buttons": 'buttons'
    }

    _optionals = [
        'format',
        'example',
        'text',
        'buttons',
    ]

    def __init__(self,
                 mtype=None,
                 format=APIHelper.SKIP,
                 example=APIHelper.SKIP,
                 text=APIHelper.SKIP,
                 buttons=APIHelper.SKIP):
        """Constructor for the Component14 class"""

        # Initialize members of the class
        self.mtype = mtype 
        if format is not APIHelper.SKIP:
            self.format = format 
        if example is not APIHelper.SKIP:
            self.example = example 
        if text is not APIHelper.SKIP:
            self.text = text 
        if buttons is not APIHelper.SKIP:
            self.buttons = buttons 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        format = dictionary.get("format") if dictionary.get("format") else APIHelper.SKIP
        example = Example6.from_dictionary(dictionary.get('example')) if 'example' in dictionary.keys() else APIHelper.SKIP
        text = dictionary.get("text") if dictionary.get("text") else APIHelper.SKIP
        buttons = None
        if dictionary.get('buttons') is not None:
            buttons = [Button11.from_dictionary(x) for x in dictionary.get('buttons')]
        else:
            buttons = APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   format,
                   example,
                   text,
                   buttons)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'format={(self.format if hasattr(self, "format") else None)!r}, '
                f'example={(self.example if hasattr(self, "example") else None)!r}, '
                f'text={(self.text if hasattr(self, "text") else None)!r}, '
                f'buttons={(self.buttons if hasattr(self, "buttons") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'format={(self.format if hasattr(self, "format") else None)!s}, '
                f'example={(self.example if hasattr(self, "example") else None)!s}, '
                f'text={(self.text if hasattr(self, "text") else None)!s}, '
                f'buttons={(self.buttons if hasattr(self, "buttons") else None)!s})')
