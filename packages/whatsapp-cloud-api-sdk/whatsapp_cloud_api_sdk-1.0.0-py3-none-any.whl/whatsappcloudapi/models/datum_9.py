# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Datum9(object):

    """Implementation of the 'Datum9' model.

    Attributes:
        name (str): The model property of type str.
        asset_type (str): The model property of type str.
        download_url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "asset_type": 'asset_type',
        "download_url": 'download_url'
    }

    def __init__(self,
                 name=None,
                 asset_type=None,
                 download_url=None):
        """Constructor for the Datum9 class"""

        # Initialize members of the class
        self.name = name 
        self.asset_type = asset_type 
        self.download_url = download_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        asset_type = dictionary.get("asset_type") if dictionary.get("asset_type") else None
        download_url = dictionary.get("download_url") if dictionary.get("download_url") else None
        # Return an object of this model
        return cls(name,
                   asset_type,
                   download_url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'asset_type={self.asset_type!r}, '
                f'download_url={self.download_url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'asset_type={self.asset_type!s}, '
                f'download_url={self.download_url!s})')
