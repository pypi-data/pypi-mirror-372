# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Currency(object):

    """Implementation of the 'Currency' model.

    Attributes:
        fallback_value (str): The model property of type str.
        code (str): The model property of type str.
        amount_1000 (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "fallback_value": 'fallback_value',
        "code": 'code',
        "amount_1000": 'amount_1000'
    }

    def __init__(self,
                 fallback_value=None,
                 code=None,
                 amount_1000=None):
        """Constructor for the Currency class"""

        # Initialize members of the class
        self.fallback_value = fallback_value 
        self.code = code 
        self.amount_1000 = amount_1000 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        fallback_value = dictionary.get("fallback_value") if dictionary.get("fallback_value") else None
        code = dictionary.get("code") if dictionary.get("code") else None
        amount_1000 = dictionary.get("amount_1000") if dictionary.get("amount_1000") else None
        # Return an object of this model
        return cls(fallback_value,
                   code,
                   amount_1000)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'fallback_value={self.fallback_value!r}, '
                f'code={self.code!r}, '
                f'amount_1000={self.amount_1000!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'fallback_value={self.fallback_value!s}, '
                f'code={self.code!s}, '
                f'amount_1000={self.amount_1000!s})')
