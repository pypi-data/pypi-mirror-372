# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Org(object):

    """Implementation of the 'Org' model.

    Attributes:
        company (str): The model property of type str.
        department (str): The model property of type str.
        title (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "company": 'company',
        "department": 'department',
        "title": 'title'
    }

    def __init__(self,
                 company=None,
                 department=None,
                 title=None):
        """Constructor for the Org class"""

        # Initialize members of the class
        self.company = company 
        self.department = department 
        self.title = title 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        company = dictionary.get("company") if dictionary.get("company") else None
        department = dictionary.get("department") if dictionary.get("department") else None
        title = dictionary.get("title") if dictionary.get("title") else None
        # Return an object of this model
        return cls(company,
                   department,
                   title)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'company={self.company!r}, '
                f'department={self.department!r}, '
                f'title={self.title!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'company={self.company!s}, '
                f'department={self.department!s}, '
                f'title={self.title!s})')
