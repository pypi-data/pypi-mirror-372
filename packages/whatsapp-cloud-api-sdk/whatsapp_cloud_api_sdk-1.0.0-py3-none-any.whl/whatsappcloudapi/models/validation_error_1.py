# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.api_helper import APIHelper


class ValidationError1(object):

    """Implementation of the 'ValidationError1' model.

    Attributes:
        error (str): The model property of type str.
        error_type (str): The model property of type str.
        message (str): The model property of type str.
        line_start (int): The model property of type int.
        line_end (int): The model property of type int.
        column_start (int): The model property of type int.
        column_end (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "error": 'error',
        "error_type": 'error_type',
        "message": 'message',
        "line_start": 'line_start',
        "line_end": 'line_end',
        "column_start": 'column_start',
        "column_end": 'column_end'
    }

    def __init__(self,
                 error=None,
                 error_type=None,
                 message=None,
                 line_start=None,
                 line_end=None,
                 column_start=None,
                 column_end=None):
        """Constructor for the ValidationError1 class"""

        # Initialize members of the class
        self.error = error 
        self.error_type = error_type 
        self.message = message 
        self.line_start = line_start 
        self.line_end = line_end 
        self.column_start = column_start 
        self.column_end = column_end 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        error = dictionary.get("error") if dictionary.get("error") else None
        error_type = dictionary.get("error_type") if dictionary.get("error_type") else None
        message = dictionary.get("message") if dictionary.get("message") else None
        line_start = dictionary.get("line_start") if dictionary.get("line_start") else None
        line_end = dictionary.get("line_end") if dictionary.get("line_end") else None
        column_start = dictionary.get("column_start") if dictionary.get("column_start") else None
        column_end = dictionary.get("column_end") if dictionary.get("column_end") else None
        # Return an object of this model
        return cls(error,
                   error_type,
                   message,
                   line_start,
                   line_end,
                   column_start,
                   column_end)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.error,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.error_type,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.message,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.line_start,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.line_end,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.column_start,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.column_end,
                                            type_callable=lambda value: isinstance(value, int))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('error'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('error_type'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('message'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('line_start'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('line_end'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('column_start'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('column_end'),
                                        type_callable=lambda value: isinstance(value, int))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'error={self.error!r}, '
                f'error_type={self.error_type!r}, '
                f'message={self.message!r}, '
                f'line_start={self.line_start!r}, '
                f'line_end={self.line_end!r}, '
                f'column_start={self.column_start!r}, '
                f'column_end={self.column_end!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'error={self.error!s}, '
                f'error_type={self.error_type!s}, '
                f'message={self.message!s}, '
                f'line_start={self.line_start!s}, '
                f'line_end={self.line_end!s}, '
                f'column_start={self.column_start!s}, '
                f'column_end={self.column_end!s})')
