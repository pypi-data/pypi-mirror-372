# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.discount import Discount
from whatsappcloudapi.models.item import Item
from whatsappcloudapi.models.shipping import Shipping
from whatsappcloudapi.models.subtotal import Subtotal
from whatsappcloudapi.models.tax import Tax


class Order2(object):

    """Implementation of the 'Order2' model.

    Attributes:
        status (str): The model property of type str.
        items (List[Item]): The model property of type List[Item].
        subtotal (Subtotal): The model property of type Subtotal.
        tax (Tax): The model property of type Tax.
        shipping (Shipping): The model property of type Shipping.
        discount (Discount): The model property of type Discount.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "items": 'items',
        "subtotal": 'subtotal',
        "tax": 'tax',
        "shipping": 'shipping',
        "discount": 'discount'
    }

    def __init__(self,
                 status=None,
                 items=None,
                 subtotal=None,
                 tax=None,
                 shipping=None,
                 discount=None):
        """Constructor for the Order2 class"""

        # Initialize members of the class
        self.status = status 
        self.items = items 
        self.subtotal = subtotal 
        self.tax = tax 
        self.shipping = shipping 
        self.discount = discount 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        status = dictionary.get("status") if dictionary.get("status") else None
        items = None
        if dictionary.get('items') is not None:
            items = [Item.from_dictionary(x) for x in dictionary.get('items')]
        subtotal = Subtotal.from_dictionary(dictionary.get('subtotal')) if dictionary.get('subtotal') else None
        tax = Tax.from_dictionary(dictionary.get('tax')) if dictionary.get('tax') else None
        shipping = Shipping.from_dictionary(dictionary.get('shipping')) if dictionary.get('shipping') else None
        discount = Discount.from_dictionary(dictionary.get('discount')) if dictionary.get('discount') else None
        # Return an object of this model
        return cls(status,
                   items,
                   subtotal,
                   tax,
                   shipping,
                   discount)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'status={self.status!r}, '
                f'items={self.items!r}, '
                f'subtotal={self.subtotal!r}, '
                f'tax={self.tax!r}, '
                f'shipping={self.shipping!r}, '
                f'discount={self.discount!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'status={self.status!s}, '
                f'items={self.items!s}, '
                f'subtotal={self.subtotal!s}, '
                f'tax={self.tax!s}, '
                f'shipping={self.shipping!s}, '
                f'discount={self.discount!s})')
