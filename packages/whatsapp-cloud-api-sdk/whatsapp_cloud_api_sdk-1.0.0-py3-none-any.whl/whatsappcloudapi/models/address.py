# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Address(object):

    """Implementation of the 'Address' model.

    Attributes:
        street (str): The model property of type str.
        city (str): The model property of type str.
        state (str): The model property of type str.
        zip (str): The model property of type str.
        country (str): The model property of type str.
        country_code (str): The model property of type str.
        mtype (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "street": 'street',
        "city": 'city',
        "state": 'state',
        "zip": 'zip',
        "country": 'country',
        "country_code": 'country_code',
        "mtype": 'type'
    }

    def __init__(self,
                 street=None,
                 city=None,
                 state=None,
                 zip=None,
                 country=None,
                 country_code=None,
                 mtype=None):
        """Constructor for the Address class"""

        # Initialize members of the class
        self.street = street 
        self.city = city 
        self.state = state 
        self.zip = zip 
        self.country = country 
        self.country_code = country_code 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        street = dictionary.get("street") if dictionary.get("street") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        zip = dictionary.get("zip") if dictionary.get("zip") else None
        country = dictionary.get("country") if dictionary.get("country") else None
        country_code = dictionary.get("country_code") if dictionary.get("country_code") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        # Return an object of this model
        return cls(street,
                   city,
                   state,
                   zip,
                   country,
                   country_code,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'street={self.street!r}, '
                f'city={self.city!r}, '
                f'state={self.state!r}, '
                f'zip={self.zip!r}, '
                f'country={self.country!r}, '
                f'country_code={self.country_code!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'street={self.street!s}, '
                f'city={self.city!s}, '
                f'state={self.state!s}, '
                f'zip={self.zip!s}, '
                f'country={self.country!s}, '
                f'country_code={self.country_code!s}, '
                f'mtype={self.mtype!s})')
