# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Data11(object):

    """Implementation of the 'Data11' model.

    Attributes:
        is_cart_enabled (bool): The model property of type bool.
        is_catalog_visible (bool): The model property of type bool.
        id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "is_cart_enabled": 'is_cart_enabled',
        "is_catalog_visible": 'is_catalog_visible',
        "id": 'id'
    }

    def __init__(self,
                 is_cart_enabled=None,
                 is_catalog_visible=None,
                 id=None):
        """Constructor for the Data11 class"""

        # Initialize members of the class
        self.is_cart_enabled = is_cart_enabled 
        self.is_catalog_visible = is_catalog_visible 
        self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        is_cart_enabled = dictionary.get("is_cart_enabled") if "is_cart_enabled" in dictionary.keys() else None
        is_catalog_visible = dictionary.get("is_catalog_visible") if "is_catalog_visible" in dictionary.keys() else None
        id = dictionary.get("id") if dictionary.get("id") else None
        # Return an object of this model
        return cls(is_cart_enabled,
                   is_catalog_visible,
                   id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'is_cart_enabled={self.is_cart_enabled!r}, '
                f'is_catalog_visible={self.is_catalog_visible!r}, '
                f'id={self.id!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'is_cart_enabled={self.is_cart_enabled!s}, '
                f'is_catalog_visible={self.is_catalog_visible!s}, '
                f'id={self.id!s})')
