# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Name(object):

    """Implementation of the 'Name' model.

    Attributes:
        formatted_name (str): The model property of type str.
        first_name (str): The model property of type str.
        last_name (str): The model property of type str.
        middle_name (str): The model property of type str.
        suffix (str): The model property of type str.
        prefix (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "formatted_name": 'formatted_name',
        "first_name": 'first_name',
        "last_name": 'last_name',
        "middle_name": 'middle_name',
        "suffix": 'suffix',
        "prefix": 'prefix'
    }

    def __init__(self,
                 formatted_name=None,
                 first_name=None,
                 last_name=None,
                 middle_name=None,
                 suffix=None,
                 prefix=None):
        """Constructor for the Name class"""

        # Initialize members of the class
        self.formatted_name = formatted_name 
        self.first_name = first_name 
        self.last_name = last_name 
        self.middle_name = middle_name 
        self.suffix = suffix 
        self.prefix = prefix 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        formatted_name = dictionary.get("formatted_name") if dictionary.get("formatted_name") else None
        first_name = dictionary.get("first_name") if dictionary.get("first_name") else None
        last_name = dictionary.get("last_name") if dictionary.get("last_name") else None
        middle_name = dictionary.get("middle_name") if dictionary.get("middle_name") else None
        suffix = dictionary.get("suffix") if dictionary.get("suffix") else None
        prefix = dictionary.get("prefix") if dictionary.get("prefix") else None
        # Return an object of this model
        return cls(formatted_name,
                   first_name,
                   last_name,
                   middle_name,
                   suffix,
                   prefix)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'formatted_name={self.formatted_name!r}, '
                f'first_name={self.first_name!r}, '
                f'last_name={self.last_name!r}, '
                f'middle_name={self.middle_name!r}, '
                f'suffix={self.suffix!r}, '
                f'prefix={self.prefix!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'formatted_name={self.formatted_name!s}, '
                f'first_name={self.first_name!s}, '
                f'last_name={self.last_name!s}, '
                f'middle_name={self.middle_name!s}, '
                f'suffix={self.suffix!s}, '
                f'prefix={self.prefix!s})')
