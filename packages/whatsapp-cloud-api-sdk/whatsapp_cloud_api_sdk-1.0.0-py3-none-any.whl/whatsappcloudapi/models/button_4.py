# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Button4(object):

    """Implementation of the 'Button4' model.

    Attributes:
        mtype (str): The model property of type str.
        otp_type (str): The model property of type str.
        text (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "otp_type": 'otp_type',
        "text": 'text'
    }

    def __init__(self,
                 mtype=None,
                 otp_type=None,
                 text=None):
        """Constructor for the Button4 class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.otp_type = otp_type 
        self.text = text 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        otp_type = dictionary.get("otp_type") if dictionary.get("otp_type") else None
        text = dictionary.get("text") if dictionary.get("text") else None
        # Return an object of this model
        return cls(mtype,
                   otp_type,
                   text)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'otp_type={self.otp_type!r}, '
                f'text={self.text!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'otp_type={self.otp_type!s}, '
                f'text={self.text!s})')
