# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Filtering(object):

    """Implementation of the 'filtering' model.

    Attributes:
        field (str): The model property of type str.
        operator (str): The model property of type str.
        value (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "field": 'field',
        "operator": 'operator',
        "value": 'value'
    }

    def __init__(self,
                 field=None,
                 operator=None,
                 value=None):
        """Constructor for the Filtering class"""

        # Initialize members of the class
        self.field = field 
        self.operator = operator 
        self.value = value 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        field = dictionary.get("field") if dictionary.get("field") else None
        operator = dictionary.get("operator") if dictionary.get("operator") else None
        value = dictionary.get("value") if dictionary.get("value") else None
        # Return an object of this model
        return cls(field,
                   operator,
                   value)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'field={self.field!r}, '
                f'operator={self.operator!r}, '
                f'value={self.value!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'field={self.field!s}, '
                f'operator={self.operator!s}, '
                f'value={self.value!s})')
