# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.customer_care_details import CustomerCareDetails
from whatsappcloudapi.models.grievance_officer_details import GrievanceOfficerDetails


class Data19(object):

    """Implementation of the 'Data19' model.

    Attributes:
        entity_name (str): The model property of type str.
        entity_type (str): The model property of type str.
        is_registered (bool): The model property of type bool.
        grievance_officer_details (GrievanceOfficerDetails): The model
            property of type GrievanceOfficerDetails.
        customer_care_details (CustomerCareDetails): The model property of
            type CustomerCareDetails.
        messaging_product (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "entity_name": 'entity_name',
        "entity_type": 'entity_type',
        "is_registered": 'is_registered',
        "grievance_officer_details": 'grievance_officer_details',
        "customer_care_details": 'customer_care_details',
        "messaging_product": 'messaging_product'
    }

    def __init__(self,
                 entity_name=None,
                 entity_type=None,
                 is_registered=None,
                 grievance_officer_details=None,
                 customer_care_details=None,
                 messaging_product=None):
        """Constructor for the Data19 class"""

        # Initialize members of the class
        self.entity_name = entity_name 
        self.entity_type = entity_type 
        self.is_registered = is_registered 
        self.grievance_officer_details = grievance_officer_details 
        self.customer_care_details = customer_care_details 
        self.messaging_product = messaging_product 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        entity_name = dictionary.get("entity_name") if dictionary.get("entity_name") else None
        entity_type = dictionary.get("entity_type") if dictionary.get("entity_type") else None
        is_registered = dictionary.get("is_registered") if "is_registered" in dictionary.keys() else None
        grievance_officer_details = GrievanceOfficerDetails.from_dictionary(dictionary.get('grievance_officer_details')) if dictionary.get('grievance_officer_details') else None
        customer_care_details = CustomerCareDetails.from_dictionary(dictionary.get('customer_care_details')) if dictionary.get('customer_care_details') else None
        messaging_product = dictionary.get("messaging_product") if dictionary.get("messaging_product") else None
        # Return an object of this model
        return cls(entity_name,
                   entity_type,
                   is_registered,
                   grievance_officer_details,
                   customer_care_details,
                   messaging_product)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'entity_name={self.entity_name!r}, '
                f'entity_type={self.entity_type!r}, '
                f'is_registered={self.is_registered!r}, '
                f'grievance_officer_details={self.grievance_officer_details!r}, '
                f'customer_care_details={self.customer_care_details!r}, '
                f'messaging_product={self.messaging_product!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'entity_name={self.entity_name!s}, '
                f'entity_type={self.entity_type!s}, '
                f'is_registered={self.is_registered!s}, '
                f'grievance_officer_details={self.grievance_officer_details!s}, '
                f'customer_care_details={self.customer_care_details!s}, '
                f'messaging_product={self.messaging_product!s})')
