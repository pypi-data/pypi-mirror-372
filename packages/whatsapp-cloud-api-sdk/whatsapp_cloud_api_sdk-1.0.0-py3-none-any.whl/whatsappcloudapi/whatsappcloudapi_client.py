# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from whatsappcloudapi.configuration import Configuration
from whatsappcloudapi.controllers.base_controller import BaseController
from whatsappcloudapi.configuration import Environment
from whatsappcloudapi.http.auth.o_auth_2 import OAuth2
from whatsappcloudapi.controllers.get_started_controller\
    import GetStartedController
from whatsappcloudapi.controllers.whats_app_business_accounts_wab_as_controller\
    import WhatsAppBusinessAccountsWABAsController
from whatsappcloudapi.controllers.registration_controller\
    import RegistrationController
from whatsappcloudapi.controllers.phone_numbers_controller\
    import PhoneNumbersController
from whatsappcloudapi.controllers.webhook_payload_reference_controller\
    import WebhookPayloadReferenceController
from whatsappcloudapi.controllers.webhook_subscriptions_controller\
    import WebhookSubscriptionsController
from whatsappcloudapi.controllers.messages_controller import MessagesController
from whatsappcloudapi.controllers.templates_controller\
    import TemplatesController
from whatsappcloudapi.controllers.create_flow_controller\
    import CreateFlowController
from whatsappcloudapi.controllers.update_flow_controller\
    import UpdateFlowController
from whatsappcloudapi.controllers.setup_endpoint_encryption_controller\
    import SetupEndpointEncryptionController
from whatsappcloudapi.controllers.send_flow_controller\
    import SendFlowController
from whatsappcloudapi.controllers.get_endpoint_metrics_controller\
    import GetEndpointMetricsController
from whatsappcloudapi.controllers.media_controller import MediaController
from whatsappcloudapi.controllers.typing_indicators_controller\
    import TypingIndicatorsController
from whatsappcloudapi.controllers.business_profiles_controller\
    import BusinessProfilesController
from whatsappcloudapi.controllers.commerce_settings_controller\
    import CommerceSettingsController
from whatsappcloudapi.controllers.payments_apisg_controller\
    import PaymentsAPISGController
from whatsappcloudapi.controllers.payments_apiin_controller\
    import PaymentsAPIINController
from whatsappcloudapi.controllers.qr_codes_controller import QRCodesController
from whatsappcloudapi.controllers.business_portfolio_controller\
    import BusinessPortfolioController
from whatsappcloudapi.controllers.analytics_controller\
    import AnalyticsController
from whatsappcloudapi.controllers.billing_controller import BillingController
from whatsappcloudapi.controllers.on_prem_account_migration_controller\
    import OnPremAccountMigrationController
from whatsappcloudapi.controllers.block_users_controller\
    import BlockUsersController
from whatsappcloudapi.controllers.business_compliance_controller\
    import BusinessComplianceController
from whatsappcloudapi.controllers.examples_controller import ExamplesController


class WhatsappcloudapiClient(object):
    @LazyProperty
    def get_started(self):
        return GetStartedController(self.global_configuration)

    @LazyProperty
    def whats_app_business_accounts_wab_as(self):
        return WhatsAppBusinessAccountsWABAsController(self.global_configuration)

    @LazyProperty
    def registration(self):
        return RegistrationController(self.global_configuration)

    @LazyProperty
    def phone_numbers(self):
        return PhoneNumbersController(self.global_configuration)

    @LazyProperty
    def webhook_payload_reference(self):
        return WebhookPayloadReferenceController(self.global_configuration)

    @LazyProperty
    def webhook_subscriptions(self):
        return WebhookSubscriptionsController(self.global_configuration)

    @LazyProperty
    def messages(self):
        return MessagesController(self.global_configuration)

    @LazyProperty
    def templates(self):
        return TemplatesController(self.global_configuration)

    @LazyProperty
    def create_flow(self):
        return CreateFlowController(self.global_configuration)

    @LazyProperty
    def update_flow(self):
        return UpdateFlowController(self.global_configuration)

    @LazyProperty
    def setup_endpoint_encryption(self):
        return SetupEndpointEncryptionController(self.global_configuration)

    @LazyProperty
    def send_flow(self):
        return SendFlowController(self.global_configuration)

    @LazyProperty
    def get_endpoint_metrics(self):
        return GetEndpointMetricsController(self.global_configuration)

    @LazyProperty
    def media(self):
        return MediaController(self.global_configuration)

    @LazyProperty
    def typing_indicators(self):
        return TypingIndicatorsController(self.global_configuration)

    @LazyProperty
    def business_profiles(self):
        return BusinessProfilesController(self.global_configuration)

    @LazyProperty
    def commerce_settings(self):
        return CommerceSettingsController(self.global_configuration)

    @LazyProperty
    def payments_api_sg(self):
        return PaymentsAPISGController(self.global_configuration)

    @LazyProperty
    def payments_api_in(self):
        return PaymentsAPIINController(self.global_configuration)

    @LazyProperty
    def qr_codes(self):
        return QRCodesController(self.global_configuration)

    @LazyProperty
    def business_portfolio(self):
        return BusinessPortfolioController(self.global_configuration)

    @LazyProperty
    def analytics(self):
        return AnalyticsController(self.global_configuration)

    @LazyProperty
    def billing(self):
        return BillingController(self.global_configuration)

    @LazyProperty
    def on_prem_account_migration(self):
        return OnPremAccountMigrationController(self.global_configuration)

    @LazyProperty
    def block_users(self):
        return BlockUsersController(self.global_configuration)

    @LazyProperty
    def business_compliance(self):
        return BusinessComplianceController(self.global_configuration)

    @LazyProperty
    def examples(self):
        return ExamplesController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION,
                 version='DefaultParameterValue', access_token=None,
                 bearer_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, version=version, access_token=access_token,
            bearer_auth_credentials=bearer_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['bearer']}
        self.auth_managers['bearer'] = OAuth2(
            self.config.bearer_auth_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

