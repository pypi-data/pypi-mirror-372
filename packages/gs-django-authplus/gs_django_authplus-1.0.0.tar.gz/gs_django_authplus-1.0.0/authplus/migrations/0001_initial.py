# Generated by Django 5.1.5 on 2025-02-07 12:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PermissionsPackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('permissions', models.ManyToManyField(blank=True, help_text='Permissions included in the package.', related_name='%(class)s_set', to='auth.permission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'permissions package',
                'verbose_name_plural': 'permissions packages',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('permissions', models.ManyToManyField(blank=True, related_name='%(class)s_set', to='auth.permission', verbose_name='individual permissions')),
                ('permissions_packages', models.ManyToManyField(blank=True, related_name='%(class)s_set', to='authplus.permissionspackage', verbose_name='permissions packages')),
                ('subgroups', models.ManyToManyField(blank=True, related_name='%(class)s_set', to='authplus.usergroup', verbose_name='subgroups')),
            ],
            options={
                'verbose_name': 'user group',
                'verbose_name_plural': 'user groups',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('individual_permissions', models.ManyToManyField(blank=True, help_text='Additional individual permissions this user is granted.', related_name='individual_%(class)s_set', to='auth.permission', verbose_name='individual permissions')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('permissions_packages', models.ManyToManyField(blank=True, help_text='Permissions packages this user is granted. A user will get all permissions that are in the permissions package.', related_name='%(class)s_set', to='authplus.permissionspackage', verbose_name='permissions packages')),
                ('user_groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of his groups.', related_name='%(class)s_set', to='authplus.usergroup', verbose_name='user groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
