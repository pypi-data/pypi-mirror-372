#  Developed by CQ Inversiones SAS. Copyright ©. 2019-2025. All rights reserved.
#  Desarrollado por CQ Inversiones SAS. Copyright ©. 2019-2025. Todos los derechos reservados.

# Generated by Django 3.2.25 on 2025-08-22 15:42

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djangocms_zb_polls.lib.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cms', '0022_auto_20180620_1551'),
    ]

    operations = [
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('email_required', models.BooleanField(default=False, help_text='If true, the email is required to respond.', verbose_name='Email Required')),
                ('duplicate_entry', models.BooleanField(default=False, help_text='If True, email can resubmit.', verbose_name='Multiple submissions')),
                ('notification_to', djangocms_zb_polls.lib.fields.MultiEmailField(blank=True, default=[], help_text='Emails to receive notification when the form is submitted', null=True, verbose_name='Notification to')),
                ('start_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='Start date to allow for responses to be submitted.', null=True, verbose_name='Start date')),
                ('end_at', models.DateTimeField(blank=True, help_text='End date to allow for responses to be submitted.', null=True, verbose_name='End date')),
            ],
            options={
                'verbose_name': 'Poll',
                'verbose_name_plural': 'Polls',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('label', models.CharField(help_text='Enter your question in here.', max_length=500, verbose_name='Label')),
                ('type_field', models.PositiveSmallIntegerField(choices=[(0, 'Text'), (1, 'Number'), (2, 'Radio'), (3, 'Select'), (4, 'Multi Select'), (5, 'Text Area'), (6, 'Email'), (7, 'Date'), (8, 'Rating')], verbose_name='Type of field')),
                ('options', models.TextField(blank=True, help_text='If type of field is radio, select, multi select or rating, fill in the options separated by pipe (|). Ex: Male|Female.', null=True, verbose_name='Options')),
                ('help_text', models.CharField(blank=True, help_text='You can add a help text in here.', max_length=200, null=True, verbose_name='Help Text')),
                ('required', models.BooleanField(default=True, help_text='If True, the user must provide an answer to this question.', verbose_name='Required')),
                ('ordering', models.PositiveIntegerField(default=0, help_text='Defines the question order within the polls.', verbose_name='Ordering')),
                ('extra_options', models.JSONField(blank=True, default=dict, help_text='Additional options to be added to the form field. For example: {"minlength": 4, "maxlength": 8, "disabled":true}', null=True, verbose_name='Extra Options')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', related_query_name='question', to='djangocms_zb_polls.poll', verbose_name='Poll')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='PluginConfig',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_zb_polls_pluginconfig', serialize=False, to='cms.cmsplugin')),
                ('template', models.CharField(choices=[('default', 'Default'), ('bootstrap5/style_one', '(Bootstrap 5) style one')], default='default', help_text='(HTML) Alternative template for the design of complement.', max_length=250, verbose_name='Template')),
                ('poll', models.ForeignKey(help_text='Poll form you want to display.', on_delete=django.db.models.deletion.CASCADE, related_name='plugins', related_query_name='plugin', to='djangocms_zb_polls.poll', verbose_name='Poll')),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.TextField(blank=True, help_text='The value of the answer given by the user.', null=True, verbose_name='Value')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='User Email.')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', related_query_name='answer', to='djangocms_zb_polls.question', verbose_name='Question')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
                'ordering': ('question__ordering',),
            },
        ),
    ]
