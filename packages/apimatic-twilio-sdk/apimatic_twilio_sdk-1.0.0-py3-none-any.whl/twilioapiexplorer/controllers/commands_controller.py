# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_184 import OK184
from twilioapiexplorer.models.ok_185 import OK185
from twilioapiexplorer.models.created_51 import Created51


class CommandsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(CommandsController, self).__init__(config)

    def fetch_command(self,
                      sid,
                      accept):
        """Does a GET request to /{Sid}.

        Fetch a Command instance from your account.

        Args:
            sid (str): (Required) The SID of the Command resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK184: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_14)
            .path('/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK184.from_dictionary)
        ).execute()

    def delete_command(self,
                       sid):
        """Does a DELETE request to /{Sid}.

        Delete a Command instance from your account.

        Args:
            sid (str): (Required) The SID of the Command resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_14)
            .path('/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_command(self,
                     sim,
                     status,
                     direction,
                     transport,
                     page_size,
                     accept):
        """Does a GET request to /v1/Commands.

        Retrieve a list of Commands from your account.

        Args:
            sim (str): The `sid` or `unique_name` of the [Sim
                resources](https://www.twilio.com/docs/wireless/api/sim-resourc
                e) to read.
            status (str): The status of the resources to read. Can be:
                `queued`, `sent`, `delivered`, `received`, or `failed`.
            direction (str): Only return Commands with this direction value.
            transport (str): Only return Commands with this transport value.
                Can be: `sms` or `ip`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK185: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Commands')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Sim')
                         .value(sim))
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('Direction')
                         .value(direction))
            .query_param(Parameter()
                         .key('Transport')
                         .value(transport))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK185.from_dictionary)
        ).execute()

    def create_command(self,
                       accept,
                       command,
                       sim,
                       callback_method,
                       callback_url,
                       command_mode,
                       include_sid,
                       delivery_receipt_requested):
        """Does a POST request to /v1/Commands.

        Send a Command to a Sim.

        Args:
            accept (str): The request header parameter.
            command (str): (Required) The message body of the Command. Can be
                plain text in text mode or a Base64 encoded byte string in
                binary mode.
            sim (str): The `sid` or `unique_name` of the
                [SIM](https://www.twilio.com/docs/wireless/api/sim-resource)
                to send the Command to.
            callback_method (str): The HTTP method we use to call
                `callback_url`. Can be: `POST` or `GET`, and the default is
                `POST`.
            callback_url (str): The URL we call using the `callback_url` when
                the Command has finished sending, whether the command was
                delivered or it failed.
            command_mode (str): The mode to use when sending the SMS message.
                Can be: `text` or `binary`. The default SMS mode is `text`.
            include_sid (str): Whether to include the SID of the command in
                the message body. Can be: `none`, `start`, or `end`, and the
                default behavior is `none`. When sending a Command to a SIM in
                text mode, we can automatically include the SID of the Command
                in the message body, which could be used to ensure that the
                device does not process the same Command more than once.  A
                value of `start` will prepend the message with the Command
                SID, and `end` will append it to the end, separating the
                Command SID from the message body with a space. The length of
                the Command SID is included in the 160 character limit so the
                SMS body must be 128 characters or less before the Command SID
                is included.
            delivery_receipt_requested (bool): Whether to request delivery
                receipt from the recipient. For Commands that request delivery
                receipt, the Command state transitions to 'delivered' once the
                server has received a delivery receipt from the device. The
                default value is `true`.

        Returns:
            Created51: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Commands')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Command')
                        .value(command))
            .form_param(Parameter()
                        .key('Sim')
                        .value(sim))
            .form_param(Parameter()
                        .key('CallbackMethod')
                        .value(callback_method))
            .form_param(Parameter()
                        .key('CallbackUrl')
                        .value(callback_url))
            .form_param(Parameter()
                        .key('CommandMode')
                        .value(command_mode))
            .form_param(Parameter()
                        .key('IncludeSid')
                        .value(include_sid))
            .form_param(Parameter()
                        .key('DeliveryReceiptRequested')
                        .value(delivery_receipt_requested))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created51.from_dictionary)
        ).execute()
