# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_67 import OK67
from twilioapiexplorer.models.ok_68 import OK68


class EventsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(EventsController, self).__init__(config)

    def list_event(self,
                   end_date,
                   event_type,
                   minutes,
                   reservation_sid,
                   start_date,
                   task_queue_sid,
                   task_sid,
                   worker_sid,
                   workflow_sid,
                   task_channel,
                   sid,
                   page_size,
                   accept,
                   workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Events.

        Args:
            end_date (str): Only include Events that occurred on or before
                this date, specified in GMT as an [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
            event_type (str): The type of Events to read. Returns only Events
                of the type specified.
            minutes (int): The period of events to read in minutes. Returns
                only Events that occurred since this many minutes in the past.
                The default is `15` minutes. Task Attributes for Events
                occuring more 43,200 minutes ago will be redacted.
            reservation_sid (str): The SID of the Reservation with the Events
                to read. Returns only Events that pertain to the specified
                Reservation.
            start_date (str): Only include Events from on or after this date
                and time, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format. Task
                Attributes for Events older than 30 days will be redacted.
            task_queue_sid (str): The SID of the TaskQueue with the Events to
                read. Returns only the Events that pertain to the specified
                TaskQueue.
            task_sid (str): The SID of the Task with the Events to read.
                Returns only the Events that pertain to the specified Task.
            worker_sid (str): The SID of the Worker with the Events to read.
                Returns only the Events that pertain to the specified Worker.
            workflow_sid (str): The SID of the Workflow with the Events to
                read. Returns only the Events that pertain to the specified
                Workflow.
            task_channel (str): The TaskChannel with the Events to read.
                Returns only the Events that pertain to the specified
                TaskChannel.
            sid (str): The SID of the Event resource to read.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK67: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Events')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('EventType')
                         .value(event_type))
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('ReservationSid')
                         .value(reservation_sid))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('TaskQueueSid')
                         .value(task_queue_sid))
            .query_param(Parameter()
                         .key('TaskSid')
                         .value(task_sid))
            .query_param(Parameter()
                         .key('WorkerSid')
                         .value(worker_sid))
            .query_param(Parameter()
                         .key('WorkflowSid')
                         .value(workflow_sid))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .query_param(Parameter()
                         .key('Sid')
                         .value(sid))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK67.from_dictionary)
        ).execute()

    def fetch_event(self,
                    accept,
                    workspace_sid,
                    sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Events/{Sid}.

        Args:
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK68: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Events/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK68.from_dictionary)
        ).execute()
