# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_77 import Created77
from twilioapiexplorer.models.ok_285 import OK285
from twilioapiexplorer.models.ok_286 import OK286


class ChallengesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ChallengesController, self).__init__(config)

    def create_challenge(self,
                         service_sid,
                         identity,
                         accept,
                         factor_sid,
                         expiration_date,
                         details_message,
                         auth_payload):
        """Does a POST request to /v2/Services/{ServiceSid}/Entities/{Identity}/Challenges.

        Create a new Challenge for the Factor

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Challenge. This identifier should be immutable,
                not PII, length between 8 and 64 characters, and generated by
                your external system, such as your user's UUID, GUID, or SID.
                It can only contain dash (-) separated alphanumeric characters.
            accept (str): The request header parameter.
            factor_sid (str): (Required) The unique SID identifier of the
                Factor.
            expiration_date (str): The date-time when this Challenge expires,
                given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
                format. The default value is five (5) minutes after Challenge
                creation. The max value is sixty (60) minutes after creation.
            details_message (str): Shown to the user when the push
                notification arrives. Required when `factor_type` is `push`.
                Can be up to 256 characters in length
            auth_payload (str): Optional payload used to verify the Challenge
                upon creation. Only used with a Factor of type `totp` to carry
                the TOTP code that needs to be verified. For `TOTP` this value
                must be between 3 and 8 characters long.

        Returns:
            Created77: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FactorSid')
                        .value(factor_sid))
            .form_param(Parameter()
                        .key('ExpirationDate')
                        .value(expiration_date))
            .form_param(Parameter()
                        .key('Details.Message')
                        .value(details_message))
            .form_param(Parameter()
                        .key('AuthPayload')
                        .value(auth_payload))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created77.from_dictionary)
        ).execute()

    def list_challenge(self,
                       factor_sid,
                       status,
                       order,
                       page_size,
                       service_sid,
                       identity,
                       accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Entities/{Identity}/Challenges.

        Retrieve a list of all Challenges for a Factor.

        Args:
            factor_sid (str): The unique SID identifier of the Factor.
            status (str): The Status of the Challenges to fetch. One of
                `pending`, `expired`, `approved` or `denied`.
            order (str): The desired sort order of the Challenges list. One of
                `asc` or `desc` for ascending and descending respectively.
                Defaults to `asc`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Challenge. This identifier should be immutable,
                not PII, length between 8 and 64 characters, and generated by
                your external system, such as your user's UUID, GUID, or SID.
                It can only contain dash (-) separated alphanumeric characters.
            accept (str): The request header parameter.

        Returns:
            OK285: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FactorSid')
                         .value(factor_sid))
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('Order')
                         .value(order))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK285.from_dictionary)
        ).execute()

    def fetch_challenge(self,
                        service_sid,
                        identity,
                        sid,
                        accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}.

        Fetch a specific Challenge.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Challenges. This identifier should be immutable,
                not PII, length between 8 and 64 characters, and generated by
                your external system, such as your user's UUID, GUID, or SID.
                It can only contain dash (-) separated alphanumeric characters.
            sid (str): (Required) A 34 character string that uniquely
                identifies this Challenge.
            accept (str): The request header parameter.

        Returns:
            OK286: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK286.from_dictionary)
        ).execute()

    def update_challenge(self,
                         service_sid,
                         identity,
                         sid,
                         accept,
                         auth_payload):
        """Does a POST request to /v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}.

        Verify a specific Challenge.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Challenge. This identifier should be immutable,
                not PII, length between 8 and 64 characters, and generated by
                your external system, such as your user's UUID, GUID, or SID.
                It can only contain dash (-) separated alphanumeric characters.
            sid (str): (Required) A 34 character string that uniquely
                identifies this Challenge.
            accept (str): The request header parameter.
            auth_payload (str): The optional payload needed to verify the
                Challenge. E.g., a TOTP would use the numeric code. For `TOTP`
                this value must be between 3 and 8 characters long. For `Push`
                this value can be up to 5456 characters in length

        Returns:
            OK286: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('AuthPayload')
                        .value(auth_payload))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK286.from_dictionary)
        ).execute()
