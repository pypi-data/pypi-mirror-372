# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_345 import OK345
from twilioapiexplorer.models.created_92 import Created92
from twilioapiexplorer.models.ok_334 import OK334
from twilioapiexplorer.models.ok_348 import OK348
from twilioapiexplorer.models.ok_349 import OK349
from twilioapiexplorer.models.ok_350 import OK350


class FunctionsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(FunctionsController, self).__init__(config)

    def list_function(self,
                      page_size,
                      service_sid,
                      accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Functions.

        Retrieve a list of all Functions.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the Service to read the
                Function resources from.
            accept (str): The request header parameter.

        Returns:
            OK345: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Functions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK345.from_dictionary)
        ).execute()

    def create_function(self,
                        service_sid,
                        accept,
                        friendly_name):
        """Does a POST request to /v1/Services/{ServiceSid}/Functions.

        Create a new Function resource.

        Args:
            service_sid (str): (Required) The SID of the Service to create the
                Function resource under.
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the Function resource. It can be a maximum
                of 255 characters.

        Returns:
            Created92: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Functions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created92.from_dictionary)
        ).execute()

    def fetch_function(self,
                       service_sid,
                       sid,
                       accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Functions/{Sid}.

        Retrieve a specific Function resource.

        Args:
            service_sid (str): (Required) The SID of the Service to fetch the
                Function resource from.
            sid (str): (Required) The SID of the Function resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK334: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Functions/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK334.from_dictionary)
        ).execute()

    def delete_function(self,
                        service_sid,
                        sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Functions/{Sid}.

        Delete a Function resource.

        Args:
            service_sid (str): (Required) The SID of the Service to delete the
                Function resource from.
            sid (str): (Required) The SID of the Function resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Functions/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_function(self,
                        service_sid,
                        sid,
                        accept,
                        friendly_name):
        """Does a POST request to /v1/Services/{ServiceSid}/Functions/{Sid}.

        Update a specific Function resource.

        Args:
            service_sid (str): (Required) The SID of the Service to update the
                Function resource from.
            sid (str): (Required) The SID of the Function resource to update.
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the Function resource. It can be a maximum
                of 255 characters.

        Returns:
            OK334: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Functions/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK334.from_dictionary)
        ).execute()

    def list_function_version(self,
                              page_size,
                              service_sid,
                              function_sid,
                              accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions.

        Retrieve a list of all Function Version resources.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the Service to read the
                Function Version resources from.
            function_sid (str): (Required) The SID of the function that is the
                parent of the Function Version resources to read.
            accept (str): The request header parameter.

        Returns:
            OK348: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('FunctionSid')
                            .value(function_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK348.from_dictionary)
        ).execute()

    def fetch_function_version(self,
                               service_sid,
                               function_sid,
                               sid,
                               accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}.

        Retrieve a specific Function Version resource.

        Args:
            service_sid (str): (Required) The SID of the Service to fetch the
                Function Version resource from.
            function_sid (str): (Required) The SID of the function that is the
                parent of the Function Version resource to fetch.
            sid (str): (Required) The SID of the Function Version resource to
                fetch.
            accept (str): The request header parameter.

        Returns:
            OK349: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('FunctionSid')
                            .value(function_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK349.from_dictionary)
        ).execute()

    def fetch_function_version_content(self,
                                       service_sid,
                                       function_sid,
                                       sid,
                                       accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}/Content.

        Retrieve a the content of a specific Function Version resource.

        Args:
            service_sid (str): (Required) The SID of the Service to fetch the
                Function Version content from.
            function_sid (str): (Required) The SID of the Function that is the
                parent of the Function Version content to fetch.
            sid (str): (Required) The SID of the Function Version content to
                fetch.
            accept (str): The request header parameter.

        Returns:
            OK350: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Functions/{FunctionSid}/Versions/{Sid}/Content')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('FunctionSid')
                            .value(function_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK350.from_dictionary)
        ).execute()
