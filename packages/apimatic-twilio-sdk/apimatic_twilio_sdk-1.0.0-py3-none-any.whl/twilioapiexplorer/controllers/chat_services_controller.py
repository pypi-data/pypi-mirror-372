# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_110 import OK110
from twilioapiexplorer.models.created_30 import Created30
from twilioapiexplorer.models.ok_112 import OK112


class ChatServicesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ChatServicesController, self).__init__(config)

    def fetch_service(self,
                      accept,
                      sid):
        """Does a GET request to /Services/{Sid}.

        Args:
            accept (str): The request header parameter.
            sid (str): The request template parameter.

        Returns:
            OK110: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK110.from_dictionary)
        ).execute()

    def delete_service(self,
                       sid):
        """Does a DELETE request to /Services/{Sid}.

        Args:
            sid (str): (Required) The SID of the Service resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_service(self,
                       sid,
                       accept,
                       friendly_name,
                       default_service_role_sid,
                       default_channel_role_sid,
                       default_channel_creator_role_sid,
                       read_status_enabled,
                       reachability_enabled,
                       typing_indicator_timeout,
                       consumption_report_interval,
                       notifications_new_message_enabled,
                       notifications_new_message_template,
                       notifications_new_message_sound,
                       notifications_new_message_badge_count_enabled,
                       notifications_added_to_channel_enabled,
                       notifications_added_to_channel_template,
                       notifications_added_to_channel_sound,
                       notifications_removed_from_channel_enabled,
                       notifications_removed_from_channel_template,
                       notifications_removed_from_channel_sound,
                       notifications_invited_to_channel_enabled,
                       notifications_invited_to_channel_template,
                       notifications_invited_to_channel_sound,
                       pre_webhook_url,
                       post_webhook_url,
                       webhook_method,
                       webhook_filters,
                       limits_channel_members,
                       limits_user_channels,
                       media_compatibility_message,
                       pre_webhook_retry_count,
                       post_webhook_retry_count,
                       notifications_log_enabled):
        """Does a POST request to /Services/{Sid}.

        Args:
            sid (str): (Required) The SID of the Service resource to update.
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the resource.
            default_service_role_sid (str): The service role assigned to users
                when they are added to the service. See the [Role
                resource](https://www.twilio.com/docs/chat/rest/role-resource)
                for more info about roles.
            default_channel_role_sid (str): The channel role assigned to users
                when they are added to a channel. See the [Role
                resource](https://www.twilio.com/docs/chat/rest/role-resource)
                for more info about roles.
            default_channel_creator_role_sid (str): The channel role assigned
                to a channel creator when they join a new channel. See the
                [Role
                resource](https://www.twilio.com/docs/chat/rest/role-resource)
                for more info about roles.
            read_status_enabled (bool): Whether to enable the [Message
                Consumption
                Horizon](https://www.twilio.com/docs/chat/consumption-horizon)
                feature. The default is `true`.
            reachability_enabled (bool): Whether to enable the [Reachability
                Indicator](https://www.twilio.com/docs/chat/reachability-indica
                tor) for this Service instance. The default is `false`.
            typing_indicator_timeout (int): How long in seconds after a
                `started typing` event until clients should assume that user
                is no longer typing, even if no `ended typing` message was
                received.  The default is 5 seconds.
            consumption_report_interval (int): DEPRECATED. The interval in
                seconds between consumption reports submission batches from
                client endpoints.
            notifications_new_message_enabled (bool): Whether to send a
                notification when a new message is added to a channel. The
                default is `false`.
            notifications_new_message_template (str): The template to use to
                create the notification text displayed when a new message is
                added to a channel and `notifications.new_message.enabled` is
                `true`.
            notifications_new_message_sound (str): The name of the sound to
                play when a new message is added to a channel and
                `notifications.new_message.enabled` is `true`.
            notifications_new_message_badge_count_enabled (bool): Whether the
                new message badge is enabled. The default is `false`.
            notifications_added_to_channel_enabled (bool): Whether to send a
                notification when a member is added to a channel. The default
                is `false`.
            notifications_added_to_channel_template (str): The template to use
                to create the notification text displayed when a member is
                added to a channel and
                `notifications.added_to_channel.enabled` is `true`.
            notifications_added_to_channel_sound (str): The name of the sound
                to play when a member is added to a channel and
                `notifications.added_to_channel.enabled` is `true`.
            notifications_removed_from_channel_enabled (bool): Whether to send
                a notification to a user when they are removed from a channel.
                The default is `false`.
            notifications_removed_from_channel_template (str): The template to
                use to create the notification text displayed to a user when
                they are removed from a channel and
                `notifications.removed_from_channel.enabled` is `true`.
            notifications_removed_from_channel_sound (str): The name of the
                sound to play to a user when they are removed from a channel
                and `notifications.removed_from_channel.enabled` is `true`.
            notifications_invited_to_channel_enabled (bool): Whether to send a
                notification when a user is invited to a channel. The default
                is `false`.
            notifications_invited_to_channel_template (str): The template to
                use to create the notification text displayed when a user is
                invited to a channel and
                `notifications.invited_to_channel.enabled` is `true`.
            notifications_invited_to_channel_sound (str): The name of the
                sound to play when a user is invited to a channel and
                `notifications.invited_to_channel.enabled` is `true`.
            pre_webhook_url (str): The URL for pre-event webhooks, which are
                called by using the `webhook_method`. See [Webhook
                Events](https://www.twilio.com/docs/chat/webhook-events) for
                more details.
            post_webhook_url (str): The URL for post-event webhooks, which are
                called by using the `webhook_method`. See [Webhook
                Events](https://www.twilio.com/docs/chat/webhook-events) for
                more details.
            webhook_method (str): The HTTP method to use for calls to the
                `pre_webhook_url` and `post_webhook_url` webhooks.  Can be:
                `POST` or `GET` and the default is `POST`. See [Webhook
                Events](https://www.twilio.com/docs/chat/webhook-events) for
                more details.
            webhook_filters (str): The list of webhook events that are enabled
                for this Service instance. See [Webhook
                Events](https://www.twilio.com/docs/chat/webhook-events) for
                more details.
            limits_channel_members (int): The maximum number of Members that
                can be added to Channels within this Service. Can be up to
                1,000.
            limits_user_channels (int): The maximum number of Channels Users
                can be a Member of within this Service. Can be up to 1,000.
            media_compatibility_message (str): The message to send when a
                media message has no text. Can be used as placeholder message.
            pre_webhook_retry_count (int): The number of times to retry a call
                to the `pre_webhook_url` if the request times out (after 5
                seconds) or it receives a 429, 503, or 504 HTTP response.
                Default retry count is 0 times, which means the call won't be
                retried.
            post_webhook_retry_count (int): The number of times to retry a
                call to the `post_webhook_url` if the request times out (after
                5 seconds) or it receives a 429, 503, or 504 HTTP response.
                The default is 0, which means the call won't be retried.
            notifications_log_enabled (bool): Whether to log notifications.
                The default is `false`.

        Returns:
            OK110: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('DefaultServiceRoleSid')
                        .value(default_service_role_sid))
            .form_param(Parameter()
                        .key('DefaultChannelRoleSid')
                        .value(default_channel_role_sid))
            .form_param(Parameter()
                        .key('DefaultChannelCreatorRoleSid')
                        .value(default_channel_creator_role_sid))
            .form_param(Parameter()
                        .key('ReadStatusEnabled')
                        .value(read_status_enabled))
            .form_param(Parameter()
                        .key('ReachabilityEnabled')
                        .value(reachability_enabled))
            .form_param(Parameter()
                        .key('TypingIndicatorTimeout')
                        .value(typing_indicator_timeout))
            .form_param(Parameter()
                        .key('ConsumptionReportInterval')
                        .value(consumption_report_interval))
            .form_param(Parameter()
                        .key('Notifications.NewMessage.Enabled')
                        .value(notifications_new_message_enabled))
            .form_param(Parameter()
                        .key('Notifications.NewMessage.Template')
                        .value(notifications_new_message_template))
            .form_param(Parameter()
                        .key('Notifications.NewMessage.Sound')
                        .value(notifications_new_message_sound))
            .form_param(Parameter()
                        .key('Notifications.NewMessage.BadgeCountEnabled')
                        .value(notifications_new_message_badge_count_enabled))
            .form_param(Parameter()
                        .key('Notifications.AddedToChannel.Enabled')
                        .value(notifications_added_to_channel_enabled))
            .form_param(Parameter()
                        .key('Notifications.AddedToChannel.Template')
                        .value(notifications_added_to_channel_template))
            .form_param(Parameter()
                        .key('Notifications.AddedToChannel.Sound')
                        .value(notifications_added_to_channel_sound))
            .form_param(Parameter()
                        .key('Notifications.RemovedFromChannel.Enabled')
                        .value(notifications_removed_from_channel_enabled))
            .form_param(Parameter()
                        .key('Notifications.RemovedFromChannel.Template')
                        .value(notifications_removed_from_channel_template))
            .form_param(Parameter()
                        .key('Notifications.RemovedFromChannel.Sound')
                        .value(notifications_removed_from_channel_sound))
            .form_param(Parameter()
                        .key('Notifications.InvitedToChannel.Enabled')
                        .value(notifications_invited_to_channel_enabled))
            .form_param(Parameter()
                        .key('Notifications.InvitedToChannel.Template')
                        .value(notifications_invited_to_channel_template))
            .form_param(Parameter()
                        .key('Notifications.InvitedToChannel.Sound')
                        .value(notifications_invited_to_channel_sound))
            .form_param(Parameter()
                        .key('PreWebhookUrl')
                        .value(pre_webhook_url))
            .form_param(Parameter()
                        .key('PostWebhookUrl')
                        .value(post_webhook_url))
            .form_param(Parameter()
                        .key('WebhookMethod')
                        .value(webhook_method))
            .form_param(Parameter()
                        .key('WebhookFilters')
                        .value(webhook_filters))
            .form_param(Parameter()
                        .key('Limits.ChannelMembers')
                        .value(limits_channel_members))
            .form_param(Parameter()
                        .key('Limits.UserChannels')
                        .value(limits_user_channels))
            .form_param(Parameter()
                        .key('Media.CompatibilityMessage')
                        .value(media_compatibility_message))
            .form_param(Parameter()
                        .key('PreWebhookRetryCount')
                        .value(pre_webhook_retry_count))
            .form_param(Parameter()
                        .key('PostWebhookRetryCount')
                        .value(post_webhook_retry_count))
            .form_param(Parameter()
                        .key('Notifications.LogEnabled')
                        .value(notifications_log_enabled))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK110.from_dictionary)
        ).execute()

    def create_service(self,
                       accept,
                       friendly_name):
        """Does a POST request to /v2/Services.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the new resource.

        Returns:
            Created30: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created30.from_dictionary)
        ).execute()

    def list_service(self,
                     page_size,
                     accept):
        """Does a GET request to /v2/Services.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK112: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK112.from_dictionary)
        ).execute()
