# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_216 import OK216
from twilioapiexplorer.models.created_58 import Created58
from twilioapiexplorer.models.ok_217 import OK217
from twilioapiexplorer.models.ok_219 import OK219


class ExecutionsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ExecutionsController, self).__init__(config)

    def list_execution(self,
                       date_created_from,
                       date_created_to,
                       page_size,
                       accept):
        """Does a GET request to /Executions.

        Retrieve a list of all Executions for the Flow.

        Args:
            date_created_from (str): Only show Execution resources starting on
                or after this [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time, given
                as `YYYY-MM-DDThh:mm:ss-hh:mm`.
            date_created_to (str): Only show Execution resources starting
                before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
                date-time, given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK216: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_16)
            .path('/Executions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('DateCreatedFrom')
                         .value(date_created_from))
            .query_param(Parameter()
                         .key('DateCreatedTo')
                         .value(date_created_to))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK216.from_dictionary)
        ).execute()

    def create_execution(self,
                         accept,
                         to,
                         mfrom):
        """Does a POST request to /Executions.

        Triggers a new Execution for the Flow

        Args:
            accept (str): The request header parameter.
            to (str): (Required) The Contact phone number to start a Studio
                Flow Execution, available as variable
                `{{contact.channel.address}}`.
            mfrom (str): (Required) The Twilio phone number to send messages
                or initiate calls from during the Flow's Execution. Available
                as variable `{{flow.channel.address}}`. For SMS, this can also
                be a Messaging Service SID.

        Returns:
            Created58: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_16)
            .path('/Executions')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('To')
                        .value(to))
            .form_param(Parameter()
                        .key('From')
                        .value(mfrom))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created58.from_dictionary)
        ).execute()

    def fetch_execution(self,
                        flow_sid,
                        sid,
                        accept):
        """Does a GET request to /v2/Flows/{FlowSid}/Executions/{Sid}.

        Retrieve an Execution

        Args:
            flow_sid (str): (Required) The SID of the Flow with the Execution
                resource to fetch
            sid (str): (Required) The SID of the Execution resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK217: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/{FlowSid}/Executions/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('FlowSid')
                            .value(flow_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK217.from_dictionary)
        ).execute()

    def delete_execution(self,
                         flow_sid,
                         sid):
        """Does a DELETE request to /v2/Flows/{FlowSid}/Executions/{Sid}.

        Delete the Execution and all Steps relating to it.

        Args:
            flow_sid (str): (Required) The SID of the Flow with the Execution
                resources to delete.
            sid (str): (Required) The SID of the Execution resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/{FlowSid}/Executions/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('FlowSid')
                            .value(flow_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_execution(self,
                         flow_sid,
                         sid,
                         accept,
                         status):
        """Does a POST request to /v2/Flows/{FlowSid}/Executions/{Sid}.

        Update the status of an Execution to `ended`.

        Args:
            flow_sid (str): (Required) The SID of the Flow with the Execution
                resources to update.
            sid (str): (Required) The SID of the Execution resource to update.
            accept (str): The request header parameter.
            status (str): (Required) The status of the Execution. Can only be
                `ended`.

        Returns:
            OK217: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/{FlowSid}/Executions/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('FlowSid')
                            .value(flow_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK217.from_dictionary)
        ).execute()

    def fetch_execution_context(self,
                                flow_sid,
                                execution_sid,
                                accept):
        """Does a GET request to /v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Context.

        Retrieve the most recent context for an Execution.

        Args:
            flow_sid (str): (Required) The SID of the Flow with the Execution
                context to fetch.
            execution_sid (str): (Required) The SID of the Execution context
                to fetch.
            accept (str): The request header parameter.

        Returns:
            OK219: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Context')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('FlowSid')
                            .value(flow_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ExecutionSid')
                            .value(execution_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK219.from_dictionary)
        ).execute()
