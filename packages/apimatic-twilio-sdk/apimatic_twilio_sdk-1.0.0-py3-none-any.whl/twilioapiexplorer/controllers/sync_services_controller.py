# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_157 import OK157
from twilioapiexplorer.models.created_44 import Created44
from twilioapiexplorer.models.ok_159 import OK159


class SyncServicesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(SyncServicesController, self).__init__(config)

    def fetch_service(self,
                      sid,
                      accept):
        """Does a GET request to /v1/Services/{Sid}.

        Args:
            sid (str): (Required) The SID of the Service resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK157: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK157.from_dictionary)
        ).execute()

    def delete_service(self,
                       sid):
        """Does a DELETE request to /v1/Services/{Sid}.

        Args:
            sid (str): (Required) The SID of the Service resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_service(self,
                       sid,
                       accept,
                       webhook_url,
                       friendly_name,
                       reachability_webhooks_enabled,
                       acl_enabled,
                       reachability_debouncing_enabled,
                       reachability_debouncing_window,
                       webhooks_from_rest_enabled):
        """Does a POST request to /v1/Services/{Sid}.

        Args:
            sid (str): (Required) The SID of the Service resource to update.
            accept (str): The request header parameter.
            webhook_url (str): The URL we should call when Sync objects are
                manipulated.
            friendly_name (str): A string that you assign to describe the
                resource.
            reachability_webhooks_enabled (bool): Whether the service instance
                should call `webhook_url` when client endpoints connect to
                Sync. The default is `false`.
            acl_enabled (bool): Whether token identities in the Service must
                be granted access to Sync objects by using the
                [Permissions](https://www.twilio.com/docs/sync/api/sync-permiss
                ions) resource.
            reachability_debouncing_enabled (bool): Whether every
                `endpoint_disconnected` event should occur after a
                configurable delay. The default is `false`, where the
                `endpoint_disconnected` event occurs immediately after
                disconnection. When `true`, intervening reconnections can
                prevent the `endpoint_disconnected` event.
            reachability_debouncing_window (int): The reachability event delay
                in milliseconds if `reachability_debouncing_enabled` = `true`.
                Must be between 1,000 and 30,000 and defaults to 5,000. This
                is the number of milliseconds after the last running client
                disconnects, and a Sync identity is declared offline, before
                the webhook is called if all endpoints remain offline. A
                reconnection from the same identity by any endpoint during
                this interval prevents the webhook from being called.
            webhooks_from_rest_enabled (bool): Whether the Service instance
                should call `webhook_url` when the REST API is used to update
                Sync objects. The default is `false`.

        Returns:
            OK157: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('WebhookUrl')
                        .value(webhook_url))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('ReachabilityWebhooksEnabled')
                        .value(reachability_webhooks_enabled))
            .form_param(Parameter()
                        .key('AclEnabled')
                        .value(acl_enabled))
            .form_param(Parameter()
                        .key('ReachabilityDebouncingEnabled')
                        .value(reachability_debouncing_enabled))
            .form_param(Parameter()
                        .key('ReachabilityDebouncingWindow')
                        .value(reachability_debouncing_window))
            .form_param(Parameter()
                        .key('WebhooksFromRestEnabled')
                        .value(webhooks_from_rest_enabled))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK157.from_dictionary)
        ).execute()

    def create_service(self,
                       accept,
                       friendly_name,
                       webhook_url,
                       reachability_webhooks_enabled,
                       acl_enabled,
                       reachability_debouncing_enabled,
                       reachability_debouncing_window,
                       webhooks_from_rest_enabled):
        """Does a POST request to /Services.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): A string that you assign to describe the
                resource.
            webhook_url (str): The URL we should call when Sync objects are
                manipulated.
            reachability_webhooks_enabled (bool): Whether the service instance
                should call `webhook_url` when client endpoints connect to
                Sync. The default is `false`.
            acl_enabled (bool): Whether token identities in the Service must
                be granted access to Sync objects by using the
                [Permissions](https://www.twilio.com/docs/sync/api/sync-permiss
                ions) resource.
            reachability_debouncing_enabled (bool): Whether every
                `endpoint_disconnected` event should occur after a
                configurable delay. The default is `false`, where the
                `endpoint_disconnected` event occurs immediately after
                disconnection. When `true`, intervening reconnections can
                prevent the `endpoint_disconnected` event.
            reachability_debouncing_window (int): The reachability event delay
                in milliseconds if `reachability_debouncing_enabled` = `true`.
                Must be between 1,000 and 30,000 and defaults to 5,000. This
                is the number of milliseconds after the last running client
                disconnects, and a Sync identity is declared offline, before
                the `webhook_url` is called if all endpoints remain offline. A
                reconnection from the same identity by any endpoint during
                this interval prevents the call to `webhook_url`.
            webhooks_from_rest_enabled (bool): Whether the Service instance
                should call `webhook_url` when the REST API is used to update
                Sync objects. The default is `false`.

        Returns:
            Created44: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('WebhookUrl')
                        .value(webhook_url))
            .form_param(Parameter()
                        .key('ReachabilityWebhooksEnabled')
                        .value(reachability_webhooks_enabled))
            .form_param(Parameter()
                        .key('AclEnabled')
                        .value(acl_enabled))
            .form_param(Parameter()
                        .key('ReachabilityDebouncingEnabled')
                        .value(reachability_debouncing_enabled))
            .form_param(Parameter()
                        .key('ReachabilityDebouncingWindow')
                        .value(reachability_debouncing_window))
            .form_param(Parameter()
                        .key('WebhooksFromRestEnabled')
                        .value(webhooks_from_rest_enabled))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created44.from_dictionary)
        ).execute()

    def list_service(self,
                     page_size,
                     accept):
        """Does a GET request to /Services.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK159: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK159.from_dictionary)
        ).execute()
