# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_16 import OK16
from twilioapiexplorer.models.ok_17 import OK17
from twilioapiexplorer.models.ok_18 import OK18
from twilioapiexplorer.models.ok_19 import OK19
from twilioapiexplorer.models.ok_198 import OK198
from twilioapiexplorer.models.ok_199 import OK199
from twilioapiexplorer.models.ok_197 import OK197
from twilioapiexplorer.models.created_55 import Created55
from twilioapiexplorer.models.ok_201 import OK201
from twilioapiexplorer.models.ok_202 import OK202
from twilioapiexplorer.models.ok_203 import OK203
from twilioapiexplorer.models.accepted_1 import Accepted1


class RecordingsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(RecordingsController, self).__init__(config)

    def fetch_recording(self,
                        include_soft_deleted,
                        account_sid,
                        accept,
                        sid):
        """Does a GET request to /{AccountSid}/Recordings/{Sid}.json.

        Args:
            include_soft_deleted (bool): A boolean parameter indicating
                whether to retrieve soft deleted recordings or not. Recordings
                metadata are kept after deletion for a retention period of 40
                days.
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the Recording resource to fetch.
            accept (str): The request header parameter.
            sid (str): The request template parameter.

        Returns:
            OK16: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/{AccountSid}/Recordings/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('IncludeSoftDeleted')
                         .value(include_soft_deleted))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK16.from_dictionary)
        ).execute()

    def delete_recording(self,
                         account_sid,
                         sid):
        """Does a DELETE request to /{AccountSid}/Recordings/{Sid}.json.

        Args:
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the Recording resources to delete.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/{AccountSid}/Recordings/{Sid}.json')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_recording_add_on_result(self,
                                     page_size,
                                     account_sid,
                                     reference_sid,
                                     accept):
        """Does a GET request to /{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the Recording AddOnResult resources to read.
            reference_sid (str): (Required) The SID of the recording to which
                the result to read belongs.
            accept (str): The request header parameter.

        Returns:
            OK17: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ReferenceSid')
                            .value(reference_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK17.from_dictionary)
        ).execute()

    def list_recording_transcription(self,
                                     page_size,
                                     account_sid,
                                     recording_sid,
                                     accept):
        """Does a GET request to /{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the Transcription resources to read.
            recording_sid (str): (Required) The SID of the
                [Recording](https://www.twilio.com/docs/voice/api/recording)
                that created the transcriptions to read.
            accept (str): The request header parameter.

        Returns:
            OK18: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('RecordingSid')
                            .value(recording_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK18.from_dictionary)
        ).execute()

    def fetch_recording_transcription(self,
                                      account_sid,
                                      recording_sid,
                                      accept,
                                      sid):
        """Does a GET request to /{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json.

        Args:
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the Transcription resource to fetch.
            recording_sid (str): (Required) The SID of the
                [Recording](https://www.twilio.com/docs/voice/api/recording)
                that created the transcription to fetch.
            accept (str): The request header parameter.
            sid (str): The request template parameter.

        Returns:
            OK19: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('RecordingSid')
                            .value(recording_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK19.from_dictionary)
        ).execute()

    def delete_recording_transcription(self,
                                       account_sid,
                                       recording_sid,
                                       sid):
        """Does a DELETE request to /{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json.

        Args:
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the Transcription resources to delete.
            recording_sid (str): (Required) The SID of the
                [Recording](https://www.twilio.com/docs/voice/api/recording)
                that created the transcription to delete.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('RecordingSid')
                            .value(recording_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_recording_1(self,
                          sid,
                          accept):
        """Does a GET request to /v1/Recordings/{Sid}.

        Returns a single Recording resource identified by a Recording SID.

        Args:
            sid (str): (Required) The SID of the Recording resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK198: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Recordings/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK198.from_dictionary)
        ).execute()

    def delete_recording_1(self,
                           sid):
        """Does a DELETE request to /v1/Recordings/{Sid}.

        Delete a Recording resource identified by a Recording SID.

        Args:
            sid (str): (Required) The SID of the Recording resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Recordings/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_recording(self,
                       status,
                       source_sid,
                       grouping_sid,
                       date_created_after,
                       date_created_before,
                       media_type,
                       page_size,
                       accept):
        """Does a GET request to /v1/Recordings.

        List of all Track recordings.

        Args:
            status (str): Read only the recordings that have this status. Can
                be: `processing`, `completed`, or `deleted`.
            source_sid (str): Read only the recordings that have this
                `source_sid`.
            grouping_sid (str): Read only recordings with this `grouping_sid`,
                which may include a `participant_sid` and/or a `room_sid`.
            date_created_after (str): Read only recordings that started on or
                after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
                date-time with time zone.
            date_created_before (str): Read only recordings that started
                before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
                date-time with time zone, given as
                `YYYY-MM-DDThh:mm:ss+|-hh:mm` or `YYYY-MM-DDThh:mm:ssZ`.
            media_type (str): Read only recordings that have this media type.
                Can be either `audio` or `video`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK199: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Recordings')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('SourceSid')
                         .value(source_sid))
            .query_param(Parameter()
                         .key('GroupingSid')
                         .value(grouping_sid))
            .query_param(Parameter()
                         .key('DateCreatedAfter')
                         .value(date_created_after))
            .query_param(Parameter()
                         .key('DateCreatedBefore')
                         .value(date_created_before))
            .query_param(Parameter()
                         .key('MediaType')
                         .value(media_type))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK199.from_dictionary)
        ).execute()

    def fetch_recording_settings(self,
                                 accept):
        """Does a GET request to /v1/RecordingSettings/Default.

        Args:
            accept (str): The request header parameter.

        Returns:
            OK197: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/RecordingSettings/Default')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK197.from_dictionary)
        ).execute()

    def create_recording_settings(self,
                                  accept,
                                  friendly_name,
                                  aws_credentials_sid,
                                  encryption_key_sid,
                                  aws_s_3_url,
                                  aws_storage_enabled,
                                  encryption_enabled):
        """Does a POST request to /v1/RecordingSettings/Default.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the resource and be shown to users in the
                console
            aws_credentials_sid (str): The SID of the stored Credential
                resource.
            encryption_key_sid (str): The SID of the Public Key resource to
                use for encryption.
            aws_s_3_url (str): The URL of the AWS S3 bucket where the
                recordings should be stored. We only support DNS-compliant
                URLs like
                `https://documentation-example-twilio-bucket/recordings`,
                where `recordings` is the path in which you want the
                recordings to be stored. This URL accepts only URI-valid
                characters, as described in the <a
                href='https://tools.ietf.org/html/rfc3986#section-2'>RFC
                3986</a>.
            aws_storage_enabled (bool): Whether all recordings should be
                written to the `aws_s3_url`. When `false`, all recordings are
                stored in our cloud.
            encryption_enabled (bool): Whether all recordings should be stored
                in an encrypted form. The default is `false`.

        Returns:
            Created55: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/RecordingSettings/Default')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('AwsCredentialsSid')
                        .value(aws_credentials_sid))
            .form_param(Parameter()
                        .key('EncryptionKeySid')
                        .value(encryption_key_sid))
            .form_param(Parameter()
                        .key('AwsS3Url')
                        .value(aws_s_3_url))
            .form_param(Parameter()
                        .key('AwsStorageEnabled')
                        .value(aws_storage_enabled))
            .form_param(Parameter()
                        .key('EncryptionEnabled')
                        .value(encryption_enabled))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created55.from_dictionary)
        ).execute()

    def fetch_room_recording(self,
                             room_sid,
                             sid,
                             accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/Recordings/{Sid}.

        Args:
            room_sid (str): (Required) The SID of the Room resource with the
                recording to fetch.
            sid (str): (Required) The SID of the RoomRecording resource to
                fetch.
            accept (str): The request header parameter.

        Returns:
            OK201: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Recordings/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK201.from_dictionary)
        ).execute()

    def delete_room_recording(self,
                              room_sid,
                              sid):
        """Does a DELETE request to /v1/Rooms/{RoomSid}/Recordings/{Sid}.

        Args:
            room_sid (str): (Required) The SID of the room with the
                RoomRecording resource to delete.
            sid (str): (Required) The SID of the RoomRecording resource to
                delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Recordings/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_room_recording(self,
                            status,
                            source_sid,
                            date_created_after,
                            date_created_before,
                            page_size,
                            room_sid,
                            accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/Recordings.

        Args:
            status (str): Read only the recordings with this status. Can be:
                `processing`, `completed`, or `deleted`.
            source_sid (str): Read only the recordings that have this
                `source_sid`.
            date_created_after (str): Read only recordings that started on or
                after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
                datetime with time zone.
            date_created_before (str): Read only Recordings that started
                before this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
                datetime with time zone.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            room_sid (str): (Required) The SID of the room with the
                RoomRecording resources to read.
            accept (str): The request header parameter.

        Returns:
            OK202: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Recordings')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('SourceSid')
                         .value(source_sid))
            .query_param(Parameter()
                         .key('DateCreatedAfter')
                         .value(date_created_after))
            .query_param(Parameter()
                         .key('DateCreatedBefore')
                         .value(date_created_before))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK202.from_dictionary)
        ).execute()

    def fetch_room_recording_rule(self,
                                  room_sid,
                                  accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/RecordingRules.

        Returns a list of Recording Rules for the Room.

        Args:
            room_sid (str): (Required) The SID of the Room resource where the
                recording rules to fetch apply.
            accept (str): The request header parameter.

        Returns:
            OK203: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/RecordingRules')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK203.from_dictionary)
        ).execute()

    def update_room_recording_rule(self,
                                   room_sid,
                                   accept):
        """Does a POST request to /v1/Rooms/{RoomSid}/RecordingRules.

        Update the Recording Rules for the Room

        Args:
            room_sid (str): (Required) The SID of the Room resource where the
                recording rules to update apply.
            accept (str): The request header parameter.

        Returns:
            Accepted1: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/RecordingRules')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Accepted1.from_dictionary)
        ).execute()
