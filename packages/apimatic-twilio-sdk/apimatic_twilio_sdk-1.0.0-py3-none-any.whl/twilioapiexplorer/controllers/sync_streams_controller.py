# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_178 import OK178
from twilioapiexplorer.models.created_50 import Created50
from twilioapiexplorer.models.ok_180 import OK180


class SyncStreamsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(SyncStreamsController, self).__init__(config)

    def fetch_sync_stream(self,
                          service_sid,
                          sid,
                          accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Streams/{Sid}.

        Fetch a specific Stream.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Stream resource to fetch.
            sid (str): (Required) The SID of the Stream resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK178: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Streams/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK178.from_dictionary)
        ).execute()

    def delete_sync_stream(self,
                           service_sid,
                           sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Streams/{Sid}.

        Delete a specific Stream.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Stream resource to delete.
            sid (str): (Required) The SID of the Stream resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Streams/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_sync_stream(self,
                           service_sid,
                           sid,
                           accept,
                           ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Streams/{Sid}.

        Update a specific Stream.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Stream resource to update.
            sid (str): (Required) The SID of the Stream resource to update.
            accept (str): The request header parameter.
            ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Stream expires and is deleted
                (time-to-live).

        Returns:
            OK178: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Streams/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK178.from_dictionary)
        ).execute()

    def create_sync_stream(self,
                           service_sid,
                           accept,
                           unique_name,
                           ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Streams.

        Create a new Stream.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) to
                create the new Stream in.
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. This value must be unique within its
                Service and it can be up to 320 characters long. The
                `unique_name` value can be used as an alternative to the `sid`
                in the URL path to address the resource.
            ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Stream expires and is deleted
                (time-to-live).

        Returns:
            Created50: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Streams')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created50.from_dictionary)
        ).execute()

    def list_sync_stream(self,
                         page_size,
                         service_sid,
                         accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Streams.

        Retrieve a list of all Streams in a Service Instance.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Stream resources to read.
            accept (str): The request header parameter.

        Returns:
            OK180: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Streams')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK180.from_dictionary)
        ).execute()
