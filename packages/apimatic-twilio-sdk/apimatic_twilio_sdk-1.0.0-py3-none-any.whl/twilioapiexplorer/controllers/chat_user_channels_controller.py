# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_140 import OK140
from twilioapiexplorer.models.ok_141 import OK141


class ChatUserChannelsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ChatUserChannelsController, self).__init__(config)

    def list_user_channel(self,
                          page_size,
                          service_sid,
                          user_sid,
                          accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Users/{UserSid}/Channels.

        List all Channels for a given User.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to read the User Channel resources from.
            user_sid (str): (Required) The SID of the
                [User](https://www.twilio.com/docs/chat/rest/user-resource) to
                read the User Channel resources from. This value can be either
                the `sid` or the `identity` of the User resource.
            accept (str): The request header parameter.

        Returns:
            OK140: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users/{UserSid}/Channels')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('UserSid')
                            .value(user_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK140.from_dictionary)
        ).execute()

    def fetch_user_channel(self,
                           service_sid,
                           user_sid,
                           channel_sid,
                           accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to fetch the User Channel resource from.
            user_sid (str): (Required) The SID of the
                [User](https://www.twilio.com/docs/chat/rest/user-resource) to
                fetch the User Channel resource from. This value can be either
                the `sid` or the `identity` of the User resource.
            channel_sid (str): (Required) The SID of the
                [Channel](https://www.twilio.com/docs/chat/channels) that has
                the User Channel to fetch. This value can be either the `sid`
                or the `unique_name` of the Channel to fetch.
            accept (str): The request header parameter.

        Returns:
            OK141: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('UserSid')
                            .value(user_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ChannelSid')
                            .value(channel_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK141.from_dictionary)
        ).execute()

    def delete_user_channel(self,
                            service_sid,
                            user_sid,
                            channel_sid,
                            x_twilio_webhook_enabled):
        """Does a DELETE request to /v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}.

        Removes User from selected Channel.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/api/chat/rest/services)
                to read the resources from.
            user_sid (str): (Required) The SID of the
                [User](https://www.twilio.com/docs/api/chat/rest/users) to
                read the User Channel resources from.
            channel_sid (str): (Required) The SID of the
                [Channel](https://www.twilio.com/docs/api/chat/rest/channels)
                the resource belongs to.
            x_twilio_webhook_enabled (bool): The X-Twilio-Webhook-Enabled HTTP
                request header

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('UserSid')
                            .value(user_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ChannelSid')
                            .value(channel_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-Twilio-Webhook-Enabled')
                          .value(x_twilio_webhook_enabled))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_user_channel(self,
                            service_sid,
                            user_sid,
                            channel_sid,
                            accept,
                            notification_level,
                            last_consumed_message_index,
                            last_consumption_timestamp):
        """Does a POST request to /v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to update the User Channel resource in.
            user_sid (str): (Required) The SID of the
                [User](https://www.twilio.com/docs/chat/rest/user-resource) to
                update the User Channel resource from. This value can be
                either the `sid` or the `identity` of the User resource.
            channel_sid (str): (Required) The SID of the
                [Channel](https://www.twilio.com/docs/chat/channels) with the
                User Channel resource to update. This value can be the Channel
                resource's `sid` or `unique_name`.
            accept (str): The request header parameter.
            notification_level (str): The push notification level to assign to
                the User Channel. Can be: `default` or `muted`.
            last_consumed_message_index (int): The index of the last
                [Message](https://www.twilio.com/docs/chat/rest/message-resourc
                e) in the [Channel](https://www.twilio.com/docs/chat/channels)
                that the Member has read.
            last_consumption_timestamp (str): The [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp of the
                last
                [Message](https://www.twilio.com/docs/chat/rest/message-resourc
                e) read event for the Member within the
                [Channel](https://www.twilio.com/docs/chat/channels).

        Returns:
            OK141: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users/{UserSid}/Channels/{ChannelSid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('UserSid')
                            .value(user_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ChannelSid')
                            .value(channel_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('NotificationLevel')
                        .value(notification_level))
            .form_param(Parameter()
                        .key('LastConsumedMessageIndex')
                        .value(last_consumed_message_index))
            .form_param(Parameter()
                        .key('LastConsumptionTimestamp')
                        .value(last_consumption_timestamp))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK141.from_dictionary)
        ).execute()
