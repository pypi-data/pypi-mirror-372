# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_1 import Created1
from twilioapiexplorer.models.ok_1 import OK1
from twilioapiexplorer.models.ok_2 import OK2
from twilioapiexplorer.models.created_65 import Created65
from twilioapiexplorer.models.ok_246 import OK246
from twilioapiexplorer.models.ok_247 import OK247


class ShortcodesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ShortcodesController, self).__init__(config)

    def create_short_code(self,
                          service_sid,
                          accept,
                          short_code_sid):
        """Does a POST request to /Services/{ServiceSid}/ShortCodes.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to create the resource under.
            accept (str): The request header parameter.
            short_code_sid (str): (Required) The SID of the ShortCode resource
                being added to the Service.

        Returns:
            Created1: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/Services/{ServiceSid}/ShortCodes')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('ShortCodeSid')
                        .value(short_code_sid))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created1.from_dictionary)
        ).execute()

    def list_short_code(self,
                        page_size,
                        service_sid,
                        accept):
        """Does a GET request to /Services/{ServiceSid}/ShortCodes.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to read the resources from.
            accept (str): The request header parameter.

        Returns:
            OK1: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/Services/{ServiceSid}/ShortCodes')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK1.from_dictionary)
        ).execute()

    def fetch_short_code(self,
                         service_sid,
                         sid,
                         accept):
        """Does a GET request to /Services/{ServiceSid}/ShortCodes/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to fetch the resource from.
            sid (str): (Required) The SID of the ShortCode resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK2: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/Services/{ServiceSid}/ShortCodes/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK2.from_dictionary)
        ).execute()

    def delete_short_code(self,
                          service_sid,
                          sid):
        """Does a DELETE request to /Services/{ServiceSid}/ShortCodes/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to delete the resource from.
            sid (str): (Required) The SID of the ShortCode resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/Services/{ServiceSid}/ShortCodes/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def create_short_code(self,
                          service_sid,
                          accept,
                          sid):
        """Does a POST request to /Services/{ServiceSid}/ShortCodes.

        Add a Short Code to the Proxy Number Pool for the Service.

        Args:
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service)
                resource.
            accept (str): The request header parameter.
            sid (str): (Required) The SID of a Twilio
                [ShortCode](https://www.twilio.com/docs/sms/api/short-code)
                resource that represents the short code you would like to
                assign to your Proxy Service.

        Returns:
            Created65: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services/{ServiceSid}/ShortCodes')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Sid')
                        .value(sid))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created65.from_dictionary)
        ).execute()

    def list_short_code_1(self,
                          page_size,
                          service_sid,
                          accept):
        """Does a GET request to /Services/{ServiceSid}/ShortCodes.

        Retrieve a list of all Short Codes in the Proxy Number Pool for the
        Service. A maximum of 100 records will be returned per page.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service) to
                read the resources from.
            accept (str): The request header parameter.

        Returns:
            OK246: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services/{ServiceSid}/ShortCodes')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK246.from_dictionary)
        ).execute()

    def delete_short_code_1(self,
                            service_sid,
                            sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/ShortCodes/{Sid}.

        Delete a specific Short Code from a Service.

        Args:
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service)
                resource to delete the ShortCode resource from.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the ShortCode resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/ShortCodes/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_short_code_1(self,
                           service_sid,
                           sid,
                           accept):
        """Does a GET request to /v1/Services/{ServiceSid}/ShortCodes/{Sid}.

        Fetch a specific Short Code.

        Args:
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service) to
                fetch the resource from.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the ShortCode resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK247: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/ShortCodes/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK247.from_dictionary)
        ).execute()

    def update_short_code(self,
                          service_sid,
                          sid,
                          accept,
                          is_reserved):
        """Does a POST request to /v1/Services/{ServiceSid}/ShortCodes/{Sid}.

        Update a specific Short Code.

        Args:
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service) of
                the resource to update.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the ShortCode resource to update.
            accept (str): The request header parameter.
            is_reserved (bool): Whether the short code should be reserved and
                not be assigned to a participant using proxy pool logic. See
                [Reserved Phone
                Numbers](https://www.twilio.com/docs/proxy/reserved-phone-numbe
                rs) for more information.

        Returns:
            OK247: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/ShortCodes/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('IsReserved')
                        .value(is_reserved))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK247.from_dictionary)
        ).execute()
