# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_91 import OK91
from twilioapiexplorer.models.ok_92 import OK92
from twilioapiexplorer.models.ok_93 import OK93
from twilioapiexplorer.models.ok_94 import OK94
from twilioapiexplorer.models.created_24 import Created24
from twilioapiexplorer.models.ok_95 import OK95


class WorkflowsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(WorkflowsController, self).__init__(config)

    def fetch_workflow_cumulative_statistics(self,
                                             end_date,
                                             minutes,
                                             start_date,
                                             task_channel,
                                             split_by_wait_time,
                                             accept,
                                             workspace_sid,
                                             workflow_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/CumulativeStatistics.

        Args:
            end_date (str): Only include usage that occurred on or before this
                date, specified in GMT as an [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
            minutes (int): Only calculate statistics since this many minutes
                in the past. The default 15 minutes. This is helpful for
                displaying statistics for the last 15 minutes, 240 minutes (4
                hours), and 480 minutes (8 hours) to see trends.
            start_date (str): Only calculate statistics from this date and
                time and later, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            task_channel (str): Only calculate cumulative statistics on this
                TaskChannel. Can be the TaskChannel's SID or its
                `unique_name`, such as `voice`, `sms`, or `default`.
            split_by_wait_time (str): A comma separated list of values that
                describes the thresholds, in seconds, to calculate statistics
                on. For each threshold specified, the number of Tasks canceled
                and reservations accepted above and below the specified
                thresholds in seconds are computed. For example, `5,30` would
                show splits of Tasks that were canceled or accepted before and
                after 5 seconds and before and after 30 seconds. This can be
                used to show short abandoned Tasks or Tasks that failed to
                meet an SLA. TaskRouter will calculate statistics on up to
                10,000 Tasks for any given threshold.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            workflow_sid (str): The request template parameter.

        Returns:
            OK91: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/CumulativeStatistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .query_param(Parameter()
                         .key('SplitByWaitTime')
                         .value(split_by_wait_time))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('WorkflowSid')
                            .value(workflow_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK91.from_dictionary)
        ).execute()

    def fetch_workflow_real_time_statistics(self,
                                            task_channel,
                                            accept,
                                            workspace_sid,
                                            workflow_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/RealTimeStatistics.

        Args:
            task_channel (str): Only calculate real-time statistics on this
                TaskChannel. Can be the TaskChannel's SID or its
                `unique_name`, such as `voice`, `sms`, or `default`.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            workflow_sid (str): The request template parameter.

        Returns:
            OK92: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/RealTimeStatistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('WorkflowSid')
                            .value(workflow_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK92.from_dictionary)
        ).execute()

    def fetch_workflow_statistics(self,
                                  minutes,
                                  start_date,
                                  end_date,
                                  task_channel,
                                  split_by_wait_time,
                                  accept,
                                  workspace_sid,
                                  workflow_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/Statistics.

        Args:
            minutes (int): Only calculate statistics since this many minutes
                in the past. The default 15 minutes. This is helpful for
                displaying statistics for the last 15 minutes, 240 minutes (4
                hours), and 480 minutes (8 hours) to see trends.
            start_date (str): Only calculate statistics from this date and
                time and later, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            end_date (str): Only calculate statistics from this date and time
                and earlier, specified in GMT as an [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
            task_channel (str): Only calculate real-time statistics on this
                TaskChannel. Can be the TaskChannel's SID or its
                `unique_name`, such as `voice`, `sms`, or `default`.
            split_by_wait_time (str): A comma separated list of values that
                describes the thresholds, in seconds, to calculate statistics
                on. For each threshold specified, the number of Tasks canceled
                and reservations accepted above and below the specified
                thresholds in seconds are computed. For example, `5,30` would
                show splits of Tasks that were canceled or accepted before and
                after 5 seconds and before and after 30 seconds. This can be
                used to show short abandoned Tasks or Tasks that failed to
                meet an SLA.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            workflow_sid (str): The request template parameter.

        Returns:
            OK93: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/Statistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .query_param(Parameter()
                         .key('SplitByWaitTime')
                         .value(split_by_wait_time))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('WorkflowSid')
                            .value(workflow_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK93.from_dictionary)
        ).execute()

    def list_workflow(self,
                      friendly_name,
                      page_size,
                      accept,
                      workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workflows.

        Args:
            friendly_name (str): The `friendly_name` of the Workflow resources
                to read.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK94: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workflows')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FriendlyName')
                         .value(friendly_name))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK94.from_dictionary)
        ).execute()

    def create_workflow(self,
                        accept,
                        friendly_name,
                        configuration,
                        assignment_callback_url,
                        fallback_assignment_callback_url,
                        task_reservation_timeout,
                        workspace_sid):
        """Does a POST request to /Workspaces/{WorkspaceSid}/Workflows.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the Workflow resource. For example,
                `Inbound Call Workflow` or `2014 Outbound Campaign`.
            configuration (str): (Required) A JSON string that contains the
                rules to apply to the Workflow. See [Configuring
                Workflows](https://www.twilio.com/docs/taskrouter/workflow-conf
                iguration) for more information.
            assignment_callback_url (str): The URL from your application that
                will process task assignment events. See [Handling Task
                Assignment
                Callback](https://www.twilio.com/docs/taskrouter/handle-assignm
                ent-callbacks) for more details.
            fallback_assignment_callback_url (str): The URL that we should
                call when a call to the `assignment_callback_url` fails.
            task_reservation_timeout (int): How long TaskRouter will wait for
                a confirmation response from your application after it assigns
                a Task to a Worker. Can be up to `86,400` (24 hours) and the
                default is `120`.
            workspace_sid (str): The request template parameter.

        Returns:
            Created24: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workflows')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('Configuration')
                        .value(configuration))
            .form_param(Parameter()
                        .key('AssignmentCallbackUrl')
                        .value(assignment_callback_url))
            .form_param(Parameter()
                        .key('FallbackAssignmentCallbackUrl')
                        .value(fallback_assignment_callback_url))
            .form_param(Parameter()
                        .key('TaskReservationTimeout')
                        .value(task_reservation_timeout))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created24.from_dictionary)
        ).execute()

    def fetch_workflow(self,
                       accept,
                       workspace_sid,
                       sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workflows/{Sid}.

        Args:
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK95: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workflows/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK95.from_dictionary)
        ).execute()

    def update_workflow(self,
                        accept,
                        friendly_name,
                        assignment_callback_url,
                        fallback_assignment_callback_url,
                        configuration,
                        task_reservation_timeout,
                        re_evaluate_tasks,
                        workspace_sid,
                        sid):
        """Does a POST request to /Workspaces/{WorkspaceSid}/Workflows/{Sid}.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the Workflow resource. For example, `Inbound Call
                Workflow` or `2014 Outbound Campaign`.
            assignment_callback_url (str): The URL from your application that
                will process task assignment events. See [Handling Task
                Assignment
                Callback](https://www.twilio.com/docs/taskrouter/handle-assignm
                ent-callbacks) for more details.
            fallback_assignment_callback_url (str): The URL that we should
                call when a call to the `assignment_callback_url` fails.
            configuration (str): A JSON string that contains the rules to
                apply to the Workflow. See [Configuring
                Workflows](https://www.twilio.com/docs/taskrouter/workflow-conf
                iguration) for more information.
            task_reservation_timeout (int): How long TaskRouter will wait for
                a confirmation response from your application after it assigns
                a Task to a Worker. Can be up to `86,400` (24 hours) and the
                default is `120`.
            re_evaluate_tasks (str): Whether or not to re-evaluate Tasks. The
                default is `false`, which means Tasks in the Workflow will not
                be processed through the assignment loop again.
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK95: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workflows/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('AssignmentCallbackUrl')
                        .value(assignment_callback_url))
            .form_param(Parameter()
                        .key('FallbackAssignmentCallbackUrl')
                        .value(fallback_assignment_callback_url))
            .form_param(Parameter()
                        .key('Configuration')
                        .value(configuration))
            .form_param(Parameter()
                        .key('TaskReservationTimeout')
                        .value(task_reservation_timeout))
            .form_param(Parameter()
                        .key('ReEvaluateTasks')
                        .value(re_evaluate_tasks))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK95.from_dictionary)
        ).execute()

    def delete_workflow(self,
                        workspace_sid,
                        sid):
        """Does a DELETE request to /Workspaces/{WorkspaceSid}/Workflows/{Sid}.

        Args:
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workflows/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
