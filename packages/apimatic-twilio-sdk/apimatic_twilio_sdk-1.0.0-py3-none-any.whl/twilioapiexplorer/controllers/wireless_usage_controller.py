# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_181 import OK181
from twilioapiexplorer.models.ok_182 import OK182
from twilioapiexplorer.models.ok_183 import OK183


class WirelessUsageController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(WirelessUsageController, self).__init__(config)

    def list_account_usage_record(self,
                                  end,
                                  start,
                                  granularity,
                                  page_size,
                                  accept):
        """Does a GET request to /v1/UsageRecords.

        Args:
            end (str): Only include usage that has occurred on or before this
                date. Format is [ISO
                8601](https://www.iso.org/iso-8601-date-and-time-format.html).
            start (str): Only include usage that has occurred on or after this
                date. Format is [ISO
                8601](https://www.iso.org/iso-8601-date-and-time-format.html).
            granularity (str): How to summarize the usage by time. Can be:
                `daily`, `hourly`, or `all`. A value of `all` returns one
                Usage Record that describes the usage for the entire period.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK181: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/UsageRecords')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('End')
                         .value(end))
            .query_param(Parameter()
                         .key('Start')
                         .value(start))
            .query_param(Parameter()
                         .key('Granularity')
                         .value(granularity))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK181.from_dictionary)
        ).execute()

    def list_data_session(self,
                          page_size,
                          sim_sid,
                          accept):
        """Does a GET request to /v1/Sims/{SimSid}/DataSessions.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            sim_sid (str): (Required) The SID of the [Sim
                resource](https://www.twilio.com/docs/wireless/api/sim-resource
                ) with the Data Sessions to read.
            accept (str): The request header parameter.

        Returns:
            OK182: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Sims/{SimSid}/DataSessions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('SimSid')
                            .value(sim_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK182.from_dictionary)
        ).execute()

    def list_usage_record(self,
                          end,
                          start,
                          granularity,
                          page_size,
                          sim_sid,
                          accept):
        """Does a GET request to /v1/Sims/{SimSid}/UsageRecords.

        Args:
            end (str): Only include usage that occurred on or before this
                date, specified in [ISO
                8601](https://www.iso.org/iso-8601-date-and-time-format.html).
                The default is the current time.
            start (str): Only include usage that has occurred on or after this
                date, specified in [ISO
                8601](https://www.iso.org/iso-8601-date-and-time-format.html).
                The default is one month before the `end` parameter value.
            granularity (str): How to summarize the usage by time. Can be:
                `daily`, `hourly`, or `all`. The default is `all`. A value of
                `all` returns one Usage Record that describes the usage for
                the entire period.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            sim_sid (str): (Required) The SID of the [Sim
                resource](https://www.twilio.com/docs/wireless/api/sim-resource
                )  to read the usage from.
            accept (str): The request header parameter.

        Returns:
            OK183: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Sims/{SimSid}/UsageRecords')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('End')
                         .value(end))
            .query_param(Parameter()
                         .key('Start')
                         .value(start))
            .query_param(Parameter()
                         .key('Granularity')
                         .value(granularity))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('SimSid')
                            .value(sim_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK183.from_dictionary)
        ).execute()
