# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_160 import OK160
from twilioapiexplorer.models.created_46 import Created46
from twilioapiexplorer.models.ok_171 import OK171
from twilioapiexplorer.models.ok_172 import OK172
from twilioapiexplorer.models.created_49 import Created49
from twilioapiexplorer.models.ok_174 import OK174
from twilioapiexplorer.models.ok_175 import OK175
from twilioapiexplorer.models.ok_177 import OK177


class SyncMapsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(SyncMapsController, self).__init__(config)

    def fetch_sync_map(self,
                       service_sid,
                       sid,
                       accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Maps/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map resource to fetch.
            sid (str): (Required) The SID of the Sync Map resource to fetch.
                Can be the Sync Map's `sid` or its `unique_name`.
            accept (str): The request header parameter.

        Returns:
            OK160: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK160.from_dictionary)
        ).execute()

    def delete_sync_map(self,
                        service_sid,
                        sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Maps/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map resource to delete.
            sid (str): (Required) The SID of the Sync Map resource to delete.
                Can be the Sync Map's `sid` or its `unique_name`.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_sync_map(self,
                        service_sid,
                        sid,
                        accept,
                        ttl,
                        collection_ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Maps/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map resource to update.
            sid (str): (Required) The SID of the Sync Map resource to update.
                Can be the Sync Map's `sid` or its `unique_name`.
            accept (str): The request header parameter.
            ttl (int): An alias for `collection_ttl`. If both parameters are
                provided, this value is ignored.
            collection_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Sync Map expires (time-to-live) and is
                deleted.

        Returns:
            OK160: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('CollectionTtl')
                        .value(collection_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK160.from_dictionary)
        ).execute()

    def create_sync_map(self,
                        service_sid,
                        accept,
                        unique_name,
                        ttl,
                        collection_ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Maps.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) to
                create the Sync Map in.
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. It can be used as an alternative to
                the `sid` in the URL path to address the resource.
            ttl (int): An alias for `collection_ttl`. If both parameters are
                provided, this value is ignored.
            collection_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Sync Map expires (time-to-live) and is
                deleted.

        Returns:
            Created46: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('CollectionTtl')
                        .value(collection_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created46.from_dictionary)
        ).execute()

    def list_sync_map(self,
                      page_size,
                      service_sid,
                      accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Maps.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map resources to read.
            accept (str): The request header parameter.

        Returns:
            OK171: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK171.from_dictionary)
        ).execute()

    def fetch_sync_map_item(self,
                            service_sid,
                            map_sid,
                            key,
                            accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map Item resource to fetch.
            map_sid (str): (Required) The SID of the Sync Map with the Sync
                Map Item resource to fetch. Can be the Sync Map resource's
                `sid` or its `unique_name`.
            key (str): (Required) The `key` value of the Sync Map Item
                resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK172: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('MapSid')
                            .value(map_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Key')
                            .value(key)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK172.from_dictionary)
        ).execute()

    def delete_sync_map_item(self,
                             service_sid,
                             map_sid,
                             key,
                             if_match):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map Item resource to delete.
            map_sid (str): (Required) The SID of the Sync Map with the Sync
                Map Item resource to delete. Can be the Sync Map resource's
                `sid` or its `unique_name`.
            key (str): (Required) The `key` value of the Sync Map Item
                resource to delete.
            if_match (str): If provided, applies this mutation if (and only
                if) the “revision” field of this [map item] matches the
                provided value. This matches the semantics of (and is
                implemented with) the HTTP [If-Match
                header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Heade
                rs/If-Match).

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('MapSid')
                            .value(map_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Key')
                            .value(key)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('If-Match')
                          .value(if_match))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_sync_map_item(self,
                             service_sid,
                             map_sid,
                             key,
                             if_match,
                             accept,
                             ttl,
                             item_ttl,
                             collection_ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map Item resource to update.
            map_sid (str): (Required) The SID of the Sync Map with the Sync
                Map Item resource to update. Can be the Sync Map resource's
                `sid` or its `unique_name`.
            key (str): (Required) The `key` value of the Sync Map Item
                resource to update.
            if_match (str): If provided, applies this mutation if (and only
                if) the “revision” field of this [map item] matches the
                provided value. This matches the semantics of (and is
                implemented with) the HTTP [If-Match
                header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Heade
                rs/If-Match).
            accept (str): The request header parameter.
            ttl (int): An alias for `item_ttl`. If both parameters are
                provided, this value is ignored.
            item_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Map Item expires (time-to-live) and is
                deleted.
            collection_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Map Item's parent Sync Map expires
                (time-to-live) and is deleted. This parameter can only be used
                when the Map Item's `data` or `ttl` is updated in the same
                request.

        Returns:
            OK172: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('MapSid')
                            .value(map_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Key')
                            .value(key)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('If-Match')
                          .value(if_match))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('ItemTtl')
                        .value(item_ttl))
            .form_param(Parameter()
                        .key('CollectionTtl')
                        .value(collection_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK172.from_dictionary)
        ).execute()

    def create_sync_map_item(self,
                             service_sid,
                             map_sid,
                             accept,
                             key,
                             ttl,
                             item_ttl,
                             collection_ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Maps/{MapSid}/Items.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) to
                create the Map Item in.
            map_sid (str): (Required) The SID of the Sync Map to add the new
                Map Item to. Can be the Sync Map resource's `sid` or its
                `unique_name`.
            accept (str): The request header parameter.
            key (str): (Required) The unique, user-defined key for the Map
                Item. Can be up to 320 characters long.
            ttl (int): An alias for `item_ttl`. If both parameters are
                provided, this value is ignored.
            item_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Map Item expires (time-to-live) and is
                deleted.
            collection_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Map Item's parent Sync Map expires
                (time-to-live) and is deleted.

        Returns:
            Created49: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{MapSid}/Items')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('MapSid')
                            .value(map_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Key')
                        .value(key))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('ItemTtl')
                        .value(item_ttl))
            .form_param(Parameter()
                        .key('CollectionTtl')
                        .value(collection_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created49.from_dictionary)
        ).execute()

    def list_sync_map_item(self,
                           order,
                           mfrom,
                           bounds,
                           page_size,
                           service_sid,
                           map_sid,
                           accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Maps/{MapSid}/Items.

        Args:
            order (str): How to order the Map Items returned by their `key`
                value. Can be: `asc` (ascending) or `desc` (descending) and
                the default is ascending. Map Items are [ordered
                lexicographically](https://en.wikipedia.org/wiki/Lexicographica
                l_order) by Item key.
            mfrom (str): The `key` of the first Sync Map Item resource to
                read. See also `bounds`.
            bounds (str): Whether to include the Map Item referenced by the
                `from` parameter. Can be: `inclusive` to include the Map Item
                referenced by the `from` parameter or `exclusive` to start
                with the next Map Item. The default value is `inclusive`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Map Item resources to read.
            map_sid (str): (Required) The SID of the Sync Map with the Sync
                Map Item resource to fetch. Can be the Sync Map resource's
                `sid` or its `unique_name`.
            accept (str): The request header parameter.

        Returns:
            OK174: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{MapSid}/Items')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Order')
                         .value(order))
            .query_param(Parameter()
                         .key('From')
                         .value(mfrom))
            .query_param(Parameter()
                         .key('Bounds')
                         .value(bounds))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('MapSid')
                            .value(map_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK174.from_dictionary)
        ).execute()

    def fetch_sync_map_permission(self,
                                  service_sid,
                                  map_sid,
                                  identity,
                                  accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}.

        Fetch a specific Sync Map Permission.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map Permission resource to fetch. Can be the
                Service's `sid` value or `default`.
            map_sid (str): (Required) The SID of the Sync Map with the Sync
                Map Permission resource to fetch. Can be the Sync Map
                resource's `sid` or its `unique_name`.
            identity (str): (Required) The application-defined string that
                uniquely identifies the User's Sync Map Permission resource to
                fetch.
            accept (str): The request header parameter.

        Returns:
            OK175: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('MapSid')
                            .value(map_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK175.from_dictionary)
        ).execute()

    def delete_sync_map_permission(self,
                                   service_sid,
                                   map_sid,
                                   identity):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}.

        Delete a specific Sync Map Permission.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map Permission resource to delete. Can be the
                Service's `sid` value or `default`.
            map_sid (str): (Required) The SID of the Sync Map with the Sync
                Map Permission resource to delete. Can be the Sync Map
                resource's `sid` or its `unique_name`.
            identity (str): (Required) The application-defined string that
                uniquely identifies the User's Sync Map Permission resource to
                delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('MapSid')
                            .value(map_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_sync_map_permission(self,
                                   service_sid,
                                   map_sid,
                                   identity,
                                   accept,
                                   read,
                                   write,
                                   manage):
        """Does a POST request to /v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}.

        Update an identity's access to a specific Sync Map.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map Permission resource to update. Can be the
                Service's `sid` value or `default`.
            map_sid (str): (Required) The SID of the Sync Map with the Sync
                Map Permission resource to update. Can be the Sync Map
                resource's `sid` or its `unique_name`.
            identity (str): (Required) The application-defined string that
                uniquely identifies the User's Sync Map Permission resource to
                update.
            accept (str): The request header parameter.
            read (bool): (Required) Whether the identity can read the Sync Map
                and its Items. Default value is `false`.
            write (bool): (Required) Whether the identity can create, update,
                and delete Items in the Sync Map. Default value is `false`.
            manage (bool): (Required) Whether the identity can delete the Sync
                Map. Default value is `false`.

        Returns:
            OK175: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('MapSid')
                            .value(map_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Read')
                        .value(read))
            .form_param(Parameter()
                        .key('Write')
                        .value(write))
            .form_param(Parameter()
                        .key('Manage')
                        .value(manage))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK175.from_dictionary)
        ).execute()

    def list_sync_map_permission(self,
                                 page_size,
                                 service_sid,
                                 map_sid,
                                 accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions.

        Retrieve a list of all Permissions applying to a Sync Map.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync Map Permission resources to read. Can be the
                Service's `sid` value or `default`.
            map_sid (str): (Required) The SID of the Sync Map with the
                Permission resources to read. Can be the Sync Map resource's
                `sid` or its `unique_name`.
            accept (str): The request header parameter.

        Returns:
            OK177: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Maps/{MapSid}/Permissions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('MapSid')
                            .value(map_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK177.from_dictionary)
        ).execute()
