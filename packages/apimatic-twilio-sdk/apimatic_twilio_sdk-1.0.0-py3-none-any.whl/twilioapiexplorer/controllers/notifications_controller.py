# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_81 import Created81


class NotificationsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(NotificationsController, self).__init__(config)

    def create_notification(self,
                            service_sid,
                            identity,
                            challenge_sid,
                            accept,
                            ttl):
        """Does a POST request to /v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{ChallengeSid}/Notifications.

        Create a new Notification for the corresponding Challenge

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Challenge. This identifier should be immutable,
                not PII, length between 8 and 64 characters, and generated by
                your external system, such as your user's UUID, GUID, or SID.
                It can only contain dash (-) separated alphanumeric characters.
            challenge_sid (str): (Required) The unique SID identifier of the
                Challenge.
            accept (str): The request header parameter.
            ttl (int): How long, in seconds, the notification is valid. Can be
                an integer between 0 and 300. Default is 300. Delivery is
                attempted until the TTL elapses, even if the device is
                offline. 0 means that the notification delivery is attempted
                immediately, only once, and is not stored for future delivery.

        Returns:
            Created81: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{ChallengeSid}/Notifications')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ChallengeSid')
                            .value(challenge_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created81.from_dictionary)
        ).execute()
