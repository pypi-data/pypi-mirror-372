# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_75 import Created75
from twilioapiexplorer.models.ok_281 import OK281


class AccessTokensController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(AccessTokensController, self).__init__(config)

    def create_access_token(self,
                            service_sid,
                            accept,
                            identity,
                            factor_type,
                            factor_friendly_name,
                            ttl):
        """Does a POST request to /v2/Services/{ServiceSid}/AccessTokens.

        Create a new enrollment Access Token for the Entity

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            accept (str): The request header parameter.
            identity (str): (Required) The unique external identifier for the
                Entity of the Service. This identifier should be immutable,
                not PII, and generated by your external system, such as your
                user's UUID, GUID, or SID.
            factor_type (str): (Required) The Type of this Factor. Eg. `push`
            factor_friendly_name (str): The friendly name of the factor that
                is going to be created with this access token
            ttl (int): How long, in seconds, the access token is valid. Can be
                an integer between 60 and 300. Default is 60.

        Returns:
            Created75: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/AccessTokens')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Identity')
                        .value(identity))
            .form_param(Parameter()
                        .key('FactorType')
                        .value(factor_type))
            .form_param(Parameter()
                        .key('FactorFriendlyName')
                        .value(factor_friendly_name))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created75.from_dictionary)
        ).execute()

    def fetch_access_token(self,
                           service_sid,
                           sid,
                           accept):
        """Does a GET request to /v2/Services/{ServiceSid}/AccessTokens/{Sid}.

        Fetch an Access Token for the Entity

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            sid (str): (Required) A 34 character string that uniquely
                identifies this Access Token.
            accept (str): The request header parameter.

        Returns:
            OK281: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/AccessTokens/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK281.from_dictionary)
        ).execute()
