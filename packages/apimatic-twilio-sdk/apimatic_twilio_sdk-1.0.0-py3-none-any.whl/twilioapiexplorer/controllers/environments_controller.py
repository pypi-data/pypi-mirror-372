# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_343 import OK343
from twilioapiexplorer.models.created_95 import Created95
from twilioapiexplorer.models.ok_344 import OK344


class EnvironmentsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(EnvironmentsController, self).__init__(config)

    def list_environment(self,
                         page_size,
                         service_sid,
                         accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Environments.

        Retrieve a list of all environments.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the Service to read the
                Environment resources from.
            accept (str): The request header parameter.

        Returns:
            OK343: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Environments')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK343.from_dictionary)
        ).execute()

    def create_environment(self,
                           service_sid,
                           accept,
                           unique_name,
                           domain_suffix):
        """Does a POST request to /v1/Services/{ServiceSid}/Environments.

        Create a new environment.

        Args:
            service_sid (str): (Required) The SID of the Service to create the
                Environment resource under.
            accept (str): The request header parameter.
            unique_name (str): (Required) A user-defined string that uniquely
                identifies the Environment resource. It can be a maximum of
                100 characters.
            domain_suffix (str): A URL-friendly name that represents the
                environment and forms part of the domain name. It can be a
                maximum of 16 characters.

        Returns:
            Created95: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Environments')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('DomainSuffix')
                        .value(domain_suffix))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created95.from_dictionary)
        ).execute()

    def fetch_environment(self,
                          service_sid,
                          sid,
                          accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Environments/{Sid}.

        Retrieve a specific environment.

        Args:
            service_sid (str): (Required) The SID of the Service to fetch the
                Environment resource from.
            sid (str): (Required) The SID of the Environment resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK344: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Environments/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK344.from_dictionary)
        ).execute()

    def delete_environment(self,
                           service_sid,
                           sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Environments/{Sid}.

        Delete a specific environment.

        Args:
            service_sid (str): (Required) The SID of the Service to delete the
                Environment resource from.
            sid (str): (Required) The SID of the Environment resource to
                delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Environments/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
