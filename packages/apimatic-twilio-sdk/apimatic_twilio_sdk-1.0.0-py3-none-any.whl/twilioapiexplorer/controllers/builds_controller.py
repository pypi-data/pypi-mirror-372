# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_338 import OK338
from twilioapiexplorer.models.created_93 import Created93
from twilioapiexplorer.models.ok_339 import OK339
from twilioapiexplorer.models.ok_340 import OK340


class BuildsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(BuildsController, self).__init__(config)

    def list_build(self,
                   page_size,
                   service_sid,
                   accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Builds.

        Retrieve a list of all Builds.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the Service to read the
                Build resources from.
            accept (str): The request header parameter.

        Returns:
            OK338: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Builds')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK338.from_dictionary)
        ).execute()

    def create_build(self,
                     service_sid,
                     accept,
                     asset_versions,
                     function_versions,
                     dependencies,
                     runtime):
        """Does a POST request to /v1/Services/{ServiceSid}/Builds.

        Create a new Build resource. At least one function version or asset
        version is required.

        Args:
            service_sid (str): (Required) The SID of the Service to create the
                Build resource under.
            accept (str): The request header parameter.
            asset_versions (str): The list of Asset Version resource SIDs to
                include in the Build.
            function_versions (str): The list of the Function Version resource
                SIDs to include in the Build.
            dependencies (str): A list of objects that describe the
                Dependencies included in the Build. Each object contains the
                `name` and `version` of the dependency.
            runtime (str): The Runtime version that will be used to run the
                Build resource when it is deployed.

        Returns:
            Created93: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Builds')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('AssetVersions')
                        .value(asset_versions))
            .form_param(Parameter()
                        .key('FunctionVersions')
                        .value(function_versions))
            .form_param(Parameter()
                        .key('Dependencies')
                        .value(dependencies))
            .form_param(Parameter()
                        .key('Runtime')
                        .value(runtime))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created93.from_dictionary)
        ).execute()

    def fetch_build(self,
                    service_sid,
                    sid,
                    accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Builds/{Sid}.

        Retrieve a specific Build resource.

        Args:
            service_sid (str): (Required) The SID of the Service to fetch the
                Build resource from.
            sid (str): (Required) The SID of the Build resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK339: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Builds/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK339.from_dictionary)
        ).execute()

    def delete_build(self,
                     service_sid,
                     sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Builds/{Sid}.

        Delete a Build resource.

        Args:
            service_sid (str): (Required) The SID of the Service to delete the
                Build resource from.
            sid (str): (Required) The SID of the Build resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Builds/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_build_status(self,
                           service_sid,
                           sid,
                           accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Builds/{Sid}/Status.

        Retrieve a specific Build resource.

        Args:
            service_sid (str): (Required) The SID of the Service to fetch the
                Build resource from.
            sid (str): (Required) The SID of the Build resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK340: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Builds/{Sid}/Status')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK340.from_dictionary)
        ).execute()
