# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_207 import OK207
from twilioapiexplorer.models.ok_209 import OK209
from twilioapiexplorer.models.ok_210 import OK210
from twilioapiexplorer.models.ok_211 import OK211
from twilioapiexplorer.models.ok_212 import OK212
from twilioapiexplorer.models.ok_213 import OK213
from twilioapiexplorer.models.accepted_2 import Accepted2
from twilioapiexplorer.models.ok_214 import OK214
from twilioapiexplorer.models.ok_215 import OK215


class RoomParticipantsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(RoomParticipantsController, self).__init__(config)

    def fetch_room_participant(self,
                               room_sid,
                               sid,
                               accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/Participants/{Sid}.

        Args:
            room_sid (str): (Required) The SID of the room with the
                Participant resource to fetch.
            sid (str): (Required) The SID of the RoomParticipant resource to
                fetch.
            accept (str): The request header parameter.

        Returns:
            OK207: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK207.from_dictionary)
        ).execute()

    def update_room_participant(self,
                                room_sid,
                                sid,
                                accept,
                                status):
        """Does a POST request to /v1/Rooms/{RoomSid}/Participants/{Sid}.

        Args:
            room_sid (str): (Required) The SID of the room with the
                participant to update.
            sid (str): (Required) The SID of the RoomParticipant resource to
                update.
            accept (str): The request header parameter.
            status (str): The new status of the resource. Can be: `connected`
                or `disconnected`. For `in-progress` Rooms the default Status
                is `connected`, for `completed` Rooms only `disconnected`
                Participants are returned.

        Returns:
            OK207: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK207.from_dictionary)
        ).execute()

    def list_room_participant(self,
                              status,
                              identity,
                              date_created_after,
                              date_created_before,
                              page_size,
                              room_sid,
                              accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/Participants.

        Args:
            status (str): Read only the participants with this status. Can be:
                `connected` or `disconnected`. For `in-progress` Rooms the
                default Status is `connected`, for `completed` Rooms only
                `disconnected` Participants are returned.
            identity (str): Read only the Participants with this
                [User](https://www.twilio.com/docs/chat/rest/user-resource)
                `identity` value.
            date_created_after (str): Read only Participants that started
                after this date in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
            date_created_before (str): Read only Participants that started
                before this date in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            room_sid (str): (Required) The SID of the room with the
                Participant resources to read.
            accept (str): The request header parameter.

        Returns:
            OK209: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('Identity')
                         .value(identity))
            .query_param(Parameter()
                         .key('DateCreatedAfter')
                         .value(date_created_after))
            .query_param(Parameter()
                         .key('DateCreatedBefore')
                         .value(date_created_before))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK209.from_dictionary)
        ).execute()

    def update_room_participant_anonymize(self,
                                          room_sid,
                                          sid,
                                          accept):
        """Does a POST request to /v1/Rooms/{RoomSid}/Participants/{Sid}/Anonymize.

        Args:
            room_sid (str): (Required) The SID of the room with the
                participant to update.
            sid (str): (Required) The SID of the RoomParticipant resource to
                update.
            accept (str): The request header parameter.

        Returns:
            OK210: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants/{Sid}/Anonymize')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK210.from_dictionary)
        ).execute()

    def fetch_room_participant_published_track(self,
                                               room_sid,
                                               participant_sid,
                                               sid,
                                               accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks/{Sid}.

        Returns a single Track resource represented by TrackName or SID.

        Args:
            room_sid (str): (Required) The SID of the Room resource where the
                Track resource to fetch is published.
            participant_sid (str): (Required) The SID of the Participant
                resource with the published track to fetch.
            sid (str): (Required) The SID of the RoomParticipantPublishedTrack
                resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK211: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ParticipantSid')
                            .value(participant_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK211.from_dictionary)
        ).execute()

    def list_room_participant_published_track(self,
                                              page_size,
                                              room_sid,
                                              participant_sid,
                                              accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks.

        Returns a list of tracks associated with a given Participant. Only
        `currently` Published Tracks are in the list resource.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            room_sid (str): (Required) The SID of the Room resource where the
                Track resources to read are published.
            participant_sid (str): (Required) The SID of the Participant
                resource with the published tracks to read.
            accept (str): The request header parameter.

        Returns:
            OK212: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ParticipantSid')
                            .value(participant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK212.from_dictionary)
        ).execute()

    def fetch_room_participant_subscribe_rule(self,
                                              room_sid,
                                              participant_sid,
                                              accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules.

        Returns a list of Subscribe Rules for the Participant.

        Args:
            room_sid (str): (Required) The SID of the Room resource where the
                subscribe rules to fetch apply.
            participant_sid (str): (Required) The SID of the Participant
                resource with the subscribe rules to fetch.
            accept (str): The request header parameter.

        Returns:
            OK213: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ParticipantSid')
                            .value(participant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK213.from_dictionary)
        ).execute()

    def update_room_participant_subscribe_rule(self,
                                               room_sid,
                                               participant_sid,
                                               accept):
        """Does a POST request to /v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules.

        Update the Subscribe Rules for the Participant

        Args:
            room_sid (str): (Required) The SID of the Room resource where the
                subscribe rules to update apply.
            participant_sid (str): (Required) The SID of the Participant
                resource to update the Subscribe Rules.
            accept (str): The request header parameter.

        Returns:
            Accepted2: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ParticipantSid')
                            .value(participant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Accepted2.from_dictionary)
        ).execute()

    def fetch_room_participant_subscribed_track(self,
                                                room_sid,
                                                participant_sid,
                                                sid,
                                                accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks/{Sid}.

        Returns a single Track resource represented by `track_sid`.  Note:
        This is one resource with the Video API that requires a SID, be Track
        Name on the subscriber side is not guaranteed to be unique.

        Args:
            room_sid (str): (Required) The SID of the Room where the Track
                resource to fetch is subscribed.
            participant_sid (str): (Required) The SID of the participant that
                subscribes to the Track resource to fetch.
            sid (str): (Required) The SID of the
                RoomParticipantSubscribedTrack resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK214: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ParticipantSid')
                            .value(participant_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK214.from_dictionary)
        ).execute()

    def list_room_participant_subscribed_track(self,
                                               page_size,
                                               room_sid,
                                               participant_sid,
                                               accept):
        """Does a GET request to /v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks.

        Returns a list of tracks that are subscribed for the participant.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            room_sid (str): (Required) The SID of the Room resource with the
                Track resources to read.
            participant_sid (str): (Required) The SID of the participant that
                subscribes to the Track resources to read.
            accept (str): The request header parameter.

        Returns:
            OK215: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('RoomSid')
                            .value(room_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ParticipantSid')
                            .value(participant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK215.from_dictionary)
        ).execute()
