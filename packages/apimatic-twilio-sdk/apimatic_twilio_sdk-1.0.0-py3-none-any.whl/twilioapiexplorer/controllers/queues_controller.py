# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_32 import OK32
from twilioapiexplorer.models.created_9 import Created9


class QueuesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(QueuesController, self).__init__(config)

    def list_queue(self,
                   page_size,
                   accept,
                   account_sid):
        """Does a GET request to /{AccountSid}/Queues.json.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.

        Returns:
            OK32: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Queues.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK32.from_dictionary)
        ).execute()

    def create_queue(self,
                     accept,
                     friendly_name,
                     max_size,
                     account_sid):
        """Does a POST request to /{AccountSid}/Queues.json.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                created to describe this resource. It can be up to 64
                characters long.
            max_size (int): The maximum number of calls allowed to be in the
                queue. The default is 100. The maximum is 5000.
            account_sid (str): The request template parameter.

        Returns:
            Created9: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Queues.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('MaxSize')
                        .value(max_size))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created9.from_dictionary)
        ).execute()
