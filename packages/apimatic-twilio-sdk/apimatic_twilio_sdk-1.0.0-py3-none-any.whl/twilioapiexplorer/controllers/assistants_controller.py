# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_249 import OK249
from twilioapiexplorer.models.created_66 import Created66
from twilioapiexplorer.models.ok_250 import OK250


class AssistantsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(AssistantsController, self).__init__(config)

    def list_assistant(self,
                       page_size,
                       accept):
        """Does a GET request to /v1/Assistants.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK249: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK249.from_dictionary)
        ).execute()

    def create_assistant(self,
                         accept,
                         friendly_name,
                         log_queries,
                         unique_name,
                         callback_url,
                         callback_events):
        """Does a POST request to /v1/Assistants.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the new resource. It is not unique and can be up to
                255 characters long.
            log_queries (bool): Whether queries should be logged and kept
                after training. Can be: `true` or `false` and defaults to
                `true`. If `true`, queries are stored for 30 days, and then
                deleted. If `false`, no queries are stored.
            unique_name (str): An application-defined string that uniquely
                identifies the new resource. It can be used as an alternative
                to the `sid` in the URL path to address the resource. The
                first 64 characters must be unique.
            callback_url (str): Reserved.
            callback_events (str): Reserved.

        Returns:
            Created66: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('LogQueries')
                        .value(log_queries))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('CallbackUrl')
                        .value(callback_url))
            .form_param(Parameter()
                        .key('CallbackEvents')
                        .value(callback_events))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created66.from_dictionary)
        ).execute()

    def update_restore_assistant(self,
                                 accept,
                                 assistant):
        """Does a POST request to /v1/Assistants/Restore.

        Args:
            accept (str): The request header parameter.
            assistant (str): (Required) The Twilio-provided string that
                uniquely identifies the Assistant resource to restore.

        Returns:
            OK250: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/Restore')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Assistant')
                        .value(assistant))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK250.from_dictionary)
        ).execute()
