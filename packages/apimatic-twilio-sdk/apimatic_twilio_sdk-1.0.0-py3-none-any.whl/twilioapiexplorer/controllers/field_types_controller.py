# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_272 import OK272
from twilioapiexplorer.models.created_72 import Created72


class FieldTypesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(FieldTypesController, self).__init__(config)

    def list_field_type(self,
                        page_size,
                        assistant_sid,
                        accept):
        """Does a GET request to /v1/Assistants/{AssistantSid}/FieldTypes.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the resources to read.
            accept (str): The request header parameter.

        Returns:
            OK272: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/FieldTypes')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK272.from_dictionary)
        ).execute()

    def create_field_type(self,
                          assistant_sid,
                          accept,
                          unique_name,
                          friendly_name):
        """Does a POST request to /v1/Assistants/{AssistantSid}/FieldTypes.

        Args:
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the new resource.
            accept (str): The request header parameter.
            unique_name (str): (Required) An application-defined string that
                uniquely identifies the new resource. It can be used as an
                alternative to the `sid` in the URL path to address the
                resource. The first 64 characters must be unique.
            friendly_name (str): A descriptive string that you create to
                describe the new resource. It is not unique and can be up to
                255 characters long.

        Returns:
            Created72: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/FieldTypes')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created72.from_dictionary)
        ).execute()
