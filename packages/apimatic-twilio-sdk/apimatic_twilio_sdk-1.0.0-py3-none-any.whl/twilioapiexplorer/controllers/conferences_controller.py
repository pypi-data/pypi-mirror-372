# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_21 import OK21
from twilioapiexplorer.models.ok_23 import OK23
from twilioapiexplorer.models.ok_25 import OK25
from twilioapiexplorer.models.created_7 import Created7
from twilioapiexplorer.models.ok_27 import OK27
from twilioapiexplorer.models.ok_28 import OK28


class ConferencesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ConferencesController, self).__init__(config)

    def fetch_conference(self,
                         accept,
                         account_sid,
                         sid):
        """Does a GET request to /{AccountSid}/Conferences/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK21: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK21.from_dictionary)
        ).execute()

    def update_conference(self,
                          accept,
                          status,
                          announce_url,
                          announce_method,
                          account_sid,
                          sid):
        """Does a POST request to /{AccountSid}/Conferences/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            status (str): The new status of the resource. Can be:  Can be:
                `init`, `in-progress`, or `completed`. Specifying `completed`
                will end the conference and hang up all participants
            announce_url (str): The URL we should call to announce something
                into the conference. The URL may return an MP3 file, a WAV
                file, or a TwiML document that contains `<Play>`, `<Say>`,
                `<Pause>`, or `<Redirect>` verbs.
            announce_method (str): The HTTP method used to call
                `announce_url`. Can be: `GET` or `POST` and the default is
                `POST`
            account_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK21: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{Sid}.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .form_param(Parameter()
                        .key('AnnounceUrl')
                        .value(announce_url))
            .form_param(Parameter()
                        .key('AnnounceMethod')
                        .value(announce_method))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK21.from_dictionary)
        ).execute()

    def update_conference_recording(self,
                                    accept,
                                    status,
                                    pause_behavior,
                                    account_sid,
                                    conference_sid,
                                    sid):
        """Does a POST request to /{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            status (str): (Required) The new status of the recording. Can be:
                `stopped`, `paused`, `in-progress`.
            pause_behavior (str): Whether to record during a pause. Can be:
                `skip` or `silence` and the default is `silence`. `skip` does
                not record during the pause period, while `silence` will
                replace the actual audio of the call with silence during the
                pause period. This parameter only applies when setting
                `status` is set to `paused`.
            account_sid (str): The request template parameter.
            conference_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK23: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .form_param(Parameter()
                        .key('PauseBehavior')
                        .value(pause_behavior))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ConferenceSid')
                            .value(conference_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK23.from_dictionary)
        ).execute()

    def fetch_conference_recording(self,
                                   accept,
                                   account_sid,
                                   conference_sid,
                                   sid):
        """Does a GET request to /{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            conference_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK23: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ConferenceSid')
                            .value(conference_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK23.from_dictionary)
        ).execute()

    def delete_conference_recording(self,
                                    account_sid,
                                    conference_sid,
                                    sid):
        """Does a DELETE request to /{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json.

        Args:
            account_sid (str): The request template parameter.
            conference_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ConferenceSid')
                            .value(conference_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_participant(self,
                          accept,
                          account_sid,
                          conference_sid,
                          call_sid):
        """Does a GET request to /{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json.

        Args:
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            conference_sid (str): The request template parameter.
            call_sid (str): The request template parameter.

        Returns:
            OK25: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ConferenceSid')
                            .value(conference_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('CallSid')
                            .value(call_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK25.from_dictionary)
        ).execute()

    def update_participant(self,
                           accept,
                           muted,
                           hold,
                           hold_url,
                           hold_method,
                           announce_url,
                           announce_method,
                           wait_url,
                           wait_method,
                           beep_on_exit,
                           end_conference_on_exit,
                           coaching,
                           call_sid_to_coach,
                           account_sid,
                           conference_sid,
                           call_sid):
        """Does a POST request to /{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json.

        Args:
            accept (str): The request header parameter.
            muted (bool): Whether the participant should be muted. Can be
                `true` or `false`. `true` will mute the participant, and
                `false` will un-mute them. Anything value other than `true` or
                `false` is interpreted as `false`.
            hold (bool): Whether the participant should be on hold. Can be:
                `true` or `false`. `true` puts the participant on hold, and
                `false` lets them rejoin the conference.
            hold_url (str): The URL we call using the `hold_method` for music
                that plays when the participant is on hold. The URL may return
                an MP3 file, a WAV file, or a TwiML document that contains
                `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
            hold_method (str): The HTTP method we should use to call
                `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
            announce_url (str): The URL we call using the `announce_method`
                for an announcement to the participant. The URL may return an
                MP3 file, a WAV file, or a TwiML document that contains
                `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
            announce_method (str): The HTTP method we should use to call
                `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
            wait_url (str): The URL we call using the `wait_method` for the
                music to play while participants are waiting for the
                conference to start. The URL may return an MP3 file, a WAV
                file, or a TwiML document that contains `<Play>`, `<Say>`,
                `<Pause>`, or `<Redirect>` verbs. The default value is the URL
                of our standard hold music. [Learn more about hold
                music](https://www.twilio.com/labs/twimlets/holdmusic).
            wait_method (str): The HTTP method we should use to call
                `wait_url`. Can be `GET` or `POST` and the default is `POST`.
                When using a static audio file, this should be `GET` so that
                we can cache the file.
            beep_on_exit (bool): Whether to play a notification beep to the
                conference when the participant exits. Can be: `true` or
                `false`.
            end_conference_on_exit (bool): Whether to end the conference when
                the participant leaves. Can be: `true` or `false` and defaults
                to `false`.
            coaching (bool): Whether the participant is coaching another call.
                Can be: `true` or `false`. If not present, defaults to `false`
                unless `call_sid_to_coach` is defined. If `true`,
                `call_sid_to_coach` must be defined.
            call_sid_to_coach (str): The SID of the participant who is being
                `coached`. The participant being coached is the only
                participant who can hear the participant who is `coaching`.
            account_sid (str): The request template parameter.
            conference_sid (str): The request template parameter.
            call_sid (str): The request template parameter.

        Returns:
            OK25: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Muted')
                        .value(muted))
            .form_param(Parameter()
                        .key('Hold')
                        .value(hold))
            .form_param(Parameter()
                        .key('HoldUrl')
                        .value(hold_url))
            .form_param(Parameter()
                        .key('HoldMethod')
                        .value(hold_method))
            .form_param(Parameter()
                        .key('AnnounceUrl')
                        .value(announce_url))
            .form_param(Parameter()
                        .key('AnnounceMethod')
                        .value(announce_method))
            .form_param(Parameter()
                        .key('WaitUrl')
                        .value(wait_url))
            .form_param(Parameter()
                        .key('WaitMethod')
                        .value(wait_method))
            .form_param(Parameter()
                        .key('BeepOnExit')
                        .value(beep_on_exit))
            .form_param(Parameter()
                        .key('EndConferenceOnExit')
                        .value(end_conference_on_exit))
            .form_param(Parameter()
                        .key('Coaching')
                        .value(coaching))
            .form_param(Parameter()
                        .key('CallSidToCoach')
                        .value(call_sid_to_coach))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ConferenceSid')
                            .value(conference_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('CallSid')
                            .value(call_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK25.from_dictionary)
        ).execute()

    def delete_participant(self,
                           account_sid,
                           conference_sid,
                           call_sid):
        """Does a DELETE request to /{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json.

        Args:
            account_sid (str): The request template parameter.
            conference_sid (str): The request template parameter.
            call_sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ConferenceSid')
                            .value(conference_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('CallSid')
                            .value(call_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def create_participant(self,
                           accept,
                           mfrom,
                           to,
                           status_callback,
                           status_callback_method,
                           status_callback_event,
                           label,
                           timeout,
                           record,
                           muted,
                           beep,
                           start_conference_on_enter,
                           end_conference_on_exit,
                           wait_url,
                           wait_method,
                           early_media,
                           max_participants,
                           conference_record,
                           conference_trim,
                           conference_status_callback,
                           conference_status_callback_method,
                           conference_status_callback_event,
                           recording_channels,
                           recording_status_callback,
                           recording_status_callback_method,
                           sip_auth_username,
                           sip_auth_password,
                           region,
                           conference_recording_status_callback,
                           conference_recording_status_callback_method,
                           recording_status_callback_event,
                           conference_recording_status_callback_event,
                           coaching,
                           call_sid_to_coach,
                           jitter_buffer_size,
                           byoc,
                           caller_id,
                           call_reason,
                           recording_track,
                           time_limit,
                           machine_detection,
                           machine_detection_timeout,
                           machine_detection_speech_threshold,
                           machine_detection_speech_end_threshold,
                           machine_detection_silence_timeout,
                           amd_status_callback,
                           amd_status_callback_method,
                           account_sid,
                           conference_sid):
        """Does a POST request to /{AccountSid}/Conferences/{ConferenceSid}/Participants.json.

        Args:
            accept (str): The request header parameter.
            mfrom (str): (Required) The phone number, Client identifier, or
                username portion of SIP address that made this call. Phone
                numbers are in
                [E.164](https://www.twilio.com/docs/glossary/what-e164) format
                (e.g., +16175551212). Client identifiers are formatted
                `client:name`. If using a phone number, it must be a Twilio
                number or a Verified [outgoing caller
                id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids)
                for your account. If the `to` parameter is a phone number,
                `from` must also be a phone number. If `to` is sip address,
                this value of `from` should be a username portion to be used
                to populate the P-Asserted-Identity header that is passed to
                the SIP endpoint.
            to (str): (Required) The phone number, SIP address, or Client
                identifier that received this call. Phone numbers are in
                [E.164](https://www.twilio.com/docs/glossary/what-e164) format
                (e.g., +16175551212). SIP addresses are formatted as
                `sip:name@company.com`. Client identifiers are formatted
                `client:name`. [Custom
                parameters](https://www.twilio.com/docs/voice/api/conference-pa
                rticipant-resource#custom-parameters) may also be specified.
            status_callback (str): The URL we should call using the
                `status_callback_method` to send status information to your
                application.
            status_callback_method (str): The HTTP method we should use to
                call `status_callback`. Can be: `GET` and `POST` and defaults
                to `POST`.
            status_callback_event (str): The conference state changes that
                should generate a call to `status_callback`. Can be:
                `initiated`, `ringing`, `answered`, and `completed`. Separate
                multiple values with a space. The default value is `completed`.
            label (str): A label for this participant. If one is supplied, it
                may subsequently be used to fetch, update or delete the
                participant.
            timeout (int): The number of seconds that we should allow the
                phone to ring before assuming there is no answer. Can be an
                integer between `5` and `600`, inclusive. The default value is
                `60`. We always add a 5-second timeout buffer to outgoing
                calls, so  value of 10 would result in an actual timeout that
                was closer to 15 seconds.
            record (bool): Whether to record the participant and their
                conferences, including the time between conferences. Can be
                `true` or `false` and the default is `false`.
            muted (bool): Whether the agent is muted in the conference. Can be
                `true` or `false` and the default is `false`.
            beep (str): Whether to play a notification beep to the conference
                when the participant joins. Can be: `true`, `false`,
                `onEnter`, or `onExit`. The default value is `true`.
            start_conference_on_enter (bool): Whether to start the conference
                when the participant joins, if it has not already started. Can
                be: `true` or `false` and the default is `true`. If `false`
                and the conference has not started, the participant is muted
                and hears background music until another participant starts
                the conference.
            end_conference_on_exit (bool): Whether to end the conference when
                the participant leaves. Can be: `true` or `false` and defaults
                to `false`.
            wait_url (str): The URL we should call using the `wait_method` for
                the music to play while participants are waiting for the
                conference to start. The default value is the URL of our
                standard hold music. [Learn more about hold
                music](https://www.twilio.com/labs/twimlets/holdmusic).
            wait_method (str): The HTTP method we should use to call
                `wait_url`. Can be `GET` or `POST` and the default is `POST`.
                When using a static audio file, this should be `GET` so that
                we can cache the file.
            early_media (bool): Whether to allow an agent to hear the state of
                the outbound call, including ringing or disconnect messages.
                Can be: `true` or `false` and defaults to `true`.
            max_participants (int): The maximum number of participants in the
                conference. Can be a positive integer from `2` to `250`. The
                default value is `250`.
            conference_record (str): Whether to record the conference the
                participant is joining. Can be: `true`, `false`,
                `record-from-start`, and `do-not-record`. The default value is
                `false`.
            conference_trim (str): Whether to trim leading and trailing
                silence from your recorded conference audio files. Can be:
                `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
            conference_status_callback (str): The URL we should call using the
                `conference_status_callback_method` when the conference events
                in `conference_status_callback_event` occur. Only the value
                set by the first participant to join the conference is used.
                Subsequent `conference_status_callback` values are ignored.
            conference_status_callback_method (str): The HTTP method we should
                use to call `conference_status_callback`. Can be: `GET` or
                `POST` and defaults to `POST`.
            conference_status_callback_event (str): The conference state
                changes that should generate a call to
                `conference_status_callback`. Can be: `start`, `end`, `join`,
                `leave`, `mute`, `hold`, `modify`, `speaker`, and
                `announcement`. Separate multiple values with a space.
                Defaults to `start end`.
            recording_channels (str): The recording channels for the final
                recording. Can be: `mono` or `dual` and the default is `mono`.
            recording_status_callback (str): The URL that we should call using
                the `recording_status_callback_method` when the recording
                status changes.
            recording_status_callback_method (str): The HTTP method we should
                use when we call `recording_status_callback`. Can be: `GET` or
                `POST` and defaults to `POST`.
            sip_auth_username (str): The SIP username used for authentication.
            sip_auth_password (str): The SIP password for authentication.
            region (str): The
                [region](https://support.twilio.com/hc/en-us/articles/223132167
                -How-global-low-latency-routing-and-region-selection-work-for-c
                onferences-and-Client-calls) where we should mix the recorded
                audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or
                `jp1`.
            conference_recording_status_callback (str): The URL we should call
                using the `conference_recording_status_callback_method` when
                the conference recording is available.
            conference_recording_status_callback_method (str): The HTTP method
                we should use to call `conference_recording_status_callback`.
                Can be: `GET` or `POST` and defaults to `POST`.
            recording_status_callback_event (str): The recording state changes
                that should generate a call to `recording_status_callback`.
                Can be: `started`, `in-progress`, `paused`, `resumed`,
                `stopped`, `completed`, `failed`, and `absent`. Separate
                multiple values with a space, ex: `'in-progress completed
                failed'`.
            conference_recording_status_callback_event (str): The conference
                recording state changes that generate a call to
                `conference_recording_status_callback`. Can be: `in-progress`,
                `completed`, `failed`, and `absent`. Separate multiple values
                with a space, ex: `'in-progress completed failed'`
            coaching (bool): Whether the participant is coaching another call.
                Can be: `true` or `false`. If not present, defaults to `false`
                unless `call_sid_to_coach` is defined. If `true`,
                `call_sid_to_coach` must be defined.
            call_sid_to_coach (str): The SID of the participant who is being
                `coached`. The participant being coached is the only
                participant who can hear the participant who is `coaching`.
            jitter_buffer_size (str): Jitter buffer size for the connecting
                participant. Twilio will use this setting to apply Jitter
                Buffer before participant's audio is mixed into the
                conference. Can be: `off`, `small`, `medium`, and `large`.
                Default to `large`.
            byoc (str): The SID of a BYOC (Bring Your Own Carrier) trunk to
                route this call with. Note that `byoc` is only meaningful when
                `to` is a phone number; it will otherwise be ignored. (Beta)
            caller_id (str): The phone number, Client identifier, or username
                portion of SIP address that made this call. Phone numbers are
                in [E.164](https://www.twilio.com/docs/glossary/what-e164)
                format (e.g., +16175551212). Client identifiers are formatted
                `client:name`. If using a phone number, it must be a Twilio
                number or a Verified [outgoing caller
                id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids)
                for your account. If the `to` parameter is a phone number,
                `callerId` must also be a phone number. If `to` is sip
                address, this value of `callerId` should be a username portion
                to be used to populate the From header that is passed to the
                SIP endpoint.
            call_reason (str): The Reason for the outgoing call. Use it to
                specify the purpose of the call that is presented on the
                called party's phone. (Branded Calls Beta)
            recording_track (str): The audio track to record for the call. Can
                be: `inbound`, `outbound` or `both`. The default is `both`.
                `inbound` records the audio that is received by Twilio.
                `outbound` records the audio that is sent from Twilio. `both`
                records the audio that is received and sent by Twilio.
            time_limit (int): The maximum duration of the call in seconds.
                Constraints depend on account and configuration.
            machine_detection (str): Whether to detect if a human, answering
                machine, or fax has picked up the call. Can be: `Enable` or
                `DetectMessageEnd`. Use `Enable` if you would like us to
                return `AnsweredBy` as soon as the called party is identified.
                Use `DetectMessageEnd`, if you would like to leave a message
                on an answering machine. If `send_digits` is provided, this
                parameter is ignored. For more information, see [Answering
                Machine
                Detection](https://www.twilio.com/docs/voice/answering-machine-
                detection).
            machine_detection_timeout (int): The number of seconds that we
                should attempt to detect an answering machine before timing
                out and sending a voice request with `AnsweredBy` of
                `unknown`. The default timeout is 30 seconds.
            machine_detection_speech_threshold (int): The number of
                milliseconds that is used as the measuring stick for the
                length of the speech activity, where durations lower than this
                value will be interpreted as a human and longer than this
                value as a machine. Possible Values: 1000-6000. Default: 2400.
            machine_detection_speech_end_threshold (int): The number of
                milliseconds of silence after speech activity at which point
                the speech activity is considered complete. Possible Values:
                500-5000. Default: 1200.
            machine_detection_silence_timeout (int): The number of
                milliseconds of initial silence after which an `unknown`
                AnsweredBy result will be returned. Possible Values:
                2000-10000. Default: 5000.
            amd_status_callback (str): The URL that we should call using the
                `amd_status_callback_method` to notify customer application
                whether the call was answered by human, machine or fax.
            amd_status_callback_method (str): The HTTP method we should use
                when calling the `amd_status_callback` URL. Can be: `GET` or
                `POST` and the default is `POST`.
            account_sid (str): The request template parameter.
            conference_sid (str): The request template parameter.

        Returns:
            Created7: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{ConferenceSid}/Participants.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('From')
                        .value(mfrom))
            .form_param(Parameter()
                        .key('To')
                        .value(to))
            .form_param(Parameter()
                        .key('StatusCallback')
                        .value(status_callback))
            .form_param(Parameter()
                        .key('StatusCallbackMethod')
                        .value(status_callback_method))
            .form_param(Parameter()
                        .key('StatusCallbackEvent')
                        .value(status_callback_event))
            .form_param(Parameter()
                        .key('Label')
                        .value(label))
            .form_param(Parameter()
                        .key('Timeout')
                        .value(timeout))
            .form_param(Parameter()
                        .key('Record')
                        .value(record))
            .form_param(Parameter()
                        .key('Muted')
                        .value(muted))
            .form_param(Parameter()
                        .key('Beep')
                        .value(beep))
            .form_param(Parameter()
                        .key('StartConferenceOnEnter')
                        .value(start_conference_on_enter))
            .form_param(Parameter()
                        .key('EndConferenceOnExit')
                        .value(end_conference_on_exit))
            .form_param(Parameter()
                        .key('WaitUrl')
                        .value(wait_url))
            .form_param(Parameter()
                        .key('WaitMethod')
                        .value(wait_method))
            .form_param(Parameter()
                        .key('EarlyMedia')
                        .value(early_media))
            .form_param(Parameter()
                        .key('MaxParticipants')
                        .value(max_participants))
            .form_param(Parameter()
                        .key('ConferenceRecord')
                        .value(conference_record))
            .form_param(Parameter()
                        .key('ConferenceTrim')
                        .value(conference_trim))
            .form_param(Parameter()
                        .key('ConferenceStatusCallback')
                        .value(conference_status_callback))
            .form_param(Parameter()
                        .key('ConferenceStatusCallbackMethod')
                        .value(conference_status_callback_method))
            .form_param(Parameter()
                        .key('ConferenceStatusCallbackEvent')
                        .value(conference_status_callback_event))
            .form_param(Parameter()
                        .key('RecordingChannels')
                        .value(recording_channels))
            .form_param(Parameter()
                        .key('RecordingStatusCallback')
                        .value(recording_status_callback))
            .form_param(Parameter()
                        .key('RecordingStatusCallbackMethod')
                        .value(recording_status_callback_method))
            .form_param(Parameter()
                        .key('SipAuthUsername')
                        .value(sip_auth_username))
            .form_param(Parameter()
                        .key('SipAuthPassword')
                        .value(sip_auth_password))
            .form_param(Parameter()
                        .key('Region')
                        .value(region))
            .form_param(Parameter()
                        .key('ConferenceRecordingStatusCallback')
                        .value(conference_recording_status_callback))
            .form_param(Parameter()
                        .key('ConferenceRecordingStatusCallbackMethod')
                        .value(conference_recording_status_callback_method))
            .form_param(Parameter()
                        .key('RecordingStatusCallbackEvent')
                        .value(recording_status_callback_event))
            .form_param(Parameter()
                        .key('ConferenceRecordingStatusCallbackEvent')
                        .value(conference_recording_status_callback_event))
            .form_param(Parameter()
                        .key('Coaching')
                        .value(coaching))
            .form_param(Parameter()
                        .key('CallSidToCoach')
                        .value(call_sid_to_coach))
            .form_param(Parameter()
                        .key('JitterBufferSize')
                        .value(jitter_buffer_size))
            .form_param(Parameter()
                        .key('Byoc')
                        .value(byoc))
            .form_param(Parameter()
                        .key('CallerId')
                        .value(caller_id))
            .form_param(Parameter()
                        .key('CallReason')
                        .value(call_reason))
            .form_param(Parameter()
                        .key('RecordingTrack')
                        .value(recording_track))
            .form_param(Parameter()
                        .key('TimeLimit')
                        .value(time_limit))
            .form_param(Parameter()
                        .key('MachineDetection')
                        .value(machine_detection))
            .form_param(Parameter()
                        .key('MachineDetectionTimeout')
                        .value(machine_detection_timeout))
            .form_param(Parameter()
                        .key('MachineDetectionSpeechThreshold')
                        .value(machine_detection_speech_threshold))
            .form_param(Parameter()
                        .key('MachineDetectionSpeechEndThreshold')
                        .value(machine_detection_speech_end_threshold))
            .form_param(Parameter()
                        .key('MachineDetectionSilenceTimeout')
                        .value(machine_detection_silence_timeout))
            .form_param(Parameter()
                        .key('AmdStatusCallback')
                        .value(amd_status_callback))
            .form_param(Parameter()
                        .key('AmdStatusCallbackMethod')
                        .value(amd_status_callback_method))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ConferenceSid')
                            .value(conference_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created7.from_dictionary)
        ).execute()

    def list_participant(self,
                         muted,
                         hold,
                         coaching,
                         page_size,
                         accept,
                         account_sid,
                         conference_sid):
        """Does a GET request to /{AccountSid}/Conferences/{ConferenceSid}/Participants.json.

        Args:
            muted (bool): Whether to return only participants that are muted.
                Can be: `true` or `false`.
            hold (bool): Whether to return only participants that are on hold.
                Can be: `true` or `false`.
            coaching (bool): Whether to return only participants who are
                coaching another call. Can be: `true` or `false`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            conference_sid (str): The request template parameter.

        Returns:
            OK27: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{ConferenceSid}/Participants.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Muted')
                         .value(muted))
            .query_param(Parameter()
                         .key('Hold')
                         .value(hold))
            .query_param(Parameter()
                         .key('Coaching')
                         .value(coaching))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ConferenceSid')
                            .value(conference_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK27.from_dictionary)
        ).execute()

    def list_conference_recording(self,
                                  date_created,
                                  date_created_query,
                                  date_created_query_query,
                                  page_size,
                                  accept,
                                  account_sid,
                                  conference_sid):
        """Does a GET request to /{AccountSid}/Conferences/{ConferenceSid}/Recordings.json.

        Args:
            date_created (str): The `date_created` value, specified as
                `YYYY-MM-DD`, of the resources to read. You can also specify
                inequality: `DateCreated<=YYYY-MM-DD` will return recordings
                generated at or before midnight on a given date, and
                `DateCreated>=YYYY-MM-DD` returns recordings generated at or
                after midnight on a date.
            date_created_query (str): The `date_created` value, specified as
                `YYYY-MM-DD`, of the resources to read. You can also specify
                inequality: `DateCreated<=YYYY-MM-DD` will return recordings
                generated at or before midnight on a given date, and
                `DateCreated>=YYYY-MM-DD` returns recordings generated at or
                after midnight on a date.
            date_created_query_query (str): The `date_created` value,
                specified as `YYYY-MM-DD`, of the resources to read. You can
                also specify inequality: `DateCreated<=YYYY-MM-DD` will return
                recordings generated at or before midnight on a given date,
                and `DateCreated>=YYYY-MM-DD` returns recordings generated at
                or after midnight on a date.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            conference_sid (str): The request template parameter.

        Returns:
            OK28: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('DateCreated')
                         .value(date_created))
            .query_param(Parameter()
                         .key('DateCreated<')
                         .value(date_created_query))
            .query_param(Parameter()
                         .key('DateCreated>')
                         .value(date_created_query_query))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ConferenceSid')
                            .value(conference_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK28.from_dictionary)
        ).execute()
