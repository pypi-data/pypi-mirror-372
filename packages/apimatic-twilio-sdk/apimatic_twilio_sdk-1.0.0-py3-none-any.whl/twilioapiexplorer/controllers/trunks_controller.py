# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_25 import Created25
from twilioapiexplorer.models.ok_97 import OK97
from twilioapiexplorer.models.ok_98 import OK98


class TrunksController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(TrunksController, self).__init__(config)

    def create_trunk(self,
                     accept,
                     friendly_name,
                     domain_name,
                     disaster_recovery_url,
                     disaster_recovery_method,
                     transfer_mode,
                     secure,
                     cnam_lookup_enabled,
                     transfer_caller_id):
        """Does a POST request to /v1/Trunks.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 64 characters long.
            domain_name (str): The unique address you reserve on Twilio to
                which you route your SIP traffic. Domain names can contain
                letters, digits, and `-` and must end with `pstn.twilio.com`.
                See [Termination
                Settings](https://www.twilio.com/docs/sip-trunking#termination)
                for more information.
            disaster_recovery_url (str): The URL we should call using the
                `disaster_recovery_method` if an error occurs while sending
                SIP traffic towards the configured Origination URL. We
                retrieve TwiML from the URL and execute the instructions like
                any other normal TwiML call. See [Disaster
                Recovery](https://www.twilio.com/docs/sip-trunking#disaster-rec
                overy) for more information.
            disaster_recovery_method (str): The HTTP method we should use to
                call the `disaster_recovery_url`. Can be: `GET` or `POST`.
            transfer_mode (str): The call transfer settings for the trunk. Can
                be: `enable-all`, `sip-only` and `disable-all`. See
                [Transfer](https://www.twilio.com/docs/sip-trunking/call-transf
                er) for more information.
            secure (bool): Whether Secure Trunking is enabled for the trunk.
                If enabled, all calls going through the trunk will be secure
                using SRTP for media and TLS for signaling. If disabled, then
                RTP will be used for media. See [Secure
                Trunking](https://www.twilio.com/docs/sip-trunking#securetrunki
                ng) for more information.
            cnam_lookup_enabled (bool): Whether Caller ID Name (CNAM) lookup
                should be enabled for the trunk. If enabled, all inbound calls
                to the SIP Trunk from the United States and Canada
                automatically perform a CNAM Lookup and display Caller ID data
                on your phone. See [CNAM
                Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for
                more information.
            transfer_caller_id (str): Caller Id for transfer target. Can be:
                `from-transferee` (default) or `from-transferor`.

        Returns:
            Created25: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Trunks')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('DomainName')
                        .value(domain_name))
            .form_param(Parameter()
                        .key('DisasterRecoveryUrl')
                        .value(disaster_recovery_url))
            .form_param(Parameter()
                        .key('DisasterRecoveryMethod')
                        .value(disaster_recovery_method))
            .form_param(Parameter()
                        .key('TransferMode')
                        .value(transfer_mode))
            .form_param(Parameter()
                        .key('Secure')
                        .value(secure))
            .form_param(Parameter()
                        .key('CnamLookupEnabled')
                        .value(cnam_lookup_enabled))
            .form_param(Parameter()
                        .key('TransferCallerId')
                        .value(transfer_caller_id))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created25.from_dictionary)
        ).execute()

    def list_trunk(self,
                   page_size,
                   accept):
        """Does a GET request to /Trunks.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK97: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_10)
            .path('/Trunks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK97.from_dictionary)
        ).execute()

    def fetch_trunk(self,
                    accept,
                    sid):
        """Does a GET request to /Trunks/{Sid}.

        Args:
            accept (str): The request header parameter.
            sid (str): The request template parameter.

        Returns:
            OK98: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_10)
            .path('/Trunks/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK98.from_dictionary)
        ).execute()

    def delete_trunk(self,
                     sid):
        """Does a DELETE request to /Trunks/{Sid}.

        Args:
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_10)
            .path('/Trunks/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_trunk(self,
                     accept,
                     friendly_name,
                     domain_name,
                     disaster_recovery_url,
                     disaster_recovery_method,
                     transfer_mode,
                     secure,
                     cnam_lookup_enabled,
                     transfer_caller_id,
                     sid):
        """Does a POST request to /Trunks/{Sid}.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 64 characters long.
            domain_name (str): The unique address you reserve on Twilio to
                which you route your SIP traffic. Domain names can contain
                letters, digits, and `-` and must end with `pstn.twilio.com`.
                See [Termination
                Settings](https://www.twilio.com/docs/sip-trunking#termination)
                for more information.
            disaster_recovery_url (str): The URL we should call using the
                `disaster_recovery_method` if an error occurs while sending
                SIP traffic towards the configured Origination URL. We
                retrieve TwiML from the URL and execute the instructions like
                any other normal TwiML call. See [Disaster
                Recovery](https://www.twilio.com/docs/sip-trunking#disaster-rec
                overy) for more information.
            disaster_recovery_method (str): The HTTP method we should use to
                call the `disaster_recovery_url`. Can be: `GET` or `POST`.
            transfer_mode (str): The call transfer settings for the trunk. Can
                be: `enable-all`, `sip-only` and `disable-all`. See
                [Transfer](https://www.twilio.com/docs/sip-trunking/call-transf
                er) for more information.
            secure (bool): Whether Secure Trunking is enabled for the trunk.
                If enabled, all calls going through the trunk will be secure
                using SRTP for media and TLS for signaling. If disabled, then
                RTP will be used for media. See [Secure
                Trunking](https://www.twilio.com/docs/sip-trunking#securetrunki
                ng) for more information.
            cnam_lookup_enabled (bool): Whether Caller ID Name (CNAM) lookup
                should be enabled for the trunk. If enabled, all inbound calls
                to the SIP Trunk from the United States and Canada
                automatically perform a CNAM Lookup and display Caller ID data
                on your phone. See [CNAM
                Lookups](https://www.twilio.com/docs/sip-trunking#CNAM) for
                more information.
            transfer_caller_id (str): Caller Id for transfer target. Can be:
                `from-transferee` (default) or `from-transferor`.
            sid (str): The request template parameter.

        Returns:
            OK98: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_10)
            .path('/Trunks/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('DomainName')
                        .value(domain_name))
            .form_param(Parameter()
                        .key('DisasterRecoveryUrl')
                        .value(disaster_recovery_url))
            .form_param(Parameter()
                        .key('DisasterRecoveryMethod')
                        .value(disaster_recovery_method))
            .form_param(Parameter()
                        .key('TransferMode')
                        .value(transfer_mode))
            .form_param(Parameter()
                        .key('Secure')
                        .value(secure))
            .form_param(Parameter()
                        .key('CnamLookupEnabled')
                        .value(cnam_lookup_enabled))
            .form_param(Parameter()
                        .key('TransferCallerId')
                        .value(transfer_caller_id))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK98.from_dictionary)
        ).execute()
