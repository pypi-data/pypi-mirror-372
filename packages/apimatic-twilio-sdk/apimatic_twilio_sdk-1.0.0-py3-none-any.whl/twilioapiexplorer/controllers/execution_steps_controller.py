# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_220 import OK220
from twilioapiexplorer.models.ok_221 import OK221
from twilioapiexplorer.models.ok_222 import OK222


class ExecutionStepsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ExecutionStepsController, self).__init__(config)

    def list_execution_step(self,
                            page_size,
                            flow_sid,
                            execution_sid,
                            accept):
        """Does a GET request to /v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps.

        Retrieve a list of all Steps for an Execution.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            flow_sid (str): (Required) The SID of the Flow with the Steps to
                read.
            execution_sid (str): (Required) The SID of the Execution with the
                Steps to read.
            accept (str): The request header parameter.

        Returns:
            OK220: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('FlowSid')
                            .value(flow_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ExecutionSid')
                            .value(execution_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK220.from_dictionary)
        ).execute()

    def fetch_execution_step(self,
                             flow_sid,
                             execution_sid,
                             sid,
                             accept):
        """Does a GET request to /v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{Sid}.

        Retrieve a Step.

        Args:
            flow_sid (str): (Required) The SID of the Flow with the Step to
                fetch.
            execution_sid (str): (Required) The SID of the Execution resource
                with the Step to fetch.
            sid (str): (Required) The SID of the ExecutionStep resource to
                fetch.
            accept (str): The request header parameter.

        Returns:
            OK221: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('FlowSid')
                            .value(flow_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ExecutionSid')
                            .value(execution_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK221.from_dictionary)
        ).execute()

    def fetch_execution_step_context(self,
                                     flow_sid,
                                     execution_sid,
                                     step_sid,
                                     accept):
        """Does a GET request to /v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{StepSid}/Context.

        Retrieve the context for an Execution Step.

        Args:
            flow_sid (str): (Required) The SID of the Flow with the Step to
                fetch.
            execution_sid (str): (Required) The SID of the Execution resource
                with the Step to fetch.
            step_sid (str): (Required) The SID of the Step to fetch.
            accept (str): The request header parameter.

        Returns:
            OK222: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{StepSid}/Context')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('FlowSid')
                            .value(flow_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ExecutionSid')
                            .value(execution_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('StepSid')
                            .value(step_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK222.from_dictionary)
        ).execute()
