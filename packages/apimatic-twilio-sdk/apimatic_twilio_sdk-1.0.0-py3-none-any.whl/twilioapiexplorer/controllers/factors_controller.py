# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_290 import OK290
from twilioapiexplorer.models.ok_292 import OK292
from twilioapiexplorer.models.created_79 import Created79


class FactorsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(FactorsController, self).__init__(config)

    def delete_factor(self,
                      service_sid,
                      identity,
                      sid):
        """Does a DELETE request to /v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}.

        Delete a specific Factor.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Factor. This identifier should be immutable, not
                PII, length between 8 and 64 characters, and generated by your
                external system, such as your user's UUID, GUID, or SID. It
                can only contain dash (-) separated alphanumeric characters.
            sid (str): (Required) A 34 character string that uniquely
                identifies this Factor.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_factor(self,
                     service_sid,
                     identity,
                     sid,
                     accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}.

        Fetch a specific Factor.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Factor. This identifier should be immutable, not
                PII, length between 8 and 64 characters, and generated by your
                external system, such as your user's UUID, GUID, or SID. It
                can only contain dash (-) separated alphanumeric characters.
            sid (str): (Required) A 34 character string that uniquely
                identifies this Factor.
            accept (str): The request header parameter.

        Returns:
            OK290: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK290.from_dictionary)
        ).execute()

    def update_factor(self,
                      service_sid,
                      identity,
                      sid,
                      accept,
                      auth_payload,
                      friendly_name,
                      config_notification_token,
                      config_sdk_version,
                      config_time_step,
                      config_skew,
                      config_code_length,
                      config_alg,
                      config_notification_platform):
        """Does a POST request to /v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}.

        Update a specific Factor. This endpoint can be used to Verify a Factor
        if passed an `AuthPayload` param.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Factor. This identifier should be immutable, not
                PII, length between 8 and 64 characters, and generated by your
                external system, such as your user's UUID, GUID, or SID. It
                can only contain dash (-) separated alphanumeric characters.
            sid (str): (Required) A 34 character string that uniquely
                identifies this Factor.
            accept (str): The request header parameter.
            auth_payload (str): The optional payload needed to verify the
                Factor for the first time. E.g. for a TOTP, the numeric code.
            friendly_name (str): The new friendly name of this Factor. It can
                be up to 64 characters.
            config_notification_token (str): For APN, the device token. For
                FCM, the registration token. It is used to send the push
                notifications. Required when `factor_type` is `push`. If
                specified, this value must be between 32 and 255 characters
                long.
            config_sdk_version (str): The Verify Push SDK version used to
                configure the factor
            config_time_step (int): Defines how often, in seconds, are TOTP
                codes generated. i.e, a new TOTP code is generated every
                time_step seconds. Must be between 20 and 60 seconds, inclusive
            config_skew (int): The number of time-steps, past and future, that
                are valid for validation of TOTP codes. Must be between 0 and
                2, inclusive
            config_code_length (int): Number of digits for generated TOTP
                codes. Must be between 3 and 8, inclusive
            config_alg (str): The algorithm used to derive the TOTP codes. Can
                be `sha1`, `sha256` or `sha512`
            config_notification_platform (str): The transport technology used
                to generate the Notification Token. Can be `apn`, `fcm` or
                `none`.  Required when `factor_type` is `push`.

        Returns:
            OK290: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('AuthPayload')
                        .value(auth_payload))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('Config.NotificationToken')
                        .value(config_notification_token))
            .form_param(Parameter()
                        .key('Config.SdkVersion')
                        .value(config_sdk_version))
            .form_param(Parameter()
                        .key('Config.TimeStep')
                        .value(config_time_step))
            .form_param(Parameter()
                        .key('Config.Skew')
                        .value(config_skew))
            .form_param(Parameter()
                        .key('Config.CodeLength')
                        .value(config_code_length))
            .form_param(Parameter()
                        .key('Config.Alg')
                        .value(config_alg))
            .form_param(Parameter()
                        .key('Config.NotificationPlatform')
                        .value(config_notification_platform))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK290.from_dictionary)
        ).execute()

    def list_factor(self,
                    page_size,
                    service_sid,
                    identity,
                    accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Entities/{Identity}/Factors.

        Retrieve a list of all Factors for an Entity.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Factors. This identifier should be immutable, not
                PII, length between 8 and 64 characters, and generated by your
                external system, such as your user's UUID, GUID, or SID. It
                can only contain dash (-) separated alphanumeric characters.
            accept (str): The request header parameter.

        Returns:
            OK292: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Factors')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK292.from_dictionary)
        ).execute()

    def create_new_factor(self,
                          service_sid,
                          identity,
                          accept,
                          friendly_name,
                          factor_type,
                          binding_alg,
                          binding_public_key,
                          config_app_id,
                          config_notification_platform,
                          config_notification_token,
                          config_sdk_version,
                          binding_secret,
                          config_time_step,
                          config_skew,
                          config_code_length,
                          config_alg):
        """Does a POST request to /v2/Services/{ServiceSid}/Entities/{Identity}/Factors.

        Create a new Factor for the Entity

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) Customer unique identity for the Entity
                owner of the Factor. This identifier should be immutable, not
                PII, length between 8 and 64 characters, and generated by your
                external system, such as your user's UUID, GUID, or SID. It
                can only contain dash (-) separated alphanumeric characters.
            accept (str): The request header parameter.
            friendly_name (str): (Required) The friendly name of this Factor.
                This can be any string up to 64 characters, meant for humans
                to distinguish between Factors. For `factor_type` `push`, this
                could be a device name. For `factor_type` `totp`, this value
                is used as the “account name” in constructing the
                `binding.uri` property. At the same time, we recommend
                avoiding providing PII.
            factor_type (str): (Required) The Type of this Factor. Currently
                `push` and `totp` are supported.
            binding_alg (str): The algorithm used when `factor_type` is
                `push`. Algorithm supported: `ES256`
            binding_public_key (str): The Ecdsa public key in PKIX, ASN.1 DER
                format encoded in Base64.  Required when `factor_type` is
                `push`
            config_app_id (str): The ID that uniquely identifies your app in
                the Google or Apple store, such as `com.example.myapp`. It can
                be up to 100 characters long.  Required when `factor_type` is
                `push`.
            config_notification_platform (str): The transport technology used
                to generate the Notification Token. Can be `apn`, `fcm` or
                `none`.  Required when `factor_type` is `push`.
            config_notification_token (str): For APN, the device token. For
                FCM, the registration token. It is used to send the push
                notifications. Must be between 32 and 255 characters long. 
                Required when `factor_type` is `push`.
            config_sdk_version (str): The Verify Push SDK version used to
                configure the factor  Required when `factor_type` is `push`
            binding_secret (str): The shared secret for TOTP factors encoded
                in Base32. This can be provided when creating the Factor,
                otherwise it will be generated.  Used when `factor_type` is
                `totp`
            config_time_step (int): Defines how often, in seconds, are TOTP
                codes generated. i.e, a new TOTP code is generated every
                time_step seconds. Must be between 20 and 60 seconds,
                inclusive. The default value is defined at the service level
                in the property `totp.time_step`. Defaults to 30 seconds if
                not configured.  Used when `factor_type` is `totp`
            config_skew (int): The number of time-steps, past and future, that
                are valid for validation of TOTP codes. Must be between 0 and
                2, inclusive. The default value is defined at the service
                level in the property `totp.skew`. If not configured defaults
                to 1.  Used when `factor_type` is `totp`
            config_code_length (int): Number of digits for generated TOTP
                codes. Must be between 3 and 8, inclusive. The default value
                is defined at the service level in the property
                `totp.code_length`. If not configured defaults to 6.  Used
                when `factor_type` is `totp`
            config_alg (str): The algorithm used to derive the TOTP codes. Can
                be `sha1`, `sha256` or `sha512`. Defaults to `sha1`.  Used
                when `factor_type` is `totp`

        Returns:
            Created79: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}/Factors')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('FactorType')
                        .value(factor_type))
            .form_param(Parameter()
                        .key('Binding.Alg')
                        .value(binding_alg))
            .form_param(Parameter()
                        .key('Binding.PublicKey')
                        .value(binding_public_key))
            .form_param(Parameter()
                        .key('Config.AppId')
                        .value(config_app_id))
            .form_param(Parameter()
                        .key('Config.NotificationPlatform')
                        .value(config_notification_platform))
            .form_param(Parameter()
                        .key('Config.NotificationToken')
                        .value(config_notification_token))
            .form_param(Parameter()
                        .key('Config.SdkVersion')
                        .value(config_sdk_version))
            .form_param(Parameter()
                        .key('Binding.Secret')
                        .value(binding_secret))
            .form_param(Parameter()
                        .key('Config.TimeStep')
                        .value(config_time_step))
            .form_param(Parameter()
                        .key('Config.Skew')
                        .value(config_skew))
            .form_param(Parameter()
                        .key('Config.CodeLength')
                        .value(config_code_length))
            .form_param(Parameter()
                        .key('Config.Alg')
                        .value(config_alg))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created79.from_dictionary)
        ).execute()
