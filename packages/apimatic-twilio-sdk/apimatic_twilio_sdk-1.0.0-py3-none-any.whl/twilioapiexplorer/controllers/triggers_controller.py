# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_91 import Created91
from twilioapiexplorer.models.ok_330 import OK330
from twilioapiexplorer.models.ok_331 import OK331


class TriggersController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(TriggersController, self).__init__(config)

    def create_usage_trigger(self,
                             account_sid,
                             accept,
                             callback_url,
                             trigger_value,
                             usage_category,
                             callback_method,
                             friendly_name,
                             recurring,
                             trigger_by):
        """Does a POST request to /2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json.

        Args:
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                will create the resource.
            accept (str): The request header parameter.
            callback_url (str): (Required) The URL we should call using
                `callback_method` when the trigger fires.
            trigger_value (str): (Required) The usage value at which the
                trigger should fire.  For convenience, you can use an offset
                value such as `+30` to specify a trigger_value that is 30
                units more than the current usage value. Be sure to urlencode
                a `+` as `%2B`.
            usage_category (str): (Required) The usage category that the
                trigger should watch.  Use one of the supported [usage
                categories](https://www.twilio.com/docs/usage/api/usage-record#
                usage-categories) for this value.
            callback_method (str): The HTTP method we should use to call
                `callback_url`. Can be: `GET` or `POST` and the default is
                `POST`.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 64 characters long.
            recurring (str): The frequency of a recurring UsageTrigger.  Can
                be: `daily`, `monthly`, or `yearly` for recurring triggers or
                empty for non-recurring triggers. A trigger will only fire
                once during each period. Recurring times are in GMT.
            trigger_by (str): The field in the
                [UsageRecord](https://www.twilio.com/docs/usage/api/usage-recor
                d) resource that should fire the trigger.  Can be: `count`,
                `usage`, or `price` as described in the [UsageRecords
                documentation](https://www.twilio.com/docs/usage/api/usage-reco
                rd#usage-count-price).  The default is `usage`.

        Returns:
            Created91: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('CallbackUrl')
                        .value(callback_url))
            .form_param(Parameter()
                        .key('TriggerValue')
                        .value(trigger_value))
            .form_param(Parameter()
                        .key('UsageCategory')
                        .value(usage_category))
            .form_param(Parameter()
                        .key('CallbackMethod')
                        .value(callback_method))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('Recurring')
                        .value(recurring))
            .form_param(Parameter()
                        .key('TriggerBy')
                        .value(trigger_by))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created91.from_dictionary)
        ).execute()

    def list_usage_trigger(self,
                           recurring,
                           trigger_by,
                           usage_category,
                           page_size,
                           account_sid,
                           accept):
        """Does a GET request to /2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json.

        Args:
            recurring (str): The frequency of recurring UsageTriggers to read.
                Can be: `daily`, `monthly`, or `yearly` to read recurring
                UsageTriggers. An empty value or a value of `alltime` reads
                non-recurring UsageTriggers.
            trigger_by (str): The trigger field of the UsageTriggers to read. 
                Can be: `count`, `usage`, or `price` as described in the
                [UsageRecords
                documentation](https://www.twilio.com/docs/usage/api/usage-reco
                rd#usage-count-price).
            usage_category (str): The usage category of the UsageTriggers to
                read. Must be a supported [usage
                categories](https://www.twilio.com/docs/usage/api/usage-record#
                usage-categories).
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the UsageTrigger resources to read.
            accept (str): The request header parameter.

        Returns:
            OK330: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Recurring')
                         .value(recurring))
            .query_param(Parameter()
                         .key('TriggerBy')
                         .value(trigger_by))
            .query_param(Parameter()
                         .key('UsageCategory')
                         .value(usage_category))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK330.from_dictionary)
        ).execute()

    def fetch_usage_trigger(self,
                            account_sid,
                            accept,
                            sid):
        """Does a GET request to /2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json.

        Args:
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the UsageTrigger resource to fetch.
            accept (str): The request header parameter.
            sid (str): The request template parameter.

        Returns:
            OK331: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK331.from_dictionary)
        ).execute()

    def update_usage_trigger(self,
                             account_sid,
                             accept,
                             callback_method,
                             callback_url,
                             friendly_name,
                             sid):
        """Does a POST request to /2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json.

        Args:
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the UsageTrigger resources to update.
            accept (str): The request header parameter.
            callback_method (str): The HTTP method we should use to call
                `callback_url`. Can be: `GET` or `POST` and the default is
                `POST`.
            callback_url (str): The URL we should call using `callback_method`
                when the trigger fires.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 64 characters long.
            sid (str): The request template parameter.

        Returns:
            OK331: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('CallbackMethod')
                        .value(callback_method))
            .form_param(Parameter()
                        .key('CallbackUrl')
                        .value(callback_url))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK331.from_dictionary)
        ).execute()

    def delete_usage_trigger(self,
                             account_sid,
                             sid):
        """Does a DELETE request to /2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json.

        Args:
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the UsageTrigger resources to delete.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
