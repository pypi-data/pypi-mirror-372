# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_116 import OK116
from twilioapiexplorer.models.created_32 import Created32
from twilioapiexplorer.models.ok_117 import OK117


class CredentialsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(CredentialsController, self).__init__(config)

    def list_credential(self,
                        page_size,
                        accept):
        """Does a GET request to /v1/Credentials.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK116: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Credentials')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK116.from_dictionary)
        ).execute()

    def create_credential(self,
                          accept,
                          mtype,
                          friendly_name,
                          certificate,
                          private_key,
                          sandbox,
                          api_key,
                          secret):
        """Does a POST request to /v1/Credentials.

        Args:
            accept (str): The request header parameter.
            mtype (str): (Required) The Credential type. Can be: `gcm`, `fcm`,
                or `apn`.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 64 characters long.
            certificate (str): [APN only] The URL-encoded representation of
                the certificate. Strip everything outside of the headers, e.g.
                `-----BEGIN
                CERTIFICATE-----MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQE
                FBQAwgZYxCzAJBgNV.....A==-----END CERTIFICATE-----`
            private_key (str): [APN only] The URL-encoded representation of
                the private key. Strip everything outside of the headers, e.g.
                `-----BEGIN RSA PRIVATE
                KEY-----MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+c
                UDqmxiieR\n.-----END RSA PRIVATE KEY-----`
            sandbox (bool): [APN only] Whether to send the credential to
                sandbox APNs. Can be `true` to send to sandbox APNs or `false`
                to send to production.
            api_key (str): [GCM only] The `Server key` of your project from
                Firebase console under Settings / Cloud messaging.
            secret (str): [FCM only] The `Server key` of your project from
                Firebase console under Settings / Cloud messaging.

        Returns:
            Created32: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Credentials')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Type')
                        .value(mtype))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('Certificate')
                        .value(certificate))
            .form_param(Parameter()
                        .key('PrivateKey')
                        .value(private_key))
            .form_param(Parameter()
                        .key('Sandbox')
                        .value(sandbox))
            .form_param(Parameter()
                        .key('ApiKey')
                        .value(api_key))
            .form_param(Parameter()
                        .key('Secret')
                        .value(secret))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created32.from_dictionary)
        ).execute()

    def fetch_credential(self,
                         sid,
                         accept):
        """Does a GET request to /v1/Credentials/{Sid}.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Credential resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK117: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Credentials/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK117.from_dictionary)
        ).execute()

    def update_credential(self,
                          sid,
                          accept,
                          friendly_name,
                          certificate,
                          private_key,
                          sandbox,
                          api_key,
                          secret):
        """Does a POST request to /v1/Credentials/{Sid}.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Credential resource to update.
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 64 characters long.
            certificate (str): [APN only] The URL-encoded representation of
                the certificate. Strip everything outside of the headers, e.g.
                `-----BEGIN
                CERTIFICATE-----MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQE
                FBQAwgZYxCzAJBgNV.....A==-----END CERTIFICATE-----`
            private_key (str): [APN only] The URL-encoded representation of
                the private key. Strip everything outside of the headers, e.g.
                `-----BEGIN RSA PRIVATE
                KEY-----MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+c
                UDqmxiieR\n.-----END RSA PRIVATE KEY-----`
            sandbox (bool): [APN only] Whether to send the credential to
                sandbox APNs. Can be `true` to send to sandbox APNs or `false`
                to send to production.
            api_key (str): [GCM only] The `Server key` of your project from
                Firebase console under Settings / Cloud messaging.
            secret (str): [FCM only] The `Server key` of your project from
                Firebase console under Settings / Cloud messaging.

        Returns:
            OK117: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Credentials/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('Certificate')
                        .value(certificate))
            .form_param(Parameter()
                        .key('PrivateKey')
                        .value(private_key))
            .form_param(Parameter()
                        .key('Sandbox')
                        .value(sandbox))
            .form_param(Parameter()
                        .key('ApiKey')
                        .value(api_key))
            .form_param(Parameter()
                        .key('Secret')
                        .value(secret))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK117.from_dictionary)
        ).execute()

    def delete_credential(self,
                          sid):
        """Does a DELETE request to /v1/Credentials/{Sid}.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Credential resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Credentials/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
