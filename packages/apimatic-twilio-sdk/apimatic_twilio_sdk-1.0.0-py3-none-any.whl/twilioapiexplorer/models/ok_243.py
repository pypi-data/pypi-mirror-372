# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK243(object):

    """Implementation of the 'OK243' model.

    Attributes:
        sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        date_started (str): The model property of type str.
        date_ended (str): The model property of type str.
        date_last_interaction (str): The model property of type str.
        date_expiry (str): The model property of type str.
        unique_name (str): The model property of type str.
        status (str): The model property of type str.
        closed_reason (str): The model property of type str.
        ttl (int): The model property of type int.
        mode (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "service_sid": 'service_sid',
        "account_sid": 'account_sid',
        "date_started": 'date_started',
        "date_ended": 'date_ended',
        "date_last_interaction": 'date_last_interaction',
        "date_expiry": 'date_expiry',
        "unique_name": 'unique_name',
        "status": 'status',
        "closed_reason": 'closed_reason',
        "ttl": 'ttl',
        "mode": 'mode',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 sid=None,
                 service_sid=None,
                 account_sid=None,
                 date_started=None,
                 date_ended=None,
                 date_last_interaction=None,
                 date_expiry=None,
                 unique_name=None,
                 status=None,
                 closed_reason=None,
                 ttl=None,
                 mode=None,
                 date_created=None,
                 date_updated=None,
                 url=None,
                 links=None):
        """Constructor for the OK243 class"""

        # Initialize members of the class
        self.sid = sid 
        self.service_sid = service_sid 
        self.account_sid = account_sid 
        self.date_started = date_started 
        self.date_ended = date_ended 
        self.date_last_interaction = date_last_interaction 
        self.date_expiry = date_expiry 
        self.unique_name = unique_name 
        self.status = status 
        self.closed_reason = closed_reason 
        self.ttl = ttl 
        self.mode = mode 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        date_started = dictionary.get("date_started") if dictionary.get("date_started") else None
        date_ended = dictionary.get("date_ended") if dictionary.get("date_ended") else None
        date_last_interaction = dictionary.get("date_last_interaction") if dictionary.get("date_last_interaction") else None
        date_expiry = dictionary.get("date_expiry") if dictionary.get("date_expiry") else None
        unique_name = dictionary.get("unique_name") if dictionary.get("unique_name") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        closed_reason = dictionary.get("closed_reason") if dictionary.get("closed_reason") else None
        ttl = dictionary.get("ttl") if dictionary.get("ttl") else None
        mode = dictionary.get("mode") if dictionary.get("mode") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(sid,
                   service_sid,
                   account_sid,
                   date_started,
                   date_ended,
                   date_last_interaction,
                   date_expiry,
                   unique_name,
                   status,
                   closed_reason,
                   ttl,
                   mode,
                   date_created,
                   date_updated,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'date_started={self.date_started!r}, '
                f'date_ended={self.date_ended!r}, '
                f'date_last_interaction={self.date_last_interaction!r}, '
                f'date_expiry={self.date_expiry!r}, '
                f'unique_name={self.unique_name!r}, '
                f'status={self.status!r}, '
                f'closed_reason={self.closed_reason!r}, '
                f'ttl={self.ttl!r}, '
                f'mode={self.mode!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'date_started={self.date_started!s}, '
                f'date_ended={self.date_ended!s}, '
                f'date_last_interaction={self.date_last_interaction!s}, '
                f'date_expiry={self.date_expiry!s}, '
                f'unique_name={self.unique_name!s}, '
                f'status={self.status!s}, '
                f'closed_reason={self.closed_reason!s}, '
                f'ttl={self.ttl!s}, '
                f'mode={self.mode!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
