# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK293(object):

    """Implementation of the 'OK293' model.

    Attributes:
        form_type (str): The model property of type str.
        forms (Any): The model property of type Any.
        form_meta (Any): The model property of type Any.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "form_type": 'form_type',
        "forms": 'forms',
        "form_meta": 'form_meta',
        "url": 'url'
    }

    def __init__(self,
                 form_type=None,
                 forms=None,
                 form_meta=None,
                 url=None):
        """Constructor for the OK293 class"""

        # Initialize members of the class
        self.form_type = form_type 
        self.forms = forms 
        self.form_meta = form_meta 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        form_type = dictionary.get("form_type") if dictionary.get("form_type") else None
        forms = dictionary.get("forms") if dictionary.get("forms") else None
        form_meta = dictionary.get("form_meta") if dictionary.get("form_meta") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(form_type,
                   forms,
                   form_meta,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'form_type={self.form_type!r}, '
                f'forms={self.forms!r}, '
                f'form_meta={self.form_meta!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'form_type={self.form_type!s}, '
                f'forms={self.forms!s}, '
                f'form_meta={self.form_meta!s}, '
                f'url={self.url!s})')
