# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK222(object):

    """Implementation of the 'OK222' model.

    Attributes:
        account_sid (str): The model property of type str.
        context (Any): The model property of type Any.
        execution_sid (str): The model property of type str.
        flow_sid (str): The model property of type str.
        step_sid (str): The model property of type str.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "context": 'context',
        "execution_sid": 'execution_sid',
        "flow_sid": 'flow_sid',
        "step_sid": 'step_sid',
        "url": 'url'
    }

    def __init__(self,
                 account_sid=None,
                 context=None,
                 execution_sid=None,
                 flow_sid=None,
                 step_sid=None,
                 url=None):
        """Constructor for the OK222 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.context = context 
        self.execution_sid = execution_sid 
        self.flow_sid = flow_sid 
        self.step_sid = step_sid 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        context = dictionary.get("context") if dictionary.get("context") else None
        execution_sid = dictionary.get("execution_sid") if dictionary.get("execution_sid") else None
        flow_sid = dictionary.get("flow_sid") if dictionary.get("flow_sid") else None
        step_sid = dictionary.get("step_sid") if dictionary.get("step_sid") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(account_sid,
                   context,
                   execution_sid,
                   flow_sid,
                   step_sid,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'context={self.context!r}, '
                f'execution_sid={self.execution_sid!r}, '
                f'flow_sid={self.flow_sid!r}, '
                f'step_sid={self.step_sid!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'context={self.context!s}, '
                f'execution_sid={self.execution_sid!s}, '
                f'flow_sid={self.flow_sid!s}, '
                f'step_sid={self.step_sid!s}, '
                f'url={self.url!s})')
