# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class FieldValue(object):

    """Implementation of the 'FieldValue' model.

    Attributes:
        account_sid (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        field_type_sid (str): The model property of type str.
        language (str): The model property of type str.
        assistant_sid (str): The model property of type str.
        sid (str): The model property of type str.
        value (str): The model property of type str.
        url (str): The model property of type str.
        synonym_of (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "field_type_sid": 'field_type_sid',
        "language": 'language',
        "assistant_sid": 'assistant_sid',
        "sid": 'sid',
        "value": 'value',
        "url": 'url',
        "synonym_of": 'synonym_of'
    }

    def __init__(self,
                 account_sid=None,
                 date_created=None,
                 date_updated=None,
                 field_type_sid=None,
                 language=None,
                 assistant_sid=None,
                 sid=None,
                 value=None,
                 url=None,
                 synonym_of=None):
        """Constructor for the FieldValue class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.field_type_sid = field_type_sid 
        self.language = language 
        self.assistant_sid = assistant_sid 
        self.sid = sid 
        self.value = value 
        self.url = url 
        self.synonym_of = synonym_of 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        field_type_sid = dictionary.get("field_type_sid") if dictionary.get("field_type_sid") else None
        language = dictionary.get("language") if dictionary.get("language") else None
        assistant_sid = dictionary.get("assistant_sid") if dictionary.get("assistant_sid") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        value = dictionary.get("value") if dictionary.get("value") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        synonym_of = dictionary.get("synonym_of") if dictionary.get("synonym_of") else None
        # Return an object of this model
        return cls(account_sid,
                   date_created,
                   date_updated,
                   field_type_sid,
                   language,
                   assistant_sid,
                   sid,
                   value,
                   url,
                   synonym_of)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'field_type_sid={self.field_type_sid!r}, '
                f'language={self.language!r}, '
                f'assistant_sid={self.assistant_sid!r}, '
                f'sid={self.sid!r}, '
                f'value={self.value!r}, '
                f'url={self.url!r}, '
                f'synonym_of={self.synonym_of!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'field_type_sid={self.field_type_sid!s}, '
                f'language={self.language!s}, '
                f'assistant_sid={self.assistant_sid!s}, '
                f'sid={self.sid!s}, '
                f'value={self.value!s}, '
                f'url={self.url!s}, '
                f'synonym_of={self.synonym_of!s})')
