# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK74(object):

    """Implementation of the 'OK74' model.

    Attributes:
        account_sid (str): The model property of type str.
        longest_task_waiting_age (int): The model property of type int.
        longest_task_waiting_sid (str): The model property of type str.
        longest_relative_task_age_in_queue (int): The model property of type
            int.
        longest_relative_task_sid_in_queue (str): The model property of type
            str.
        task_queue_sid (str): The model property of type str.
        tasks_by_priority (Any): The model property of type Any.
        tasks_by_status (Any): The model property of type Any.
        total_available_workers (int): The model property of type int.
        total_eligible_workers (int): The model property of type int.
        total_tasks (int): The model property of type int.
        workspace_sid (str): The model property of type str.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "longest_task_waiting_age": 'longest_task_waiting_age',
        "longest_task_waiting_sid": 'longest_task_waiting_sid',
        "longest_relative_task_age_in_queue": 'longest_relative_task_age_in_queue',
        "longest_relative_task_sid_in_queue": 'longest_relative_task_sid_in_queue',
        "task_queue_sid": 'task_queue_sid',
        "tasks_by_priority": 'tasks_by_priority',
        "tasks_by_status": 'tasks_by_status',
        "total_available_workers": 'total_available_workers',
        "total_eligible_workers": 'total_eligible_workers',
        "total_tasks": 'total_tasks',
        "workspace_sid": 'workspace_sid',
        "url": 'url'
    }

    def __init__(self,
                 account_sid=None,
                 longest_task_waiting_age=None,
                 longest_task_waiting_sid=None,
                 longest_relative_task_age_in_queue=None,
                 longest_relative_task_sid_in_queue=None,
                 task_queue_sid=None,
                 tasks_by_priority=None,
                 tasks_by_status=None,
                 total_available_workers=None,
                 total_eligible_workers=None,
                 total_tasks=None,
                 workspace_sid=None,
                 url=None):
        """Constructor for the OK74 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.longest_task_waiting_age = longest_task_waiting_age 
        self.longest_task_waiting_sid = longest_task_waiting_sid 
        self.longest_relative_task_age_in_queue = longest_relative_task_age_in_queue 
        self.longest_relative_task_sid_in_queue = longest_relative_task_sid_in_queue 
        self.task_queue_sid = task_queue_sid 
        self.tasks_by_priority = tasks_by_priority 
        self.tasks_by_status = tasks_by_status 
        self.total_available_workers = total_available_workers 
        self.total_eligible_workers = total_eligible_workers 
        self.total_tasks = total_tasks 
        self.workspace_sid = workspace_sid 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        longest_task_waiting_age = dictionary.get("longest_task_waiting_age") if dictionary.get("longest_task_waiting_age") else None
        longest_task_waiting_sid = dictionary.get("longest_task_waiting_sid") if dictionary.get("longest_task_waiting_sid") else None
        longest_relative_task_age_in_queue = dictionary.get("longest_relative_task_age_in_queue") if dictionary.get("longest_relative_task_age_in_queue") else None
        longest_relative_task_sid_in_queue = dictionary.get("longest_relative_task_sid_in_queue") if dictionary.get("longest_relative_task_sid_in_queue") else None
        task_queue_sid = dictionary.get("task_queue_sid") if dictionary.get("task_queue_sid") else None
        tasks_by_priority = dictionary.get("tasks_by_priority") if dictionary.get("tasks_by_priority") else None
        tasks_by_status = dictionary.get("tasks_by_status") if dictionary.get("tasks_by_status") else None
        total_available_workers = dictionary.get("total_available_workers") if dictionary.get("total_available_workers") else None
        total_eligible_workers = dictionary.get("total_eligible_workers") if dictionary.get("total_eligible_workers") else None
        total_tasks = dictionary.get("total_tasks") if dictionary.get("total_tasks") else None
        workspace_sid = dictionary.get("workspace_sid") if dictionary.get("workspace_sid") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(account_sid,
                   longest_task_waiting_age,
                   longest_task_waiting_sid,
                   longest_relative_task_age_in_queue,
                   longest_relative_task_sid_in_queue,
                   task_queue_sid,
                   tasks_by_priority,
                   tasks_by_status,
                   total_available_workers,
                   total_eligible_workers,
                   total_tasks,
                   workspace_sid,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'longest_task_waiting_age={self.longest_task_waiting_age!r}, '
                f'longest_task_waiting_sid={self.longest_task_waiting_sid!r}, '
                f'longest_relative_task_age_in_queue={self.longest_relative_task_age_in_queue!r}, '
                f'longest_relative_task_sid_in_queue={self.longest_relative_task_sid_in_queue!r}, '
                f'task_queue_sid={self.task_queue_sid!r}, '
                f'tasks_by_priority={self.tasks_by_priority!r}, '
                f'tasks_by_status={self.tasks_by_status!r}, '
                f'total_available_workers={self.total_available_workers!r}, '
                f'total_eligible_workers={self.total_eligible_workers!r}, '
                f'total_tasks={self.total_tasks!r}, '
                f'workspace_sid={self.workspace_sid!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'longest_task_waiting_age={self.longest_task_waiting_age!s}, '
                f'longest_task_waiting_sid={self.longest_task_waiting_sid!s}, '
                f'longest_relative_task_age_in_queue={self.longest_relative_task_age_in_queue!s}, '
                f'longest_relative_task_sid_in_queue={self.longest_relative_task_sid_in_queue!s}, '
                f'task_queue_sid={self.task_queue_sid!s}, '
                f'tasks_by_priority={self.tasks_by_priority!s}, '
                f'tasks_by_status={self.tasks_by_status!s}, '
                f'total_available_workers={self.total_available_workers!s}, '
                f'total_eligible_workers={self.total_eligible_workers!s}, '
                f'total_tasks={self.total_tasks!s}, '
                f'workspace_sid={self.workspace_sid!s}, '
                f'url={self.url!s})')
