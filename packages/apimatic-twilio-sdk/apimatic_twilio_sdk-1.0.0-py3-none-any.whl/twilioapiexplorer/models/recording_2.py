# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Recording2(object):

    """Implementation of the 'Recording2' model.

    Attributes:
        account_sid (str): The model property of type str.
        status (str): The model property of type str.
        date_created (str): The model property of type str.
        sid (str): The model property of type str.
        source_sid (str): The model property of type str.
        size (int): The model property of type int.
        url (str): The model property of type str.
        mtype (str): The model property of type str.
        duration (int): The model property of type int.
        container_format (str): The model property of type str.
        codec (str): The model property of type str.
        grouping_sids (Any): The model property of type Any.
        track_name (str): The model property of type str.
        offset (int): The model property of type int.
        media_external_location (str): The model property of type str.
        room_sid (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "status": 'status',
        "date_created": 'date_created',
        "sid": 'sid',
        "source_sid": 'source_sid',
        "size": 'size',
        "url": 'url',
        "mtype": 'type',
        "duration": 'duration',
        "container_format": 'container_format',
        "codec": 'codec',
        "grouping_sids": 'grouping_sids',
        "track_name": 'track_name',
        "offset": 'offset',
        "media_external_location": 'media_external_location',
        "room_sid": 'room_sid',
        "links": 'links'
    }

    def __init__(self,
                 account_sid=None,
                 status=None,
                 date_created=None,
                 sid=None,
                 source_sid=None,
                 size=None,
                 url=None,
                 mtype=None,
                 duration=None,
                 container_format=None,
                 codec=None,
                 grouping_sids=None,
                 track_name=None,
                 offset=None,
                 media_external_location=None,
                 room_sid=None,
                 links=None):
        """Constructor for the Recording2 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.status = status 
        self.date_created = date_created 
        self.sid = sid 
        self.source_sid = source_sid 
        self.size = size 
        self.url = url 
        self.mtype = mtype 
        self.duration = duration 
        self.container_format = container_format 
        self.codec = codec 
        self.grouping_sids = grouping_sids 
        self.track_name = track_name 
        self.offset = offset 
        self.media_external_location = media_external_location 
        self.room_sid = room_sid 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        source_sid = dictionary.get("source_sid") if dictionary.get("source_sid") else None
        size = dictionary.get("size") if dictionary.get("size") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else None
        container_format = dictionary.get("container_format") if dictionary.get("container_format") else None
        codec = dictionary.get("codec") if dictionary.get("codec") else None
        grouping_sids = dictionary.get("grouping_sids") if dictionary.get("grouping_sids") else None
        track_name = dictionary.get("track_name") if dictionary.get("track_name") else None
        offset = dictionary.get("offset") if dictionary.get("offset") else None
        media_external_location = dictionary.get("media_external_location") if dictionary.get("media_external_location") else None
        room_sid = dictionary.get("room_sid") if dictionary.get("room_sid") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(account_sid,
                   status,
                   date_created,
                   sid,
                   source_sid,
                   size,
                   url,
                   mtype,
                   duration,
                   container_format,
                   codec,
                   grouping_sids,
                   track_name,
                   offset,
                   media_external_location,
                   room_sid,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'status={self.status!r}, '
                f'date_created={self.date_created!r}, '
                f'sid={self.sid!r}, '
                f'source_sid={self.source_sid!r}, '
                f'size={self.size!r}, '
                f'url={self.url!r}, '
                f'mtype={self.mtype!r}, '
                f'duration={self.duration!r}, '
                f'container_format={self.container_format!r}, '
                f'codec={self.codec!r}, '
                f'grouping_sids={self.grouping_sids!r}, '
                f'track_name={self.track_name!r}, '
                f'offset={self.offset!r}, '
                f'media_external_location={self.media_external_location!r}, '
                f'room_sid={self.room_sid!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'status={self.status!s}, '
                f'date_created={self.date_created!s}, '
                f'sid={self.sid!s}, '
                f'source_sid={self.source_sid!s}, '
                f'size={self.size!s}, '
                f'url={self.url!s}, '
                f'mtype={self.mtype!s}, '
                f'duration={self.duration!s}, '
                f'container_format={self.container_format!s}, '
                f'codec={self.codec!s}, '
                f'grouping_sids={self.grouping_sids!s}, '
                f'track_name={self.track_name!s}, '
                f'offset={self.offset!s}, '
                f'media_external_location={self.media_external_location!s}, '
                f'room_sid={self.room_sid!s}, '
                f'links={self.links!s})')
