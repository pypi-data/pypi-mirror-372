# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Service1(object):

    """Implementation of the 'Service1' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        friendly_name (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        default_service_role_sid (str): The model property of type str.
        default_channel_role_sid (str): The model property of type str.
        default_channel_creator_role_sid (str): The model property of type str.
        read_status_enabled (bool): The model property of type bool.
        reachability_enabled (bool): The model property of type bool.
        typing_indicator_timeout (int): The model property of type int.
        consumption_report_interval (int): The model property of type int.
        limits (Any): The model property of type Any.
        pre_webhook_url (str): The model property of type str.
        post_webhook_url (str): The model property of type str.
        webhook_method (str): The model property of type str.
        webhook_filters (List[str]): The model property of type List[str].
        pre_webhook_retry_count (int): The model property of type int.
        post_webhook_retry_count (int): The model property of type int.
        notifications (Any): The model property of type Any.
        media (Any): The model property of type Any.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "friendly_name": 'friendly_name',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "default_service_role_sid": 'default_service_role_sid',
        "default_channel_role_sid": 'default_channel_role_sid',
        "default_channel_creator_role_sid": 'default_channel_creator_role_sid',
        "read_status_enabled": 'read_status_enabled',
        "reachability_enabled": 'reachability_enabled',
        "typing_indicator_timeout": 'typing_indicator_timeout',
        "consumption_report_interval": 'consumption_report_interval',
        "limits": 'limits',
        "pre_webhook_url": 'pre_webhook_url',
        "post_webhook_url": 'post_webhook_url',
        "webhook_method": 'webhook_method',
        "webhook_filters": 'webhook_filters',
        "pre_webhook_retry_count": 'pre_webhook_retry_count',
        "post_webhook_retry_count": 'post_webhook_retry_count',
        "notifications": 'notifications',
        "media": 'media',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 friendly_name=None,
                 date_created=None,
                 date_updated=None,
                 default_service_role_sid=None,
                 default_channel_role_sid=None,
                 default_channel_creator_role_sid=None,
                 read_status_enabled=None,
                 reachability_enabled=None,
                 typing_indicator_timeout=None,
                 consumption_report_interval=None,
                 limits=None,
                 pre_webhook_url=None,
                 post_webhook_url=None,
                 webhook_method=None,
                 webhook_filters=None,
                 pre_webhook_retry_count=None,
                 post_webhook_retry_count=None,
                 notifications=None,
                 media=None,
                 url=None,
                 links=None):
        """Constructor for the Service1 class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.friendly_name = friendly_name 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.default_service_role_sid = default_service_role_sid 
        self.default_channel_role_sid = default_channel_role_sid 
        self.default_channel_creator_role_sid = default_channel_creator_role_sid 
        self.read_status_enabled = read_status_enabled 
        self.reachability_enabled = reachability_enabled 
        self.typing_indicator_timeout = typing_indicator_timeout 
        self.consumption_report_interval = consumption_report_interval 
        self.limits = limits 
        self.pre_webhook_url = pre_webhook_url 
        self.post_webhook_url = post_webhook_url 
        self.webhook_method = webhook_method 
        self.webhook_filters = webhook_filters 
        self.pre_webhook_retry_count = pre_webhook_retry_count 
        self.post_webhook_retry_count = post_webhook_retry_count 
        self.notifications = notifications 
        self.media = media 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        default_service_role_sid = dictionary.get("default_service_role_sid") if dictionary.get("default_service_role_sid") else None
        default_channel_role_sid = dictionary.get("default_channel_role_sid") if dictionary.get("default_channel_role_sid") else None
        default_channel_creator_role_sid = dictionary.get("default_channel_creator_role_sid") if dictionary.get("default_channel_creator_role_sid") else None
        read_status_enabled = dictionary.get("read_status_enabled") if "read_status_enabled" in dictionary.keys() else None
        reachability_enabled = dictionary.get("reachability_enabled") if "reachability_enabled" in dictionary.keys() else None
        typing_indicator_timeout = dictionary.get("typing_indicator_timeout") if dictionary.get("typing_indicator_timeout") else None
        consumption_report_interval = dictionary.get("consumption_report_interval") if dictionary.get("consumption_report_interval") else None
        limits = dictionary.get("limits") if dictionary.get("limits") else None
        pre_webhook_url = dictionary.get("pre_webhook_url") if dictionary.get("pre_webhook_url") else None
        post_webhook_url = dictionary.get("post_webhook_url") if dictionary.get("post_webhook_url") else None
        webhook_method = dictionary.get("webhook_method") if dictionary.get("webhook_method") else None
        webhook_filters = dictionary.get("webhook_filters") if dictionary.get("webhook_filters") else None
        pre_webhook_retry_count = dictionary.get("pre_webhook_retry_count") if dictionary.get("pre_webhook_retry_count") else None
        post_webhook_retry_count = dictionary.get("post_webhook_retry_count") if dictionary.get("post_webhook_retry_count") else None
        notifications = dictionary.get("notifications") if dictionary.get("notifications") else None
        media = dictionary.get("media") if dictionary.get("media") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   friendly_name,
                   date_created,
                   date_updated,
                   default_service_role_sid,
                   default_channel_role_sid,
                   default_channel_creator_role_sid,
                   read_status_enabled,
                   reachability_enabled,
                   typing_indicator_timeout,
                   consumption_report_interval,
                   limits,
                   pre_webhook_url,
                   post_webhook_url,
                   webhook_method,
                   webhook_filters,
                   pre_webhook_retry_count,
                   post_webhook_retry_count,
                   notifications,
                   media,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'default_service_role_sid={self.default_service_role_sid!r}, '
                f'default_channel_role_sid={self.default_channel_role_sid!r}, '
                f'default_channel_creator_role_sid={self.default_channel_creator_role_sid!r}, '
                f'read_status_enabled={self.read_status_enabled!r}, '
                f'reachability_enabled={self.reachability_enabled!r}, '
                f'typing_indicator_timeout={self.typing_indicator_timeout!r}, '
                f'consumption_report_interval={self.consumption_report_interval!r}, '
                f'limits={self.limits!r}, '
                f'pre_webhook_url={self.pre_webhook_url!r}, '
                f'post_webhook_url={self.post_webhook_url!r}, '
                f'webhook_method={self.webhook_method!r}, '
                f'webhook_filters={self.webhook_filters!r}, '
                f'pre_webhook_retry_count={self.pre_webhook_retry_count!r}, '
                f'post_webhook_retry_count={self.post_webhook_retry_count!r}, '
                f'notifications={self.notifications!r}, '
                f'media={self.media!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'default_service_role_sid={self.default_service_role_sid!s}, '
                f'default_channel_role_sid={self.default_channel_role_sid!s}, '
                f'default_channel_creator_role_sid={self.default_channel_creator_role_sid!s}, '
                f'read_status_enabled={self.read_status_enabled!s}, '
                f'reachability_enabled={self.reachability_enabled!s}, '
                f'typing_indicator_timeout={self.typing_indicator_timeout!s}, '
                f'consumption_report_interval={self.consumption_report_interval!s}, '
                f'limits={self.limits!s}, '
                f'pre_webhook_url={self.pre_webhook_url!s}, '
                f'post_webhook_url={self.post_webhook_url!s}, '
                f'webhook_method={self.webhook_method!s}, '
                f'webhook_filters={self.webhook_filters!s}, '
                f'pre_webhook_retry_count={self.pre_webhook_retry_count!s}, '
                f'post_webhook_retry_count={self.post_webhook_retry_count!s}, '
                f'notifications={self.notifications!s}, '
                f'media={self.media!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
