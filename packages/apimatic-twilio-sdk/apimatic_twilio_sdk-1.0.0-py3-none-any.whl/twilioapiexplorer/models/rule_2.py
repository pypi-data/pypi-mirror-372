# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Rule2(object):

    """Implementation of the 'Rule2' model.

    Attributes:
        mtype (str): The model property of type str.
        all (bool): The model property of type bool.
        publisher (str): The model property of type str.
        track (str): The model property of type str.
        kind (str): The model property of type str.
        priority (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "all": 'all',
        "publisher": 'publisher',
        "track": 'track',
        "kind": 'kind',
        "priority": 'priority'
    }

    def __init__(self,
                 mtype=None,
                 all=None,
                 publisher=None,
                 track=None,
                 kind=None,
                 priority=None):
        """Constructor for the Rule2 class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.all = all 
        self.publisher = publisher 
        self.track = track 
        self.kind = kind 
        self.priority = priority 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        all = dictionary.get("all") if "all" in dictionary.keys() else None
        publisher = dictionary.get("publisher") if dictionary.get("publisher") else None
        track = dictionary.get("track") if dictionary.get("track") else None
        kind = dictionary.get("kind") if dictionary.get("kind") else None
        priority = dictionary.get("priority") if dictionary.get("priority") else None
        # Return an object of this model
        return cls(mtype,
                   all,
                   publisher,
                   track,
                   kind,
                   priority)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'all={self.all!r}, '
                f'publisher={self.publisher!r}, '
                f'track={self.track!r}, '
                f'kind={self.kind!r}, '
                f'priority={self.priority!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'all={self.all!s}, '
                f'publisher={self.publisher!s}, '
                f'track={self.track!s}, '
                f'kind={self.kind!s}, '
                f'priority={self.priority!s})')
