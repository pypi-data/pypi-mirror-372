# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK175(object):

    """Implementation of the 'OK175' model.

    Attributes:
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        map_sid (str): The model property of type str.
        identity (str): The model property of type str.
        read (bool): The model property of type bool.
        write (bool): The model property of type bool.
        manage (bool): The model property of type bool.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "map_sid": 'map_sid',
        "identity": 'identity',
        "read": 'read',
        "write": 'write',
        "manage": 'manage',
        "url": 'url'
    }

    def __init__(self,
                 account_sid=None,
                 service_sid=None,
                 map_sid=None,
                 identity=None,
                 read=None,
                 write=None,
                 manage=None,
                 url=None):
        """Constructor for the OK175 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.map_sid = map_sid 
        self.identity = identity 
        self.read = read 
        self.write = write 
        self.manage = manage 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        map_sid = dictionary.get("map_sid") if dictionary.get("map_sid") else None
        identity = dictionary.get("identity") if dictionary.get("identity") else None
        read = dictionary.get("read") if "read" in dictionary.keys() else None
        write = dictionary.get("write") if "write" in dictionary.keys() else None
        manage = dictionary.get("manage") if "manage" in dictionary.keys() else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(account_sid,
                   service_sid,
                   map_sid,
                   identity,
                   read,
                   write,
                   manage,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'map_sid={self.map_sid!r}, '
                f'identity={self.identity!r}, '
                f'read={self.read!r}, '
                f'write={self.write!r}, '
                f'manage={self.manage!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'map_sid={self.map_sid!s}, '
                f'identity={self.identity!s}, '
                f'read={self.read!s}, '
                f'write={self.write!s}, '
                f'manage={self.manage!s}, '
                f'url={self.url!s})')
