# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK19(object):

    """Implementation of the 'OK19' model.

    Attributes:
        account_sid (str): The model property of type str.
        api_version (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        duration (str): The model property of type str.
        price (float): The model property of type float.
        price_unit (str): The model property of type str.
        recording_sid (str): The model property of type str.
        sid (str): The model property of type str.
        status (str): The model property of type str.
        transcription_text (str): The model property of type str.
        mtype (str): The model property of type str.
        uri (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "api_version": 'api_version',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "duration": 'duration',
        "price": 'price',
        "price_unit": 'price_unit',
        "recording_sid": 'recording_sid',
        "sid": 'sid',
        "status": 'status',
        "transcription_text": 'transcription_text',
        "mtype": 'type',
        "uri": 'uri'
    }

    def __init__(self,
                 account_sid=None,
                 api_version=None,
                 date_created=None,
                 date_updated=None,
                 duration=None,
                 price=None,
                 price_unit=None,
                 recording_sid=None,
                 sid=None,
                 status=None,
                 transcription_text=None,
                 mtype=None,
                 uri=None):
        """Constructor for the OK19 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.api_version = api_version 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.duration = duration 
        self.price = price 
        self.price_unit = price_unit 
        self.recording_sid = recording_sid 
        self.sid = sid 
        self.status = status 
        self.transcription_text = transcription_text 
        self.mtype = mtype 
        self.uri = uri 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        api_version = dictionary.get("api_version") if dictionary.get("api_version") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else None
        price = dictionary.get("price") if dictionary.get("price") else None
        price_unit = dictionary.get("price_unit") if dictionary.get("price_unit") else None
        recording_sid = dictionary.get("recording_sid") if dictionary.get("recording_sid") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        transcription_text = dictionary.get("transcription_text") if dictionary.get("transcription_text") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        # Return an object of this model
        return cls(account_sid,
                   api_version,
                   date_created,
                   date_updated,
                   duration,
                   price,
                   price_unit,
                   recording_sid,
                   sid,
                   status,
                   transcription_text,
                   mtype,
                   uri)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'api_version={self.api_version!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'duration={self.duration!r}, '
                f'price={self.price!r}, '
                f'price_unit={self.price_unit!r}, '
                f'recording_sid={self.recording_sid!r}, '
                f'sid={self.sid!r}, '
                f'status={self.status!r}, '
                f'transcription_text={self.transcription_text!r}, '
                f'mtype={self.mtype!r}, '
                f'uri={self.uri!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'api_version={self.api_version!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'duration={self.duration!s}, '
                f'price={self.price!s}, '
                f'price_unit={self.price_unit!s}, '
                f'recording_sid={self.recording_sid!s}, '
                f'sid={self.sid!s}, '
                f'status={self.status!s}, '
                f'transcription_text={self.transcription_text!s}, '
                f'mtype={self.mtype!s}, '
                f'uri={self.uri!s})')
