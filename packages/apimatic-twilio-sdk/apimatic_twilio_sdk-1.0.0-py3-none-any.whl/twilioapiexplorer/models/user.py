# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class User(object):

    """Implementation of the 'User' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        attributes (str): The model property of type str.
        friendly_name (str): The model property of type str.
        role_sid (str): The model property of type str.
        identity (str): The model property of type str.
        is_online (bool): The model property of type bool.
        is_notifiable (bool): The model property of type bool.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        joined_channels_count (int): The model property of type int.
        links (Any): The model property of type Any.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "attributes": 'attributes',
        "friendly_name": 'friendly_name',
        "role_sid": 'role_sid',
        "identity": 'identity',
        "is_online": 'is_online',
        "is_notifiable": 'is_notifiable',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "joined_channels_count": 'joined_channels_count',
        "links": 'links',
        "url": 'url'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 service_sid=None,
                 attributes=None,
                 friendly_name=None,
                 role_sid=None,
                 identity=None,
                 is_online=None,
                 is_notifiable=None,
                 date_created=None,
                 date_updated=None,
                 joined_channels_count=None,
                 links=None,
                 url=None):
        """Constructor for the User class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.attributes = attributes 
        self.friendly_name = friendly_name 
        self.role_sid = role_sid 
        self.identity = identity 
        self.is_online = is_online 
        self.is_notifiable = is_notifiable 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.joined_channels_count = joined_channels_count 
        self.links = links 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        attributes = dictionary.get("attributes") if dictionary.get("attributes") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        role_sid = dictionary.get("role_sid") if dictionary.get("role_sid") else None
        identity = dictionary.get("identity") if dictionary.get("identity") else None
        is_online = dictionary.get("is_online") if "is_online" in dictionary.keys() else None
        is_notifiable = dictionary.get("is_notifiable") if "is_notifiable" in dictionary.keys() else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        joined_channels_count = dictionary.get("joined_channels_count") if dictionary.get("joined_channels_count") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   service_sid,
                   attributes,
                   friendly_name,
                   role_sid,
                   identity,
                   is_online,
                   is_notifiable,
                   date_created,
                   date_updated,
                   joined_channels_count,
                   links,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'attributes={self.attributes!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'role_sid={self.role_sid!r}, '
                f'identity={self.identity!r}, '
                f'is_online={self.is_online!r}, '
                f'is_notifiable={self.is_notifiable!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'joined_channels_count={self.joined_channels_count!r}, '
                f'links={self.links!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'attributes={self.attributes!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'role_sid={self.role_sid!s}, '
                f'identity={self.identity!s}, '
                f'is_online={self.is_online!s}, '
                f'is_notifiable={self.is_notifiable!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'joined_channels_count={self.joined_channels_count!s}, '
                f'links={self.links!s}, '
                f'url={self.url!s})')
