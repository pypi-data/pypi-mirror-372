# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Capabilities(object):

    """Implementation of the 'Capabilities' model.

    Attributes:
        mms (bool): The model property of type bool.
        sms (bool): The model property of type bool.
        voice (bool): The model property of type bool.
        fax (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mms": 'mms',
        "sms": 'sms',
        "voice": 'voice',
        "fax": 'fax'
    }

    def __init__(self,
                 mms=None,
                 sms=None,
                 voice=None,
                 fax=None):
        """Constructor for the Capabilities class"""

        # Initialize members of the class
        self.mms = mms 
        self.sms = sms 
        self.voice = voice 
        self.fax = fax 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mms = dictionary.get("mms") if "mms" in dictionary.keys() else None
        sms = dictionary.get("sms") if "sms" in dictionary.keys() else None
        voice = dictionary.get("voice") if "voice" in dictionary.keys() else None
        fax = dictionary.get("fax") if "fax" in dictionary.keys() else None
        # Return an object of this model
        return cls(mms,
                   sms,
                   voice,
                   fax)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mms={self.mms!r}, '
                f'sms={self.sms!r}, '
                f'voice={self.voice!r}, '
                f'fax={self.fax!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mms={self.mms!s}, '
                f'sms={self.sms!s}, '
                f'voice={self.voice!s}, '
                f'fax={self.fax!s})')
