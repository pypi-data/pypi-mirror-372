# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from twilioapiexplorer.models.rule import Rule


class OK203(object):

    """Implementation of the 'OK203' model.

    Attributes:
        room_sid (str): The model property of type str.
        rules (List[Rule]): The model property of type List[Rule].
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "room_sid": 'room_sid',
        "rules": 'rules',
        "date_created": 'date_created',
        "date_updated": 'date_updated'
    }

    def __init__(self,
                 room_sid=None,
                 rules=None,
                 date_created=None,
                 date_updated=None):
        """Constructor for the OK203 class"""

        # Initialize members of the class
        self.room_sid = room_sid 
        self.rules = rules 
        self.date_created = date_created 
        self.date_updated = date_updated 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        room_sid = dictionary.get("room_sid") if dictionary.get("room_sid") else None
        rules = None
        if dictionary.get('rules') is not None:
            rules = [Rule.from_dictionary(x) for x in dictionary.get('rules')]
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        # Return an object of this model
        return cls(room_sid,
                   rules,
                   date_created,
                   date_updated)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'room_sid={self.room_sid!r}, '
                f'rules={self.rules!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'room_sid={self.room_sid!s}, '
                f'rules={self.rules!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s})')
