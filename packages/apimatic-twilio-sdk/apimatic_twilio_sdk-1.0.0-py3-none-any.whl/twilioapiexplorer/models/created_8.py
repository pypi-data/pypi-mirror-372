# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Created8(object):

    """Implementation of the 'Created8' model.

    Attributes:
        account_sid (str): The model property of type str.
        call_sid (str): The model property of type str.
        friendly_name (str): The model property of type str.
        phone_number (str): The model property of type str.
        validation_code (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "call_sid": 'call_sid',
        "friendly_name": 'friendly_name',
        "phone_number": 'phone_number',
        "validation_code": 'validation_code'
    }

    def __init__(self,
                 account_sid=None,
                 call_sid=None,
                 friendly_name=None,
                 phone_number=None,
                 validation_code=None):
        """Constructor for the Created8 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.call_sid = call_sid 
        self.friendly_name = friendly_name 
        self.phone_number = phone_number 
        self.validation_code = validation_code 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        call_sid = dictionary.get("call_sid") if dictionary.get("call_sid") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        phone_number = dictionary.get("phone_number") if dictionary.get("phone_number") else None
        validation_code = dictionary.get("validation_code") if dictionary.get("validation_code") else None
        # Return an object of this model
        return cls(account_sid,
                   call_sid,
                   friendly_name,
                   phone_number,
                   validation_code)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'call_sid={self.call_sid!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'phone_number={self.phone_number!r}, '
                f'validation_code={self.validation_code!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'call_sid={self.call_sid!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'phone_number={self.phone_number!s}, '
                f'validation_code={self.validation_code!s})')
