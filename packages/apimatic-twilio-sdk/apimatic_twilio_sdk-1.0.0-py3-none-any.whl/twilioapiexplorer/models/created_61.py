# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Created61(object):

    """Implementation of the 'Created61' model.

    Attributes:
        sid (str): The model property of type str.
        session_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        friendly_name (str): The model property of type str.
        identifier (str): The model property of type str.
        proxy_identifier (str): The model property of type str.
        proxy_identifier_sid (str): The model property of type str.
        date_deleted (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "session_sid": 'session_sid',
        "service_sid": 'service_sid',
        "account_sid": 'account_sid',
        "friendly_name": 'friendly_name',
        "identifier": 'identifier',
        "proxy_identifier": 'proxy_identifier',
        "proxy_identifier_sid": 'proxy_identifier_sid',
        "date_deleted": 'date_deleted',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 sid=None,
                 session_sid=None,
                 service_sid=None,
                 account_sid=None,
                 friendly_name=None,
                 identifier=None,
                 proxy_identifier=None,
                 proxy_identifier_sid=None,
                 date_deleted=None,
                 date_created=None,
                 date_updated=None,
                 url=None,
                 links=None):
        """Constructor for the Created61 class"""

        # Initialize members of the class
        self.sid = sid 
        self.session_sid = session_sid 
        self.service_sid = service_sid 
        self.account_sid = account_sid 
        self.friendly_name = friendly_name 
        self.identifier = identifier 
        self.proxy_identifier = proxy_identifier 
        self.proxy_identifier_sid = proxy_identifier_sid 
        self.date_deleted = date_deleted 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        session_sid = dictionary.get("session_sid") if dictionary.get("session_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        identifier = dictionary.get("identifier") if dictionary.get("identifier") else None
        proxy_identifier = dictionary.get("proxy_identifier") if dictionary.get("proxy_identifier") else None
        proxy_identifier_sid = dictionary.get("proxy_identifier_sid") if dictionary.get("proxy_identifier_sid") else None
        date_deleted = dictionary.get("date_deleted") if dictionary.get("date_deleted") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(sid,
                   session_sid,
                   service_sid,
                   account_sid,
                   friendly_name,
                   identifier,
                   proxy_identifier,
                   proxy_identifier_sid,
                   date_deleted,
                   date_created,
                   date_updated,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'session_sid={self.session_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'identifier={self.identifier!r}, '
                f'proxy_identifier={self.proxy_identifier!r}, '
                f'proxy_identifier_sid={self.proxy_identifier_sid!r}, '
                f'date_deleted={self.date_deleted!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'session_sid={self.session_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'identifier={self.identifier!s}, '
                f'proxy_identifier={self.proxy_identifier!s}, '
                f'proxy_identifier_sid={self.proxy_identifier_sid!s}, '
                f'date_deleted={self.date_deleted!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
