# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK68(object):

    """Implementation of the 'OK68' model.

    Attributes:
        account_sid (str): The model property of type str.
        actor_sid (str): The model property of type str.
        actor_type (str): The model property of type str.
        actor_url (str): The model property of type str.
        description (str): The model property of type str.
        event_data (Any): The model property of type Any.
        event_date (str): The model property of type str.
        event_date_ms (int): The model property of type int.
        event_type (str): The model property of type str.
        resource_sid (str): The model property of type str.
        resource_type (str): The model property of type str.
        resource_url (str): The model property of type str.
        sid (str): The model property of type str.
        source (str): The model property of type str.
        source_ip_address (str): The model property of type str.
        url (str): The model property of type str.
        workspace_sid (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "actor_sid": 'actor_sid',
        "actor_type": 'actor_type',
        "actor_url": 'actor_url',
        "description": 'description',
        "event_data": 'event_data',
        "event_date": 'event_date',
        "event_date_ms": 'event_date_ms',
        "event_type": 'event_type',
        "resource_sid": 'resource_sid',
        "resource_type": 'resource_type',
        "resource_url": 'resource_url',
        "sid": 'sid',
        "source": 'source',
        "source_ip_address": 'source_ip_address',
        "url": 'url',
        "workspace_sid": 'workspace_sid'
    }

    def __init__(self,
                 account_sid=None,
                 actor_sid=None,
                 actor_type=None,
                 actor_url=None,
                 description=None,
                 event_data=None,
                 event_date=None,
                 event_date_ms=None,
                 event_type=None,
                 resource_sid=None,
                 resource_type=None,
                 resource_url=None,
                 sid=None,
                 source=None,
                 source_ip_address=None,
                 url=None,
                 workspace_sid=None):
        """Constructor for the OK68 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.actor_sid = actor_sid 
        self.actor_type = actor_type 
        self.actor_url = actor_url 
        self.description = description 
        self.event_data = event_data 
        self.event_date = event_date 
        self.event_date_ms = event_date_ms 
        self.event_type = event_type 
        self.resource_sid = resource_sid 
        self.resource_type = resource_type 
        self.resource_url = resource_url 
        self.sid = sid 
        self.source = source 
        self.source_ip_address = source_ip_address 
        self.url = url 
        self.workspace_sid = workspace_sid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        actor_sid = dictionary.get("actor_sid") if dictionary.get("actor_sid") else None
        actor_type = dictionary.get("actor_type") if dictionary.get("actor_type") else None
        actor_url = dictionary.get("actor_url") if dictionary.get("actor_url") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        event_data = dictionary.get("event_data") if dictionary.get("event_data") else None
        event_date = dictionary.get("event_date") if dictionary.get("event_date") else None
        event_date_ms = dictionary.get("event_date_ms") if dictionary.get("event_date_ms") else None
        event_type = dictionary.get("event_type") if dictionary.get("event_type") else None
        resource_sid = dictionary.get("resource_sid") if dictionary.get("resource_sid") else None
        resource_type = dictionary.get("resource_type") if dictionary.get("resource_type") else None
        resource_url = dictionary.get("resource_url") if dictionary.get("resource_url") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        source = dictionary.get("source") if dictionary.get("source") else None
        source_ip_address = dictionary.get("source_ip_address") if dictionary.get("source_ip_address") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        workspace_sid = dictionary.get("workspace_sid") if dictionary.get("workspace_sid") else None
        # Return an object of this model
        return cls(account_sid,
                   actor_sid,
                   actor_type,
                   actor_url,
                   description,
                   event_data,
                   event_date,
                   event_date_ms,
                   event_type,
                   resource_sid,
                   resource_type,
                   resource_url,
                   sid,
                   source,
                   source_ip_address,
                   url,
                   workspace_sid)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'actor_sid={self.actor_sid!r}, '
                f'actor_type={self.actor_type!r}, '
                f'actor_url={self.actor_url!r}, '
                f'description={self.description!r}, '
                f'event_data={self.event_data!r}, '
                f'event_date={self.event_date!r}, '
                f'event_date_ms={self.event_date_ms!r}, '
                f'event_type={self.event_type!r}, '
                f'resource_sid={self.resource_sid!r}, '
                f'resource_type={self.resource_type!r}, '
                f'resource_url={self.resource_url!r}, '
                f'sid={self.sid!r}, '
                f'source={self.source!r}, '
                f'source_ip_address={self.source_ip_address!r}, '
                f'url={self.url!r}, '
                f'workspace_sid={self.workspace_sid!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'actor_sid={self.actor_sid!s}, '
                f'actor_type={self.actor_type!s}, '
                f'actor_url={self.actor_url!s}, '
                f'description={self.description!s}, '
                f'event_data={self.event_data!s}, '
                f'event_date={self.event_date!s}, '
                f'event_date_ms={self.event_date_ms!s}, '
                f'event_type={self.event_type!s}, '
                f'resource_sid={self.resource_sid!s}, '
                f'resource_type={self.resource_type!s}, '
                f'resource_url={self.resource_url!s}, '
                f'sid={self.sid!s}, '
                f'source={self.source!s}, '
                f'source_ip_address={self.source_ip_address!s}, '
                f'url={self.url!s}, '
                f'workspace_sid={self.workspace_sid!s})')
