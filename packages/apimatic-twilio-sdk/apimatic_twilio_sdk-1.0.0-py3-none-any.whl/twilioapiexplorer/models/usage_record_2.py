# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class UsageRecord2(object):

    """Implementation of the 'UsageRecord2' model.

    Attributes:
        account_sid (str): The model property of type str.
        api_version (str): The model property of type str.
        as_of (str): The model property of type str.
        category (str): The model property of type str.
        count (str): The model property of type str.
        count_unit (str): The model property of type str.
        description (str): The model property of type str.
        end_date (str): The model property of type str.
        price (float): The model property of type float.
        price_unit (str): The model property of type str.
        start_date (str): The model property of type str.
        subresource_uris (Any): The model property of type Any.
        uri (str): The model property of type str.
        usage (str): The model property of type str.
        usage_unit (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "api_version": 'api_version',
        "as_of": 'as_of',
        "category": 'category',
        "count": 'count',
        "count_unit": 'count_unit',
        "description": 'description',
        "end_date": 'end_date',
        "price": 'price',
        "price_unit": 'price_unit',
        "start_date": 'start_date',
        "subresource_uris": 'subresource_uris',
        "uri": 'uri',
        "usage": 'usage',
        "usage_unit": 'usage_unit'
    }

    def __init__(self,
                 account_sid=None,
                 api_version=None,
                 as_of=None,
                 category=None,
                 count=None,
                 count_unit=None,
                 description=None,
                 end_date=None,
                 price=None,
                 price_unit=None,
                 start_date=None,
                 subresource_uris=None,
                 uri=None,
                 usage=None,
                 usage_unit=None):
        """Constructor for the UsageRecord2 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.api_version = api_version 
        self.as_of = as_of 
        self.category = category 
        self.count = count 
        self.count_unit = count_unit 
        self.description = description 
        self.end_date = end_date 
        self.price = price 
        self.price_unit = price_unit 
        self.start_date = start_date 
        self.subresource_uris = subresource_uris 
        self.uri = uri 
        self.usage = usage 
        self.usage_unit = usage_unit 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        api_version = dictionary.get("api_version") if dictionary.get("api_version") else None
        as_of = dictionary.get("as_of") if dictionary.get("as_of") else None
        category = dictionary.get("category") if dictionary.get("category") else None
        count = dictionary.get("count") if dictionary.get("count") else None
        count_unit = dictionary.get("count_unit") if dictionary.get("count_unit") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        end_date = dictionary.get("end_date") if dictionary.get("end_date") else None
        price = dictionary.get("price") if dictionary.get("price") else None
        price_unit = dictionary.get("price_unit") if dictionary.get("price_unit") else None
        start_date = dictionary.get("start_date") if dictionary.get("start_date") else None
        subresource_uris = dictionary.get("subresource_uris") if dictionary.get("subresource_uris") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        usage = dictionary.get("usage") if dictionary.get("usage") else None
        usage_unit = dictionary.get("usage_unit") if dictionary.get("usage_unit") else None
        # Return an object of this model
        return cls(account_sid,
                   api_version,
                   as_of,
                   category,
                   count,
                   count_unit,
                   description,
                   end_date,
                   price,
                   price_unit,
                   start_date,
                   subresource_uris,
                   uri,
                   usage,
                   usage_unit)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'api_version={self.api_version!r}, '
                f'as_of={self.as_of!r}, '
                f'category={self.category!r}, '
                f'count={self.count!r}, '
                f'count_unit={self.count_unit!r}, '
                f'description={self.description!r}, '
                f'end_date={self.end_date!r}, '
                f'price={self.price!r}, '
                f'price_unit={self.price_unit!r}, '
                f'start_date={self.start_date!r}, '
                f'subresource_uris={self.subresource_uris!r}, '
                f'uri={self.uri!r}, '
                f'usage={self.usage!r}, '
                f'usage_unit={self.usage_unit!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'api_version={self.api_version!s}, '
                f'as_of={self.as_of!s}, '
                f'category={self.category!s}, '
                f'count={self.count!s}, '
                f'count_unit={self.count_unit!s}, '
                f'description={self.description!s}, '
                f'end_date={self.end_date!s}, '
                f'price={self.price!s}, '
                f'price_unit={self.price_unit!s}, '
                f'start_date={self.start_date!s}, '
                f'subresource_uris={self.subresource_uris!s}, '
                f'uri={self.uri!s}, '
                f'usage={self.usage!s}, '
                f'usage_unit={self.usage_unit!s})')
