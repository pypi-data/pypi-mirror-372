# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Created55(object):

    """Implementation of the 'Created55' model.

    Attributes:
        account_sid (str): The model property of type str.
        friendly_name (str): The model property of type str.
        aws_credentials_sid (str): The model property of type str.
        aws_s_3_url (str): The model property of type str.
        aws_storage_enabled (bool): The model property of type bool.
        encryption_key_sid (str): The model property of type str.
        encryption_enabled (bool): The model property of type bool.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "friendly_name": 'friendly_name',
        "aws_credentials_sid": 'aws_credentials_sid',
        "aws_s_3_url": 'aws_s3_url',
        "aws_storage_enabled": 'aws_storage_enabled',
        "encryption_key_sid": 'encryption_key_sid',
        "encryption_enabled": 'encryption_enabled',
        "url": 'url'
    }

    def __init__(self,
                 account_sid=None,
                 friendly_name=None,
                 aws_credentials_sid=None,
                 aws_s_3_url=None,
                 aws_storage_enabled=None,
                 encryption_key_sid=None,
                 encryption_enabled=None,
                 url=None):
        """Constructor for the Created55 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.friendly_name = friendly_name 
        self.aws_credentials_sid = aws_credentials_sid 
        self.aws_s_3_url = aws_s_3_url 
        self.aws_storage_enabled = aws_storage_enabled 
        self.encryption_key_sid = encryption_key_sid 
        self.encryption_enabled = encryption_enabled 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        aws_credentials_sid = dictionary.get("aws_credentials_sid") if dictionary.get("aws_credentials_sid") else None
        aws_s_3_url = dictionary.get("aws_s3_url") if dictionary.get("aws_s3_url") else None
        aws_storage_enabled = dictionary.get("aws_storage_enabled") if "aws_storage_enabled" in dictionary.keys() else None
        encryption_key_sid = dictionary.get("encryption_key_sid") if dictionary.get("encryption_key_sid") else None
        encryption_enabled = dictionary.get("encryption_enabled") if "encryption_enabled" in dictionary.keys() else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(account_sid,
                   friendly_name,
                   aws_credentials_sid,
                   aws_s_3_url,
                   aws_storage_enabled,
                   encryption_key_sid,
                   encryption_enabled,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'aws_credentials_sid={self.aws_credentials_sid!r}, '
                f'aws_s_3_url={self.aws_s_3_url!r}, '
                f'aws_storage_enabled={self.aws_storage_enabled!r}, '
                f'encryption_key_sid={self.encryption_key_sid!r}, '
                f'encryption_enabled={self.encryption_enabled!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'aws_credentials_sid={self.aws_credentials_sid!s}, '
                f'aws_s_3_url={self.aws_s_3_url!s}, '
                f'aws_storage_enabled={self.aws_storage_enabled!s}, '
                f'encryption_key_sid={self.encryption_key_sid!s}, '
                f'encryption_enabled={self.encryption_enabled!s}, '
                f'url={self.url!s})')
