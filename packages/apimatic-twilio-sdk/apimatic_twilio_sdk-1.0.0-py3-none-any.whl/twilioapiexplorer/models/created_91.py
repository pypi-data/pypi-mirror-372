# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Created91(object):

    """Implementation of the 'Created91' model.

    Attributes:
        account_sid (str): The model property of type str.
        api_version (str): The model property of type str.
        callback_method (str): The model property of type str.
        callback_url (str): The model property of type str.
        current_value (str): The model property of type str.
        date_created (str): The model property of type str.
        date_fired (str): The model property of type str.
        date_updated (str): The model property of type str.
        friendly_name (str): The model property of type str.
        recurring (str): The model property of type str.
        sid (str): The model property of type str.
        trigger_by (str): The model property of type str.
        trigger_value (str): The model property of type str.
        uri (str): The model property of type str.
        usage_category (str): The model property of type str.
        usage_record_uri (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "api_version": 'api_version',
        "callback_method": 'callback_method',
        "callback_url": 'callback_url',
        "current_value": 'current_value',
        "date_created": 'date_created',
        "date_fired": 'date_fired',
        "date_updated": 'date_updated',
        "friendly_name": 'friendly_name',
        "recurring": 'recurring',
        "sid": 'sid',
        "trigger_by": 'trigger_by',
        "trigger_value": 'trigger_value',
        "uri": 'uri',
        "usage_category": 'usage_category',
        "usage_record_uri": 'usage_record_uri'
    }

    def __init__(self,
                 account_sid=None,
                 api_version=None,
                 callback_method=None,
                 callback_url=None,
                 current_value=None,
                 date_created=None,
                 date_fired=None,
                 date_updated=None,
                 friendly_name=None,
                 recurring=None,
                 sid=None,
                 trigger_by=None,
                 trigger_value=None,
                 uri=None,
                 usage_category=None,
                 usage_record_uri=None):
        """Constructor for the Created91 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.api_version = api_version 
        self.callback_method = callback_method 
        self.callback_url = callback_url 
        self.current_value = current_value 
        self.date_created = date_created 
        self.date_fired = date_fired 
        self.date_updated = date_updated 
        self.friendly_name = friendly_name 
        self.recurring = recurring 
        self.sid = sid 
        self.trigger_by = trigger_by 
        self.trigger_value = trigger_value 
        self.uri = uri 
        self.usage_category = usage_category 
        self.usage_record_uri = usage_record_uri 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        api_version = dictionary.get("api_version") if dictionary.get("api_version") else None
        callback_method = dictionary.get("callback_method") if dictionary.get("callback_method") else None
        callback_url = dictionary.get("callback_url") if dictionary.get("callback_url") else None
        current_value = dictionary.get("current_value") if dictionary.get("current_value") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_fired = dictionary.get("date_fired") if dictionary.get("date_fired") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        recurring = dictionary.get("recurring") if dictionary.get("recurring") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        trigger_by = dictionary.get("trigger_by") if dictionary.get("trigger_by") else None
        trigger_value = dictionary.get("trigger_value") if dictionary.get("trigger_value") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        usage_category = dictionary.get("usage_category") if dictionary.get("usage_category") else None
        usage_record_uri = dictionary.get("usage_record_uri") if dictionary.get("usage_record_uri") else None
        # Return an object of this model
        return cls(account_sid,
                   api_version,
                   callback_method,
                   callback_url,
                   current_value,
                   date_created,
                   date_fired,
                   date_updated,
                   friendly_name,
                   recurring,
                   sid,
                   trigger_by,
                   trigger_value,
                   uri,
                   usage_category,
                   usage_record_uri)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'api_version={self.api_version!r}, '
                f'callback_method={self.callback_method!r}, '
                f'callback_url={self.callback_url!r}, '
                f'current_value={self.current_value!r}, '
                f'date_created={self.date_created!r}, '
                f'date_fired={self.date_fired!r}, '
                f'date_updated={self.date_updated!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'recurring={self.recurring!r}, '
                f'sid={self.sid!r}, '
                f'trigger_by={self.trigger_by!r}, '
                f'trigger_value={self.trigger_value!r}, '
                f'uri={self.uri!r}, '
                f'usage_category={self.usage_category!r}, '
                f'usage_record_uri={self.usage_record_uri!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'api_version={self.api_version!s}, '
                f'callback_method={self.callback_method!s}, '
                f'callback_url={self.callback_url!s}, '
                f'current_value={self.current_value!s}, '
                f'date_created={self.date_created!s}, '
                f'date_fired={self.date_fired!s}, '
                f'date_updated={self.date_updated!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'recurring={self.recurring!s}, '
                f'sid={self.sid!s}, '
                f'trigger_by={self.trigger_by!s}, '
                f'trigger_value={self.trigger_value!s}, '
                f'uri={self.uri!s}, '
                f'usage_category={self.usage_category!s}, '
                f'usage_record_uri={self.usage_record_uri!s})')
