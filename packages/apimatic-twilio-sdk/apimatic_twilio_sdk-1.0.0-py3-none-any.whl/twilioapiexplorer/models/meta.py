# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Meta(object):

    """Implementation of the 'Meta' model.

    Attributes:
        first_page_url (str): The model property of type str.
        next_page_url (str): The model property of type str.
        page (int): The model property of type int.
        page_size (int): The model property of type int.
        previous_page_url (str): The model property of type str.
        url (str): The model property of type str.
        key (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "first_page_url": 'first_page_url',
        "next_page_url": 'next_page_url',
        "page": 'page',
        "page_size": 'page_size',
        "previous_page_url": 'previous_page_url',
        "url": 'url',
        "key": 'key'
    }

    def __init__(self,
                 first_page_url=None,
                 next_page_url=None,
                 page=None,
                 page_size=None,
                 previous_page_url=None,
                 url=None,
                 key=None):
        """Constructor for the Meta class"""

        # Initialize members of the class
        self.first_page_url = first_page_url 
        self.next_page_url = next_page_url 
        self.page = page 
        self.page_size = page_size 
        self.previous_page_url = previous_page_url 
        self.url = url 
        self.key = key 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        first_page_url = dictionary.get("first_page_url") if dictionary.get("first_page_url") else None
        next_page_url = dictionary.get("next_page_url") if dictionary.get("next_page_url") else None
        page = dictionary.get("page") if dictionary.get("page") else None
        page_size = dictionary.get("page_size") if dictionary.get("page_size") else None
        previous_page_url = dictionary.get("previous_page_url") if dictionary.get("previous_page_url") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        key = dictionary.get("key") if dictionary.get("key") else None
        # Return an object of this model
        return cls(first_page_url,
                   next_page_url,
                   page,
                   page_size,
                   previous_page_url,
                   url,
                   key)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'first_page_url={self.first_page_url!r}, '
                f'next_page_url={self.next_page_url!r}, '
                f'page={self.page!r}, '
                f'page_size={self.page_size!r}, '
                f'previous_page_url={self.previous_page_url!r}, '
                f'url={self.url!r}, '
                f'key={self.key!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'first_page_url={self.first_page_url!s}, '
                f'next_page_url={self.next_page_url!s}, '
                f'page={self.page!s}, '
                f'page_size={self.page_size!s}, '
                f'previous_page_url={self.previous_page_url!s}, '
                f'url={self.url!s}, '
                f'key={self.key!s})')
