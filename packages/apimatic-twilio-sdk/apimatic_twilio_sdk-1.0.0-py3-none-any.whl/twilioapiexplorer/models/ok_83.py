# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK83(object):

    """Implementation of the 'OK83' model.

    Attributes:
        realtime (Any): The model property of type Any.
        cumulative (Any): The model property of type Any.
        account_sid (str): The model property of type str.
        workspace_sid (str): The model property of type str.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "realtime": 'realtime',
        "cumulative": 'cumulative',
        "account_sid": 'account_sid',
        "workspace_sid": 'workspace_sid',
        "url": 'url'
    }

    def __init__(self,
                 realtime=None,
                 cumulative=None,
                 account_sid=None,
                 workspace_sid=None,
                 url=None):
        """Constructor for the OK83 class"""

        # Initialize members of the class
        self.realtime = realtime 
        self.cumulative = cumulative 
        self.account_sid = account_sid 
        self.workspace_sid = workspace_sid 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        realtime = dictionary.get("realtime") if dictionary.get("realtime") else None
        cumulative = dictionary.get("cumulative") if dictionary.get("cumulative") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        workspace_sid = dictionary.get("workspace_sid") if dictionary.get("workspace_sid") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(realtime,
                   cumulative,
                   account_sid,
                   workspace_sid,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'realtime={self.realtime!r}, '
                f'cumulative={self.cumulative!r}, '
                f'account_sid={self.account_sid!r}, '
                f'workspace_sid={self.workspace_sid!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'realtime={self.realtime!s}, '
                f'cumulative={self.cumulative!s}, '
                f'account_sid={self.account_sid!s}, '
                f'workspace_sid={self.workspace_sid!s}, '
                f'url={self.url!s})')
