# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Workflow(object):

    """Implementation of the 'Workflow' model.

    Attributes:
        account_sid (str): The model property of type str.
        assignment_callback_url (str): The model property of type str.
        configuration (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        document_content_type (str): The model property of type str.
        fallback_assignment_callback_url (str): The model property of type str.
        friendly_name (str): The model property of type str.
        sid (str): The model property of type str.
        task_reservation_timeout (int): The model property of type int.
        workspace_sid (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "assignment_callback_url": 'assignment_callback_url',
        "configuration": 'configuration',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "document_content_type": 'document_content_type',
        "fallback_assignment_callback_url": 'fallback_assignment_callback_url',
        "friendly_name": 'friendly_name',
        "sid": 'sid',
        "task_reservation_timeout": 'task_reservation_timeout',
        "workspace_sid": 'workspace_sid',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 account_sid=None,
                 assignment_callback_url=None,
                 configuration=None,
                 date_created=None,
                 date_updated=None,
                 document_content_type=None,
                 fallback_assignment_callback_url=None,
                 friendly_name=None,
                 sid=None,
                 task_reservation_timeout=None,
                 workspace_sid=None,
                 url=None,
                 links=None):
        """Constructor for the Workflow class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.assignment_callback_url = assignment_callback_url 
        self.configuration = configuration 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.document_content_type = document_content_type 
        self.fallback_assignment_callback_url = fallback_assignment_callback_url 
        self.friendly_name = friendly_name 
        self.sid = sid 
        self.task_reservation_timeout = task_reservation_timeout 
        self.workspace_sid = workspace_sid 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        assignment_callback_url = dictionary.get("assignment_callback_url") if dictionary.get("assignment_callback_url") else None
        configuration = dictionary.get("configuration") if dictionary.get("configuration") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        document_content_type = dictionary.get("document_content_type") if dictionary.get("document_content_type") else None
        fallback_assignment_callback_url = dictionary.get("fallback_assignment_callback_url") if dictionary.get("fallback_assignment_callback_url") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        task_reservation_timeout = dictionary.get("task_reservation_timeout") if dictionary.get("task_reservation_timeout") else None
        workspace_sid = dictionary.get("workspace_sid") if dictionary.get("workspace_sid") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(account_sid,
                   assignment_callback_url,
                   configuration,
                   date_created,
                   date_updated,
                   document_content_type,
                   fallback_assignment_callback_url,
                   friendly_name,
                   sid,
                   task_reservation_timeout,
                   workspace_sid,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'assignment_callback_url={self.assignment_callback_url!r}, '
                f'configuration={self.configuration!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'document_content_type={self.document_content_type!r}, '
                f'fallback_assignment_callback_url={self.fallback_assignment_callback_url!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'sid={self.sid!r}, '
                f'task_reservation_timeout={self.task_reservation_timeout!r}, '
                f'workspace_sid={self.workspace_sid!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'assignment_callback_url={self.assignment_callback_url!s}, '
                f'configuration={self.configuration!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'document_content_type={self.document_content_type!s}, '
                f'fallback_assignment_callback_url={self.fallback_assignment_callback_url!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'sid={self.sid!s}, '
                f'task_reservation_timeout={self.task_reservation_timeout!s}, '
                f'workspace_sid={self.workspace_sid!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
