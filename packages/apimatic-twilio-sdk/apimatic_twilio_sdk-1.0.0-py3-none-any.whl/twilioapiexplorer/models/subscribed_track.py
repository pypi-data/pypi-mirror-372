# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class SubscribedTrack(object):

    """Implementation of the 'SubscribedTrack' model.

    Attributes:
        sid (str): The model property of type str.
        participant_sid (str): The model property of type str.
        publisher_sid (str): The model property of type str.
        room_sid (str): The model property of type str.
        name (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        enabled (bool): The model property of type bool.
        kind (str): The model property of type str.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "participant_sid": 'participant_sid',
        "publisher_sid": 'publisher_sid',
        "room_sid": 'room_sid',
        "name": 'name',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "enabled": 'enabled',
        "kind": 'kind',
        "url": 'url'
    }

    def __init__(self,
                 sid=None,
                 participant_sid=None,
                 publisher_sid=None,
                 room_sid=None,
                 name=None,
                 date_created=None,
                 date_updated=None,
                 enabled=None,
                 kind=None,
                 url=None):
        """Constructor for the SubscribedTrack class"""

        # Initialize members of the class
        self.sid = sid 
        self.participant_sid = participant_sid 
        self.publisher_sid = publisher_sid 
        self.room_sid = room_sid 
        self.name = name 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.enabled = enabled 
        self.kind = kind 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        participant_sid = dictionary.get("participant_sid") if dictionary.get("participant_sid") else None
        publisher_sid = dictionary.get("publisher_sid") if dictionary.get("publisher_sid") else None
        room_sid = dictionary.get("room_sid") if dictionary.get("room_sid") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else None
        kind = dictionary.get("kind") if dictionary.get("kind") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(sid,
                   participant_sid,
                   publisher_sid,
                   room_sid,
                   name,
                   date_created,
                   date_updated,
                   enabled,
                   kind,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'participant_sid={self.participant_sid!r}, '
                f'publisher_sid={self.publisher_sid!r}, '
                f'room_sid={self.room_sid!r}, '
                f'name={self.name!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'enabled={self.enabled!r}, '
                f'kind={self.kind!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'participant_sid={self.participant_sid!s}, '
                f'publisher_sid={self.publisher_sid!s}, '
                f'room_sid={self.room_sid!s}, '
                f'name={self.name!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'enabled={self.enabled!s}, '
                f'kind={self.kind!s}, '
                f'url={self.url!s})')
