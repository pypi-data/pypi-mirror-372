# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Created57(object):

    """Implementation of the 'Created57' model.

    Attributes:
        sid (str): The model property of type str.
        status (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        account_sid (str): The model property of type str.
        enable_turn (bool): The model property of type bool.
        unique_name (str): The model property of type str.
        status_callback (str): The model property of type str.
        status_callback_method (str): The model property of type str.
        end_time (str): The model property of type str.
        duration (int): The model property of type int.
        mtype (str): The model property of type str.
        max_participants (int): The model property of type int.
        max_participant_duration (int): The model property of type int.
        max_concurrent_published_tracks (int): The model property of type int.
        record_participants_on_connect (bool): The model property of type bool.
        video_codecs (List[str]): The model property of type List[str].
        media_region (str): The model property of type str.
        audio_only (bool): The model property of type bool.
        empty_room_timeout (int): The model property of type int.
        unused_room_timeout (int): The model property of type int.
        large_room (bool): The model property of type bool.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "status": 'status',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "account_sid": 'account_sid',
        "enable_turn": 'enable_turn',
        "unique_name": 'unique_name',
        "status_callback": 'status_callback',
        "status_callback_method": 'status_callback_method',
        "end_time": 'end_time',
        "duration": 'duration',
        "mtype": 'type',
        "max_participants": 'max_participants',
        "max_participant_duration": 'max_participant_duration',
        "max_concurrent_published_tracks": 'max_concurrent_published_tracks',
        "record_participants_on_connect": 'record_participants_on_connect',
        "video_codecs": 'video_codecs',
        "media_region": 'media_region',
        "audio_only": 'audio_only',
        "empty_room_timeout": 'empty_room_timeout',
        "unused_room_timeout": 'unused_room_timeout',
        "large_room": 'large_room',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 sid=None,
                 status=None,
                 date_created=None,
                 date_updated=None,
                 account_sid=None,
                 enable_turn=None,
                 unique_name=None,
                 status_callback=None,
                 status_callback_method=None,
                 end_time=None,
                 duration=None,
                 mtype=None,
                 max_participants=None,
                 max_participant_duration=None,
                 max_concurrent_published_tracks=None,
                 record_participants_on_connect=None,
                 video_codecs=None,
                 media_region=None,
                 audio_only=None,
                 empty_room_timeout=None,
                 unused_room_timeout=None,
                 large_room=None,
                 url=None,
                 links=None):
        """Constructor for the Created57 class"""

        # Initialize members of the class
        self.sid = sid 
        self.status = status 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.account_sid = account_sid 
        self.enable_turn = enable_turn 
        self.unique_name = unique_name 
        self.status_callback = status_callback 
        self.status_callback_method = status_callback_method 
        self.end_time = end_time 
        self.duration = duration 
        self.mtype = mtype 
        self.max_participants = max_participants 
        self.max_participant_duration = max_participant_duration 
        self.max_concurrent_published_tracks = max_concurrent_published_tracks 
        self.record_participants_on_connect = record_participants_on_connect 
        self.video_codecs = video_codecs 
        self.media_region = media_region 
        self.audio_only = audio_only 
        self.empty_room_timeout = empty_room_timeout 
        self.unused_room_timeout = unused_room_timeout 
        self.large_room = large_room 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        enable_turn = dictionary.get("enable_turn") if "enable_turn" in dictionary.keys() else None
        unique_name = dictionary.get("unique_name") if dictionary.get("unique_name") else None
        status_callback = dictionary.get("status_callback") if dictionary.get("status_callback") else None
        status_callback_method = dictionary.get("status_callback_method") if dictionary.get("status_callback_method") else None
        end_time = dictionary.get("end_time") if dictionary.get("end_time") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        max_participants = dictionary.get("max_participants") if dictionary.get("max_participants") else None
        max_participant_duration = dictionary.get("max_participant_duration") if dictionary.get("max_participant_duration") else None
        max_concurrent_published_tracks = dictionary.get("max_concurrent_published_tracks") if dictionary.get("max_concurrent_published_tracks") else None
        record_participants_on_connect = dictionary.get("record_participants_on_connect") if "record_participants_on_connect" in dictionary.keys() else None
        video_codecs = dictionary.get("video_codecs") if dictionary.get("video_codecs") else None
        media_region = dictionary.get("media_region") if dictionary.get("media_region") else None
        audio_only = dictionary.get("audio_only") if "audio_only" in dictionary.keys() else None
        empty_room_timeout = dictionary.get("empty_room_timeout") if dictionary.get("empty_room_timeout") else None
        unused_room_timeout = dictionary.get("unused_room_timeout") if dictionary.get("unused_room_timeout") else None
        large_room = dictionary.get("large_room") if "large_room" in dictionary.keys() else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(sid,
                   status,
                   date_created,
                   date_updated,
                   account_sid,
                   enable_turn,
                   unique_name,
                   status_callback,
                   status_callback_method,
                   end_time,
                   duration,
                   mtype,
                   max_participants,
                   max_participant_duration,
                   max_concurrent_published_tracks,
                   record_participants_on_connect,
                   video_codecs,
                   media_region,
                   audio_only,
                   empty_room_timeout,
                   unused_room_timeout,
                   large_room,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'status={self.status!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'account_sid={self.account_sid!r}, '
                f'enable_turn={self.enable_turn!r}, '
                f'unique_name={self.unique_name!r}, '
                f'status_callback={self.status_callback!r}, '
                f'status_callback_method={self.status_callback_method!r}, '
                f'end_time={self.end_time!r}, '
                f'duration={self.duration!r}, '
                f'mtype={self.mtype!r}, '
                f'max_participants={self.max_participants!r}, '
                f'max_participant_duration={self.max_participant_duration!r}, '
                f'max_concurrent_published_tracks={self.max_concurrent_published_tracks!r}, '
                f'record_participants_on_connect={self.record_participants_on_connect!r}, '
                f'video_codecs={self.video_codecs!r}, '
                f'media_region={self.media_region!r}, '
                f'audio_only={self.audio_only!r}, '
                f'empty_room_timeout={self.empty_room_timeout!r}, '
                f'unused_room_timeout={self.unused_room_timeout!r}, '
                f'large_room={self.large_room!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'status={self.status!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'account_sid={self.account_sid!s}, '
                f'enable_turn={self.enable_turn!s}, '
                f'unique_name={self.unique_name!s}, '
                f'status_callback={self.status_callback!s}, '
                f'status_callback_method={self.status_callback_method!s}, '
                f'end_time={self.end_time!s}, '
                f'duration={self.duration!s}, '
                f'mtype={self.mtype!s}, '
                f'max_participants={self.max_participants!s}, '
                f'max_participant_duration={self.max_participant_duration!s}, '
                f'max_concurrent_published_tracks={self.max_concurrent_published_tracks!s}, '
                f'record_participants_on_connect={self.record_participants_on_connect!s}, '
                f'video_codecs={self.video_codecs!s}, '
                f'media_region={self.media_region!s}, '
                f'audio_only={self.audio_only!s}, '
                f'empty_room_timeout={self.empty_room_timeout!s}, '
                f'unused_room_timeout={self.unused_room_timeout!s}, '
                f'large_room={self.large_room!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
