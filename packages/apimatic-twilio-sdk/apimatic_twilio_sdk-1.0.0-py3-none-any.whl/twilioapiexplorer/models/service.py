# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Service(object):

    """Implementation of the 'Service' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        friendly_name (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        inbound_request_url (str): The model property of type str.
        inbound_method (str): The model property of type str.
        fallback_url (str): The model property of type str.
        fallback_method (str): The model property of type str.
        status_callback (str): The model property of type str.
        sticky_sender (bool): The model property of type bool.
        mms_converter (bool): The model property of type bool.
        smart_encoding (bool): The model property of type bool.
        scan_message_content (str): The model property of type str.
        fallback_to_long_code (bool): The model property of type bool.
        area_code_geomatch (bool): The model property of type bool.
        synchronous_validation (bool): The model property of type bool.
        validity_period (int): The model property of type int.
        url (str): The model property of type str.
        links (Any): The model property of type Any.
        usecase (str): The model property of type str.
        us_app_to_person_registered (bool): The model property of type bool.
        use_inbound_webhook_on_number (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "friendly_name": 'friendly_name',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "inbound_request_url": 'inbound_request_url',
        "inbound_method": 'inbound_method',
        "fallback_url": 'fallback_url',
        "fallback_method": 'fallback_method',
        "status_callback": 'status_callback',
        "sticky_sender": 'sticky_sender',
        "mms_converter": 'mms_converter',
        "smart_encoding": 'smart_encoding',
        "scan_message_content": 'scan_message_content',
        "fallback_to_long_code": 'fallback_to_long_code',
        "area_code_geomatch": 'area_code_geomatch',
        "synchronous_validation": 'synchronous_validation',
        "validity_period": 'validity_period',
        "url": 'url',
        "links": 'links',
        "usecase": 'usecase',
        "us_app_to_person_registered": 'us_app_to_person_registered',
        "use_inbound_webhook_on_number": 'use_inbound_webhook_on_number'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 friendly_name=None,
                 date_created=None,
                 date_updated=None,
                 inbound_request_url=None,
                 inbound_method=None,
                 fallback_url=None,
                 fallback_method=None,
                 status_callback=None,
                 sticky_sender=None,
                 mms_converter=None,
                 smart_encoding=None,
                 scan_message_content=None,
                 fallback_to_long_code=None,
                 area_code_geomatch=None,
                 synchronous_validation=None,
                 validity_period=None,
                 url=None,
                 links=None,
                 usecase=None,
                 us_app_to_person_registered=None,
                 use_inbound_webhook_on_number=None):
        """Constructor for the Service class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.friendly_name = friendly_name 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.inbound_request_url = inbound_request_url 
        self.inbound_method = inbound_method 
        self.fallback_url = fallback_url 
        self.fallback_method = fallback_method 
        self.status_callback = status_callback 
        self.sticky_sender = sticky_sender 
        self.mms_converter = mms_converter 
        self.smart_encoding = smart_encoding 
        self.scan_message_content = scan_message_content 
        self.fallback_to_long_code = fallback_to_long_code 
        self.area_code_geomatch = area_code_geomatch 
        self.synchronous_validation = synchronous_validation 
        self.validity_period = validity_period 
        self.url = url 
        self.links = links 
        self.usecase = usecase 
        self.us_app_to_person_registered = us_app_to_person_registered 
        self.use_inbound_webhook_on_number = use_inbound_webhook_on_number 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        inbound_request_url = dictionary.get("inbound_request_url") if dictionary.get("inbound_request_url") else None
        inbound_method = dictionary.get("inbound_method") if dictionary.get("inbound_method") else None
        fallback_url = dictionary.get("fallback_url") if dictionary.get("fallback_url") else None
        fallback_method = dictionary.get("fallback_method") if dictionary.get("fallback_method") else None
        status_callback = dictionary.get("status_callback") if dictionary.get("status_callback") else None
        sticky_sender = dictionary.get("sticky_sender") if "sticky_sender" in dictionary.keys() else None
        mms_converter = dictionary.get("mms_converter") if "mms_converter" in dictionary.keys() else None
        smart_encoding = dictionary.get("smart_encoding") if "smart_encoding" in dictionary.keys() else None
        scan_message_content = dictionary.get("scan_message_content") if dictionary.get("scan_message_content") else None
        fallback_to_long_code = dictionary.get("fallback_to_long_code") if "fallback_to_long_code" in dictionary.keys() else None
        area_code_geomatch = dictionary.get("area_code_geomatch") if "area_code_geomatch" in dictionary.keys() else None
        synchronous_validation = dictionary.get("synchronous_validation") if "synchronous_validation" in dictionary.keys() else None
        validity_period = dictionary.get("validity_period") if dictionary.get("validity_period") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        usecase = dictionary.get("usecase") if dictionary.get("usecase") else None
        us_app_to_person_registered = dictionary.get("us_app_to_person_registered") if "us_app_to_person_registered" in dictionary.keys() else None
        use_inbound_webhook_on_number = dictionary.get("use_inbound_webhook_on_number") if "use_inbound_webhook_on_number" in dictionary.keys() else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   friendly_name,
                   date_created,
                   date_updated,
                   inbound_request_url,
                   inbound_method,
                   fallback_url,
                   fallback_method,
                   status_callback,
                   sticky_sender,
                   mms_converter,
                   smart_encoding,
                   scan_message_content,
                   fallback_to_long_code,
                   area_code_geomatch,
                   synchronous_validation,
                   validity_period,
                   url,
                   links,
                   usecase,
                   us_app_to_person_registered,
                   use_inbound_webhook_on_number)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'inbound_request_url={self.inbound_request_url!r}, '
                f'inbound_method={self.inbound_method!r}, '
                f'fallback_url={self.fallback_url!r}, '
                f'fallback_method={self.fallback_method!r}, '
                f'status_callback={self.status_callback!r}, '
                f'sticky_sender={self.sticky_sender!r}, '
                f'mms_converter={self.mms_converter!r}, '
                f'smart_encoding={self.smart_encoding!r}, '
                f'scan_message_content={self.scan_message_content!r}, '
                f'fallback_to_long_code={self.fallback_to_long_code!r}, '
                f'area_code_geomatch={self.area_code_geomatch!r}, '
                f'synchronous_validation={self.synchronous_validation!r}, '
                f'validity_period={self.validity_period!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r}, '
                f'usecase={self.usecase!r}, '
                f'us_app_to_person_registered={self.us_app_to_person_registered!r}, '
                f'use_inbound_webhook_on_number={self.use_inbound_webhook_on_number!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'inbound_request_url={self.inbound_request_url!s}, '
                f'inbound_method={self.inbound_method!s}, '
                f'fallback_url={self.fallback_url!s}, '
                f'fallback_method={self.fallback_method!s}, '
                f'status_callback={self.status_callback!s}, '
                f'sticky_sender={self.sticky_sender!s}, '
                f'mms_converter={self.mms_converter!s}, '
                f'smart_encoding={self.smart_encoding!s}, '
                f'scan_message_content={self.scan_message_content!s}, '
                f'fallback_to_long_code={self.fallback_to_long_code!s}, '
                f'area_code_geomatch={self.area_code_geomatch!s}, '
                f'synchronous_validation={self.synchronous_validation!s}, '
                f'validity_period={self.validity_period!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s}, '
                f'usecase={self.usecase!s}, '
                f'us_app_to_person_registered={self.us_app_to_person_registered!s}, '
                f'use_inbound_webhook_on_number={self.use_inbound_webhook_on_number!s})')
