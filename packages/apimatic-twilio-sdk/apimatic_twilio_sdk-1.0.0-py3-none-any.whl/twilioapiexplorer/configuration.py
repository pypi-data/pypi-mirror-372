# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import warnings
from enum import Enum
from twilioapiexplorer.api_helper import APIHelper
from apimatic_core.http.configurations.http_client_configuration import HttpClientConfiguration
from apimatic_requests_client_adapter.requests_client import RequestsClient


class Environment(Enum):
    """An enum for SDK environments"""
    PRODUCTION = 0


class Server(Enum):
    """An enum for API servers"""
    SERVER_1 = 0
    SERVER_2 = 1
    SERVER_3 = 2
    SERVER_4 = 3
    SERVER_5 = 4
    SERVER_6 = 5
    SERVER_7 = 6
    SERVER_8 = 7
    SERVER_9 = 8
    SERVER_10 = 9
    SERVER_11 = 10
    SERVER_12 = 11
    SERVER_13 = 12
    SERVER_14 = 13
    SERVER_15 = 14
    SERVER_16 = 15


class Configuration(HttpClientConfiguration):
    """A class used for configuring the SDK by a user.
    """

    @property
    def environment(self):
        return self._environment

    @property
    def account_sid(self):
        return self._account_sid

    @property
    def credential_list_sid(self):
        return self._credential_list_sid

    @property
    def workspace_sid(self):
        return self._workspace_sid

    @property
    def service_sid(self):
        return self._service_sid

    @property
    def flow_sid(self):
        return self._flow_sid

    @property
    def username(self):
        return self._basic_auth_credentials.username

    @property
    def password(self):
        return self._basic_auth_credentials.password

    @property
    def basic_auth_credentials(self):
        return self._basic_auth_credentials

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION,
                 account_sid='DefaultParameterValue',
                 credential_list_sid='DefaultParameterValue',
                 workspace_sid='DefaultParameterValue', service_sid='<string>',
                 flow_sid='<string>', username=None, password=None,
                 basic_auth_credentials=None):
        if retry_methods is None:
            retry_methods = ['GET', 'PUT']

        if retry_statuses is None:
            retry_statuses = [408, 413, 429, 500, 502, 503, 504, 521, 522, 524]

        super().__init__(http_client_instance,
                         override_http_client_configuration, http_call_back,
                         timeout, max_retries, backoff_factor, retry_statuses,
                         retry_methods)

        # Current API environment
        self._environment = environment

        # account_sid value
        self._account_sid = account_sid

        # credential_list_sid value
        self._credential_list_sid = credential_list_sid

        # workspace_sid value
        self._workspace_sid = workspace_sid

        # (Required) The SID of the [Service](https://www.twilio.com/docs/notify/api/service-resource) to create the resource under.
        self._service_sid = service_sid

        # (Required) The SID of the Flow with the Execution resources to read.
        self._flow_sid = flow_sid

        self._basic_auth_credentials = self.create_auth_credentials_object(
            username, password, basic_auth_credentials)

        # The Http Client to use for making requests.
        self.set_http_client(self.create_http_client())

    def clone_with(self, http_client_instance=None,
                   override_http_client_configuration=None, http_call_back=None,
                   timeout=None, max_retries=None, backoff_factor=None,
                   retry_statuses=None, retry_methods=None, environment=None,
                   account_sid=None, credential_list_sid=None,
                   workspace_sid=None, service_sid=None, flow_sid=None,
                   username=None, password=None, basic_auth_credentials=None):
        http_client_instance = http_client_instance or self.http_client_instance
        override_http_client_configuration = override_http_client_configuration or self.override_http_client_configuration
        http_call_back = http_call_back or self.http_callback
        timeout = timeout or self.timeout
        max_retries = max_retries or self.max_retries
        backoff_factor = backoff_factor or self.backoff_factor
        retry_statuses = retry_statuses or self.retry_statuses
        retry_methods = retry_methods or self.retry_methods
        environment = environment or self.environment
        account_sid = account_sid or self.account_sid
        credential_list_sid = credential_list_sid or self.credential_list_sid
        workspace_sid = workspace_sid or self.workspace_sid
        service_sid = service_sid or self.service_sid
        flow_sid = flow_sid or self.flow_sid
        basic_auth_credentials = self.create_auth_credentials_object(
            username, password,
            basic_auth_credentials or self.basic_auth_credentials,
            stack_level=3)
        return Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, account_sid=account_sid,
            credential_list_sid=credential_list_sid, workspace_sid=workspace_sid,
            service_sid=service_sid, flow_sid=flow_sid,
            basic_auth_credentials=basic_auth_credentials
        )

    def create_http_client(self):
        return RequestsClient(
            timeout=self.timeout, max_retries=self.max_retries,
            backoff_factor=self.backoff_factor, retry_statuses=self.retry_statuses,
            retry_methods=self.retry_methods,
            http_client_instance=self.http_client_instance,
            override_http_client_configuration=self.override_http_client_configuration,
            response_factory=self.http_response_factory
        )

    # All the environments the SDK can run in
    environments = {
        Environment.PRODUCTION: {
            Server.SERVER_1: 'https://messaging.twilio.com/v1',
            Server.SERVER_2: 'http://messaging.twilio.com/v1',
            Server.SERVER_3: 'https://conversations.twilio.com/v1',
            Server.SERVER_4: 'https://api.twilio.com/2010-04-01/Accounts',
            Server.SERVER_5: 'http://api.twilio.com/2010-04-01/Accounts',
            Server.SERVER_6: 'https://api.twilio.com2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials',
            Server.SERVER_7: 'https://taskrouter.twilio.com/v1',
            Server.SERVER_8: 'https://taskrouter.twilio.comv1/Workspaces/{WorkspaceSid}',
            Server.SERVER_9: 'http://example.com',
            Server.SERVER_10: 'https://trunking.twilio.com/v1',
            Server.SERVER_11: 'https://chat.twilio.com/v2',
            Server.SERVER_12: 'https://notify.twilio.com/v1/Services/{ServiceSid}',
            Server.SERVER_13: 'https://sync.twilio.com/v1/Services/{ServiceSid}/Documents',
            Server.SERVER_14: 'https://wireless.twilio.com/v1/Commands',
            Server.SERVER_15: 'https://video.twilio.com/v1/Compositions',
            Server.SERVER_16: 'https://studio.twilio.com/v2/Flows/{FlowSid}'
        }
    }

    def get_base_uri(self, server=Server.SERVER_1):
        """Generates the appropriate base URI for the environment and the
        server.

        Args:
            server (Configuration.Server): The server enum for which the base
            URI is required.

        Returns:
            String: The base URI.

        """
        parameters = {
            "AccountSid": {'value': self.account_sid, 'encode': False},
            "CredentialListSid": {'value': self.credential_list_sid, 'encode': False},
            "WorkspaceSid": {'value': self.workspace_sid, 'encode': False},
            "ServiceSid": {'value': self.service_sid, 'encode': False},
            "FlowSid": {'value': self.flow_sid, 'encode': False},
        }

        return APIHelper.append_url_with_template_parameters(
            self.environments[self.environment][server], parameters
        )

    @staticmethod
    def create_auth_credentials_object(username, password,
                                       basic_auth_credentials, stack_level=4):
        if username is None \
                and password is None:
            return basic_auth_credentials

        warnings.warn(message=('The \'username\', \'password\' params are depre'
                               'cated. Use \'basic_auth_credentials\' param ins'
                               'tead.'),
                      category=DeprecationWarning,
                      stacklevel=stack_level)

        if basic_auth_credentials is not None:
            return basic_auth_credentials.clone_with(username, password)

        from twilioapiexplorer.http.auth.basic_auth import BasicAuthCredentials
        return BasicAuthCredentials(username, password)
