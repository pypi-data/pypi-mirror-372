# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Composition(object):

    """Implementation of the 'Composition' model.

    Attributes:
        account_sid (str): The model property of type str.
        status (str): The model property of type str.
        date_created (str): The model property of type str.
        date_completed (str): The model property of type str.
        date_deleted (str): The model property of type str.
        sid (str): The model property of type str.
        room_sid (str): The model property of type str.
        audio_sources (List[str]): The model property of type List[str].
        audio_sources_excluded (List[str]): The model property of type
            List[str].
        video_layout (Any): The model property of type Any.
        resolution (str): The model property of type str.
        trim (bool): The model property of type bool.
        format (str): The model property of type str.
        bitrate (int): The model property of type int.
        size (int): The model property of type int.
        duration (int): The model property of type int.
        media_external_location (str): The model property of type str.
        status_callback (str): The model property of type str.
        status_callback_method (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "status": 'status',
        "date_created": 'date_created',
        "date_completed": 'date_completed',
        "date_deleted": 'date_deleted',
        "sid": 'sid',
        "room_sid": 'room_sid',
        "audio_sources": 'audio_sources',
        "audio_sources_excluded": 'audio_sources_excluded',
        "video_layout": 'video_layout',
        "resolution": 'resolution',
        "trim": 'trim',
        "format": 'format',
        "bitrate": 'bitrate',
        "size": 'size',
        "duration": 'duration',
        "media_external_location": 'media_external_location',
        "status_callback": 'status_callback',
        "status_callback_method": 'status_callback_method',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 account_sid=None,
                 status=None,
                 date_created=None,
                 date_completed=None,
                 date_deleted=None,
                 sid=None,
                 room_sid=None,
                 audio_sources=None,
                 audio_sources_excluded=None,
                 video_layout=None,
                 resolution=None,
                 trim=None,
                 format=None,
                 bitrate=None,
                 size=None,
                 duration=None,
                 media_external_location=None,
                 status_callback=None,
                 status_callback_method=None,
                 url=None,
                 links=None):
        """Constructor for the Composition class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.status = status 
        self.date_created = date_created 
        self.date_completed = date_completed 
        self.date_deleted = date_deleted 
        self.sid = sid 
        self.room_sid = room_sid 
        self.audio_sources = audio_sources 
        self.audio_sources_excluded = audio_sources_excluded 
        self.video_layout = video_layout 
        self.resolution = resolution 
        self.trim = trim 
        self.format = format 
        self.bitrate = bitrate 
        self.size = size 
        self.duration = duration 
        self.media_external_location = media_external_location 
        self.status_callback = status_callback 
        self.status_callback_method = status_callback_method 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_completed = dictionary.get("date_completed") if dictionary.get("date_completed") else None
        date_deleted = dictionary.get("date_deleted") if dictionary.get("date_deleted") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        room_sid = dictionary.get("room_sid") if dictionary.get("room_sid") else None
        audio_sources = dictionary.get("audio_sources") if dictionary.get("audio_sources") else None
        audio_sources_excluded = dictionary.get("audio_sources_excluded") if dictionary.get("audio_sources_excluded") else None
        video_layout = dictionary.get("video_layout") if dictionary.get("video_layout") else None
        resolution = dictionary.get("resolution") if dictionary.get("resolution") else None
        trim = dictionary.get("trim") if "trim" in dictionary.keys() else None
        format = dictionary.get("format") if dictionary.get("format") else None
        bitrate = dictionary.get("bitrate") if dictionary.get("bitrate") else None
        size = dictionary.get("size") if dictionary.get("size") else None
        duration = dictionary.get("duration") if dictionary.get("duration") else None
        media_external_location = dictionary.get("media_external_location") if dictionary.get("media_external_location") else None
        status_callback = dictionary.get("status_callback") if dictionary.get("status_callback") else None
        status_callback_method = dictionary.get("status_callback_method") if dictionary.get("status_callback_method") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(account_sid,
                   status,
                   date_created,
                   date_completed,
                   date_deleted,
                   sid,
                   room_sid,
                   audio_sources,
                   audio_sources_excluded,
                   video_layout,
                   resolution,
                   trim,
                   format,
                   bitrate,
                   size,
                   duration,
                   media_external_location,
                   status_callback,
                   status_callback_method,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'status={self.status!r}, '
                f'date_created={self.date_created!r}, '
                f'date_completed={self.date_completed!r}, '
                f'date_deleted={self.date_deleted!r}, '
                f'sid={self.sid!r}, '
                f'room_sid={self.room_sid!r}, '
                f'audio_sources={self.audio_sources!r}, '
                f'audio_sources_excluded={self.audio_sources_excluded!r}, '
                f'video_layout={self.video_layout!r}, '
                f'resolution={self.resolution!r}, '
                f'trim={self.trim!r}, '
                f'format={self.format!r}, '
                f'bitrate={self.bitrate!r}, '
                f'size={self.size!r}, '
                f'duration={self.duration!r}, '
                f'media_external_location={self.media_external_location!r}, '
                f'status_callback={self.status_callback!r}, '
                f'status_callback_method={self.status_callback_method!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'status={self.status!s}, '
                f'date_created={self.date_created!s}, '
                f'date_completed={self.date_completed!s}, '
                f'date_deleted={self.date_deleted!s}, '
                f'sid={self.sid!s}, '
                f'room_sid={self.room_sid!s}, '
                f'audio_sources={self.audio_sources!s}, '
                f'audio_sources_excluded={self.audio_sources_excluded!s}, '
                f'video_layout={self.video_layout!s}, '
                f'resolution={self.resolution!s}, '
                f'trim={self.trim!s}, '
                f'format={self.format!s}, '
                f'bitrate={self.bitrate!s}, '
                f'size={self.size!s}, '
                f'duration={self.duration!s}, '
                f'media_external_location={self.media_external_location!s}, '
                f'status_callback={self.status_callback!s}, '
                f'status_callback_method={self.status_callback_method!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
