# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK308(object):

    """Implementation of the 'OK308' model.

    Attributes:
        total_attempts (int): The model property of type int.
        total_converted (int): The model property of type int.
        total_unconverted (int): The model property of type int.
        conversion_rate_percentage (float): The model property of type float.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "total_attempts": 'total_attempts',
        "total_converted": 'total_converted',
        "total_unconverted": 'total_unconverted',
        "conversion_rate_percentage": 'conversion_rate_percentage',
        "url": 'url'
    }

    def __init__(self,
                 total_attempts=None,
                 total_converted=None,
                 total_unconverted=None,
                 conversion_rate_percentage=None,
                 url=None):
        """Constructor for the OK308 class"""

        # Initialize members of the class
        self.total_attempts = total_attempts 
        self.total_converted = total_converted 
        self.total_unconverted = total_unconverted 
        self.conversion_rate_percentage = conversion_rate_percentage 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        total_attempts = dictionary.get("total_attempts") if dictionary.get("total_attempts") else None
        total_converted = dictionary.get("total_converted") if dictionary.get("total_converted") else None
        total_unconverted = dictionary.get("total_unconverted") if dictionary.get("total_unconverted") else None
        conversion_rate_percentage = dictionary.get("conversion_rate_percentage") if dictionary.get("conversion_rate_percentage") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(total_attempts,
                   total_converted,
                   total_unconverted,
                   conversion_rate_percentage,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'total_attempts={self.total_attempts!r}, '
                f'total_converted={self.total_converted!r}, '
                f'total_unconverted={self.total_unconverted!r}, '
                f'conversion_rate_percentage={self.conversion_rate_percentage!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'total_attempts={self.total_attempts!s}, '
                f'total_converted={self.total_converted!s}, '
                f'total_unconverted={self.total_unconverted!s}, '
                f'conversion_rate_percentage={self.conversion_rate_percentage!s}, '
                f'url={self.url!s})')
