# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK349(object):

    """Implementation of the 'OK349' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        function_sid (str): The model property of type str.
        path (str): The model property of type str.
        visibility (str): The model property of type str.
        date_created (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "function_sid": 'function_sid',
        "path": 'path',
        "visibility": 'visibility',
        "date_created": 'date_created',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 service_sid=None,
                 function_sid=None,
                 path=None,
                 visibility=None,
                 date_created=None,
                 url=None,
                 links=None):
        """Constructor for the OK349 class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.function_sid = function_sid 
        self.path = path 
        self.visibility = visibility 
        self.date_created = date_created 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        function_sid = dictionary.get("function_sid") if dictionary.get("function_sid") else None
        path = dictionary.get("path") if dictionary.get("path") else None
        visibility = dictionary.get("visibility") if dictionary.get("visibility") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   service_sid,
                   function_sid,
                   path,
                   visibility,
                   date_created,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'function_sid={self.function_sid!r}, '
                f'path={self.path!r}, '
                f'visibility={self.visibility!r}, '
                f'date_created={self.date_created!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'function_sid={self.function_sid!s}, '
                f'path={self.path!s}, '
                f'visibility={self.visibility!s}, '
                f'date_created={self.date_created!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
