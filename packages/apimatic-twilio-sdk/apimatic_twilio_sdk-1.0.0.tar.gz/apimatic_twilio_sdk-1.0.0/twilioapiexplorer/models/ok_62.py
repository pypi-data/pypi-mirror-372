# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK62(object):

    """Implementation of the 'OK62' model.

    Attributes:
        calling_country_code (str): The model property of type str.
        country_code (str): The model property of type str.
        phone_number (str): The model property of type str.
        national_format (str): The model property of type str.
        valid (bool): The model property of type bool.
        validation_errors (List[str]): The model property of type List[str].
        caller_name (Any): The model property of type Any.
        sim_swap (Any): The model property of type Any.
        call_forwarding (Any): The model property of type Any.
        live_activity (Any): The model property of type Any.
        line_type_intelligence (Any): The model property of type Any.
        identity_match (Any): The model property of type Any.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "calling_country_code": 'calling_country_code',
        "country_code": 'country_code',
        "phone_number": 'phone_number',
        "national_format": 'national_format',
        "valid": 'valid',
        "validation_errors": 'validation_errors',
        "caller_name": 'caller_name',
        "sim_swap": 'sim_swap',
        "call_forwarding": 'call_forwarding',
        "live_activity": 'live_activity',
        "line_type_intelligence": 'line_type_intelligence',
        "identity_match": 'identity_match',
        "url": 'url'
    }

    def __init__(self,
                 calling_country_code=None,
                 country_code=None,
                 phone_number=None,
                 national_format=None,
                 valid=None,
                 validation_errors=None,
                 caller_name=None,
                 sim_swap=None,
                 call_forwarding=None,
                 live_activity=None,
                 line_type_intelligence=None,
                 identity_match=None,
                 url=None):
        """Constructor for the OK62 class"""

        # Initialize members of the class
        self.calling_country_code = calling_country_code 
        self.country_code = country_code 
        self.phone_number = phone_number 
        self.national_format = national_format 
        self.valid = valid 
        self.validation_errors = validation_errors 
        self.caller_name = caller_name 
        self.sim_swap = sim_swap 
        self.call_forwarding = call_forwarding 
        self.live_activity = live_activity 
        self.line_type_intelligence = line_type_intelligence 
        self.identity_match = identity_match 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        calling_country_code = dictionary.get("calling_country_code") if dictionary.get("calling_country_code") else None
        country_code = dictionary.get("country_code") if dictionary.get("country_code") else None
        phone_number = dictionary.get("phone_number") if dictionary.get("phone_number") else None
        national_format = dictionary.get("national_format") if dictionary.get("national_format") else None
        valid = dictionary.get("valid") if "valid" in dictionary.keys() else None
        validation_errors = dictionary.get("validation_errors") if dictionary.get("validation_errors") else None
        caller_name = dictionary.get("caller_name") if dictionary.get("caller_name") else None
        sim_swap = dictionary.get("sim_swap") if dictionary.get("sim_swap") else None
        call_forwarding = dictionary.get("call_forwarding") if dictionary.get("call_forwarding") else None
        live_activity = dictionary.get("live_activity") if dictionary.get("live_activity") else None
        line_type_intelligence = dictionary.get("line_type_intelligence") if dictionary.get("line_type_intelligence") else None
        identity_match = dictionary.get("identity_match") if dictionary.get("identity_match") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(calling_country_code,
                   country_code,
                   phone_number,
                   national_format,
                   valid,
                   validation_errors,
                   caller_name,
                   sim_swap,
                   call_forwarding,
                   live_activity,
                   line_type_intelligence,
                   identity_match,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'calling_country_code={self.calling_country_code!r}, '
                f'country_code={self.country_code!r}, '
                f'phone_number={self.phone_number!r}, '
                f'national_format={self.national_format!r}, '
                f'valid={self.valid!r}, '
                f'validation_errors={self.validation_errors!r}, '
                f'caller_name={self.caller_name!r}, '
                f'sim_swap={self.sim_swap!r}, '
                f'call_forwarding={self.call_forwarding!r}, '
                f'live_activity={self.live_activity!r}, '
                f'line_type_intelligence={self.line_type_intelligence!r}, '
                f'identity_match={self.identity_match!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'calling_country_code={self.calling_country_code!s}, '
                f'country_code={self.country_code!s}, '
                f'phone_number={self.phone_number!s}, '
                f'national_format={self.national_format!s}, '
                f'valid={self.valid!s}, '
                f'validation_errors={self.validation_errors!s}, '
                f'caller_name={self.caller_name!s}, '
                f'sim_swap={self.sim_swap!s}, '
                f'call_forwarding={self.call_forwarding!s}, '
                f'live_activity={self.live_activity!s}, '
                f'line_type_intelligence={self.line_type_intelligence!s}, '
                f'identity_match={self.identity_match!s}, '
                f'url={self.url!s})')
