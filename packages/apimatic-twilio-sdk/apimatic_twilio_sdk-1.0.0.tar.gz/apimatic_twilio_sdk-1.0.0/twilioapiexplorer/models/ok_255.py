# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK255(object):

    """Implementation of the 'OK255' model.

    Attributes:
        account_sid (str): The model property of type str.
        assistant_sid (str): The model property of type str.
        url (str): The model property of type str.
        data (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "assistant_sid": 'assistant_sid',
        "url": 'url',
        "data": 'data'
    }

    def __init__(self,
                 account_sid=None,
                 assistant_sid=None,
                 url=None,
                 data=None):
        """Constructor for the OK255 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.assistant_sid = assistant_sid 
        self.url = url 
        self.data = data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        assistant_sid = dictionary.get("assistant_sid") if dictionary.get("assistant_sid") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        data = dictionary.get("data") if dictionary.get("data") else None
        # Return an object of this model
        return cls(account_sid,
                   assistant_sid,
                   url,
                   data)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'assistant_sid={self.assistant_sid!r}, '
                f'url={self.url!r}, '
                f'data={self.data!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'assistant_sid={self.assistant_sid!s}, '
                f'url={self.url!s}, '
                f'data={self.data!s})')
