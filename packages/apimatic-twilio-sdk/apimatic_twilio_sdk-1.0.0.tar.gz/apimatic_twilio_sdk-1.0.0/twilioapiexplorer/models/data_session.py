# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class DataSession(object):

    """Implementation of the 'DataSession' model.

    Attributes:
        sid (str): The model property of type str.
        sim_sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        radio_link (str): The model property of type str.
        operator_mcc (str): The model property of type str.
        operator_mnc (str): The model property of type str.
        operator_country (str): The model property of type str.
        operator_name (str): The model property of type str.
        cell_id (str): The model property of type str.
        cell_location_estimate (Any): The model property of type Any.
        packets_uploaded (int): The model property of type int.
        packets_downloaded (int): The model property of type int.
        last_updated (str): The model property of type str.
        start (str): The model property of type str.
        end (str): The model property of type str.
        imei (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "sim_sid": 'sim_sid',
        "account_sid": 'account_sid',
        "radio_link": 'radio_link',
        "operator_mcc": 'operator_mcc',
        "operator_mnc": 'operator_mnc',
        "operator_country": 'operator_country',
        "operator_name": 'operator_name',
        "cell_id": 'cell_id',
        "cell_location_estimate": 'cell_location_estimate',
        "packets_uploaded": 'packets_uploaded',
        "packets_downloaded": 'packets_downloaded',
        "last_updated": 'last_updated',
        "start": 'start',
        "end": 'end',
        "imei": 'imei'
    }

    def __init__(self,
                 sid=None,
                 sim_sid=None,
                 account_sid=None,
                 radio_link=None,
                 operator_mcc=None,
                 operator_mnc=None,
                 operator_country=None,
                 operator_name=None,
                 cell_id=None,
                 cell_location_estimate=None,
                 packets_uploaded=None,
                 packets_downloaded=None,
                 last_updated=None,
                 start=None,
                 end=None,
                 imei=None):
        """Constructor for the DataSession class"""

        # Initialize members of the class
        self.sid = sid 
        self.sim_sid = sim_sid 
        self.account_sid = account_sid 
        self.radio_link = radio_link 
        self.operator_mcc = operator_mcc 
        self.operator_mnc = operator_mnc 
        self.operator_country = operator_country 
        self.operator_name = operator_name 
        self.cell_id = cell_id 
        self.cell_location_estimate = cell_location_estimate 
        self.packets_uploaded = packets_uploaded 
        self.packets_downloaded = packets_downloaded 
        self.last_updated = last_updated 
        self.start = start 
        self.end = end 
        self.imei = imei 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        sim_sid = dictionary.get("sim_sid") if dictionary.get("sim_sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        radio_link = dictionary.get("radio_link") if dictionary.get("radio_link") else None
        operator_mcc = dictionary.get("operator_mcc") if dictionary.get("operator_mcc") else None
        operator_mnc = dictionary.get("operator_mnc") if dictionary.get("operator_mnc") else None
        operator_country = dictionary.get("operator_country") if dictionary.get("operator_country") else None
        operator_name = dictionary.get("operator_name") if dictionary.get("operator_name") else None
        cell_id = dictionary.get("cell_id") if dictionary.get("cell_id") else None
        cell_location_estimate = dictionary.get("cell_location_estimate") if dictionary.get("cell_location_estimate") else None
        packets_uploaded = dictionary.get("packets_uploaded") if dictionary.get("packets_uploaded") else None
        packets_downloaded = dictionary.get("packets_downloaded") if dictionary.get("packets_downloaded") else None
        last_updated = dictionary.get("last_updated") if dictionary.get("last_updated") else None
        start = dictionary.get("start") if dictionary.get("start") else None
        end = dictionary.get("end") if dictionary.get("end") else None
        imei = dictionary.get("imei") if dictionary.get("imei") else None
        # Return an object of this model
        return cls(sid,
                   sim_sid,
                   account_sid,
                   radio_link,
                   operator_mcc,
                   operator_mnc,
                   operator_country,
                   operator_name,
                   cell_id,
                   cell_location_estimate,
                   packets_uploaded,
                   packets_downloaded,
                   last_updated,
                   start,
                   end,
                   imei)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'sim_sid={self.sim_sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'radio_link={self.radio_link!r}, '
                f'operator_mcc={self.operator_mcc!r}, '
                f'operator_mnc={self.operator_mnc!r}, '
                f'operator_country={self.operator_country!r}, '
                f'operator_name={self.operator_name!r}, '
                f'cell_id={self.cell_id!r}, '
                f'cell_location_estimate={self.cell_location_estimate!r}, '
                f'packets_uploaded={self.packets_uploaded!r}, '
                f'packets_downloaded={self.packets_downloaded!r}, '
                f'last_updated={self.last_updated!r}, '
                f'start={self.start!r}, '
                f'end={self.end!r}, '
                f'imei={self.imei!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'sim_sid={self.sim_sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'radio_link={self.radio_link!s}, '
                f'operator_mcc={self.operator_mcc!s}, '
                f'operator_mnc={self.operator_mnc!s}, '
                f'operator_country={self.operator_country!s}, '
                f'operator_name={self.operator_name!s}, '
                f'cell_id={self.cell_id!s}, '
                f'cell_location_estimate={self.cell_location_estimate!s}, '
                f'packets_uploaded={self.packets_uploaded!s}, '
                f'packets_downloaded={self.packets_downloaded!s}, '
                f'last_updated={self.last_updated!s}, '
                f'start={self.start!s}, '
                f'end={self.end!s}, '
                f'imei={self.imei!s})')
