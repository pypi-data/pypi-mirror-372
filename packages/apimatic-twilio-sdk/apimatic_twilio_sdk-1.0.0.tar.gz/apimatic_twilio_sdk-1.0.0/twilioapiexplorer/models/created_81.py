# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Created81(object):

    """Implementation of the 'Created81' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        entity_sid (str): The model property of type str.
        identity (str): The model property of type str.
        challenge_sid (str): The model property of type str.
        priority (str): The model property of type str.
        ttl (int): The model property of type int.
        date_created (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "entity_sid": 'entity_sid',
        "identity": 'identity',
        "challenge_sid": 'challenge_sid',
        "priority": 'priority',
        "ttl": 'ttl',
        "date_created": 'date_created'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 service_sid=None,
                 entity_sid=None,
                 identity=None,
                 challenge_sid=None,
                 priority=None,
                 ttl=None,
                 date_created=None):
        """Constructor for the Created81 class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.entity_sid = entity_sid 
        self.identity = identity 
        self.challenge_sid = challenge_sid 
        self.priority = priority 
        self.ttl = ttl 
        self.date_created = date_created 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        entity_sid = dictionary.get("entity_sid") if dictionary.get("entity_sid") else None
        identity = dictionary.get("identity") if dictionary.get("identity") else None
        challenge_sid = dictionary.get("challenge_sid") if dictionary.get("challenge_sid") else None
        priority = dictionary.get("priority") if dictionary.get("priority") else None
        ttl = dictionary.get("ttl") if dictionary.get("ttl") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   service_sid,
                   entity_sid,
                   identity,
                   challenge_sid,
                   priority,
                   ttl,
                   date_created)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'entity_sid={self.entity_sid!r}, '
                f'identity={self.identity!r}, '
                f'challenge_sid={self.challenge_sid!r}, '
                f'priority={self.priority!r}, '
                f'ttl={self.ttl!r}, '
                f'date_created={self.date_created!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'entity_sid={self.entity_sid!s}, '
                f'identity={self.identity!s}, '
                f'challenge_sid={self.challenge_sid!s}, '
                f'priority={self.priority!s}, '
                f'ttl={self.ttl!s}, '
                f'date_created={self.date_created!s})')
