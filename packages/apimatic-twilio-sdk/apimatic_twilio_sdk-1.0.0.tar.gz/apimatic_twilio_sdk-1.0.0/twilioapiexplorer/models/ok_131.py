# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK131(object):

    """Implementation of the 'OK131' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        attributes (str): The model property of type str.
        service_sid (str): The model property of type str.
        to (str): The model property of type str.
        channel_sid (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        last_updated_by (str): The model property of type str.
        was_edited (bool): The model property of type bool.
        mfrom (str): The model property of type str.
        body (str): The model property of type str.
        index (int): The model property of type int.
        mtype (str): The model property of type str.
        media (Any): The model property of type Any.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "attributes": 'attributes',
        "service_sid": 'service_sid',
        "to": 'to',
        "channel_sid": 'channel_sid',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "last_updated_by": 'last_updated_by',
        "was_edited": 'was_edited',
        "mfrom": 'from',
        "body": 'body',
        "index": 'index',
        "mtype": 'type',
        "media": 'media',
        "url": 'url'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 attributes=None,
                 service_sid=None,
                 to=None,
                 channel_sid=None,
                 date_created=None,
                 date_updated=None,
                 last_updated_by=None,
                 was_edited=None,
                 mfrom=None,
                 body=None,
                 index=None,
                 mtype=None,
                 media=None,
                 url=None):
        """Constructor for the OK131 class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.attributes = attributes 
        self.service_sid = service_sid 
        self.to = to 
        self.channel_sid = channel_sid 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.last_updated_by = last_updated_by 
        self.was_edited = was_edited 
        self.mfrom = mfrom 
        self.body = body 
        self.index = index 
        self.mtype = mtype 
        self.media = media 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        attributes = dictionary.get("attributes") if dictionary.get("attributes") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        to = dictionary.get("to") if dictionary.get("to") else None
        channel_sid = dictionary.get("channel_sid") if dictionary.get("channel_sid") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        last_updated_by = dictionary.get("last_updated_by") if dictionary.get("last_updated_by") else None
        was_edited = dictionary.get("was_edited") if "was_edited" in dictionary.keys() else None
        mfrom = dictionary.get("from") if dictionary.get("from") else None
        body = dictionary.get("body") if dictionary.get("body") else None
        index = dictionary.get("index") if dictionary.get("index") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        media = dictionary.get("media") if dictionary.get("media") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   attributes,
                   service_sid,
                   to,
                   channel_sid,
                   date_created,
                   date_updated,
                   last_updated_by,
                   was_edited,
                   mfrom,
                   body,
                   index,
                   mtype,
                   media,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'attributes={self.attributes!r}, '
                f'service_sid={self.service_sid!r}, '
                f'to={self.to!r}, '
                f'channel_sid={self.channel_sid!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'last_updated_by={self.last_updated_by!r}, '
                f'was_edited={self.was_edited!r}, '
                f'mfrom={self.mfrom!r}, '
                f'body={self.body!r}, '
                f'index={self.index!r}, '
                f'mtype={self.mtype!r}, '
                f'media={self.media!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'attributes={self.attributes!s}, '
                f'service_sid={self.service_sid!s}, '
                f'to={self.to!s}, '
                f'channel_sid={self.channel_sid!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'last_updated_by={self.last_updated_by!s}, '
                f'was_edited={self.was_edited!s}, '
                f'mfrom={self.mfrom!s}, '
                f'body={self.body!s}, '
                f'index={self.index!s}, '
                f'mtype={self.mtype!s}, '
                f'media={self.media!s}, '
                f'url={self.url!s})')
