# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK86(object):

    """Implementation of the 'OK86' model.

    Attributes:
        account_sid (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        default_activity_name (str): The model property of type str.
        default_activity_sid (str): The model property of type str.
        event_callback_url (str): The model property of type str.
        events_filter (str): The model property of type str.
        friendly_name (str): The model property of type str.
        multi_task_enabled (bool): The model property of type bool.
        sid (str): The model property of type str.
        timeout_activity_name (str): The model property of type str.
        timeout_activity_sid (str): The model property of type str.
        prioritize_queue_order (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "default_activity_name": 'default_activity_name',
        "default_activity_sid": 'default_activity_sid',
        "event_callback_url": 'event_callback_url',
        "events_filter": 'events_filter',
        "friendly_name": 'friendly_name',
        "multi_task_enabled": 'multi_task_enabled',
        "sid": 'sid',
        "timeout_activity_name": 'timeout_activity_name',
        "timeout_activity_sid": 'timeout_activity_sid',
        "prioritize_queue_order": 'prioritize_queue_order',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 account_sid=None,
                 date_created=None,
                 date_updated=None,
                 default_activity_name=None,
                 default_activity_sid=None,
                 event_callback_url=None,
                 events_filter=None,
                 friendly_name=None,
                 multi_task_enabled=None,
                 sid=None,
                 timeout_activity_name=None,
                 timeout_activity_sid=None,
                 prioritize_queue_order=None,
                 url=None,
                 links=None):
        """Constructor for the OK86 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.default_activity_name = default_activity_name 
        self.default_activity_sid = default_activity_sid 
        self.event_callback_url = event_callback_url 
        self.events_filter = events_filter 
        self.friendly_name = friendly_name 
        self.multi_task_enabled = multi_task_enabled 
        self.sid = sid 
        self.timeout_activity_name = timeout_activity_name 
        self.timeout_activity_sid = timeout_activity_sid 
        self.prioritize_queue_order = prioritize_queue_order 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        default_activity_name = dictionary.get("default_activity_name") if dictionary.get("default_activity_name") else None
        default_activity_sid = dictionary.get("default_activity_sid") if dictionary.get("default_activity_sid") else None
        event_callback_url = dictionary.get("event_callback_url") if dictionary.get("event_callback_url") else None
        events_filter = dictionary.get("events_filter") if dictionary.get("events_filter") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        multi_task_enabled = dictionary.get("multi_task_enabled") if "multi_task_enabled" in dictionary.keys() else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        timeout_activity_name = dictionary.get("timeout_activity_name") if dictionary.get("timeout_activity_name") else None
        timeout_activity_sid = dictionary.get("timeout_activity_sid") if dictionary.get("timeout_activity_sid") else None
        prioritize_queue_order = dictionary.get("prioritize_queue_order") if dictionary.get("prioritize_queue_order") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(account_sid,
                   date_created,
                   date_updated,
                   default_activity_name,
                   default_activity_sid,
                   event_callback_url,
                   events_filter,
                   friendly_name,
                   multi_task_enabled,
                   sid,
                   timeout_activity_name,
                   timeout_activity_sid,
                   prioritize_queue_order,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'default_activity_name={self.default_activity_name!r}, '
                f'default_activity_sid={self.default_activity_sid!r}, '
                f'event_callback_url={self.event_callback_url!r}, '
                f'events_filter={self.events_filter!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'multi_task_enabled={self.multi_task_enabled!r}, '
                f'sid={self.sid!r}, '
                f'timeout_activity_name={self.timeout_activity_name!r}, '
                f'timeout_activity_sid={self.timeout_activity_sid!r}, '
                f'prioritize_queue_order={self.prioritize_queue_order!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'default_activity_name={self.default_activity_name!s}, '
                f'default_activity_sid={self.default_activity_sid!s}, '
                f'event_callback_url={self.event_callback_url!s}, '
                f'events_filter={self.events_filter!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'multi_task_enabled={self.multi_task_enabled!s}, '
                f'sid={self.sid!s}, '
                f'timeout_activity_name={self.timeout_activity_name!s}, '
                f'timeout_activity_sid={self.timeout_activity_sid!s}, '
                f'prioritize_queue_order={self.prioritize_queue_order!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
