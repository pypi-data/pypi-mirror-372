# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK163(object):

    """Implementation of the 'OK163' model.

    Attributes:
        index (int): The model property of type int.
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        list_sid (str): The model property of type str.
        url (str): The model property of type str.
        revision (str): The model property of type str.
        data (Any): The model property of type Any.
        date_expires (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        created_by (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "index": 'index',
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "list_sid": 'list_sid',
        "url": 'url',
        "revision": 'revision',
        "data": 'data',
        "date_expires": 'date_expires',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "created_by": 'created_by'
    }

    def __init__(self,
                 index=None,
                 account_sid=None,
                 service_sid=None,
                 list_sid=None,
                 url=None,
                 revision=None,
                 data=None,
                 date_expires=None,
                 date_created=None,
                 date_updated=None,
                 created_by=None):
        """Constructor for the OK163 class"""

        # Initialize members of the class
        self.index = index 
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.list_sid = list_sid 
        self.url = url 
        self.revision = revision 
        self.data = data 
        self.date_expires = date_expires 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.created_by = created_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        index = dictionary.get("index") if dictionary.get("index") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        list_sid = dictionary.get("list_sid") if dictionary.get("list_sid") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        revision = dictionary.get("revision") if dictionary.get("revision") else None
        data = dictionary.get("data") if dictionary.get("data") else None
        date_expires = dictionary.get("date_expires") if dictionary.get("date_expires") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        created_by = dictionary.get("created_by") if dictionary.get("created_by") else None
        # Return an object of this model
        return cls(index,
                   account_sid,
                   service_sid,
                   list_sid,
                   url,
                   revision,
                   data,
                   date_expires,
                   date_created,
                   date_updated,
                   created_by)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'index={self.index!r}, '
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'list_sid={self.list_sid!r}, '
                f'url={self.url!r}, '
                f'revision={self.revision!r}, '
                f'data={self.data!r}, '
                f'date_expires={self.date_expires!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'created_by={self.created_by!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'index={self.index!s}, '
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'list_sid={self.list_sid!s}, '
                f'url={self.url!s}, '
                f'revision={self.revision!s}, '
                f'data={self.data!s}, '
                f'date_expires={self.date_expires!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'created_by={self.created_by!s})')
