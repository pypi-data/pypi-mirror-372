# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Extension(object):

    """Implementation of the 'Extension' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        resource_sid (str): The model property of type str.
        assigned_add_on_sid (str): The model property of type str.
        friendly_name (str): The model property of type str.
        product_name (str): The model property of type str.
        unique_name (str): The model property of type str.
        uri (str): The model property of type str.
        enabled (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "resource_sid": 'resource_sid',
        "assigned_add_on_sid": 'assigned_add_on_sid',
        "friendly_name": 'friendly_name',
        "product_name": 'product_name',
        "unique_name": 'unique_name',
        "uri": 'uri',
        "enabled": 'enabled'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 resource_sid=None,
                 assigned_add_on_sid=None,
                 friendly_name=None,
                 product_name=None,
                 unique_name=None,
                 uri=None,
                 enabled=None):
        """Constructor for the Extension class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.resource_sid = resource_sid 
        self.assigned_add_on_sid = assigned_add_on_sid 
        self.friendly_name = friendly_name 
        self.product_name = product_name 
        self.unique_name = unique_name 
        self.uri = uri 
        self.enabled = enabled 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        resource_sid = dictionary.get("resource_sid") if dictionary.get("resource_sid") else None
        assigned_add_on_sid = dictionary.get("assigned_add_on_sid") if dictionary.get("assigned_add_on_sid") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        product_name = dictionary.get("product_name") if dictionary.get("product_name") else None
        unique_name = dictionary.get("unique_name") if dictionary.get("unique_name") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   resource_sid,
                   assigned_add_on_sid,
                   friendly_name,
                   product_name,
                   unique_name,
                   uri,
                   enabled)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'resource_sid={self.resource_sid!r}, '
                f'assigned_add_on_sid={self.assigned_add_on_sid!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'product_name={self.product_name!r}, '
                f'unique_name={self.unique_name!r}, '
                f'uri={self.uri!r}, '
                f'enabled={self.enabled!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'resource_sid={self.resource_sid!s}, '
                f'assigned_add_on_sid={self.assigned_add_on_sid!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'product_name={self.product_name!s}, '
                f'unique_name={self.unique_name!s}, '
                f'uri={self.uri!s}, '
                f'enabled={self.enabled!s})')
