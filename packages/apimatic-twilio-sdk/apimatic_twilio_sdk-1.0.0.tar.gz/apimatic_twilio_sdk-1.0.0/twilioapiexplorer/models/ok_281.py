# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK281(object):

    """Implementation of the 'OK281' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        entity_identity (str): The model property of type str.
        factor_type (str): The model property of type str.
        factor_friendly_name (str): The model property of type str.
        token (str): The model property of type str.
        url (str): The model property of type str.
        ttl (int): The model property of type int.
        date_created (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "entity_identity": 'entity_identity',
        "factor_type": 'factor_type',
        "factor_friendly_name": 'factor_friendly_name',
        "token": 'token',
        "url": 'url',
        "ttl": 'ttl',
        "date_created": 'date_created'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 service_sid=None,
                 entity_identity=None,
                 factor_type=None,
                 factor_friendly_name=None,
                 token=None,
                 url=None,
                 ttl=None,
                 date_created=None):
        """Constructor for the OK281 class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.entity_identity = entity_identity 
        self.factor_type = factor_type 
        self.factor_friendly_name = factor_friendly_name 
        self.token = token 
        self.url = url 
        self.ttl = ttl 
        self.date_created = date_created 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        entity_identity = dictionary.get("entity_identity") if dictionary.get("entity_identity") else None
        factor_type = dictionary.get("factor_type") if dictionary.get("factor_type") else None
        factor_friendly_name = dictionary.get("factor_friendly_name") if dictionary.get("factor_friendly_name") else None
        token = dictionary.get("token") if dictionary.get("token") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        ttl = dictionary.get("ttl") if dictionary.get("ttl") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   service_sid,
                   entity_identity,
                   factor_type,
                   factor_friendly_name,
                   token,
                   url,
                   ttl,
                   date_created)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'entity_identity={self.entity_identity!r}, '
                f'factor_type={self.factor_type!r}, '
                f'factor_friendly_name={self.factor_friendly_name!r}, '
                f'token={self.token!r}, '
                f'url={self.url!r}, '
                f'ttl={self.ttl!r}, '
                f'date_created={self.date_created!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'entity_identity={self.entity_identity!s}, '
                f'factor_type={self.factor_type!s}, '
                f'factor_friendly_name={self.factor_friendly_name!s}, '
                f'token={self.token!s}, '
                f'url={self.url!s}, '
                f'ttl={self.ttl!s}, '
                f'date_created={self.date_created!s})')
