# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from twilioapiexplorer.models.capabilities import Capabilities


class OK238(object):

    """Implementation of the 'OK238' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        phone_number (str): The model property of type str.
        friendly_name (str): The model property of type str.
        iso_country (str): The model property of type str.
        capabilities (Capabilities): The model property of type Capabilities.
        url (str): The model property of type str.
        is_reserved (bool): The model property of type bool.
        in_use (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "phone_number": 'phone_number',
        "friendly_name": 'friendly_name',
        "iso_country": 'iso_country',
        "capabilities": 'capabilities',
        "url": 'url',
        "is_reserved": 'is_reserved',
        "in_use": 'in_use'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 service_sid=None,
                 date_created=None,
                 date_updated=None,
                 phone_number=None,
                 friendly_name=None,
                 iso_country=None,
                 capabilities=None,
                 url=None,
                 is_reserved=None,
                 in_use=None):
        """Constructor for the OK238 class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.phone_number = phone_number 
        self.friendly_name = friendly_name 
        self.iso_country = iso_country 
        self.capabilities = capabilities 
        self.url = url 
        self.is_reserved = is_reserved 
        self.in_use = in_use 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        phone_number = dictionary.get("phone_number") if dictionary.get("phone_number") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        iso_country = dictionary.get("iso_country") if dictionary.get("iso_country") else None
        capabilities = Capabilities.from_dictionary(dictionary.get('capabilities')) if dictionary.get('capabilities') else None
        url = dictionary.get("url") if dictionary.get("url") else None
        is_reserved = dictionary.get("is_reserved") if "is_reserved" in dictionary.keys() else None
        in_use = dictionary.get("in_use") if dictionary.get("in_use") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   service_sid,
                   date_created,
                   date_updated,
                   phone_number,
                   friendly_name,
                   iso_country,
                   capabilities,
                   url,
                   is_reserved,
                   in_use)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'phone_number={self.phone_number!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'iso_country={self.iso_country!r}, '
                f'capabilities={self.capabilities!r}, '
                f'url={self.url!r}, '
                f'is_reserved={self.is_reserved!r}, '
                f'in_use={self.in_use!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'phone_number={self.phone_number!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'iso_country={self.iso_country!s}, '
                f'capabilities={self.capabilities!s}, '
                f'url={self.url!s}, '
                f'is_reserved={self.is_reserved!s}, '
                f'in_use={self.in_use!s})')
