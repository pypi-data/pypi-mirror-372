# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Created39(object):

    """Implementation of the 'Created39' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        date_created (str): The model property of type str.
        identities (List[str]): The model property of type List[str].
        tags (List[str]): The model property of type List[str].
        segments (List[str]): The model property of type List[str].
        priority (str): The model property of type str.
        ttl (int): The model property of type int.
        title (str): The model property of type str.
        body (str): The model property of type str.
        sound (str): The model property of type str.
        action (str): The model property of type str.
        data (Any): The model property of type Any.
        apn (Any): The model property of type Any.
        gcm (Any): The model property of type Any.
        fcm (Any): The model property of type Any.
        sms (Any): The model property of type Any.
        facebook_messenger (Any): The model property of type Any.
        alexa (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "date_created": 'date_created',
        "identities": 'identities',
        "tags": 'tags',
        "segments": 'segments',
        "priority": 'priority',
        "ttl": 'ttl',
        "title": 'title',
        "body": 'body',
        "sound": 'sound',
        "action": 'action',
        "data": 'data',
        "apn": 'apn',
        "gcm": 'gcm',
        "fcm": 'fcm',
        "sms": 'sms',
        "facebook_messenger": 'facebook_messenger',
        "alexa": 'alexa'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 service_sid=None,
                 date_created=None,
                 identities=None,
                 tags=None,
                 segments=None,
                 priority=None,
                 ttl=None,
                 title=None,
                 body=None,
                 sound=None,
                 action=None,
                 data=None,
                 apn=None,
                 gcm=None,
                 fcm=None,
                 sms=None,
                 facebook_messenger=None,
                 alexa=None):
        """Constructor for the Created39 class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.date_created = date_created 
        self.identities = identities 
        self.tags = tags 
        self.segments = segments 
        self.priority = priority 
        self.ttl = ttl 
        self.title = title 
        self.body = body 
        self.sound = sound 
        self.action = action 
        self.data = data 
        self.apn = apn 
        self.gcm = gcm 
        self.fcm = fcm 
        self.sms = sms 
        self.facebook_messenger = facebook_messenger 
        self.alexa = alexa 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        identities = dictionary.get("identities") if dictionary.get("identities") else None
        tags = dictionary.get("tags") if dictionary.get("tags") else None
        segments = dictionary.get("segments") if dictionary.get("segments") else None
        priority = dictionary.get("priority") if dictionary.get("priority") else None
        ttl = dictionary.get("ttl") if dictionary.get("ttl") else None
        title = dictionary.get("title") if dictionary.get("title") else None
        body = dictionary.get("body") if dictionary.get("body") else None
        sound = dictionary.get("sound") if dictionary.get("sound") else None
        action = dictionary.get("action") if dictionary.get("action") else None
        data = dictionary.get("data") if dictionary.get("data") else None
        apn = dictionary.get("apn") if dictionary.get("apn") else None
        gcm = dictionary.get("gcm") if dictionary.get("gcm") else None
        fcm = dictionary.get("fcm") if dictionary.get("fcm") else None
        sms = dictionary.get("sms") if dictionary.get("sms") else None
        facebook_messenger = dictionary.get("facebook_messenger") if dictionary.get("facebook_messenger") else None
        alexa = dictionary.get("alexa") if dictionary.get("alexa") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   service_sid,
                   date_created,
                   identities,
                   tags,
                   segments,
                   priority,
                   ttl,
                   title,
                   body,
                   sound,
                   action,
                   data,
                   apn,
                   gcm,
                   fcm,
                   sms,
                   facebook_messenger,
                   alexa)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'date_created={self.date_created!r}, '
                f'identities={self.identities!r}, '
                f'tags={self.tags!r}, '
                f'segments={self.segments!r}, '
                f'priority={self.priority!r}, '
                f'ttl={self.ttl!r}, '
                f'title={self.title!r}, '
                f'body={self.body!r}, '
                f'sound={self.sound!r}, '
                f'action={self.action!r}, '
                f'data={self.data!r}, '
                f'apn={self.apn!r}, '
                f'gcm={self.gcm!r}, '
                f'fcm={self.fcm!r}, '
                f'sms={self.sms!r}, '
                f'facebook_messenger={self.facebook_messenger!r}, '
                f'alexa={self.alexa!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'date_created={self.date_created!s}, '
                f'identities={self.identities!s}, '
                f'tags={self.tags!s}, '
                f'segments={self.segments!s}, '
                f'priority={self.priority!s}, '
                f'ttl={self.ttl!s}, '
                f'title={self.title!s}, '
                f'body={self.body!s}, '
                f'sound={self.sound!s}, '
                f'action={self.action!s}, '
                f'data={self.data!s}, '
                f'apn={self.apn!s}, '
                f'gcm={self.gcm!s}, '
                f'fcm={self.fcm!s}, '
                f'sms={self.sms!s}, '
                f'facebook_messenger={self.facebook_messenger!s}, '
                f'alexa={self.alexa!s})')
