# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK113(object):

    """Implementation of the 'OK113' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        friendly_name (str): The model property of type str.
        unique_name (str): The model property of type str.
        attributes (str): The model property of type str.
        mtype (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        created_by (str): The model property of type str.
        members_count (int): The model property of type int.
        messages_count (int): The model property of type int.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "friendly_name": 'friendly_name',
        "unique_name": 'unique_name',
        "attributes": 'attributes',
        "mtype": 'type',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "created_by": 'created_by',
        "members_count": 'members_count',
        "messages_count": 'messages_count',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 service_sid=None,
                 friendly_name=None,
                 unique_name=None,
                 attributes=None,
                 mtype=None,
                 date_created=None,
                 date_updated=None,
                 created_by=None,
                 members_count=None,
                 messages_count=None,
                 url=None,
                 links=None):
        """Constructor for the OK113 class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.friendly_name = friendly_name 
        self.unique_name = unique_name 
        self.attributes = attributes 
        self.mtype = mtype 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.created_by = created_by 
        self.members_count = members_count 
        self.messages_count = messages_count 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        unique_name = dictionary.get("unique_name") if dictionary.get("unique_name") else None
        attributes = dictionary.get("attributes") if dictionary.get("attributes") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        created_by = dictionary.get("created_by") if dictionary.get("created_by") else None
        members_count = dictionary.get("members_count") if dictionary.get("members_count") else None
        messages_count = dictionary.get("messages_count") if dictionary.get("messages_count") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   service_sid,
                   friendly_name,
                   unique_name,
                   attributes,
                   mtype,
                   date_created,
                   date_updated,
                   created_by,
                   members_count,
                   messages_count,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'unique_name={self.unique_name!r}, '
                f'attributes={self.attributes!r}, '
                f'mtype={self.mtype!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'created_by={self.created_by!r}, '
                f'members_count={self.members_count!r}, '
                f'messages_count={self.messages_count!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'unique_name={self.unique_name!s}, '
                f'attributes={self.attributes!s}, '
                f'mtype={self.mtype!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'created_by={self.created_by!s}, '
                f'members_count={self.members_count!s}, '
                f'messages_count={self.messages_count!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
