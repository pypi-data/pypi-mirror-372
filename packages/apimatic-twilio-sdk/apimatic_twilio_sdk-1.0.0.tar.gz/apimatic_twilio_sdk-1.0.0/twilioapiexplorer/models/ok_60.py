# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from twilioapiexplorer.models.credential_list import CredentialList


class OK60(object):

    """Implementation of the 'OK60' model.

    Attributes:
        credential_lists (List[CredentialList]): The model property of type
            List[CredentialList].
        end (int): The model property of type int.
        first_page_uri (str): The model property of type str.
        next_page_uri (str): The model property of type str.
        page (int): The model property of type int.
        page_size (int): The model property of type int.
        previous_page_uri (str): The model property of type str.
        start (int): The model property of type int.
        uri (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "credential_lists": 'credential_lists',
        "end": 'end',
        "first_page_uri": 'first_page_uri',
        "next_page_uri": 'next_page_uri',
        "page": 'page',
        "page_size": 'page_size',
        "previous_page_uri": 'previous_page_uri',
        "start": 'start',
        "uri": 'uri'
    }

    def __init__(self,
                 credential_lists=None,
                 end=None,
                 first_page_uri=None,
                 next_page_uri=None,
                 page=None,
                 page_size=None,
                 previous_page_uri=None,
                 start=None,
                 uri=None):
        """Constructor for the OK60 class"""

        # Initialize members of the class
        self.credential_lists = credential_lists 
        self.end = end 
        self.first_page_uri = first_page_uri 
        self.next_page_uri = next_page_uri 
        self.page = page 
        self.page_size = page_size 
        self.previous_page_uri = previous_page_uri 
        self.start = start 
        self.uri = uri 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        credential_lists = None
        if dictionary.get('credential_lists') is not None:
            credential_lists = [CredentialList.from_dictionary(x) for x in dictionary.get('credential_lists')]
        end = dictionary.get("end") if dictionary.get("end") else None
        first_page_uri = dictionary.get("first_page_uri") if dictionary.get("first_page_uri") else None
        next_page_uri = dictionary.get("next_page_uri") if dictionary.get("next_page_uri") else None
        page = dictionary.get("page") if dictionary.get("page") else None
        page_size = dictionary.get("page_size") if dictionary.get("page_size") else None
        previous_page_uri = dictionary.get("previous_page_uri") if dictionary.get("previous_page_uri") else None
        start = dictionary.get("start") if dictionary.get("start") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        # Return an object of this model
        return cls(credential_lists,
                   end,
                   first_page_uri,
                   next_page_uri,
                   page,
                   page_size,
                   previous_page_uri,
                   start,
                   uri)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'credential_lists={self.credential_lists!r}, '
                f'end={self.end!r}, '
                f'first_page_uri={self.first_page_uri!r}, '
                f'next_page_uri={self.next_page_uri!r}, '
                f'page={self.page!r}, '
                f'page_size={self.page_size!r}, '
                f'previous_page_uri={self.previous_page_uri!r}, '
                f'start={self.start!r}, '
                f'uri={self.uri!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'credential_lists={self.credential_lists!s}, '
                f'end={self.end!s}, '
                f'first_page_uri={self.first_page_uri!s}, '
                f'next_page_uri={self.next_page_uri!s}, '
                f'page={self.page!s}, '
                f'page_size={self.page_size!s}, '
                f'previous_page_uri={self.previous_page_uri!s}, '
                f'start={self.start!s}, '
                f'uri={self.uri!s})')
