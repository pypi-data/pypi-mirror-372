# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK194(object):

    """Implementation of the 'OK194' model.

    Attributes:
        account_sid (str): The model property of type str.
        friendly_name (str): The model property of type str.
        enabled (bool): The model property of type bool.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        sid (str): The model property of type str.
        audio_sources (List[str]): The model property of type List[str].
        audio_sources_excluded (List[str]): The model property of type
            List[str].
        video_layout (Any): The model property of type Any.
        resolution (str): The model property of type str.
        trim (bool): The model property of type bool.
        format (str): The model property of type str.
        status_callback (str): The model property of type str.
        status_callback_method (str): The model property of type str.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "friendly_name": 'friendly_name',
        "enabled": 'enabled',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "sid": 'sid',
        "audio_sources": 'audio_sources',
        "audio_sources_excluded": 'audio_sources_excluded',
        "video_layout": 'video_layout',
        "resolution": 'resolution',
        "trim": 'trim',
        "format": 'format',
        "status_callback": 'status_callback',
        "status_callback_method": 'status_callback_method',
        "url": 'url'
    }

    def __init__(self,
                 account_sid=None,
                 friendly_name=None,
                 enabled=None,
                 date_created=None,
                 date_updated=None,
                 sid=None,
                 audio_sources=None,
                 audio_sources_excluded=None,
                 video_layout=None,
                 resolution=None,
                 trim=None,
                 format=None,
                 status_callback=None,
                 status_callback_method=None,
                 url=None):
        """Constructor for the OK194 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.friendly_name = friendly_name 
        self.enabled = enabled 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.sid = sid 
        self.audio_sources = audio_sources 
        self.audio_sources_excluded = audio_sources_excluded 
        self.video_layout = video_layout 
        self.resolution = resolution 
        self.trim = trim 
        self.format = format 
        self.status_callback = status_callback 
        self.status_callback_method = status_callback_method 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        audio_sources = dictionary.get("audio_sources") if dictionary.get("audio_sources") else None
        audio_sources_excluded = dictionary.get("audio_sources_excluded") if dictionary.get("audio_sources_excluded") else None
        video_layout = dictionary.get("video_layout") if dictionary.get("video_layout") else None
        resolution = dictionary.get("resolution") if dictionary.get("resolution") else None
        trim = dictionary.get("trim") if "trim" in dictionary.keys() else None
        format = dictionary.get("format") if dictionary.get("format") else None
        status_callback = dictionary.get("status_callback") if dictionary.get("status_callback") else None
        status_callback_method = dictionary.get("status_callback_method") if dictionary.get("status_callback_method") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(account_sid,
                   friendly_name,
                   enabled,
                   date_created,
                   date_updated,
                   sid,
                   audio_sources,
                   audio_sources_excluded,
                   video_layout,
                   resolution,
                   trim,
                   format,
                   status_callback,
                   status_callback_method,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'enabled={self.enabled!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'sid={self.sid!r}, '
                f'audio_sources={self.audio_sources!r}, '
                f'audio_sources_excluded={self.audio_sources_excluded!r}, '
                f'video_layout={self.video_layout!r}, '
                f'resolution={self.resolution!r}, '
                f'trim={self.trim!r}, '
                f'format={self.format!r}, '
                f'status_callback={self.status_callback!r}, '
                f'status_callback_method={self.status_callback_method!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'enabled={self.enabled!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'sid={self.sid!s}, '
                f'audio_sources={self.audio_sources!s}, '
                f'audio_sources_excluded={self.audio_sources_excluded!s}, '
                f'video_layout={self.video_layout!s}, '
                f'resolution={self.resolution!s}, '
                f'trim={self.trim!s}, '
                f'format={self.format!s}, '
                f'status_callback={self.status_callback!s}, '
                f'status_callback_method={self.status_callback_method!s}, '
                f'url={self.url!s})')
