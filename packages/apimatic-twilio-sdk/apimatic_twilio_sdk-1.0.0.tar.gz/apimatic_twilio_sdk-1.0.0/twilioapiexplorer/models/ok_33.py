# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK33(object):

    """Implementation of the 'OK33' model.

    Attributes:
        account_sid (str): The model property of type str.
        city (str): The model property of type str.
        customer_name (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        friendly_name (str): The model property of type str.
        iso_country (str): The model property of type str.
        postal_code (str): The model property of type str.
        region (str): The model property of type str.
        sid (str): The model property of type str.
        street (str): The model property of type str.
        uri (str): The model property of type str.
        emergency_enabled (bool): The model property of type bool.
        validated (bool): The model property of type bool.
        verified (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "city": 'city',
        "customer_name": 'customer_name',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "friendly_name": 'friendly_name',
        "iso_country": 'iso_country',
        "postal_code": 'postal_code',
        "region": 'region',
        "sid": 'sid',
        "street": 'street',
        "uri": 'uri',
        "emergency_enabled": 'emergency_enabled',
        "validated": 'validated',
        "verified": 'verified'
    }

    def __init__(self,
                 account_sid=None,
                 city=None,
                 customer_name=None,
                 date_created=None,
                 date_updated=None,
                 friendly_name=None,
                 iso_country=None,
                 postal_code=None,
                 region=None,
                 sid=None,
                 street=None,
                 uri=None,
                 emergency_enabled=None,
                 validated=None,
                 verified=None):
        """Constructor for the OK33 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.city = city 
        self.customer_name = customer_name 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.friendly_name = friendly_name 
        self.iso_country = iso_country 
        self.postal_code = postal_code 
        self.region = region 
        self.sid = sid 
        self.street = street 
        self.uri = uri 
        self.emergency_enabled = emergency_enabled 
        self.validated = validated 
        self.verified = verified 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        customer_name = dictionary.get("customer_name") if dictionary.get("customer_name") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        iso_country = dictionary.get("iso_country") if dictionary.get("iso_country") else None
        postal_code = dictionary.get("postal_code") if dictionary.get("postal_code") else None
        region = dictionary.get("region") if dictionary.get("region") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        street = dictionary.get("street") if dictionary.get("street") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        emergency_enabled = dictionary.get("emergency_enabled") if "emergency_enabled" in dictionary.keys() else None
        validated = dictionary.get("validated") if "validated" in dictionary.keys() else None
        verified = dictionary.get("verified") if "verified" in dictionary.keys() else None
        # Return an object of this model
        return cls(account_sid,
                   city,
                   customer_name,
                   date_created,
                   date_updated,
                   friendly_name,
                   iso_country,
                   postal_code,
                   region,
                   sid,
                   street,
                   uri,
                   emergency_enabled,
                   validated,
                   verified)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'city={self.city!r}, '
                f'customer_name={self.customer_name!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'iso_country={self.iso_country!r}, '
                f'postal_code={self.postal_code!r}, '
                f'region={self.region!r}, '
                f'sid={self.sid!r}, '
                f'street={self.street!r}, '
                f'uri={self.uri!r}, '
                f'emergency_enabled={self.emergency_enabled!r}, '
                f'validated={self.validated!r}, '
                f'verified={self.verified!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'city={self.city!s}, '
                f'customer_name={self.customer_name!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'iso_country={self.iso_country!s}, '
                f'postal_code={self.postal_code!s}, '
                f'region={self.region!s}, '
                f'sid={self.sid!s}, '
                f'street={self.street!s}, '
                f'uri={self.uri!s}, '
                f'emergency_enabled={self.emergency_enabled!s}, '
                f'validated={self.validated!s}, '
                f'verified={self.verified!s})')
