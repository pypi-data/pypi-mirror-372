# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK229(object):

    """Implementation of the 'OK229' model.

    Attributes:
        sid (str): The model property of type str.
        test_users (List[str]): The model property of type List[str].
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "test_users": 'test_users',
        "url": 'url'
    }

    def __init__(self,
                 sid=None,
                 test_users=None,
                 url=None):
        """Constructor for the OK229 class"""

        # Initialize members of the class
        self.sid = sid 
        self.test_users = test_users 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        test_users = dictionary.get("test_users") if dictionary.get("test_users") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(sid,
                   test_users,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'test_users={self.test_users!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'test_users={self.test_users!s}, '
                f'url={self.url!s})')
