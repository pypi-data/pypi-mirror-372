# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from twilioapiexplorer.models.capabilities import Capabilities


class AvailablePhoneNumber(object):

    """Implementation of the 'AvailablePhoneNumber' model.

    Attributes:
        friendly_name (str): The model property of type str.
        phone_number (str): The model property of type str.
        lata (str): The model property of type str.
        locality (str): The model property of type str.
        rate_center (str): The model property of type str.
        latitude (float): The model property of type float.
        longitude (float): The model property of type float.
        region (str): The model property of type str.
        postal_code (str): The model property of type str.
        iso_country (str): The model property of type str.
        address_requirements (str): The model property of type str.
        beta (bool): The model property of type bool.
        capabilities (Capabilities): The model property of type Capabilities.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "friendly_name": 'friendly_name',
        "phone_number": 'phone_number',
        "lata": 'lata',
        "locality": 'locality',
        "rate_center": 'rate_center',
        "latitude": 'latitude',
        "longitude": 'longitude',
        "region": 'region',
        "postal_code": 'postal_code',
        "iso_country": 'iso_country',
        "address_requirements": 'address_requirements',
        "beta": 'beta',
        "capabilities": 'capabilities'
    }

    def __init__(self,
                 friendly_name=None,
                 phone_number=None,
                 lata=None,
                 locality=None,
                 rate_center=None,
                 latitude=None,
                 longitude=None,
                 region=None,
                 postal_code=None,
                 iso_country=None,
                 address_requirements=None,
                 beta=None,
                 capabilities=None):
        """Constructor for the AvailablePhoneNumber class"""

        # Initialize members of the class
        self.friendly_name = friendly_name 
        self.phone_number = phone_number 
        self.lata = lata 
        self.locality = locality 
        self.rate_center = rate_center 
        self.latitude = latitude 
        self.longitude = longitude 
        self.region = region 
        self.postal_code = postal_code 
        self.iso_country = iso_country 
        self.address_requirements = address_requirements 
        self.beta = beta 
        self.capabilities = capabilities 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        phone_number = dictionary.get("phone_number") if dictionary.get("phone_number") else None
        lata = dictionary.get("lata") if dictionary.get("lata") else None
        locality = dictionary.get("locality") if dictionary.get("locality") else None
        rate_center = dictionary.get("rate_center") if dictionary.get("rate_center") else None
        latitude = dictionary.get("latitude") if dictionary.get("latitude") else None
        longitude = dictionary.get("longitude") if dictionary.get("longitude") else None
        region = dictionary.get("region") if dictionary.get("region") else None
        postal_code = dictionary.get("postal_code") if dictionary.get("postal_code") else None
        iso_country = dictionary.get("iso_country") if dictionary.get("iso_country") else None
        address_requirements = dictionary.get("address_requirements") if dictionary.get("address_requirements") else None
        beta = dictionary.get("beta") if "beta" in dictionary.keys() else None
        capabilities = Capabilities.from_dictionary(dictionary.get('capabilities')) if dictionary.get('capabilities') else None
        # Return an object of this model
        return cls(friendly_name,
                   phone_number,
                   lata,
                   locality,
                   rate_center,
                   latitude,
                   longitude,
                   region,
                   postal_code,
                   iso_country,
                   address_requirements,
                   beta,
                   capabilities)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'friendly_name={self.friendly_name!r}, '
                f'phone_number={self.phone_number!r}, '
                f'lata={self.lata!r}, '
                f'locality={self.locality!r}, '
                f'rate_center={self.rate_center!r}, '
                f'latitude={self.latitude!r}, '
                f'longitude={self.longitude!r}, '
                f'region={self.region!r}, '
                f'postal_code={self.postal_code!r}, '
                f'iso_country={self.iso_country!r}, '
                f'address_requirements={self.address_requirements!r}, '
                f'beta={self.beta!r}, '
                f'capabilities={self.capabilities!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'friendly_name={self.friendly_name!s}, '
                f'phone_number={self.phone_number!s}, '
                f'lata={self.lata!s}, '
                f'locality={self.locality!s}, '
                f'rate_center={self.rate_center!s}, '
                f'latitude={self.latitude!s}, '
                f'longitude={self.longitude!s}, '
                f'region={self.region!s}, '
                f'postal_code={self.postal_code!s}, '
                f'iso_country={self.iso_country!s}, '
                f'address_requirements={self.address_requirements!s}, '
                f'beta={self.beta!s}, '
                f'capabilities={self.capabilities!s})')
