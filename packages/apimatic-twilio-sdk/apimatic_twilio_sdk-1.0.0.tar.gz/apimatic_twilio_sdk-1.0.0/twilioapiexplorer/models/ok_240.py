# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK240(object):

    """Implementation of the 'OK240' model.

    Attributes:
        sid (str): The model property of type str.
        unique_name (str): The model property of type str.
        account_sid (str): The model property of type str.
        chat_instance_sid (str): The model property of type str.
        callback_url (str): The model property of type str.
        default_ttl (int): The model property of type int.
        number_selection_behavior (str): The model property of type str.
        geo_match_level (str): The model property of type str.
        intercept_callback_url (str): The model property of type str.
        out_of_session_callback_url (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "unique_name": 'unique_name',
        "account_sid": 'account_sid',
        "chat_instance_sid": 'chat_instance_sid',
        "callback_url": 'callback_url',
        "default_ttl": 'default_ttl',
        "number_selection_behavior": 'number_selection_behavior',
        "geo_match_level": 'geo_match_level',
        "intercept_callback_url": 'intercept_callback_url',
        "out_of_session_callback_url": 'out_of_session_callback_url',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 sid=None,
                 unique_name=None,
                 account_sid=None,
                 chat_instance_sid=None,
                 callback_url=None,
                 default_ttl=None,
                 number_selection_behavior=None,
                 geo_match_level=None,
                 intercept_callback_url=None,
                 out_of_session_callback_url=None,
                 date_created=None,
                 date_updated=None,
                 url=None,
                 links=None):
        """Constructor for the OK240 class"""

        # Initialize members of the class
        self.sid = sid 
        self.unique_name = unique_name 
        self.account_sid = account_sid 
        self.chat_instance_sid = chat_instance_sid 
        self.callback_url = callback_url 
        self.default_ttl = default_ttl 
        self.number_selection_behavior = number_selection_behavior 
        self.geo_match_level = geo_match_level 
        self.intercept_callback_url = intercept_callback_url 
        self.out_of_session_callback_url = out_of_session_callback_url 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        unique_name = dictionary.get("unique_name") if dictionary.get("unique_name") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        chat_instance_sid = dictionary.get("chat_instance_sid") if dictionary.get("chat_instance_sid") else None
        callback_url = dictionary.get("callback_url") if dictionary.get("callback_url") else None
        default_ttl = dictionary.get("default_ttl") if dictionary.get("default_ttl") else None
        number_selection_behavior = dictionary.get("number_selection_behavior") if dictionary.get("number_selection_behavior") else None
        geo_match_level = dictionary.get("geo_match_level") if dictionary.get("geo_match_level") else None
        intercept_callback_url = dictionary.get("intercept_callback_url") if dictionary.get("intercept_callback_url") else None
        out_of_session_callback_url = dictionary.get("out_of_session_callback_url") if dictionary.get("out_of_session_callback_url") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(sid,
                   unique_name,
                   account_sid,
                   chat_instance_sid,
                   callback_url,
                   default_ttl,
                   number_selection_behavior,
                   geo_match_level,
                   intercept_callback_url,
                   out_of_session_callback_url,
                   date_created,
                   date_updated,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'unique_name={self.unique_name!r}, '
                f'account_sid={self.account_sid!r}, '
                f'chat_instance_sid={self.chat_instance_sid!r}, '
                f'callback_url={self.callback_url!r}, '
                f'default_ttl={self.default_ttl!r}, '
                f'number_selection_behavior={self.number_selection_behavior!r}, '
                f'geo_match_level={self.geo_match_level!r}, '
                f'intercept_callback_url={self.intercept_callback_url!r}, '
                f'out_of_session_callback_url={self.out_of_session_callback_url!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'unique_name={self.unique_name!s}, '
                f'account_sid={self.account_sid!s}, '
                f'chat_instance_sid={self.chat_instance_sid!s}, '
                f'callback_url={self.callback_url!s}, '
                f'default_ttl={self.default_ttl!s}, '
                f'number_selection_behavior={self.number_selection_behavior!s}, '
                f'geo_match_level={self.geo_match_level!s}, '
                f'intercept_callback_url={self.intercept_callback_url!s}, '
                f'out_of_session_callback_url={self.out_of_session_callback_url!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
