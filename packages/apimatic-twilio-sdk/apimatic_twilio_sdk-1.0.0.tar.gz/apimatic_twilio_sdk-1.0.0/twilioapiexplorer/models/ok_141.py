# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK141(object):

    """Implementation of the 'OK141' model.

    Attributes:
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        channel_sid (str): The model property of type str.
        user_sid (str): The model property of type str.
        member_sid (str): The model property of type str.
        status (str): The model property of type str.
        last_consumed_message_index (int): The model property of type int.
        unread_messages_count (int): The model property of type int.
        links (Any): The model property of type Any.
        url (str): The model property of type str.
        notification_level (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "channel_sid": 'channel_sid',
        "user_sid": 'user_sid',
        "member_sid": 'member_sid',
        "status": 'status',
        "last_consumed_message_index": 'last_consumed_message_index',
        "unread_messages_count": 'unread_messages_count',
        "links": 'links',
        "url": 'url',
        "notification_level": 'notification_level'
    }

    def __init__(self,
                 account_sid=None,
                 service_sid=None,
                 channel_sid=None,
                 user_sid=None,
                 member_sid=None,
                 status=None,
                 last_consumed_message_index=None,
                 unread_messages_count=None,
                 links=None,
                 url=None,
                 notification_level=None):
        """Constructor for the OK141 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.channel_sid = channel_sid 
        self.user_sid = user_sid 
        self.member_sid = member_sid 
        self.status = status 
        self.last_consumed_message_index = last_consumed_message_index 
        self.unread_messages_count = unread_messages_count 
        self.links = links 
        self.url = url 
        self.notification_level = notification_level 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        channel_sid = dictionary.get("channel_sid") if dictionary.get("channel_sid") else None
        user_sid = dictionary.get("user_sid") if dictionary.get("user_sid") else None
        member_sid = dictionary.get("member_sid") if dictionary.get("member_sid") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        last_consumed_message_index = dictionary.get("last_consumed_message_index") if dictionary.get("last_consumed_message_index") else None
        unread_messages_count = dictionary.get("unread_messages_count") if dictionary.get("unread_messages_count") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        notification_level = dictionary.get("notification_level") if dictionary.get("notification_level") else None
        # Return an object of this model
        return cls(account_sid,
                   service_sid,
                   channel_sid,
                   user_sid,
                   member_sid,
                   status,
                   last_consumed_message_index,
                   unread_messages_count,
                   links,
                   url,
                   notification_level)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'channel_sid={self.channel_sid!r}, '
                f'user_sid={self.user_sid!r}, '
                f'member_sid={self.member_sid!r}, '
                f'status={self.status!r}, '
                f'last_consumed_message_index={self.last_consumed_message_index!r}, '
                f'unread_messages_count={self.unread_messages_count!r}, '
                f'links={self.links!r}, '
                f'url={self.url!r}, '
                f'notification_level={self.notification_level!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'channel_sid={self.channel_sid!s}, '
                f'user_sid={self.user_sid!s}, '
                f'member_sid={self.member_sid!s}, '
                f'status={self.status!s}, '
                f'last_consumed_message_index={self.last_consumed_message_index!s}, '
                f'unread_messages_count={self.unread_messages_count!s}, '
                f'links={self.links!s}, '
                f'url={self.url!s}, '
                f'notification_level={self.notification_level!s})')
