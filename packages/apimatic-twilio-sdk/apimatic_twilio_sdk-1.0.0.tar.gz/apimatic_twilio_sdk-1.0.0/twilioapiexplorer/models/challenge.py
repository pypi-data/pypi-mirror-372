# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Challenge(object):

    """Implementation of the 'Challenge' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        entity_sid (str): The model property of type str.
        identity (str): The model property of type str.
        factor_sid (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        date_responded (str): The model property of type str.
        expiration_date (str): The model property of type str.
        status (str): The model property of type str.
        responded_reason (str): The model property of type str.
        details (Any): The model property of type Any.
        hidden_details (Any): The model property of type Any.
        metadata (Any): The model property of type Any.
        factor_type (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "service_sid": 'service_sid',
        "entity_sid": 'entity_sid',
        "identity": 'identity',
        "factor_sid": 'factor_sid',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "date_responded": 'date_responded',
        "expiration_date": 'expiration_date',
        "status": 'status',
        "responded_reason": 'responded_reason',
        "details": 'details',
        "hidden_details": 'hidden_details',
        "metadata": 'metadata',
        "factor_type": 'factor_type',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 service_sid=None,
                 entity_sid=None,
                 identity=None,
                 factor_sid=None,
                 date_created=None,
                 date_updated=None,
                 date_responded=None,
                 expiration_date=None,
                 status=None,
                 responded_reason=None,
                 details=None,
                 hidden_details=None,
                 metadata=None,
                 factor_type=None,
                 url=None,
                 links=None):
        """Constructor for the Challenge class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.service_sid = service_sid 
        self.entity_sid = entity_sid 
        self.identity = identity 
        self.factor_sid = factor_sid 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.date_responded = date_responded 
        self.expiration_date = expiration_date 
        self.status = status 
        self.responded_reason = responded_reason 
        self.details = details 
        self.hidden_details = hidden_details 
        self.metadata = metadata 
        self.factor_type = factor_type 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        entity_sid = dictionary.get("entity_sid") if dictionary.get("entity_sid") else None
        identity = dictionary.get("identity") if dictionary.get("identity") else None
        factor_sid = dictionary.get("factor_sid") if dictionary.get("factor_sid") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        date_responded = dictionary.get("date_responded") if dictionary.get("date_responded") else None
        expiration_date = dictionary.get("expiration_date") if dictionary.get("expiration_date") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        responded_reason = dictionary.get("responded_reason") if dictionary.get("responded_reason") else None
        details = dictionary.get("details") if dictionary.get("details") else None
        hidden_details = dictionary.get("hidden_details") if dictionary.get("hidden_details") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        factor_type = dictionary.get("factor_type") if dictionary.get("factor_type") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   service_sid,
                   entity_sid,
                   identity,
                   factor_sid,
                   date_created,
                   date_updated,
                   date_responded,
                   expiration_date,
                   status,
                   responded_reason,
                   details,
                   hidden_details,
                   metadata,
                   factor_type,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'entity_sid={self.entity_sid!r}, '
                f'identity={self.identity!r}, '
                f'factor_sid={self.factor_sid!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'date_responded={self.date_responded!r}, '
                f'expiration_date={self.expiration_date!r}, '
                f'status={self.status!r}, '
                f'responded_reason={self.responded_reason!r}, '
                f'details={self.details!r}, '
                f'hidden_details={self.hidden_details!r}, '
                f'metadata={self.metadata!r}, '
                f'factor_type={self.factor_type!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'entity_sid={self.entity_sid!s}, '
                f'identity={self.identity!s}, '
                f'factor_sid={self.factor_sid!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'date_responded={self.date_responded!s}, '
                f'expiration_date={self.expiration_date!s}, '
                f'status={self.status!s}, '
                f'responded_reason={self.responded_reason!s}, '
                f'details={self.details!s}, '
                f'hidden_details={self.hidden_details!s}, '
                f'metadata={self.metadata!s}, '
                f'factor_type={self.factor_type!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
