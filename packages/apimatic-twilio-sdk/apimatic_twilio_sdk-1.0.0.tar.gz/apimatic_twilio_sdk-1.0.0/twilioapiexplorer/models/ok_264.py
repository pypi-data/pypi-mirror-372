# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK264(object):

    """Implementation of the 'OK264' model.

    Attributes:
        account_sid (str): The model property of type str.
        assistant_sid (str): The model property of type str.
        task_sid (str): The model property of type str.
        samples_count (int): The model property of type int.
        fields_count (int): The model property of type int.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "assistant_sid": 'assistant_sid',
        "task_sid": 'task_sid',
        "samples_count": 'samples_count',
        "fields_count": 'fields_count',
        "url": 'url'
    }

    def __init__(self,
                 account_sid=None,
                 assistant_sid=None,
                 task_sid=None,
                 samples_count=None,
                 fields_count=None,
                 url=None):
        """Constructor for the OK264 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.assistant_sid = assistant_sid 
        self.task_sid = task_sid 
        self.samples_count = samples_count 
        self.fields_count = fields_count 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        assistant_sid = dictionary.get("assistant_sid") if dictionary.get("assistant_sid") else None
        task_sid = dictionary.get("task_sid") if dictionary.get("task_sid") else None
        samples_count = dictionary.get("samples_count") if dictionary.get("samples_count") else None
        fields_count = dictionary.get("fields_count") if dictionary.get("fields_count") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(account_sid,
                   assistant_sid,
                   task_sid,
                   samples_count,
                   fields_count,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'assistant_sid={self.assistant_sid!r}, '
                f'task_sid={self.task_sid!r}, '
                f'samples_count={self.samples_count!r}, '
                f'fields_count={self.fields_count!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'assistant_sid={self.assistant_sid!s}, '
                f'task_sid={self.task_sid!s}, '
                f'samples_count={self.samples_count!s}, '
                f'fields_count={self.fields_count!s}, '
                f'url={self.url!s})')
