# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from twilioapiexplorer.models.member import Member
from twilioapiexplorer.models.meta import Meta


class OK125(object):

    """Implementation of the 'OK125' model.

    Attributes:
        members (List[Member]): The model property of type List[Member].
        meta (Meta): The model property of type Meta.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "members": 'members',
        "meta": 'meta'
    }

    def __init__(self,
                 members=None,
                 meta=None):
        """Constructor for the OK125 class"""

        # Initialize members of the class
        self.members = members 
        self.meta = meta 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        members = None
        if dictionary.get('members') is not None:
            members = [Member.from_dictionary(x) for x in dictionary.get('members')]
        meta = Meta.from_dictionary(dictionary.get('meta')) if dictionary.get('meta') else None
        # Return an object of this model
        return cls(members,
                   meta)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'members={self.members!r}, '
                f'meta={self.meta!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'members={self.members!s}, '
                f'meta={self.meta!s})')
