# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Created51(object):

    """Implementation of the 'Created51' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        sim_sid (str): The model property of type str.
        command (str): The model property of type str.
        command_mode (str): The model property of type str.
        transport (str): The model property of type str.
        delivery_receipt_requested (bool): The model property of type bool.
        status (str): The model property of type str.
        direction (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "sim_sid": 'sim_sid',
        "command": 'command',
        "command_mode": 'command_mode',
        "transport": 'transport',
        "delivery_receipt_requested": 'delivery_receipt_requested',
        "status": 'status',
        "direction": 'direction',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "url": 'url'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 sim_sid=None,
                 command=None,
                 command_mode=None,
                 transport=None,
                 delivery_receipt_requested=None,
                 status=None,
                 direction=None,
                 date_created=None,
                 date_updated=None,
                 url=None):
        """Constructor for the Created51 class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.sim_sid = sim_sid 
        self.command = command 
        self.command_mode = command_mode 
        self.transport = transport 
        self.delivery_receipt_requested = delivery_receipt_requested 
        self.status = status 
        self.direction = direction 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        sim_sid = dictionary.get("sim_sid") if dictionary.get("sim_sid") else None
        command = dictionary.get("command") if dictionary.get("command") else None
        command_mode = dictionary.get("command_mode") if dictionary.get("command_mode") else None
        transport = dictionary.get("transport") if dictionary.get("transport") else None
        delivery_receipt_requested = dictionary.get("delivery_receipt_requested") if "delivery_receipt_requested" in dictionary.keys() else None
        status = dictionary.get("status") if dictionary.get("status") else None
        direction = dictionary.get("direction") if dictionary.get("direction") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   sim_sid,
                   command,
                   command_mode,
                   transport,
                   delivery_receipt_requested,
                   status,
                   direction,
                   date_created,
                   date_updated,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'sim_sid={self.sim_sid!r}, '
                f'command={self.command!r}, '
                f'command_mode={self.command_mode!r}, '
                f'transport={self.transport!r}, '
                f'delivery_receipt_requested={self.delivery_receipt_requested!r}, '
                f'status={self.status!r}, '
                f'direction={self.direction!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'sim_sid={self.sim_sid!s}, '
                f'command={self.command!s}, '
                f'command_mode={self.command_mode!s}, '
                f'transport={self.transport!s}, '
                f'delivery_receipt_requested={self.delivery_receipt_requested!s}, '
                f'status={self.status!s}, '
                f'direction={self.direction!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'url={self.url!s})')
