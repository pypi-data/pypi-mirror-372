# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK25(object):

    """Implementation of the 'OK25' model.

    Attributes:
        account_sid (str): The model property of type str.
        call_sid (str): The model property of type str.
        label (str): The model property of type str.
        call_sid_to_coach (str): The model property of type str.
        coaching (bool): The model property of type bool.
        conference_sid (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        end_conference_on_exit (bool): The model property of type bool.
        muted (bool): The model property of type bool.
        hold (bool): The model property of type bool.
        start_conference_on_enter (bool): The model property of type bool.
        status (str): The model property of type str.
        uri (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "call_sid": 'call_sid',
        "label": 'label',
        "call_sid_to_coach": 'call_sid_to_coach',
        "coaching": 'coaching',
        "conference_sid": 'conference_sid',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "end_conference_on_exit": 'end_conference_on_exit',
        "muted": 'muted',
        "hold": 'hold',
        "start_conference_on_enter": 'start_conference_on_enter',
        "status": 'status',
        "uri": 'uri'
    }

    def __init__(self,
                 account_sid=None,
                 call_sid=None,
                 label=None,
                 call_sid_to_coach=None,
                 coaching=None,
                 conference_sid=None,
                 date_created=None,
                 date_updated=None,
                 end_conference_on_exit=None,
                 muted=None,
                 hold=None,
                 start_conference_on_enter=None,
                 status=None,
                 uri=None):
        """Constructor for the OK25 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.call_sid = call_sid 
        self.label = label 
        self.call_sid_to_coach = call_sid_to_coach 
        self.coaching = coaching 
        self.conference_sid = conference_sid 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.end_conference_on_exit = end_conference_on_exit 
        self.muted = muted 
        self.hold = hold 
        self.start_conference_on_enter = start_conference_on_enter 
        self.status = status 
        self.uri = uri 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        call_sid = dictionary.get("call_sid") if dictionary.get("call_sid") else None
        label = dictionary.get("label") if dictionary.get("label") else None
        call_sid_to_coach = dictionary.get("call_sid_to_coach") if dictionary.get("call_sid_to_coach") else None
        coaching = dictionary.get("coaching") if "coaching" in dictionary.keys() else None
        conference_sid = dictionary.get("conference_sid") if dictionary.get("conference_sid") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        end_conference_on_exit = dictionary.get("end_conference_on_exit") if "end_conference_on_exit" in dictionary.keys() else None
        muted = dictionary.get("muted") if "muted" in dictionary.keys() else None
        hold = dictionary.get("hold") if "hold" in dictionary.keys() else None
        start_conference_on_enter = dictionary.get("start_conference_on_enter") if "start_conference_on_enter" in dictionary.keys() else None
        status = dictionary.get("status") if dictionary.get("status") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        # Return an object of this model
        return cls(account_sid,
                   call_sid,
                   label,
                   call_sid_to_coach,
                   coaching,
                   conference_sid,
                   date_created,
                   date_updated,
                   end_conference_on_exit,
                   muted,
                   hold,
                   start_conference_on_enter,
                   status,
                   uri)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'call_sid={self.call_sid!r}, '
                f'label={self.label!r}, '
                f'call_sid_to_coach={self.call_sid_to_coach!r}, '
                f'coaching={self.coaching!r}, '
                f'conference_sid={self.conference_sid!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'end_conference_on_exit={self.end_conference_on_exit!r}, '
                f'muted={self.muted!r}, '
                f'hold={self.hold!r}, '
                f'start_conference_on_enter={self.start_conference_on_enter!r}, '
                f'status={self.status!r}, '
                f'uri={self.uri!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'call_sid={self.call_sid!s}, '
                f'label={self.label!s}, '
                f'call_sid_to_coach={self.call_sid_to_coach!s}, '
                f'coaching={self.coaching!s}, '
                f'conference_sid={self.conference_sid!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'end_conference_on_exit={self.end_conference_on_exit!s}, '
                f'muted={self.muted!s}, '
                f'hold={self.hold!s}, '
                f'start_conference_on_enter={self.start_conference_on_enter!s}, '
                f'status={self.status!s}, '
                f'uri={self.uri!s})')
