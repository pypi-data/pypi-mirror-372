# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Created20(object):

    """Implementation of the 'Created20' model.

    Attributes:
        account_sid (str): The model property of type str.
        age (int): The model property of type int.
        assignment_status (str): The model property of type str.
        attributes (str): The model property of type str.
        addons (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        task_queue_entered_date (str): The model property of type str.
        priority (int): The model property of type int.
        reason (str): The model property of type str.
        sid (str): The model property of type str.
        task_queue_sid (str): The model property of type str.
        task_queue_friendly_name (str): The model property of type str.
        task_channel_sid (str): The model property of type str.
        task_channel_unique_name (str): The model property of type str.
        timeout (int): The model property of type int.
        workflow_sid (str): The model property of type str.
        workflow_friendly_name (str): The model property of type str.
        workspace_sid (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "age": 'age',
        "assignment_status": 'assignment_status',
        "attributes": 'attributes',
        "addons": 'addons',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "task_queue_entered_date": 'task_queue_entered_date',
        "priority": 'priority',
        "reason": 'reason',
        "sid": 'sid',
        "task_queue_sid": 'task_queue_sid',
        "task_queue_friendly_name": 'task_queue_friendly_name',
        "task_channel_sid": 'task_channel_sid',
        "task_channel_unique_name": 'task_channel_unique_name',
        "timeout": 'timeout',
        "workflow_sid": 'workflow_sid',
        "workflow_friendly_name": 'workflow_friendly_name',
        "workspace_sid": 'workspace_sid',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 account_sid=None,
                 age=None,
                 assignment_status=None,
                 attributes=None,
                 addons=None,
                 date_created=None,
                 date_updated=None,
                 task_queue_entered_date=None,
                 priority=None,
                 reason=None,
                 sid=None,
                 task_queue_sid=None,
                 task_queue_friendly_name=None,
                 task_channel_sid=None,
                 task_channel_unique_name=None,
                 timeout=None,
                 workflow_sid=None,
                 workflow_friendly_name=None,
                 workspace_sid=None,
                 url=None,
                 links=None):
        """Constructor for the Created20 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.age = age 
        self.assignment_status = assignment_status 
        self.attributes = attributes 
        self.addons = addons 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.task_queue_entered_date = task_queue_entered_date 
        self.priority = priority 
        self.reason = reason 
        self.sid = sid 
        self.task_queue_sid = task_queue_sid 
        self.task_queue_friendly_name = task_queue_friendly_name 
        self.task_channel_sid = task_channel_sid 
        self.task_channel_unique_name = task_channel_unique_name 
        self.timeout = timeout 
        self.workflow_sid = workflow_sid 
        self.workflow_friendly_name = workflow_friendly_name 
        self.workspace_sid = workspace_sid 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        age = dictionary.get("age") if dictionary.get("age") else None
        assignment_status = dictionary.get("assignment_status") if dictionary.get("assignment_status") else None
        attributes = dictionary.get("attributes") if dictionary.get("attributes") else None
        addons = dictionary.get("addons") if dictionary.get("addons") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        task_queue_entered_date = dictionary.get("task_queue_entered_date") if dictionary.get("task_queue_entered_date") else None
        priority = dictionary.get("priority") if dictionary.get("priority") else None
        reason = dictionary.get("reason") if dictionary.get("reason") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        task_queue_sid = dictionary.get("task_queue_sid") if dictionary.get("task_queue_sid") else None
        task_queue_friendly_name = dictionary.get("task_queue_friendly_name") if dictionary.get("task_queue_friendly_name") else None
        task_channel_sid = dictionary.get("task_channel_sid") if dictionary.get("task_channel_sid") else None
        task_channel_unique_name = dictionary.get("task_channel_unique_name") if dictionary.get("task_channel_unique_name") else None
        timeout = dictionary.get("timeout") if dictionary.get("timeout") else None
        workflow_sid = dictionary.get("workflow_sid") if dictionary.get("workflow_sid") else None
        workflow_friendly_name = dictionary.get("workflow_friendly_name") if dictionary.get("workflow_friendly_name") else None
        workspace_sid = dictionary.get("workspace_sid") if dictionary.get("workspace_sid") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(account_sid,
                   age,
                   assignment_status,
                   attributes,
                   addons,
                   date_created,
                   date_updated,
                   task_queue_entered_date,
                   priority,
                   reason,
                   sid,
                   task_queue_sid,
                   task_queue_friendly_name,
                   task_channel_sid,
                   task_channel_unique_name,
                   timeout,
                   workflow_sid,
                   workflow_friendly_name,
                   workspace_sid,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'age={self.age!r}, '
                f'assignment_status={self.assignment_status!r}, '
                f'attributes={self.attributes!r}, '
                f'addons={self.addons!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'task_queue_entered_date={self.task_queue_entered_date!r}, '
                f'priority={self.priority!r}, '
                f'reason={self.reason!r}, '
                f'sid={self.sid!r}, '
                f'task_queue_sid={self.task_queue_sid!r}, '
                f'task_queue_friendly_name={self.task_queue_friendly_name!r}, '
                f'task_channel_sid={self.task_channel_sid!r}, '
                f'task_channel_unique_name={self.task_channel_unique_name!r}, '
                f'timeout={self.timeout!r}, '
                f'workflow_sid={self.workflow_sid!r}, '
                f'workflow_friendly_name={self.workflow_friendly_name!r}, '
                f'workspace_sid={self.workspace_sid!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'age={self.age!s}, '
                f'assignment_status={self.assignment_status!s}, '
                f'attributes={self.attributes!s}, '
                f'addons={self.addons!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'task_queue_entered_date={self.task_queue_entered_date!s}, '
                f'priority={self.priority!s}, '
                f'reason={self.reason!s}, '
                f'sid={self.sid!s}, '
                f'task_queue_sid={self.task_queue_sid!s}, '
                f'task_queue_friendly_name={self.task_queue_friendly_name!s}, '
                f'task_channel_sid={self.task_channel_sid!s}, '
                f'task_channel_unique_name={self.task_channel_unique_name!s}, '
                f'timeout={self.timeout!s}, '
                f'workflow_sid={self.workflow_sid!s}, '
                f'workflow_friendly_name={self.workflow_friendly_name!s}, '
                f'workspace_sid={self.workspace_sid!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
