# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class OK21(object):

    """Implementation of the 'OK21' model.

    Attributes:
        account_sid (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        api_version (str): The model property of type str.
        friendly_name (str): The model property of type str.
        region (str): The model property of type str.
        sid (str): The model property of type str.
        status (str): The model property of type str.
        uri (str): The model property of type str.
        subresource_uris (Any): The model property of type Any.
        reason_conference_ended (str): The model property of type str.
        call_sid_ending_conference (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "api_version": 'api_version',
        "friendly_name": 'friendly_name',
        "region": 'region',
        "sid": 'sid',
        "status": 'status',
        "uri": 'uri',
        "subresource_uris": 'subresource_uris',
        "reason_conference_ended": 'reason_conference_ended',
        "call_sid_ending_conference": 'call_sid_ending_conference'
    }

    def __init__(self,
                 account_sid=None,
                 date_created=None,
                 date_updated=None,
                 api_version=None,
                 friendly_name=None,
                 region=None,
                 sid=None,
                 status=None,
                 uri=None,
                 subresource_uris=None,
                 reason_conference_ended=None,
                 call_sid_ending_conference=None):
        """Constructor for the OK21 class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.api_version = api_version 
        self.friendly_name = friendly_name 
        self.region = region 
        self.sid = sid 
        self.status = status 
        self.uri = uri 
        self.subresource_uris = subresource_uris 
        self.reason_conference_ended = reason_conference_ended 
        self.call_sid_ending_conference = call_sid_ending_conference 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        api_version = dictionary.get("api_version") if dictionary.get("api_version") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        region = dictionary.get("region") if dictionary.get("region") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        uri = dictionary.get("uri") if dictionary.get("uri") else None
        subresource_uris = dictionary.get("subresource_uris") if dictionary.get("subresource_uris") else None
        reason_conference_ended = dictionary.get("reason_conference_ended") if dictionary.get("reason_conference_ended") else None
        call_sid_ending_conference = dictionary.get("call_sid_ending_conference") if dictionary.get("call_sid_ending_conference") else None
        # Return an object of this model
        return cls(account_sid,
                   date_created,
                   date_updated,
                   api_version,
                   friendly_name,
                   region,
                   sid,
                   status,
                   uri,
                   subresource_uris,
                   reason_conference_ended,
                   call_sid_ending_conference)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'api_version={self.api_version!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'region={self.region!r}, '
                f'sid={self.sid!r}, '
                f'status={self.status!r}, '
                f'uri={self.uri!r}, '
                f'subresource_uris={self.subresource_uris!r}, '
                f'reason_conference_ended={self.reason_conference_ended!r}, '
                f'call_sid_ending_conference={self.call_sid_ending_conference!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'api_version={self.api_version!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'region={self.region!s}, '
                f'sid={self.sid!s}, '
                f'status={self.status!s}, '
                f'uri={self.uri!s}, '
                f'subresource_uris={self.subresource_uris!s}, '
                f'reason_conference_ended={self.reason_conference_ended!s}, '
                f'call_sid_ending_conference={self.call_sid_ending_conference!s})')
