# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Trunk(object):

    """Implementation of the 'Trunk' model.

    Attributes:
        account_sid (str): The model property of type str.
        domain_name (str): The model property of type str.
        disaster_recovery_method (str): The model property of type str.
        disaster_recovery_url (str): The model property of type str.
        friendly_name (str): The model property of type str.
        secure (bool): The model property of type bool.
        recording (Any): The model property of type Any.
        transfer_mode (str): The model property of type str.
        transfer_caller_id (str): The model property of type str.
        cnam_lookup_enabled (bool): The model property of type bool.
        auth_type (str): The model property of type str.
        auth_type_set (List[str]): The model property of type List[str].
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        sid (str): The model property of type str.
        url (str): The model property of type str.
        links (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_sid": 'account_sid',
        "domain_name": 'domain_name',
        "disaster_recovery_method": 'disaster_recovery_method',
        "disaster_recovery_url": 'disaster_recovery_url',
        "friendly_name": 'friendly_name',
        "secure": 'secure',
        "recording": 'recording',
        "transfer_mode": 'transfer_mode',
        "transfer_caller_id": 'transfer_caller_id',
        "cnam_lookup_enabled": 'cnam_lookup_enabled',
        "auth_type": 'auth_type',
        "auth_type_set": 'auth_type_set',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "sid": 'sid',
        "url": 'url',
        "links": 'links'
    }

    def __init__(self,
                 account_sid=None,
                 domain_name=None,
                 disaster_recovery_method=None,
                 disaster_recovery_url=None,
                 friendly_name=None,
                 secure=None,
                 recording=None,
                 transfer_mode=None,
                 transfer_caller_id=None,
                 cnam_lookup_enabled=None,
                 auth_type=None,
                 auth_type_set=None,
                 date_created=None,
                 date_updated=None,
                 sid=None,
                 url=None,
                 links=None):
        """Constructor for the Trunk class"""

        # Initialize members of the class
        self.account_sid = account_sid 
        self.domain_name = domain_name 
        self.disaster_recovery_method = disaster_recovery_method 
        self.disaster_recovery_url = disaster_recovery_url 
        self.friendly_name = friendly_name 
        self.secure = secure 
        self.recording = recording 
        self.transfer_mode = transfer_mode 
        self.transfer_caller_id = transfer_caller_id 
        self.cnam_lookup_enabled = cnam_lookup_enabled 
        self.auth_type = auth_type 
        self.auth_type_set = auth_type_set 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.sid = sid 
        self.url = url 
        self.links = links 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        domain_name = dictionary.get("domain_name") if dictionary.get("domain_name") else None
        disaster_recovery_method = dictionary.get("disaster_recovery_method") if dictionary.get("disaster_recovery_method") else None
        disaster_recovery_url = dictionary.get("disaster_recovery_url") if dictionary.get("disaster_recovery_url") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        secure = dictionary.get("secure") if "secure" in dictionary.keys() else None
        recording = dictionary.get("recording") if dictionary.get("recording") else None
        transfer_mode = dictionary.get("transfer_mode") if dictionary.get("transfer_mode") else None
        transfer_caller_id = dictionary.get("transfer_caller_id") if dictionary.get("transfer_caller_id") else None
        cnam_lookup_enabled = dictionary.get("cnam_lookup_enabled") if "cnam_lookup_enabled" in dictionary.keys() else None
        auth_type = dictionary.get("auth_type") if dictionary.get("auth_type") else None
        auth_type_set = dictionary.get("auth_type_set") if dictionary.get("auth_type_set") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        links = dictionary.get("links") if dictionary.get("links") else None
        # Return an object of this model
        return cls(account_sid,
                   domain_name,
                   disaster_recovery_method,
                   disaster_recovery_url,
                   friendly_name,
                   secure,
                   recording,
                   transfer_mode,
                   transfer_caller_id,
                   cnam_lookup_enabled,
                   auth_type,
                   auth_type_set,
                   date_created,
                   date_updated,
                   sid,
                   url,
                   links)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!r}, '
                f'domain_name={self.domain_name!r}, '
                f'disaster_recovery_method={self.disaster_recovery_method!r}, '
                f'disaster_recovery_url={self.disaster_recovery_url!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'secure={self.secure!r}, '
                f'recording={self.recording!r}, '
                f'transfer_mode={self.transfer_mode!r}, '
                f'transfer_caller_id={self.transfer_caller_id!r}, '
                f'cnam_lookup_enabled={self.cnam_lookup_enabled!r}, '
                f'auth_type={self.auth_type!r}, '
                f'auth_type_set={self.auth_type_set!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'sid={self.sid!r}, '
                f'url={self.url!r}, '
                f'links={self.links!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'account_sid={self.account_sid!s}, '
                f'domain_name={self.domain_name!s}, '
                f'disaster_recovery_method={self.disaster_recovery_method!s}, '
                f'disaster_recovery_url={self.disaster_recovery_url!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'secure={self.secure!s}, '
                f'recording={self.recording!s}, '
                f'transfer_mode={self.transfer_mode!s}, '
                f'transfer_caller_id={self.transfer_caller_id!s}, '
                f'cnam_lookup_enabled={self.cnam_lookup_enabled!s}, '
                f'auth_type={self.auth_type!s}, '
                f'auth_type_set={self.auth_type_set!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'sid={self.sid!s}, '
                f'url={self.url!s}, '
                f'links={self.links!s})')
