# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Template(object):

    """Implementation of the 'Template' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        friendly_name (str): The model property of type str.
        channels (List[str]): The model property of type List[str].
        translations (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "friendly_name": 'friendly_name',
        "channels": 'channels',
        "translations": 'translations'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 friendly_name=None,
                 channels=None,
                 translations=None):
        """Constructor for the Template class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.friendly_name = friendly_name 
        self.channels = channels 
        self.translations = translations 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        friendly_name = dictionary.get("friendly_name") if dictionary.get("friendly_name") else None
        channels = dictionary.get("channels") if dictionary.get("channels") else None
        translations = dictionary.get("translations") if dictionary.get("translations") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   friendly_name,
                   channels,
                   translations)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'friendly_name={self.friendly_name!r}, '
                f'channels={self.channels!r}, '
                f'translations={self.translations!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'friendly_name={self.friendly_name!s}, '
                f'channels={self.channels!s}, '
                f'translations={self.translations!s})')
