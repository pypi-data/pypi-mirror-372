# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Invite(object):

    """Implementation of the 'Invite' model.

    Attributes:
        sid (str): The model property of type str.
        account_sid (str): The model property of type str.
        channel_sid (str): The model property of type str.
        service_sid (str): The model property of type str.
        identity (str): The model property of type str.
        date_created (str): The model property of type str.
        date_updated (str): The model property of type str.
        role_sid (str): The model property of type str.
        created_by (str): The model property of type str.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'sid',
        "account_sid": 'account_sid',
        "channel_sid": 'channel_sid',
        "service_sid": 'service_sid',
        "identity": 'identity',
        "date_created": 'date_created',
        "date_updated": 'date_updated',
        "role_sid": 'role_sid',
        "created_by": 'created_by',
        "url": 'url'
    }

    def __init__(self,
                 sid=None,
                 account_sid=None,
                 channel_sid=None,
                 service_sid=None,
                 identity=None,
                 date_created=None,
                 date_updated=None,
                 role_sid=None,
                 created_by=None,
                 url=None):
        """Constructor for the Invite class"""

        # Initialize members of the class
        self.sid = sid 
        self.account_sid = account_sid 
        self.channel_sid = channel_sid 
        self.service_sid = service_sid 
        self.identity = identity 
        self.date_created = date_created 
        self.date_updated = date_updated 
        self.role_sid = role_sid 
        self.created_by = created_by 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("sid") if dictionary.get("sid") else None
        account_sid = dictionary.get("account_sid") if dictionary.get("account_sid") else None
        channel_sid = dictionary.get("channel_sid") if dictionary.get("channel_sid") else None
        service_sid = dictionary.get("service_sid") if dictionary.get("service_sid") else None
        identity = dictionary.get("identity") if dictionary.get("identity") else None
        date_created = dictionary.get("date_created") if dictionary.get("date_created") else None
        date_updated = dictionary.get("date_updated") if dictionary.get("date_updated") else None
        role_sid = dictionary.get("role_sid") if dictionary.get("role_sid") else None
        created_by = dictionary.get("created_by") if dictionary.get("created_by") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(sid,
                   account_sid,
                   channel_sid,
                   service_sid,
                   identity,
                   date_created,
                   date_updated,
                   role_sid,
                   created_by,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'account_sid={self.account_sid!r}, '
                f'channel_sid={self.channel_sid!r}, '
                f'service_sid={self.service_sid!r}, '
                f'identity={self.identity!r}, '
                f'date_created={self.date_created!r}, '
                f'date_updated={self.date_updated!r}, '
                f'role_sid={self.role_sid!r}, '
                f'created_by={self.created_by!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'account_sid={self.account_sid!s}, '
                f'channel_sid={self.channel_sid!s}, '
                f'service_sid={self.service_sid!s}, '
                f'identity={self.identity!s}, '
                f'date_created={self.date_created!s}, '
                f'date_updated={self.date_updated!s}, '
                f'role_sid={self.role_sid!s}, '
                f'created_by={self.created_by!s}, '
                f'url={self.url!s})')
