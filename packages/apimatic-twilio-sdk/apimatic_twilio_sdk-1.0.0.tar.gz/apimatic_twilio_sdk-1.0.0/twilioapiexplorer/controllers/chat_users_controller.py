# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_137 import OK137
from twilioapiexplorer.models.created_38 import Created38
from twilioapiexplorer.models.ok_139 import OK139


class ChatUsersController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ChatUsersController, self).__init__(config)

    def fetch_user(self,
                   service_sid,
                   sid,
                   accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Users/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to fetch the User resource from.
            sid (str): (Required) The SID of the User resource to fetch. This
                value can be either the `sid` or the `identity` of the User
                resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK137: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK137.from_dictionary)
        ).execute()

    def delete_user(self,
                    service_sid,
                    sid):
        """Does a DELETE request to /v2/Services/{ServiceSid}/Users/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to delete the User resource from.
            sid (str): (Required) The SID of the User resource to delete. This
                value can be either the `sid` or the `identity` of the User
                resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_user(self,
                    service_sid,
                    sid,
                    x_twilio_webhook_enabled,
                    accept,
                    role_sid,
                    attributes,
                    friendly_name):
        """Does a POST request to /v2/Services/{ServiceSid}/Users/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to update the User resource in.
            sid (str): (Required) The SID of the User resource to update. This
                value can be either the `sid` or the `identity` of the User
                resource to update.
            x_twilio_webhook_enabled (bool): The X-Twilio-Webhook-Enabled HTTP
                request header
            accept (str): The request header parameter.
            role_sid (str): The SID of the
                [Role](https://www.twilio.com/docs/chat/rest/role-resource) to
                assign to the User.
            attributes (str): A valid JSON string that contains
                application-specific data.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It is often used for display purposes.

        Returns:
            OK137: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-Twilio-Webhook-Enabled')
                          .value(x_twilio_webhook_enabled))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('RoleSid')
                        .value(role_sid))
            .form_param(Parameter()
                        .key('Attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK137.from_dictionary)
        ).execute()

    def create_user(self,
                    service_sid,
                    x_twilio_webhook_enabled,
                    accept,
                    identity,
                    role_sid,
                    attributes,
                    friendly_name):
        """Does a POST request to /v2/Services/{ServiceSid}/Users.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to create the User resource under.
            x_twilio_webhook_enabled (str): The X-Twilio-Webhook-Enabled HTTP
                request header
            accept (str): The request header parameter.
            identity (str): (Required) The `identity` value that uniquely
                identifies the new resource's
                [User](https://www.twilio.com/docs/chat/rest/user-resource)
                within the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e). This value is often a username or email address. See the
                Identity documentation for more info.
            role_sid (str): The SID of the
                [Role](https://www.twilio.com/docs/chat/rest/role-resource) to
                assign to the new User.
            attributes (str): A valid JSON string that contains
                application-specific data.
            friendly_name (str): A descriptive string that you create to
                describe the new resource. This value is often used for
                display purposes.

        Returns:
            Created38: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-Twilio-Webhook-Enabled')
                          .value(x_twilio_webhook_enabled))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Identity')
                        .value(identity))
            .form_param(Parameter()
                        .key('RoleSid')
                        .value(role_sid))
            .form_param(Parameter()
                        .key('Attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created38.from_dictionary)
        ).execute()

    def list_user(self,
                  page_size,
                  service_sid,
                  accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Users.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to read the User resources from.
            accept (str): The request header parameter.

        Returns:
            OK139: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK139.from_dictionary)
        ).execute()
