# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_33 import OK33
from twilioapiexplorer.models.ok_35 import OK35


class AddressesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(AddressesController, self).__init__(config)

    def update_address(self,
                       accept,
                       friendly_name,
                       customer_name,
                       street,
                       city,
                       region,
                       postal_code,
                       emergency_enabled,
                       auto_correct_address,
                       account_sid,
                       sid):
        """Does a POST request to /{AccountSid}/Addresses/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the address. It can be up to 64 characters long.
            customer_name (str): The name to associate with the address.
            street (str): The number and street address of the address.
            city (str): The city of the address.
            region (str): The state or region of the address.
            postal_code (str): The postal code of the address.
            emergency_enabled (bool): Whether to enable emergency calling on
                the address. Can be: `true` or `false`.
            auto_correct_address (bool): Whether we should automatically
                correct the address. Can be: `true` or `false` and the default
                is `true`. If empty or `true`, we will correct the address you
                provide if necessary. If `false`, we won't alter the address
                you provide.
            account_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK33: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Addresses/{Sid}.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('CustomerName')
                        .value(customer_name))
            .form_param(Parameter()
                        .key('Street')
                        .value(street))
            .form_param(Parameter()
                        .key('City')
                        .value(city))
            .form_param(Parameter()
                        .key('Region')
                        .value(region))
            .form_param(Parameter()
                        .key('PostalCode')
                        .value(postal_code))
            .form_param(Parameter()
                        .key('EmergencyEnabled')
                        .value(emergency_enabled))
            .form_param(Parameter()
                        .key('AutoCorrectAddress')
                        .value(auto_correct_address))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK33.from_dictionary)
        ).execute()

    def fetch_address(self,
                      accept,
                      account_sid,
                      sid):
        """Does a GET request to /{AccountSid}/Addresses/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK33: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Addresses/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK33.from_dictionary)
        ).execute()

    def delete_address(self,
                       account_sid,
                       sid):
        """Does a DELETE request to /{AccountSid}/Addresses/{Sid}.json.

        Args:
            account_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Addresses/{Sid}.json')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_dependent_phone_number(self,
                                    page_size,
                                    accept,
                                    account_sid,
                                    address_sid):
        """Does a GET request to /{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            address_sid (str): The request template parameter.

        Returns:
            OK35: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_5)
            .path('/{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('AddressSid')
                            .value(address_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK35.from_dictionary)
        ).execute()
