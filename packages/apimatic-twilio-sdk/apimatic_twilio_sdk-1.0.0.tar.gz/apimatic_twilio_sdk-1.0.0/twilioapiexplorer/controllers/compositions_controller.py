# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_192 import OK192
from twilioapiexplorer.models.ok_193 import OK193
from twilioapiexplorer.models.created_53 import Created53


class CompositionsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(CompositionsController, self).__init__(config)

    def fetch_composition(self,
                          sid,
                          accept):
        """Does a GET request to /{Sid}.

        Returns a single Composition resource identified by a Composition SID.

        Args:
            sid (str): (Required) The SID of the Composition resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK192: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_15)
            .path('/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK192.from_dictionary)
        ).execute()

    def delete_composition(self,
                           sid):
        """Does a DELETE request to /{Sid}.

        Delete a Recording Composition resource identified by a Composition
        SID.

        Args:
            sid (str): (Required) The SID of the Composition resource to
                delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_15)
            .path('/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_composition(self,
                         status,
                         date_created_after,
                         date_created_before,
                         room_sid,
                         page_size,
                         accept):
        """Does a GET request to /v1/Compositions.

        List of all Recording compositions.

        Args:
            status (str): Read only Composition resources with this status.
                Can be: `enqueued`, `processing`, `completed`, `deleted`, or
                `failed`.
            date_created_after (str): Read only Composition resources created
                on or after this [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with
                time zone.
            date_created_before (str): Read only Composition resources created
                before this ISO 8601 date-time with time zone.
            room_sid (str): Read only Composition resources with this Room SID.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK193: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Compositions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('DateCreatedAfter')
                         .value(date_created_after))
            .query_param(Parameter()
                         .key('DateCreatedBefore')
                         .value(date_created_before))
            .query_param(Parameter()
                         .key('RoomSid')
                         .value(room_sid))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK193.from_dictionary)
        ).execute()

    def create_composition(self,
                           accept,
                           room_sid,
                           audio_sources,
                           audio_sources_excluded,
                           resolution,
                           format,
                           status_callback,
                           status_callback_method,
                           trim):
        """Does a POST request to /v1/Compositions.

        Args:
            accept (str): The request header parameter.
            room_sid (str): (Required) The SID of the Group Room with the
                media tracks to be used as composition sources.
            audio_sources (str): An array of track names from the same group
                room to merge into the new composition. Can include zero or
                more track names. The new composition includes all audio
                sources specified in `audio_sources` except for those
                specified in `audio_sources_excluded`. The track names in this
                parameter can include an asterisk as a wild card character,
                which will match zero or more characters in a track name. For
                example, `student*` includes `student` as well as
                `studentTeam`. Please, be aware that either video_layout or
                audio_sources have to be provided to get a valid creation
                request
            audio_sources_excluded (str): An array of track names to exclude.
                The new composition includes all audio sources specified in
                `audio_sources` except for those specified in
                `audio_sources_excluded`. The track names in this parameter
                can include an asterisk as a wild card character, which will
                match zero or more characters in a track name. For example,
                `student*` excludes `student` as well as `studentTeam`. This
                parameter can also be empty.
            resolution (str): A string that describes the columns (width) and
                rows (height) of the generated composed video in pixels.
                Defaults to `640x480`.  The string's format is
                `{width}x{height}` where:   * 16 <= `{width}` <= 1280 * 16 <=
                `{height}` <= 1280 * `{width}` * `{height}` <= 921,600 
                Typical values are:   * HD = `1280x720` * PAL = `1024x576` *
                VGA = `640x480` * CIF = `320x240`  Note that the `resolution`
                imposes an aspect ratio to the resulting composition. When the
                original video tracks are constrained by the aspect ratio,
                they are scaled to fit. See [Specifying Video
                Layouts](https://www.twilio.com/docs/video/api/compositions-res
                ource#specifying-video-layouts) for more info.
            format (str): The container format of the composition's media
                files. Can be: `mp4` or `webm` and the default is `webm`. If
                you specify `mp4` or `webm`, you must also specify one or more
                `audio_sources` and/or a `video_layout` element that contains
                a valid `video_sources` list, otherwise an error occurs.
            status_callback (str): The URL we should call using the
                `status_callback_method` to send status information to your
                application on every composition event. If not provided,
                status callback events will not be dispatched.
            status_callback_method (str): The HTTP method we should use to
                call `status_callback`. Can be: `POST` or `GET` and the
                default is `POST`.
            trim (bool): Whether to clip the intervals where there is no
                active media in the composition. The default is `true`.
                Compositions with `trim` enabled are shorter when the Room is
                created and no Participant joins for a while as well as if all
                the Participants leave the room and join later, because those
                gaps will be removed. See [Specifying Video
                Layouts](https://www.twilio.com/docs/video/api/compositions-res
                ource#specifying-video-layouts) for more info.

        Returns:
            Created53: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Compositions')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('RoomSid')
                        .value(room_sid))
            .form_param(Parameter()
                        .key('AudioSources')
                        .value(audio_sources))
            .form_param(Parameter()
                        .key('AudioSourcesExcluded')
                        .value(audio_sources_excluded))
            .form_param(Parameter()
                        .key('Resolution')
                        .value(resolution))
            .form_param(Parameter()
                        .key('Format')
                        .value(format))
            .form_param(Parameter()
                        .key('StatusCallback')
                        .value(status_callback))
            .form_param(Parameter()
                        .key('StatusCallbackMethod')
                        .value(status_callback_method))
            .form_param(Parameter()
                        .key('Trim')
                        .value(trim))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created53.from_dictionary)
        ).execute()
