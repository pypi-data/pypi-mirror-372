# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_134 import OK134
from twilioapiexplorer.models.created_37 import Created37
from twilioapiexplorer.models.ok_136 import OK136


class ChatRolesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ChatRolesController, self).__init__(config)

    def fetch_role(self,
                   service_sid,
                   sid,
                   accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Roles/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to fetch the Role resource from.
            sid (str): (Required) The SID of the Role resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK134: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Roles/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK134.from_dictionary)
        ).execute()

    def delete_role(self,
                    service_sid,
                    sid):
        """Does a DELETE request to /v2/Services/{ServiceSid}/Roles/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to delete the Role resource from.
            sid (str): (Required) The SID of the Role resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Roles/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_role(self,
                    service_sid,
                    sid,
                    accept,
                    permission):
        """Does a POST request to /v2/Services/{ServiceSid}/Roles/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to update the Role resource in.
            sid (str): (Required) The SID of the Role resource to update.
            accept (str): The request header parameter.
            permission (str): (Required) A permission that you grant to the
                role. Only one permission can be granted per parameter. To
                assign more than one permission, repeat this parameter for
                each permission value. Note that the update action replaces
                all previously assigned permissions with those defined in the
                update action. To remove a permission, do not include it in
                the subsequent update action. The values for this parameter
                depend on the role's `type`.

        Returns:
            OK134: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Roles/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Permission')
                        .value(permission))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK134.from_dictionary)
        ).execute()

    def create_role(self,
                    service_sid,
                    accept,
                    friendly_name,
                    mtype,
                    permission):
        """Does a POST request to /v2/Services/{ServiceSid}/Roles.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to create the Role resource under.
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the new resource. It can be up to 64
                characters long.
            mtype (str): (Required) The type of role. Can be: `channel` for
                [Channel](https://www.twilio.com/docs/chat/channels) roles or
                `deployment` for
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) roles.
            permission (str): (Required) A permission that you grant to the
                new role. Only one permission can be granted per parameter. To
                assign more than one permission, repeat this parameter for
                each permission value. The values for this parameter depend on
                the role's `type`.

        Returns:
            Created37: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Roles')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('Type')
                        .value(mtype))
            .form_param(Parameter()
                        .key('Permission')
                        .value(permission))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created37.from_dictionary)
        ).execute()

    def list_role(self,
                  page_size,
                  service_sid,
                  accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Roles.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to read the Role resources from.
            accept (str): The request header parameter.

        Returns:
            OK136: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Roles')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK136.from_dictionary)
        ).execute()
