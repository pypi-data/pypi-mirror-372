# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_243 import OK243
from twilioapiexplorer.models.ok_245 import OK245
from twilioapiexplorer.models.created_64 import Created64


class SessionsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(SessionsController, self).__init__(config)

    def fetch_session(self,
                      service_sid,
                      sid,
                      accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Sessions/{Sid}.

        Fetch a specific Session.

        Args:
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service) of
                the resource to fetch.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Session resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK243: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Sessions/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK243.from_dictionary)
        ).execute()

    def delete_session(self,
                       service_sid,
                       sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Sessions/{Sid}.

        Delete a specific Session.

        Args:
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service) of
                the resource to delete.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Session resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Sessions/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_session(self,
                       service_sid,
                       sid,
                       accept,
                       date_expiry,
                       ttl,
                       status):
        """Does a POST request to /v1/Services/{ServiceSid}/Sessions/{Sid}.

        Update a specific Session.

        Args:
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service) of
                the resource to update.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Session resource to update.
            accept (str): The request header parameter.
            date_expiry (str): The [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date when the
                Session should expire. If this is value is present, it
                overrides the `ttl` value.
            ttl (int): The time, in seconds, when the session will expire. The
                time is measured from the last Session create or the Session's
                last Interaction.
            status (str): The new status of the resource. Can be:
                `in-progress` to re-open a session or `closed` to close a
                session.

        Returns:
            OK243: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Sessions/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('DateExpiry')
                        .value(date_expiry))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK243.from_dictionary)
        ).execute()

    def list_session(self,
                     page_size,
                     service_sid,
                     accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Sessions.

        Retrieve a list of all Sessions for the Service. A maximum of 100
        records will be returned per page.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service) of
                the resource to read.
            accept (str): The request header parameter.

        Returns:
            OK245: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Sessions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK245.from_dictionary)
        ).execute()

    def create_session(self,
                       service_sid,
                       accept,
                       unique_name,
                       date_expiry,
                       ttl,
                       mode,
                       status):
        """Does a POST request to /v1/Services/{ServiceSid}/Sessions.

        Create a new Session

        Args:
            service_sid (str): (Required) The SID of the parent
                [Service](https://www.twilio.com/docs/proxy/api/service)
                resource.
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. This value must be 191 characters or
                fewer in length and be unique. **This value should not have
                PII.**
            date_expiry (str): The [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date when the
                Session should expire. If this is value is present, it
                overrides the `ttl` value.
            ttl (int): The time, in seconds, when the session will expire. The
                time is measured from the last Session create or the Session's
                last Interaction.
            mode (str): The Mode of the Session. Can be: `message-only`,
                `voice-only`, or `voice-and-message` and the default value is
                `voice-and-message`.
            status (str): The initial status of the Session. Can be: `open`,
                `in-progress`, `closed`, `failed`, or `unknown`. The default
                is `open` on create.

        Returns:
            Created64: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Sessions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('DateExpiry')
                        .value(date_expiry))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('Mode')
                        .value(mode))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created64.from_dictionary)
        ).execute()
