# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_80 import OK80
from twilioapiexplorer.models.ok_82 import OK82
from twilioapiexplorer.models.created_23 import Created23
from twilioapiexplorer.models.ok_83 import OK83
from twilioapiexplorer.models.ok_84 import OK84
from twilioapiexplorer.models.ok_85 import OK85


class WorkersController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(WorkersController, self).__init__(config)

    def fetch_worker(self,
                     accept,
                     workspace_sid,
                     sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workers/{Sid}.

        Args:
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK80: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workers/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK80.from_dictionary)
        ).execute()

    def update_worker(self,
                      if_match,
                      accept,
                      activity_sid,
                      attributes,
                      friendly_name,
                      reject_pending_reservations,
                      workspace_sid,
                      sid):
        """Does a POST request to /Workspaces/{WorkspaceSid}/Workers/{Sid}.

        Args:
            if_match (str): The If-Match HTTP request header
            accept (str): The request header parameter.
            activity_sid (str): The SID of a valid Activity that will describe
                the Worker's initial state. See
                [Activities](https://www.twilio.com/docs/taskrouter/api/activit
                y) for more information.
            attributes (str): The JSON string that describes the Worker. For
                example: `{ "email": "Bob@example.com", "phone": "+5095551234"
                }`. This data is passed to the `assignment_callback_url` when
                TaskRouter assigns a Task to the Worker. Defaults to {}.
            friendly_name (str): A descriptive string that you create to
                describe the Worker. It can be up to 64 characters long.
            reject_pending_reservations (bool): Whether to reject the Worker's
                pending reservations. This option is only valid if the
                Worker's new
                [Activity](https://www.twilio.com/docs/taskrouter/api/activity)
                resource has its `availability` property set to `False`.
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK80: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workers/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('If-Match')
                          .value(if_match))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('ActivitySid')
                        .value(activity_sid))
            .form_param(Parameter()
                        .key('Attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('RejectPendingReservations')
                        .value(reject_pending_reservations))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK80.from_dictionary)
        ).execute()

    def delete_worker(self,
                      if_match,
                      workspace_sid,
                      sid):
        """Does a DELETE request to /Workspaces/{WorkspaceSid}/Workers/{Sid}.

        Args:
            if_match (str): The If-Match HTTP request header
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workers/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('If-Match')
                          .value(if_match))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_worker(self,
                    activity_name,
                    activity_sid,
                    available,
                    friendly_name,
                    target_workers_expression,
                    task_queue_name,
                    task_queue_sid,
                    ordering,
                    page_size,
                    accept,
                    workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workers.

        Args:
            activity_name (str): The `activity_name` of the Worker resources
                to read.
            activity_sid (str): The `activity_sid` of the Worker resources to
                read.
            available (str): Whether to return only Worker resources that are
                available or unavailable. Can be `true`, `1`, or `yes` to
                return Worker resources that are available, and `false`, or
                any value returns the Worker resources that are not available.
            friendly_name (str): The `friendly_name` of the Worker resources
                to read.
            target_workers_expression (str): Filter by Workers that would
                match an expression on a TaskQueue. This is helpful for
                debugging which Workers would match a potential queue.
            task_queue_name (str): The `friendly_name` of the TaskQueue that
                the Workers to read are eligible for.
            task_queue_sid (str): The SID of the TaskQueue that the Workers to
                read are eligible for.
            ordering (str): Sorting parameter for Workers
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK82: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workers')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('ActivityName')
                         .value(activity_name))
            .query_param(Parameter()
                         .key('ActivitySid')
                         .value(activity_sid))
            .query_param(Parameter()
                         .key('Available')
                         .value(available))
            .query_param(Parameter()
                         .key('FriendlyName')
                         .value(friendly_name))
            .query_param(Parameter()
                         .key('TargetWorkersExpression')
                         .value(target_workers_expression))
            .query_param(Parameter()
                         .key('TaskQueueName')
                         .value(task_queue_name))
            .query_param(Parameter()
                         .key('TaskQueueSid')
                         .value(task_queue_sid))
            .query_param(Parameter()
                         .key('Ordering')
                         .value(ordering))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK82.from_dictionary)
        ).execute()

    def create_worker(self,
                      accept,
                      friendly_name,
                      activity_sid,
                      attributes,
                      workspace_sid):
        """Does a POST request to /Workspaces/{WorkspaceSid}/Workers.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the new Worker. It can be up to 64
                characters long.
            activity_sid (str): The SID of a valid Activity that will describe
                the new Worker's initial state. See
                [Activities](https://www.twilio.com/docs/taskrouter/api/activit
                y) for more information. If not provided, the new Worker's
                initial state is the `default_activity_sid` configured on the
                Workspace.
            attributes (str): A valid JSON string that describes the new
                Worker. For example: `{ "email": "Bob@example.com", "phone":
                "+5095551234" }`. This data is passed to the
                `assignment_callback_url` when TaskRouter assigns a Task to
                the Worker. Defaults to {}.
            workspace_sid (str): The request template parameter.

        Returns:
            Created23: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workers')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('ActivitySid')
                        .value(activity_sid))
            .form_param(Parameter()
                        .key('Attributes')
                        .value(attributes))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created23.from_dictionary)
        ).execute()

    def fetch_worker_statistics(self,
                                minutes,
                                start_date,
                                end_date,
                                task_queue_sid,
                                task_queue_name,
                                friendly_name,
                                task_channel,
                                accept,
                                workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workers/Statistics.

        Args:
            minutes (int): Only calculate statistics since this many minutes
                in the past. The default 15 minutes. This is helpful for
                displaying statistics for the last 15 minutes, 240 minutes (4
                hours), and 480 minutes (8 hours) to see trends.
            start_date (str): Only calculate statistics from this date and
                time and later, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            end_date (str): Only calculate statistics from this date and time
                and earlier, specified in GMT as an [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
            task_queue_sid (str): The SID of the TaskQueue for which to fetch
                Worker statistics.
            task_queue_name (str): The `friendly_name` of the TaskQueue for
                which to fetch Worker statistics.
            friendly_name (str): Only include Workers with `friendly_name`
                values that match this parameter.
            task_channel (str): Only calculate statistics on this TaskChannel.
                Can be the TaskChannel's SID or its `unique_name`, such as
                `voice`, `sms`, or `default`.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK83: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workers/Statistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('TaskQueueSid')
                         .value(task_queue_sid))
            .query_param(Parameter()
                         .key('TaskQueueName')
                         .value(task_queue_name))
            .query_param(Parameter()
                         .key('FriendlyName')
                         .value(friendly_name))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK83.from_dictionary)
        ).execute()

    def fetch_workers_cumulative_statistics(self,
                                            end_date,
                                            minutes,
                                            start_date,
                                            task_channel,
                                            accept,
                                            workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workers/CumulativeStatistics.

        Args:
            end_date (str): Only calculate statistics from this date and time
                and earlier, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            minutes (int): Only calculate statistics since this many minutes
                in the past. The default 15 minutes. This is helpful for
                displaying statistics for the last 15 minutes, 240 minutes (4
                hours), and 480 minutes (8 hours) to see trends.
            start_date (str): Only calculate statistics from this date and
                time and later, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            task_channel (str): Only calculate cumulative statistics on this
                TaskChannel. Can be the TaskChannel's SID or its
                `unique_name`, such as `voice`, `sms`, or `default`.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK84: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workers/CumulativeStatistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK84.from_dictionary)
        ).execute()

    def fetch_workers_real_time_statistics(self,
                                           task_channel,
                                           accept,
                                           workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Workers/RealTimeStatistics.

        Args:
            task_channel (str): Only calculate real-time statistics on this
                TaskChannel. Can be the TaskChannel's SID or its
                `unique_name`, such as `voice`, `sms`, or `default`.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK85: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Workers/RealTimeStatistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK85.from_dictionary)
        ).execute()
