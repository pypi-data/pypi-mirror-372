# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_126 import OK126
from twilioapiexplorer.models.created_34 import Created34
from twilioapiexplorer.models.ok_127 import OK127


class ChatChannelWebhookController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ChatChannelWebhookController, self).__init__(config)

    def list_channel_webhook(self,
                             page_size,
                             service_sid,
                             channel_sid,
                             accept):
        """Does a GET request to /Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) with the Channel to read the resources from.
            channel_sid (str): (Required) The SID of the
                [Channel](https://www.twilio.com/docs/chat/channels) the
                Channel Webhook resources to read belong to. This value can be
                the Channel resource's `sid` or `unique_name`.
            accept (str): The request header parameter.

        Returns:
            OK126: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ChannelSid')
                            .value(channel_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK126.from_dictionary)
        ).execute()

    def create_channel_webhook(self,
                               service_sid,
                               channel_sid,
                               accept,
                               mtype,
                               configuration_url,
                               configuration_method,
                               configuration_filters,
                               configuration_triggers,
                               configuration_flow_sid,
                               configuration_retry_count):
        """Does a POST request to /Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) with the Channel to create the Webhook resource under.
            channel_sid (str): (Required) The SID of the
                [Channel](https://www.twilio.com/docs/chat/channels) the new
                Channel Webhook resource belongs to. This value can be the
                Channel resource's `sid` or `unique_name`.
            accept (str): The request header parameter.
            mtype (str): (Required) The type of webhook. Can be: `webhook`,
                `studio`, or `trigger`.
            configuration_url (str): The URL of the webhook to call using the
                `configuration.method`.
            configuration_method (str): The HTTP method used to call
                `configuration.url`. Can be: `GET` or `POST` and the default
                is `POST`.
            configuration_filters (str): The events that cause us to call the
                Channel Webhook. Used when `type` is `webhook`. This parameter
                takes only one event. To specify more than one event, repeat
                this parameter for each event. For the list of possible
                events, see [Webhook Event
                Triggers](https://www.twilio.com/docs/chat/webhook-events#webho
                ok-event-trigger).
            configuration_triggers (str): A string that will cause us to call
                the webhook when it is present in a message body. This
                parameter takes only one trigger string. To specify more than
                one, repeat this parameter for each trigger string up to a
                total of 5 trigger strings. Used only when `type` = `trigger`.
            configuration_flow_sid (str): The SID of the Studio
                [Flow](https://www.twilio.com/docs/studio/rest-api/flow) to
                call when an event in `configuration.filters` occurs. Used
                only when `type` is `studio`.
            configuration_retry_count (int): The number of times to retry the
                webhook if the first attempt fails. Can be an integer between
                0 and 3, inclusive, and the default is 0.

        Returns:
            Created34: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ChannelSid')
                            .value(channel_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Type')
                        .value(mtype))
            .form_param(Parameter()
                        .key('Configuration.Url')
                        .value(configuration_url))
            .form_param(Parameter()
                        .key('Configuration.Method')
                        .value(configuration_method))
            .form_param(Parameter()
                        .key('Configuration.Filters')
                        .value(configuration_filters))
            .form_param(Parameter()
                        .key('Configuration.Triggers')
                        .value(configuration_triggers))
            .form_param(Parameter()
                        .key('Configuration.FlowSid')
                        .value(configuration_flow_sid))
            .form_param(Parameter()
                        .key('Configuration.RetryCount')
                        .value(configuration_retry_count))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created34.from_dictionary)
        ).execute()

    def fetch_channel_webhook(self,
                              service_sid,
                              channel_sid,
                              sid,
                              accept):
        """Does a GET request to /Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) with the Channel to fetch the Webhook resource from.
            channel_sid (str): (Required) The SID of the
                [Channel](https://www.twilio.com/docs/chat/channels) the
                Channel Webhook resource to fetch belongs to. This value can
                be the Channel resource's `sid` or `unique_name`.
            sid (str): (Required) The SID of the Channel Webhook resource to
                fetch.
            accept (str): The request header parameter.

        Returns:
            OK127: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ChannelSid')
                            .value(channel_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK127.from_dictionary)
        ).execute()

    def update_channel_webhook(self,
                               service_sid,
                               channel_sid,
                               sid,
                               accept,
                               configuration_url,
                               configuration_method,
                               configuration_filters,
                               configuration_triggers,
                               configuration_flow_sid,
                               configuration_retry_count):
        """Does a POST request to /Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) with the Channel that has the Webhook resource to update.
            channel_sid (str): (Required) The SID of the
                [Channel](https://www.twilio.com/docs/chat/channels) the
                Channel Webhook resource to update belongs to. This value can
                be the Channel resource's `sid` or `unique_name`.
            sid (str): (Required) The SID of the Channel Webhook resource to
                update.
            accept (str): The request header parameter.
            configuration_url (str): The URL of the webhook to call using the
                `configuration.method`.
            configuration_method (str): The HTTP method used to call
                `configuration.url`. Can be: `GET` or `POST` and the default
                is `POST`.
            configuration_filters (str): The events that cause us to call the
                Channel Webhook. Used when `type` is `webhook`. This parameter
                takes only one event. To specify more than one event, repeat
                this parameter for each event. For the list of possible
                events, see [Webhook Event
                Triggers](https://www.twilio.com/docs/chat/webhook-events#webho
                ok-event-trigger).
            configuration_triggers (str): A string that will cause us to call
                the webhook when it is present in a message body. This
                parameter takes only one trigger string. To specify more than
                one, repeat this parameter for each trigger string up to a
                total of 5 trigger strings. Used only when `type` = `trigger`.
            configuration_flow_sid (str): The SID of the Studio
                [Flow](https://www.twilio.com/docs/studio/rest-api/flow) to
                call when an event in `configuration.filters` occurs. Used
                only when `type` = `studio`.
            configuration_retry_count (int): The number of times to retry the
                webhook if the first attempt fails. Can be an integer between
                0 and 3, inclusive, and the default is 0.

        Returns:
            OK127: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ChannelSid')
                            .value(channel_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Configuration.Url')
                        .value(configuration_url))
            .form_param(Parameter()
                        .key('Configuration.Method')
                        .value(configuration_method))
            .form_param(Parameter()
                        .key('Configuration.Filters')
                        .value(configuration_filters))
            .form_param(Parameter()
                        .key('Configuration.Triggers')
                        .value(configuration_triggers))
            .form_param(Parameter()
                        .key('Configuration.FlowSid')
                        .value(configuration_flow_sid))
            .form_param(Parameter()
                        .key('Configuration.RetryCount')
                        .value(configuration_retry_count))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK127.from_dictionary)
        ).execute()

    def delete_channel_webhook(self,
                               service_sid,
                               channel_sid,
                               sid):
        """Does a DELETE request to /Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) with the Channel to delete the Webhook resource from.
            channel_sid (str): (Required) The SID of the
                [Channel](https://www.twilio.com/docs/chat/channels) the
                Channel Webhook resource to delete belongs to. This value can
                be the Channel resource's `sid` or `unique_name`.
            sid (str): (Required) The SID of the Channel Webhook resource to
                delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Channels/{ChannelSid}/Webhooks/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ChannelSid')
                            .value(channel_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
