# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_10 import OK10
from twilioapiexplorer.models.created_5 import Created5
from twilioapiexplorer.models.ok_12 import OK12


class ConversationsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ConversationsController, self).__init__(config)

    def update_conversation(self,
                            sid,
                            x_twilio_webhook_enabled,
                            accept,
                            friendly_name,
                            date_created,
                            date_updated,
                            attributes,
                            messaging_service_sid,
                            state,
                            timers_inactive,
                            timers_closed,
                            unique_name):
        """Does a POST request to /Conversations/{Sid}.

        Args:
            sid (str): (Required) A 34 character string that uniquely
                identifies this resource. Can also be the `unique_name` of the
                Conversation.
            x_twilio_webhook_enabled (str): The X-Twilio-Webhook-Enabled HTTP
                request header
            accept (str): The request header parameter.
            friendly_name (str): The human-readable name of this conversation,
                limited to 256 characters. Optional.
            date_created (str): The date that this resource was created.
            date_updated (str): The date that this resource was last updated.
            attributes (str): An optional string metadata field you can use to
                store any data you wish. The string value must contain
                structurally valid JSON if specified.  **Note** that if the
                attributes are not set "{}" will be returned.
            messaging_service_sid (str): The unique ID of the [Messaging
                Service](https://www.twilio.com/docs/sms/services/api) this
                conversation belongs to.
            state (str): Current state of this conversation. Can be either
                `active`, `inactive` or `closed` and defaults to `active`
            timers_inactive (str): ISO8601 duration when conversation will be
                switched to `inactive` state. Minimum value for this timer is
                1 minute.
            timers_closed (str): ISO8601 duration when conversation will be
                switched to `closed` state. Minimum value for this timer is 10
                minutes.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. It can be used to address the
                resource in place of the resource's `sid` in the URL.

        Returns:
            OK10: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/Conversations/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-Twilio-Webhook-Enabled')
                          .value(x_twilio_webhook_enabled))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('DateCreated')
                        .value(date_created))
            .form_param(Parameter()
                        .key('DateUpdated')
                        .value(date_updated))
            .form_param(Parameter()
                        .key('Attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('MessagingServiceSid')
                        .value(messaging_service_sid))
            .form_param(Parameter()
                        .key('State')
                        .value(state))
            .form_param(Parameter()
                        .key('Timers.Inactive')
                        .value(timers_inactive))
            .form_param(Parameter()
                        .key('Timers.Closed')
                        .value(timers_closed))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK10.from_dictionary)
        ).execute()

    def delete_conversation(self,
                            sid,
                            x_twilio_webhook_enabled):
        """Does a DELETE request to /Conversations/{Sid}.

        Args:
            sid (str): (Required) A 34 character string that uniquely
                identifies this resource. Can also be the `unique_name` of the
                Conversation.
            x_twilio_webhook_enabled (str): The X-Twilio-Webhook-Enabled HTTP
                request header

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/Conversations/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-Twilio-Webhook-Enabled')
                          .value(x_twilio_webhook_enabled))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_conversation(self,
                           sid,
                           accept):
        """Does a GET request to /Conversations/{Sid}.

        Args:
            sid (str): (Required) A 34 character string that uniquely
                identifies this resource. Can also be the `unique_name` of the
                Conversation.
            accept (str): The request header parameter.

        Returns:
            OK10: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/Conversations/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK10.from_dictionary)
        ).execute()

    def create_conversation(self,
                            x_twilio_webhook_enabled,
                            accept,
                            friendly_name,
                            unique_name,
                            date_created,
                            date_updated,
                            messaging_service_sid,
                            attributes,
                            state,
                            timers_inactive,
                            timers_closed):
        """Does a POST request to /Conversations.

        Args:
            x_twilio_webhook_enabled (bool): The X-Twilio-Webhook-Enabled HTTP
                request header
            accept (str): The request header parameter.
            friendly_name (str): The human-readable name of this conversation,
                limited to 256 characters. Optional.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. It can be used to address the
                resource in place of the resource's `sid` in the URL.
            date_created (str): The date that this resource was created.
            date_updated (str): The date that this resource was last updated.
            messaging_service_sid (str): The unique ID of the [Messaging
                Service](https://www.twilio.com/docs/sms/services/api) this
                conversation belongs to.
            attributes (str): An optional string metadata field you can use to
                store any data you wish. The string value must contain
                structurally valid JSON if specified.  **Note** that if the
                attributes are not set "{}" will be returned.
            state (str): Current state of this conversation. Can be either
                `active`, `inactive` or `closed` and defaults to `active`
            timers_inactive (str): ISO8601 duration when conversation will be
                switched to `inactive` state. Minimum value for this timer is
                1 minute.
            timers_closed (str): ISO8601 duration when conversation will be
                switched to `closed` state. Minimum value for this timer is 10
                minutes.

        Returns:
            Created5: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/Conversations')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('X-Twilio-Webhook-Enabled')
                          .value(x_twilio_webhook_enabled))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('DateCreated')
                        .value(date_created))
            .form_param(Parameter()
                        .key('DateUpdated')
                        .value(date_updated))
            .form_param(Parameter()
                        .key('MessagingServiceSid')
                        .value(messaging_service_sid))
            .form_param(Parameter()
                        .key('Attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('State')
                        .value(state))
            .form_param(Parameter()
                        .key('Timers.Inactive')
                        .value(timers_inactive))
            .form_param(Parameter()
                        .key('Timers.Closed')
                        .value(timers_closed))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created5.from_dictionary)
        ).execute()

    def list_conversation(self,
                          page_size,
                          accept):
        """Does a GET request to /Conversations.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK12: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/Conversations')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK12.from_dictionary)
        ).execute()
