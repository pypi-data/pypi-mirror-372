# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_16 import Created16
from twilioapiexplorer.models.ok_56 import OK56
from twilioapiexplorer.models.ok_57 import OK57
from twilioapiexplorer.models.ok_59 import OK59
from twilioapiexplorer.models.ok_60 import OK60
from twilioapiexplorer.models.created_17 import Created17


class SIPCredentialsListController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(SIPCredentialsListController, self).__init__(config)

    def create_sip_credential(self,
                              accept,
                              username,
                              password,
                              account_sid,
                              credential_list_sid):
        """Does a POST request to /{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json.

        Args:
            accept (str): The request header parameter.
            username (str): (Required) The username that will be passed when
                authenticating SIP requests. The username should be sent in
                response to Twilio's challenge of the initial INVITE. It can
                be up to 32 characters long.
            password (str): (Required) The password that the username will use
                when authenticating SIP requests. The password must be a
                minimum of 12 characters, contain at least 1 digit, and have
                mixed case. (eg `IWasAtSignal2018`)
            account_sid (str): The request template parameter.
            credential_list_sid (str): The request template parameter.

        Returns:
            Created16: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Username')
                        .value(username))
            .form_param(Parameter()
                        .key('Password')
                        .value(password))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('CredentialListSid')
                            .value(credential_list_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created16.from_dictionary)
        ).execute()

    def list_sip_credential(self,
                            page_size,
                            accept,
                            account_sid,
                            credential_list_sid):
        """Does a GET request to /{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            credential_list_sid (str): The request template parameter.

        Returns:
            OK56: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('CredentialListSid')
                            .value(credential_list_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK56.from_dictionary)
        ).execute()

    def fetch_sip_credential(self,
                             accept,
                             account_sid,
                             credential_list_sid,
                             sid):
        """Does a GET request to /{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            credential_list_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK57: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('CredentialListSid')
                            .value(credential_list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK57.from_dictionary)
        ).execute()

    def update_sip_credential(self,
                              accept,
                              password,
                              account_sid,
                              credential_list_sid,
                              sid):
        """Does a POST request to /{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            password (str): The password that the username will use when
                authenticating SIP requests. The password must be a minimum of
                12 characters, contain at least 1 digit, and have mixed case.
                (eg `IWasAtSignal2018`)
            account_sid (str): The request template parameter.
            credential_list_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK57: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Password')
                        .value(password))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('CredentialListSid')
                            .value(credential_list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK57.from_dictionary)
        ).execute()

    def delete_sip_credential(self,
                              sid):
        """Does a DELETE request to /{Sid}.json.

        Args:
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_6)
            .path('/{Sid}.json')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_sip_credential_list(self,
                                  accept,
                                  account_sid,
                                  sid):
        """Does a GET request to /{AccountSid}/SIP/CredentialLists/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK59: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/CredentialLists/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK59.from_dictionary)
        ).execute()

    def delete_sip_credential_list(self,
                                   account_sid,
                                   sid):
        """Does a DELETE request to /{AccountSid}/SIP/CredentialLists/{Sid}.json.

        Args:
            account_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/CredentialLists/{Sid}.json')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_sip_credential_list(self,
                                 page_size,
                                 accept,
                                 account_sid):
        """Does a GET request to /{AccountSid}/SIP/CredentialLists.json.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.

        Returns:
            OK60: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/CredentialLists.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK60.from_dictionary)
        ).execute()

    def create_sip_credential_list(self,
                                   accept,
                                   friendly_name,
                                   account_sid):
        """Does a POST request to /{AccountSid}/SIP/CredentialLists.json.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A human readable descriptive text
                that describes the CredentialList, up to 64 characters long.
            account_sid (str): The request template parameter.

        Returns:
            Created17: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/CredentialLists.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created17.from_dictionary)
        ).execute()
