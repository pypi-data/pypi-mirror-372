# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_15 import Created15
from twilioapiexplorer.models.ok_53 import OK53
from twilioapiexplorer.models.ok_54 import OK54


class IPAccessControlListController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(IPAccessControlListController, self).__init__(config)

    def create_sip_ip_address(self,
                              accept,
                              friendly_name,
                              ip_address,
                              cidr_prefix_length,
                              account_sid,
                              ip_access_control_list_sid):
        """Does a POST request to /{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A human readable descriptive text
                for this resource, up to 255 characters long.
            ip_address (str): (Required) An IP address in dotted decimal
                notation from which you want to accept traffic. Any SIP
                requests from this IP address will be allowed by Twilio. IPv4
                only supported today.
            cidr_prefix_length (int): An integer representing the length of
                the CIDR prefix to use with this IP address when accepting
                traffic. By default the entire IP address is used.
            account_sid (str): The request template parameter.
            ip_access_control_list_sid (str): The request template parameter.

        Returns:
            Created15: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('IpAddress')
                        .value(ip_address))
            .form_param(Parameter()
                        .key('CidrPrefixLength')
                        .value(cidr_prefix_length))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('IpAccessControlListSid')
                            .value(ip_access_control_list_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created15.from_dictionary)
        ).execute()

    def list_sip_ip_address(self,
                            page_size,
                            accept,
                            account_sid,
                            ip_access_control_list_sid):
        """Does a GET request to /{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            ip_access_control_list_sid (str): The request template parameter.

        Returns:
            OK53: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('IpAccessControlListSid')
                            .value(ip_access_control_list_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK53.from_dictionary)
        ).execute()

    def fetch_sip_ip_address(self,
                             accept,
                             account_sid,
                             ip_access_control_list_sid,
                             sid):
        """Does a GET request to /{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            account_sid (str): The request template parameter.
            ip_access_control_list_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK54: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('IpAccessControlListSid')
                            .value(ip_access_control_list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK54.from_dictionary)
        ).execute()

    def update_sip_ip_address(self,
                              accept,
                              ip_address,
                              friendly_name,
                              cidr_prefix_length,
                              account_sid,
                              ip_access_control_list_sid,
                              sid):
        """Does a POST request to /{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            ip_address (str): An IP address in dotted decimal notation from
                which you want to accept traffic. Any SIP requests from this
                IP address will be allowed by Twilio. IPv4 only supported
                today.
            friendly_name (str): A human readable descriptive text for this
                resource, up to 255 characters long.
            cidr_prefix_length (int): An integer representing the length of
                the CIDR prefix to use with this IP address when accepting
                traffic. By default the entire IP address is used.
            account_sid (str): The request template parameter.
            ip_access_control_list_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK54: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('IpAddress')
                        .value(ip_address))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('CidrPrefixLength')
                        .value(cidr_prefix_length))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('IpAccessControlListSid')
                            .value(ip_access_control_list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK54.from_dictionary)
        ).execute()

    def delete_sip_ip_address(self,
                              account_sid,
                              ip_access_control_list_sid,
                              sid):
        """Does a DELETE request to /{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json.

        Args:
            account_sid (str): The request template parameter.
            ip_access_control_list_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('IpAccessControlListSid')
                            .value(ip_access_control_list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
