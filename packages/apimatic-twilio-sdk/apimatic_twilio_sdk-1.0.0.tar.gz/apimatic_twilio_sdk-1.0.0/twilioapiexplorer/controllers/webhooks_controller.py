# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_252 import OK252
from twilioapiexplorer.models.ok_254 import OK254
from twilioapiexplorer.models.created_67 import Created67
from twilioapiexplorer.models.created_87 import Created87
from twilioapiexplorer.models.ok_310 import OK310
from twilioapiexplorer.models.ok_311 import OK311


class WebhooksController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(WebhooksController, self).__init__(config)

    def fetch_webhook(self,
                      assistant_sid,
                      sid,
                      accept):
        """Does a GET request to /v1/Assistants/{AssistantSid}/Webhooks/{Sid}.

        Args:
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the resource to fetch.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Webhook resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK252: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Webhooks/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK252.from_dictionary)
        ).execute()

    def update_webhook(self,
                       assistant_sid,
                       sid,
                       accept,
                       unique_name,
                       events,
                       webhook_url,
                       webhook_method):
        """Does a POST request to /v1/Assistants/{AssistantSid}/Webhooks/{Sid}.

        Args:
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the resource to update.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Webhook resource to update.
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the new resource. It can be used as an alternative
                to the `sid` in the URL path to address the resource. This
                value must be unique and 64 characters or less in length.
            events (str): The list of space-separated events that this Webhook
                will subscribe to.
            webhook_url (str): The URL associated with this Webhook.
            webhook_method (str): The method to be used when calling the
                webhook's URL.

        Returns:
            OK252: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Webhooks/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('Events')
                        .value(events))
            .form_param(Parameter()
                        .key('WebhookUrl')
                        .value(webhook_url))
            .form_param(Parameter()
                        .key('WebhookMethod')
                        .value(webhook_method))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK252.from_dictionary)
        ).execute()

    def delete_webhook(self,
                       assistant_sid,
                       sid):
        """Does a DELETE request to /v1/Assistants/{AssistantSid}/Webhooks/{Sid}.

        Args:
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the resources to delete.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Webhook resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Webhooks/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_webhook(self,
                     page_size,
                     assistant_sid,
                     accept):
        """Does a GET request to /v1/Assistants/{AssistantSid}/Webhooks.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the resources to read.
            accept (str): The request header parameter.

        Returns:
            OK254: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Webhooks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK254.from_dictionary)
        ).execute()

    def create_webhook(self,
                       assistant_sid,
                       accept,
                       unique_name,
                       events,
                       webhook_url,
                       webhook_method):
        """Does a POST request to /v1/Assistants/{AssistantSid}/Webhooks.

        Args:
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the new resource.
            accept (str): The request header parameter.
            unique_name (str): (Required) An application-defined string that
                uniquely identifies the new resource. It can be used as an
                alternative to the `sid` in the URL path to address the
                resource. This value must be unique and 64 characters or less
                in length.
            events (str): (Required) The list of space-separated events that
                this Webhook will subscribe to.
            webhook_url (str): (Required) The URL associated with this Webhook.
            webhook_method (str): The method to be used when calling the
                webhook's URL.

        Returns:
            Created67: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Webhooks')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('Events')
                        .value(events))
            .form_param(Parameter()
                        .key('WebhookUrl')
                        .value(webhook_url))
            .form_param(Parameter()
                        .key('WebhookMethod')
                        .value(webhook_method))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created67.from_dictionary)
        ).execute()

    def create_webhook_1(self,
                         service_sid,
                         accept,
                         friendly_name,
                         event_types,
                         webhook_url,
                         status,
                         version):
        """Does a POST request to /v2/Services/{ServiceSid}/Webhooks.

        Create a new Webhook for the Service

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            accept (str): The request header parameter.
            friendly_name (str): (Required) The string that you assigned to
                describe the webhook. **This value should not contain PII.**
            event_types (str): (Required) The array of events that this
                Webhook is subscribed to. Possible event types: `*,
                factor.deleted, factor.created, factor.verified,
                challenge.approved, challenge.denied`
            webhook_url (str): (Required) The URL associated with this Webhook.
            status (str): The webhook status. Default value is `enabled`. One
                of: `enabled` or `disabled`
            version (str): The webhook version. Default value is `v2` which
                includes all the latest fields. Version `v1` is legacy and may
                be removed in the future.

        Returns:
            Created87: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Webhooks')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('EventTypes')
                        .value(event_types))
            .form_param(Parameter()
                        .key('WebhookUrl')
                        .value(webhook_url))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .form_param(Parameter()
                        .key('Version')
                        .value(version))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created87.from_dictionary)
        ).execute()

    def list_webhook_1(self,
                       page_size,
                       service_sid,
                       accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Webhooks.

        Retrieve a list of all Webhooks for a Service.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            accept (str): The request header parameter.

        Returns:
            OK310: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Webhooks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK310.from_dictionary)
        ).execute()

    def update_webhook_1(self,
                         service_sid,
                         sid,
                         accept,
                         friendly_name,
                         event_types,
                         webhook_url,
                         status,
                         version):
        """Does a POST request to /v2/Services/{ServiceSid}/Webhooks/{Sid}.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Webhook resource to update.
            accept (str): The request header parameter.
            friendly_name (str): The string that you assigned to describe the
                webhook. **This value should not contain PII.**
            event_types (str): The array of events that this Webhook is
                subscribed to. Possible event types: `*, factor.deleted,
                factor.created, factor.verified, challenge.approved,
                challenge.denied`
            webhook_url (str): The URL associated with this Webhook.
            status (str): The webhook status. Default value is `enabled`. One
                of: `enabled` or `disabled`
            version (str): The webhook version. Default value is `v2` which
                includes all the latest fields. Version `v1` is legacy and may
                be removed in the future.

        Returns:
            OK311: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Webhooks/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('EventTypes')
                        .value(event_types))
            .form_param(Parameter()
                        .key('WebhookUrl')
                        .value(webhook_url))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .form_param(Parameter()
                        .key('Version')
                        .value(version))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK311.from_dictionary)
        ).execute()

    def delete_webhook_1(self,
                         service_sid,
                         sid):
        """Does a DELETE request to /v2/Services/{ServiceSid}/Webhooks/{Sid}.

        Delete a specific Webhook.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Webhook resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Webhooks/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_webhook_1(self,
                        service_sid,
                        sid,
                        accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Webhooks/{Sid}.

        Fetch a specific Webhook.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Webhook resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK311: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Webhooks/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK311.from_dictionary)
        ).execute()
