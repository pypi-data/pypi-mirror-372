# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_160 import OK160
from twilioapiexplorer.models.created_46 import Created46
from twilioapiexplorer.models.ok_162 import OK162
from twilioapiexplorer.models.ok_163 import OK163
from twilioapiexplorer.models.created_47 import Created47
from twilioapiexplorer.models.ok_165 import OK165
from twilioapiexplorer.models.ok_166 import OK166
from twilioapiexplorer.models.ok_168 import OK168


class SyncListsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(SyncListsController, self).__init__(config)

    def fetch_sync_list(self,
                        service_sid,
                        sid,
                        accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Lists/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List resource to fetch.
            sid (str): (Required) The SID of the Sync List resource to fetch.
                Can be the Sync List resource's `sid` or its `unique_name`.
            accept (str): The request header parameter.

        Returns:
            OK160: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK160.from_dictionary)
        ).execute()

    def delete_sync_list(self,
                         service_sid,
                         sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Lists/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List resource to delete.
            sid (str): (Required) The SID of the Sync List resource to delete.
                Can be the Sync List resource's `sid` or its `unique_name`.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_sync_list(self,
                         service_sid,
                         sid,
                         accept,
                         ttl,
                         collection_ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Lists/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List resource to update.
            sid (str): (Required) The SID of the Sync List resource to update.
                Can be the Sync List resource's `sid` or its `unique_name`.
            accept (str): The request header parameter.
            ttl (int): An alias for `collection_ttl`. If both are provided,
                this value is ignored.
            collection_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Sync List expires (time-to-live) and is
                deleted.

        Returns:
            OK160: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('CollectionTtl')
                        .value(collection_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK160.from_dictionary)
        ).execute()

    def create_sync_list(self,
                         service_sid,
                         accept,
                         unique_name,
                         ttl,
                         collection_ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Lists.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) to
                create the new Sync List in.
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. This value must be unique within its
                Service and it can be up to 320 characters long. The
                `unique_name` value can be used as an alternative to the `sid`
                in the URL path to address the resource.
            ttl (int): Alias for collection_ttl. If both are provided, this
                value is ignored.
            collection_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Sync List expires (time-to-live) and is
                deleted.

        Returns:
            Created46: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('CollectionTtl')
                        .value(collection_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created46.from_dictionary)
        ).execute()

    def list_sync_list(self,
                       page_size,
                       service_sid,
                       accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Lists.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List resources to read.
            accept (str): The request header parameter.

        Returns:
            OK162: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK162.from_dictionary)
        ).execute()

    def fetch_sync_list_item(self,
                             service_sid,
                             list_sid,
                             index,
                             accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List Item resource to fetch.
            list_sid (str): (Required) The SID of the Sync List with the Sync
                List Item resource to fetch. Can be the Sync List resource's
                `sid` or its `unique_name`.
            index (int): (Required) The index of the Sync List Item resource
                to fetch.
            accept (str): The request header parameter.

        Returns:
            OK163: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ListSid')
                            .value(list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Index')
                            .value(index)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK163.from_dictionary)
        ).execute()

    def delete_sync_list_item(self,
                              service_sid,
                              list_sid,
                              index,
                              if_match):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List Item resource to delete.
            list_sid (str): (Required) The SID of the Sync List with the Sync
                List Item resource to delete. Can be the Sync List resource's
                `sid` or its `unique_name`.
            index (int): (Required) The index of the Sync List Item resource
                to delete.
            if_match (str): If provided, applies this mutation if (and only
                if) the “revision” field of this [map item] matches the
                provided value. This matches the semantics of (and is
                implemented with) the HTTP [If-Match
                header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Heade
                rs/If-Match).

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ListSid')
                            .value(list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Index')
                            .value(index)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('If-Match')
                          .value(if_match))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_sync_list_item(self,
                              service_sid,
                              list_sid,
                              index,
                              if_match,
                              accept,
                              ttl,
                              item_ttl,
                              collection_ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List Item resource to update.
            list_sid (str): (Required) The SID of the Sync List with the Sync
                List Item resource to update. Can be the Sync List resource's
                `sid` or its `unique_name`.
            index (int): (Required) The index of the Sync List Item resource
                to update.
            if_match (str): If provided, applies this mutation if (and only
                if) the “revision” field of this [map item] matches the
                provided value. This matches the semantics of (and is
                implemented with) the HTTP [If-Match
                header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Heade
                rs/If-Match).
            accept (str): The request header parameter.
            ttl (int): An alias for `item_ttl`. If both parameters are
                provided, this value is ignored.
            item_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the List Item expires (time-to-live) and is
                deleted.
            collection_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the List Item's parent Sync List expires
                (time-to-live) and is deleted. This parameter can only be used
                when the List Item's `data` or `ttl` is updated in the same
                request.

        Returns:
            OK163: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ListSid')
                            .value(list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Index')
                            .value(index)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('If-Match')
                          .value(if_match))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('ItemTtl')
                        .value(item_ttl))
            .form_param(Parameter()
                        .key('CollectionTtl')
                        .value(collection_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK163.from_dictionary)
        ).execute()

    def create_sync_list_item(self,
                              service_sid,
                              list_sid,
                              accept,
                              ttl,
                              item_ttl,
                              collection_ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Lists/{ListSid}/Items.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) to
                create the new List Item in.
            list_sid (str): (Required) The SID of the Sync List to add the new
                List Item to. Can be the Sync List resource's `sid` or its
                `unique_name`.
            accept (str): The request header parameter.
            ttl (int): An alias for `item_ttl`. If both parameters are
                provided, this value is ignored.
            item_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the List Item expires (time-to-live) and is
                deleted.
            collection_ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the List Item's parent Sync List expires
                (time-to-live) and is deleted.

        Returns:
            Created47: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{ListSid}/Items')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ListSid')
                            .value(list_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .form_param(Parameter()
                        .key('ItemTtl')
                        .value(item_ttl))
            .form_param(Parameter()
                        .key('CollectionTtl')
                        .value(collection_ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created47.from_dictionary)
        ).execute()

    def list_sync_list_item(self,
                            order,
                            mfrom,
                            bounds,
                            page_size,
                            service_sid,
                            list_sid,
                            accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Lists/{ListSid}/Items.

        Args:
            order (str): How to order the List Items returned by their `index`
                value. Can be: `asc` (ascending) or `desc` (descending) and
                the default is ascending.
            mfrom (str): The `index` of the first Sync List Item resource to
                read. See also `bounds`.
            bounds (str): Whether to include the List Item referenced by the
                `from` parameter. Can be: `inclusive` to include the List Item
                referenced by the `from` parameter or `exclusive` to start
                with the next List Item. The default value is `inclusive`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the List Item resources to read.
            list_sid (str): (Required) The SID of the Sync List with the List
                Items to read. Can be the Sync List resource's `sid` or its
                `unique_name`.
            accept (str): The request header parameter.

        Returns:
            OK165: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{ListSid}/Items')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Order')
                         .value(order))
            .query_param(Parameter()
                         .key('From')
                         .value(mfrom))
            .query_param(Parameter()
                         .key('Bounds')
                         .value(bounds))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ListSid')
                            .value(list_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK165.from_dictionary)
        ).execute()

    def fetch_sync_list_permission(self,
                                   service_sid,
                                   list_sid,
                                   identity,
                                   accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}.

        Fetch a specific Sync List Permission.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List Permission resource to fetch.
            list_sid (str): (Required) The SID of the Sync List with the Sync
                List Permission resource to fetch. Can be the Sync List
                resource's `sid` or its `unique_name`.
            identity (str): (Required) The application-defined string that
                uniquely identifies the User's Sync List Permission resource
                to fetch.
            accept (str): The request header parameter.

        Returns:
            OK166: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ListSid')
                            .value(list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK166.from_dictionary)
        ).execute()

    def delete_sync_list_permission(self,
                                    service_sid,
                                    list_sid,
                                    identity):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}.

        Delete a specific Sync List Permission.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List Permission resource to delete.
            list_sid (str): (Required) The SID of the Sync List with the Sync
                List Permission resource to delete. Can be the Sync List
                resource's `sid` or its `unique_name`.
            identity (str): (Required) The application-defined string that
                uniquely identifies the User's Sync List Permission resource
                to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ListSid')
                            .value(list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_sync_list_permission(self,
                                    service_sid,
                                    list_sid,
                                    identity,
                                    accept,
                                    read,
                                    write,
                                    manage):
        """Does a POST request to /v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}.

        Update an identity's access to a specific Sync List.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List Permission resource to update.
            list_sid (str): (Required) The SID of the Sync List with the Sync
                List Permission resource to update. Can be the Sync List
                resource's `sid` or its `unique_name`.
            identity (str): (Required) The application-defined string that
                uniquely identifies the User's Sync List Permission resource
                to update.
            accept (str): The request header parameter.
            read (bool): (Required) Whether the identity can read the Sync
                List and its Items. Default value is `false`.
            write (bool): (Required) Whether the identity can create, update,
                and delete Items in the Sync List. Default value is `false`.
            manage (bool): (Required) Whether the identity can delete the Sync
                List. Default value is `false`.

        Returns:
            OK166: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ListSid')
                            .value(list_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Read')
                        .value(read))
            .form_param(Parameter()
                        .key('Write')
                        .value(write))
            .form_param(Parameter()
                        .key('Manage')
                        .value(manage))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK166.from_dictionary)
        ).execute()

    def list_sync_list_permission(self,
                                  page_size,
                                  service_sid,
                                  list_sid,
                                  accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions.

        Retrieve a list of all Permissions applying to a Sync List.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Sync List Permission resources to read.
            list_sid (str): (Required) The SID of the Sync List with the Sync
                List Permission resources to read. Can be the Sync List
                resource's `sid` or its `unique_name`.
            accept (str): The request header parameter.

        Returns:
            OK168: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Lists/{ListSid}/Permissions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('ListSid')
                            .value(list_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK168.from_dictionary)
        ).execute()
