# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_113 import OK113
from twilioapiexplorer.models.created_31 import Created31
from twilioapiexplorer.models.ok_115 import OK115


class ChatChannelsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ChatChannelsController, self).__init__(config)

    def fetch_channel(self,
                      service_sid,
                      sid,
                      accept):
        """Does a GET request to /Services/{ServiceSid}/Channels/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to fetch the Channel resource from.
            sid (str): (Required) The SID of the Channel resource to fetch.
                This value can be either the `sid` or the `unique_name` of the
                Channel resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK113: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Channels/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK113.from_dictionary)
        ).execute()

    def delete_channel(self,
                       service_sid,
                       sid,
                       x_twilio_webhook_enabled):
        """Does a DELETE request to /Services/{ServiceSid}/Channels/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to delete the resource from.
            sid (str): (Required) The SID of the Channel resource to delete. 
                This value can be either the `sid` or the `unique_name` of the
                Channel resource to delete.
            x_twilio_webhook_enabled (bool): The X-Twilio-Webhook-Enabled HTTP
                request header

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Channels/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-Twilio-Webhook-Enabled')
                          .value(x_twilio_webhook_enabled))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_channel(self,
                       service_sid,
                       sid,
                       x_twilio_webhook_enabled,
                       accept,
                       friendly_name,
                       unique_name,
                       attributes,
                       date_created,
                       date_updated,
                       created_by):
        """Does a POST request to /Services/{ServiceSid}/Channels/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to update the Channel resource in.
            sid (str): (Required) The SID of the Channel resource to update.
                This value can be either the `sid` or the `unique_name` of the
                Channel resource to update.
            x_twilio_webhook_enabled (str): The X-Twilio-Webhook-Enabled HTTP
                request header
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 256 characters long.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. It can be used to address the
                resource in place of the resource's `sid` in the URL. This
                value must be 256 characters or less in length and unique
                within the Service.
            attributes (str): A valid JSON string that contains
                application-specific data.
            date_created (str): The date, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format, to
                assign to the resource as the date it was created. The default
                value is the current time set by the Chat service.  Note that
                this should only be used in cases where a Channel is being
                recreated from a backup/separate source.
            date_updated (str): The date, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format, to
                assign to the resource as the date it was last updated.
            created_by (str): The `identity` of the User that created the
                channel. Default is: `system`.

        Returns:
            OK113: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Channels/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-Twilio-Webhook-Enabled')
                          .value(x_twilio_webhook_enabled))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('Attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('DateCreated')
                        .value(date_created))
            .form_param(Parameter()
                        .key('DateUpdated')
                        .value(date_updated))
            .form_param(Parameter()
                        .key('CreatedBy')
                        .value(created_by))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK113.from_dictionary)
        ).execute()

    def create_channel(self,
                       service_sid,
                       x_twilio_webhook_enabled,
                       accept,
                       friendly_name,
                       unique_name,
                       attributes,
                       mtype,
                       date_created,
                       date_updated,
                       created_by):
        """Does a POST request to /v2/Services/{ServiceSid}/Channels.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to create the Channel resource under.
            x_twilio_webhook_enabled (str): The X-Twilio-Webhook-Enabled HTTP
                request header
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the new resource. It can be up to 64 characters long.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. It can be used to address the
                resource in place of the Channel resource's `sid` in the URL.
                This value must be 64 characters or less in length and be
                unique within the Service.
            attributes (str): A valid JSON string that contains
                application-specific data.
            mtype (str): The visibility of the channel. Can be: `public` or
                `private` and defaults to `public`.
            date_created (str): The date, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format, to
                assign to the resource as the date it was created. The default
                value is the current time set by the Chat service.  Note that
                this should only be used in cases where a Channel is being
                recreated from a backup/separate source.
            date_updated (str): The date, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format, to
                assign to the resource as the date it was last updated. The
                default value is `null`. Note that this parameter should only
                be used in cases where a Channel is being recreated from a
                backup/separate source  and where a Message was previously
                updated.
            created_by (str): The `identity` of the User that created the
                channel. Default is: `system`.

        Returns:
            Created31: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Channels')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('X-Twilio-Webhook-Enabled')
                          .value(x_twilio_webhook_enabled))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('Attributes')
                        .value(attributes))
            .form_param(Parameter()
                        .key('Type')
                        .value(mtype))
            .form_param(Parameter()
                        .key('DateCreated')
                        .value(date_created))
            .form_param(Parameter()
                        .key('DateUpdated')
                        .value(date_updated))
            .form_param(Parameter()
                        .key('CreatedBy')
                        .value(created_by))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created31.from_dictionary)
        ).execute()

    def list_channel(self,
                     mtype,
                     page_size,
                     service_sid,
                     accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Channels.

        Args:
            mtype (str): The visibility of the Channels to read. Can be:
                `public` or `private` and defaults to `public`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to read the Channel resources from.
            accept (str): The request header parameter.

        Returns:
            OK115: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Channels')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Type')
                         .value(mtype))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK115.from_dictionary)
        ).execute()
