# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created import Created
from twilioapiexplorer.models.ok import OK


class ProgrammableSMSController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ProgrammableSMSController, self).__init__(config)

    def create_message(self,
                       account_sid,
                       accept,
                       to,
                       status_callback,
                       application_sid,
                       max_price,
                       provide_feedback,
                       attempt,
                       validity_period,
                       force_delivery,
                       content_retention,
                       address_retention,
                       smart_encoded,
                       persistent_action,
                       shorten_urls,
                       schedule_type,
                       send_at,
                       send_as_mms,
                       content_sid,
                       content_variables,
                       mfrom,
                       messaging_service_sid,
                       body,
                       media_url):
        """Does a POST request to /{AccountSid}/Messages.json.

        Args:
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                will create the resource.
            accept (str): The request header parameter.
            to (str): (Required) The destination phone number in
                [E.164](https://www.twilio.com/docs/glossary/what-e164) format
                for SMS/MMS or [Channel user
                address](https://www.twilio.com/docs/sms/channels#channel-addre
                sses) for other 3rd-party channels.
            status_callback (str): The URL we should call using the
                `status_callback_method` to send status information to your
                application. If specified, we POST these message status
                changes to the URL: `queued`, `failed`, `sent`, `delivered`,
                or `undelivered`. Twilio will POST its [standard request
                parameters](https://www.twilio.com/docs/sms/twiml#request-param
                eters) as well as some additional parameters including
                `MessageSid`, `MessageStatus`, and `ErrorCode`. If you include
                this parameter with the `messaging_service_sid`, we use this
                URL instead of the Status Callback URL of the [Messaging
                Service](https://www.twilio.com/docs/sms/services/api). URLs
                must contain a valid hostname and underscores are not allowed.
            application_sid (str): The SID of the application that should
                receive message status. We POST a `message_sid` parameter and
                a `message_status` parameter with a value of `sent` or
                `failed` to the
                [application](https://www.twilio.com/docs/usage/api/application
                s)'s `message_status_callback`. If a `status_callback`
                parameter is also passed, it will be ignored and the
                application's `message_status_callback` parameter will be used.
            max_price (float): The maximum total price in US dollars that you
                will pay for the message to be delivered. Can be a decimal
                value that has up to 4 decimal places. All messages are queued
                for delivery and the message cost is checked before the
                message is sent. If the cost exceeds `max_price`, the message
                will fail and a status of `Failed` is sent to the status
                callback. If `MaxPrice` is not set, the message cost is not
                checked.
            provide_feedback (bool): Whether to confirm delivery of the
                message. Set this value to `true` if you are sending messages
                that have a trackable user action and you intend to confirm
                delivery of the message using the [Message Feedback
                API](https://www.twilio.com/docs/sms/api/message-feedback-resou
                rce). This parameter is `false` by default.
            attempt (int): Total number of attempts made ( including this ) to
                send out the message regardless of the provider used
            validity_period (int): How long in seconds the message can remain
                in our outgoing message queue. After this period elapses, the
                message fails and we call your status callback. Can be between
                1 and the default value of 14,400 seconds. After a message has
                been accepted by a carrier, however, we cannot guarantee that
                the message will not be queued after this period. We recommend
                that this value be at least 5 seconds.
            force_delivery (bool): Reserved
            content_retention (str): Determines if the message content can be
                stored or redacted based on privacy settings
            address_retention (str): Determines if the address can be stored
                or obfuscated based on privacy settings
            smart_encoded (bool): Whether to detect Unicode characters that
                have a similar GSM-7 character and replace them. Can be:
                `true` or `false`.
            persistent_action (str): Rich actions for Channels Messages.
            shorten_urls (bool): Determines the usage of Click Tracking.
                Setting it to `true` will instruct Twilio to replace all links
                in the Message with a shortened version based on the
                associated Domain Sid and track clicks on them. If this
                parameter is not set on an API call, we will use the value set
                on the Messaging Service. If this parameter is not set and the
                value is not configured on the Messaging Service used this
                will default to `false`.
            schedule_type (str): Indicates your intent to schedule a message.
                Pass the value `fixed` to schedule a message at a fixed time.
            send_at (str): The time that Twilio will send the message. Must be
                in ISO 8601 format.
            send_as_mms (bool): If set to True, Twilio will deliver the
                message as a single MMS message, regardless of the presence of
                media.
            content_sid (str): The SID of the Content object returned at
                Content API content create time
                (https://www.twilio.com/docs/content-api/create-and-send-your-f
                irst-content-api-template#create-a-template). If this
                parameter is not specified, then the Content API will not be
                utilized.
            content_variables (str): Key-value pairs of variable names to
                substitution values, used alongside a content_sid. If not
                specified, Content API will default to the default variables
                defined at create time.
            mfrom (str): A Twilio phone number in
                [E.164](https://www.twilio.com/docs/glossary/what-e164)
                format, an [alphanumeric sender
                ID](https://www.twilio.com/docs/sms/send-messages#use-an-alphan
                umeric-sender-id), or a [Channel Endpoint
                address](https://www.twilio.com/docs/sms/channels#channel-addre
                sses) that is enabled for the type of message you want to
                send. Phone numbers or [short
                codes](https://www.twilio.com/docs/sms/api/short-code)
                purchased from Twilio also work here. You cannot, for example,
                spoof messages from a private cell phone number. If you are
                using `messaging_service_sid`, this parameter must be empty.
            messaging_service_sid (str): The SID of the [Messaging
                Service](https://www.twilio.com/docs/sms/services#send-a-messag
                e-with-copilot) you want to associate with the Message. Set
                this parameter to use the [Messaging Service Settings and
                Copilot Features](https://www.twilio.com/console/sms/services)
                you have configured and leave the `from` parameter empty. When
                only this parameter is set, Twilio will use your enabled
                Copilot Features to select the `from` phone number for
                delivery.
            body (str): The text of the message you want to send. Can be up to
                1,600 characters in length.
            media_url (str): The URL of the media to send with the message.
                The media can be of type `gif`, `png`, and `jpeg` and will be
                formatted correctly on the recipient's device. The media size
                limit is 5MB for supported file types (JPEG, PNG, GIF) and
                500KB for [other
                types](https://www.twilio.com/docs/sms/accepted-mime-types) of
                accepted media. To send more than one image in the message
                body, provide multiple `media_url` parameters in the POST
                request. You can include up to 10 `media_url` parameters per
                message. You can send images in an SMS message in only the US
                and Canada.

        Returns:
            Created: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Messages.json')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('To')
                        .value(to))
            .form_param(Parameter()
                        .key('StatusCallback')
                        .value(status_callback))
            .form_param(Parameter()
                        .key('ApplicationSid')
                        .value(application_sid))
            .form_param(Parameter()
                        .key('MaxPrice')
                        .value(max_price))
            .form_param(Parameter()
                        .key('ProvideFeedback')
                        .value(provide_feedback))
            .form_param(Parameter()
                        .key('Attempt')
                        .value(attempt))
            .form_param(Parameter()
                        .key('ValidityPeriod')
                        .value(validity_period))
            .form_param(Parameter()
                        .key('ForceDelivery')
                        .value(force_delivery))
            .form_param(Parameter()
                        .key('ContentRetention')
                        .value(content_retention))
            .form_param(Parameter()
                        .key('AddressRetention')
                        .value(address_retention))
            .form_param(Parameter()
                        .key('SmartEncoded')
                        .value(smart_encoded))
            .form_param(Parameter()
                        .key('PersistentAction')
                        .value(persistent_action))
            .form_param(Parameter()
                        .key('ShortenUrls')
                        .value(shorten_urls))
            .form_param(Parameter()
                        .key('ScheduleType')
                        .value(schedule_type))
            .form_param(Parameter()
                        .key('SendAt')
                        .value(send_at))
            .form_param(Parameter()
                        .key('SendAsMms')
                        .value(send_as_mms))
            .form_param(Parameter()
                        .key('ContentSid')
                        .value(content_sid))
            .form_param(Parameter()
                        .key('ContentVariables')
                        .value(content_variables))
            .form_param(Parameter()
                        .key('From')
                        .value(mfrom))
            .form_param(Parameter()
                        .key('MessagingServiceSid')
                        .value(messaging_service_sid))
            .form_param(Parameter()
                        .key('Body')
                        .value(body))
            .form_param(Parameter()
                        .key('MediaUrl')
                        .value(media_url))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created.from_dictionary)
        ).execute()

    def list_message(self,
                     to,
                     mfrom,
                     date_sent,
                     date_sent_query,
                     date_sent_query_query,
                     page_size,
                     account_sid,
                     accept):
        """Does a GET request to /{AccountSid}/Messages.json.

        Args:
            to (str): Read messages sent to only this phone number.
            mfrom (str): Read messages sent from only this phone number or
                alphanumeric sender ID.
            date_sent (str): The date of the messages to show. Specify a date
                as `YYYY-MM-DD` in GMT to read only messages sent on this
                date. For example: `2009-07-06`. You can also specify an
                inequality, such as `DateSent<=YYYY-MM-DD`, to read messages
                sent on or before midnight on a date, and
                `DateSent>=YYYY-MM-DD` to read messages sent on or after
                midnight on a date.
            date_sent_query (str): The date of the messages to show. Specify a
                date as `YYYY-MM-DD` in GMT to read only messages sent on this
                date. For example: `2009-07-06`. You can also specify an
                inequality, such as `DateSent<=YYYY-MM-DD`, to read messages
                sent on or before midnight on a date, and
                `DateSent>=YYYY-MM-DD` to read messages sent on or after
                midnight on a date.
            date_sent_query_query (str): The date of the messages to show.
                Specify a date as `YYYY-MM-DD` in GMT to read only messages
                sent on this date. For example: `2009-07-06`. You can also
                specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read
                messages sent on or before midnight on a date, and
                `DateSent>=YYYY-MM-DD` to read messages sent on or after
                midnight on a date.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            account_sid (str): (Required) The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) that
                created the Message resources to read.
            accept (str): The request header parameter.

        Returns:
            OK: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_4)
            .path('/{AccountSid}/Messages.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('To')
                         .value(to))
            .query_param(Parameter()
                         .key('From')
                         .value(mfrom))
            .query_param(Parameter()
                         .key('DateSent')
                         .value(date_sent))
            .query_param(Parameter()
                         .key('DateSent<')
                         .value(date_sent_query))
            .query_param(Parameter()
                         .key('DateSent>')
                         .value(date_sent_query_query))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('AccountSid')
                            .value(account_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK.from_dictionary)
        ).execute()
