# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_119 import OK119
from twilioapiexplorer.models.ok_120 import OK120
from twilioapiexplorer.models.ok_121 import OK121
from twilioapiexplorer.models.ok_122 import OK122


class ChatBindingsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ChatBindingsController, self).__init__(config)

    def list_binding(self,
                     binding_type,
                     identity,
                     page_size,
                     service_sid,
                     accept):
        """Does a GET request to /Services/{ServiceSid}/Bindings.

        Args:
            binding_type (str): The push technology used by the Binding
                resources to read.  Can be: `apn`, `gcm`, or `fcm`.  See [push
                notification
                configuration](https://www.twilio.com/docs/chat/push-notificati
                on-configuration) for more info.
            identity (str): The
                [User](https://www.twilio.com/docs/chat/rest/user-resource)'s
                `identity` value of the resources to read. See [access
                tokens](https://www.twilio.com/docs/chat/create-tokens) for
                more details.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to read the Binding resources from.
            accept (str): The request header parameter.

        Returns:
            OK119: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Bindings')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('BindingType')
                         .value(binding_type))
            .query_param(Parameter()
                         .key('Identity')
                         .value(identity))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK119.from_dictionary)
        ).execute()

    def fetch_binding(self,
                      service_sid,
                      sid,
                      accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Bindings/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to fetch the Binding resource from.
            sid (str): (Required) The SID of the Binding resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK120: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Bindings/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK120.from_dictionary)
        ).execute()

    def delete_binding(self,
                       service_sid,
                       sid):
        """Does a DELETE request to /v2/Services/{ServiceSid}/Bindings/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to delete the Binding resource from.
            sid (str): (Required) The SID of the Binding resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Bindings/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_user_binding(self,
                          binding_type,
                          page_size,
                          service_sid,
                          user_sid,
                          accept):
        """Does a GET request to /Services/{ServiceSid}/Users/{UserSid}/Bindings.

        Args:
            binding_type (str): The push technology used by the User Binding
                resources to read. Can be: `apn`, `gcm`, or `fcm`.  See [push
                notification
                configuration](https://www.twilio.com/docs/chat/push-notificati
                on-configuration) for more info.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to read the User Binding resources from.
            user_sid (str): (Required) The SID of the
                [User](https://www.twilio.com/docs/chat/rest/user-resource)
                with the User Binding resources to read.  See [push
                notification
                configuration](https://www.twilio.com/docs/chat/push-notificati
                on-configuration) for more info.
            accept (str): The request header parameter.

        Returns:
            OK121: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{ServiceSid}/Users/{UserSid}/Bindings')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('BindingType')
                         .value(binding_type))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('UserSid')
                            .value(user_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK121.from_dictionary)
        ).execute()

    def fetch_user_binding(self,
                           service_sid,
                           user_sid,
                           sid,
                           accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to fetch the User Binding resource from.
            user_sid (str): (Required) The SID of the
                [User](https://www.twilio.com/docs/chat/rest/user-resource)
                with the User Binding resource to fetch.  See [push
                notification
                configuration](https://www.twilio.com/docs/chat/push-notificati
                on-configuration) for more info.
            sid (str): (Required) The SID of the User Binding resource to
                fetch.
            accept (str): The request header parameter.

        Returns:
            OK122: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('UserSid')
                            .value(user_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK122.from_dictionary)
        ).execute()

    def delete_user_binding(self,
                            service_sid,
                            user_sid,
                            sid):
        """Does a DELETE request to /v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/chat/rest/service-resourc
                e) to delete the User Binding resource from.
            user_sid (str): (Required) The SID of the
                [User](https://www.twilio.com/docs/chat/rest/user-resource)
                with the User Binding resources to delete.  See [push
                notification
                configuration](https://www.twilio.com/docs/chat/push-notificati
                on-configuration) for more info.
            sid (str): (Required) The SID of the User Binding resource to
                delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Users/{UserSid}/Bindings/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('UserSid')
                            .value(user_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
