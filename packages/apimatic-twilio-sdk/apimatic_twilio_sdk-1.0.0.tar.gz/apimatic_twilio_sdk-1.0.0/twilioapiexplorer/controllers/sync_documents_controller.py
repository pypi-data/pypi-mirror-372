# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_151 import OK151
from twilioapiexplorer.models.created_43 import Created43
from twilioapiexplorer.models.ok_153 import OK153


class SyncDocumentsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(SyncDocumentsController, self).__init__(config)

    def fetch_document(self,
                       sid,
                       accept):
        """Does a GET request to /{Sid}.

        Args:
            sid (str): (Required) The SID of the Document resource to fetch.
                Can be the Document resource's `sid` or its `unique_name`.
            accept (str): The request header parameter.

        Returns:
            OK151: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_13)
            .path('/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK151.from_dictionary)
        ).execute()

    def delete_document(self,
                        sid):
        """Does a DELETE request to /{Sid}.

        Args:
            sid (str): (Required) The SID of the Document resource to delete.
                Can be the Document resource's `sid` or its `unique_name`.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_13)
            .path('/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_document(self,
                        sid,
                        if_match,
                        accept,
                        ttl):
        """Does a POST request to /{Sid}.

        Args:
            sid (str): (Required) The SID of the Document resource to update.
                Can be the Document resource's `sid` or its `unique_name`.
            if_match (str): The If-Match HTTP request header
            accept (str): The request header parameter.
            ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Sync Document expires and is deleted
                (time-to-live).

        Returns:
            OK151: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_13)
            .path('/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('If-Match')
                          .value(if_match))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK151.from_dictionary)
        ).execute()

    def create_document(self,
                        service_sid,
                        accept,
                        unique_name,
                        ttl):
        """Does a POST request to /v1/Services/{ServiceSid}/Documents.

        Args:
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) to
                create the new Document resource in.
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the Sync Document
            ttl (int): How long, [in
                seconds](https://www.twilio.com/docs/sync/limits#sync-payload-l
                imits), before the Sync Document expires and is deleted (the
                Sync Document's time-to-live).

        Returns:
            Created43: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Documents')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('Ttl')
                        .value(ttl))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created43.from_dictionary)
        ).execute()

    def list_document(self,
                      page_size,
                      service_sid,
                      accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Documents.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the [Sync
                Service](https://www.twilio.com/docs/sync/api/service) with
                the Document resources to read.
            accept (str): The request header parameter.

        Returns:
            OK153: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Documents')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK153.from_dictionary)
        ).execute()
