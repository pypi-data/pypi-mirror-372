# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_333 import OK333
from twilioapiexplorer.models.created_92 import Created92
from twilioapiexplorer.models.ok_334 import OK334
from twilioapiexplorer.models.ok_336 import OK336
from twilioapiexplorer.models.ok_337 import OK337


class AssetsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(AssetsController, self).__init__(config)

    def list_asset(self,
                   page_size,
                   service_sid,
                   accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Assets.

        Retrieve a list of all Assets.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the Service to read the
                Asset resources from.
            accept (str): The request header parameter.

        Returns:
            OK333: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Assets')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK333.from_dictionary)
        ).execute()

    def create_asset(self,
                     service_sid,
                     accept,
                     friendly_name):
        """Does a POST request to /v1/Services/{ServiceSid}/Assets.

        Create a new Asset resource.

        Args:
            service_sid (str): (Required) The SID of the Service to create the
                Asset resource under.
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the Asset resource. It can be a maximum of
                255 characters.

        Returns:
            Created92: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Assets')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created92.from_dictionary)
        ).execute()

    def fetch_asset(self,
                    service_sid,
                    sid,
                    accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Assets/{Sid}.

        Retrieve a specific Asset resource.

        Args:
            service_sid (str): (Required) The SID of the Service to fetch the
                Asset resource from.
            sid (str): (Required) The SID that identifies the Asset resource
                to fetch.
            accept (str): The request header parameter.

        Returns:
            OK334: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Assets/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK334.from_dictionary)
        ).execute()

    def delete_asset(self,
                     service_sid,
                     sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Assets/{Sid}.

        Delete an Asset resource.

        Args:
            service_sid (str): (Required) The SID of the Service to delete the
                Asset resource from.
            sid (str): (Required) The SID that identifies the Asset resource
                to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Assets/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_asset(self,
                     service_sid,
                     sid,
                     accept,
                     friendly_name):
        """Does a POST request to /v1/Services/{ServiceSid}/Assets/{Sid}.

        Update a specific Asset resource.

        Args:
            service_sid (str): (Required) The SID of the Service to update the
                Asset resource from.
            sid (str): (Required) The SID that identifies the Asset resource
                to update.
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the Asset resource. It can be a maximum of
                255 characters.

        Returns:
            OK334: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Assets/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK334.from_dictionary)
        ).execute()

    def list_asset_version(self,
                           page_size,
                           service_sid,
                           asset_sid,
                           accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions.

        Retrieve a list of all Asset Versions.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the Service to read the
                Asset Version resource from.
            asset_sid (str): (Required) The SID of the Asset resource that is
                the parent of the Asset Version resources to read.
            accept (str): The request header parameter.

        Returns:
            OK336: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('AssetSid')
                            .value(asset_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK336.from_dictionary)
        ).execute()

    def fetch_asset_version(self,
                            service_sid,
                            asset_sid,
                            sid,
                            accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions/{Sid}.

        Retrieve a specific Asset Version.

        Args:
            service_sid (str): (Required) The SID of the Service to fetch the
                Asset Version resource from.
            asset_sid (str): (Required) The SID of the Asset resource that is
                the parent of the Asset Version resource to fetch.
            sid (str): (Required) The SID of the Asset Version resource to
                fetch.
            accept (str): The request header parameter.

        Returns:
            OK337: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Assets/{AssetSid}/Versions/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('AssetSid')
                            .value(asset_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK337.from_dictionary)
        ).execute()
