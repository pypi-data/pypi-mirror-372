# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_63 import OK63
from twilioapiexplorer.models.created_18 import Created18
from twilioapiexplorer.models.ok_86 import OK86
from twilioapiexplorer.models.ok_88 import OK88
from twilioapiexplorer.models.ok_89 import OK89
from twilioapiexplorer.models.ok_83 import OK83


class WorkspacesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(WorkspacesController, self).__init__(config)

    def list_workspace(self,
                       friendly_name,
                       page_size,
                       accept):
        """Does a GET request to /Workspaces.

        Args:
            friendly_name (str): The `friendly_name` of the Workspace
                resources to read. For example `Customer Support` or `2014
                Election Campaign`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK63: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FriendlyName')
                         .value(friendly_name))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK63.from_dictionary)
        ).execute()

    def create_workspace(self,
                         accept,
                         friendly_name,
                         event_callback_url,
                         events_filter,
                         multi_task_enabled,
                         template,
                         prioritize_queue_order):
        """Does a POST request to /Workspaces.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the Workspace resource. It can be up to 64
                characters long. For example: `Customer Support` or `2014
                Election Campaign`.
            event_callback_url (str): The URL we should call when an event
                occurs. If provided, the Workspace will publish events to this
                URL, for example, to collect data for reporting. See
                [Workspace
                Events](https://www.twilio.com/docs/taskrouter/api/event) for
                more information. This parameter supports Twilio's [Webhooks
                (HTTP callbacks) Connection
                Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-
                connection-overrides).
            events_filter (str): The list of Workspace events for which to
                call event_callback_url. For example, if
                `EventsFilter=task.created, task.canceled,
                worker.activity.update`, then TaskRouter will call
                event_callback_url only when a task is created, canceled, or a
                Worker activity is updated.
            multi_task_enabled (bool): Whether to enable multi-tasking. Can
                be: `true` to enable multi-tasking, or `false` to disable it.
                However, all workspaces should be created as multi-tasking.
                The default is `true`. Multi-tasking allows Workers to handle
                multiple Tasks simultaneously. When enabled (`true`), each
                Worker can receive parallel reservations up to the per-channel
                maximums defined in the Workers section. In single-tasking
                mode (legacy mode), each Worker will only receive a new
                reservation when the previous task is completed. Learn more at
                [Multitasking](https://www.twilio.com/docs/taskrouter/multitask
                ing).
            template (str): An available template name. Can be: `NONE` or
                `FIFO` and the default is `NONE`. Pre-configures the Workspace
                with the Workflow and Activities specified in the template.
                `NONE` will create a Workspace with only a set of default
                activities. `FIFO` will configure TaskRouter with a set of
                default activities and a single TaskQueue for first-in,
                first-out distribution, which can be useful when you are
                getting started with TaskRouter.
            prioritize_queue_order (str): The type of TaskQueue to prioritize
                when Workers are receiving Tasks from both types of
                TaskQueues. Can be: `LIFO` or `FIFO` and the default is
                `FIFO`. For more information, see [Queue
                Ordering](https://www.twilio.com/docs/taskrouter/queue-ordering
                -last-first-out-lifo).

        Returns:
            Created18: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('EventCallbackUrl')
                        .value(event_callback_url))
            .form_param(Parameter()
                        .key('EventsFilter')
                        .value(events_filter))
            .form_param(Parameter()
                        .key('MultiTaskEnabled')
                        .value(multi_task_enabled))
            .form_param(Parameter()
                        .key('Template')
                        .value(template))
            .form_param(Parameter()
                        .key('PrioritizeQueueOrder')
                        .value(prioritize_queue_order))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created18.from_dictionary)
        ).execute()

    def fetch_workspace(self,
                        accept,
                        sid):
        """Does a GET request to /Workspaces/{Sid}.

        Args:
            accept (str): The request header parameter.
            sid (str): The request template parameter.

        Returns:
            OK86: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK86.from_dictionary)
        ).execute()

    def update_workspace(self,
                         accept,
                         default_activity_sid,
                         event_callback_url,
                         events_filter,
                         friendly_name,
                         multi_task_enabled,
                         timeout_activity_sid,
                         prioritize_queue_order,
                         sid):
        """Does a POST request to /Workspaces/{Sid}.

        Args:
            accept (str): The request header parameter.
            default_activity_sid (str): The SID of the Activity that will be
                used when new Workers are created in the Workspace.
            event_callback_url (str): The URL we should call when an event
                occurs. See [Workspace
                Events](https://www.twilio.com/docs/taskrouter/api/event) for
                more information. This parameter supports Twilio's [Webhooks
                (HTTP callbacks) Connection
                Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-
                connection-overrides).
            events_filter (str): The list of Workspace events for which to
                call event_callback_url. For example if
                `EventsFilter=task.created,task.canceled,worker.activity.update
                `, then TaskRouter will call event_callback_url only when a
                task is created, canceled, or a Worker activity is updated.
            friendly_name (str): A descriptive string that you create to
                describe the Workspace resource. For example: `Sales Call
                Center` or `Customer Support Team`.
            multi_task_enabled (bool): Whether to enable multi-tasking. Can
                be: `true` to enable multi-tasking, or `false` to disable it.
                However, all workspaces should be maintained as multi-tasking.
                There is no default when omitting this parameter. A
                multi-tasking Workspace can't be updated to single-tasking
                unless it is not a Flex Project and another (legacy)
                single-tasking Workspace exists. Multi-tasking allows Workers
                to handle multiple Tasks simultaneously. In multi-tasking
                mode, each Worker can receive parallel reservations up to the
                per-channel maximums defined in the Workers section. In
                single-tasking mode (legacy mode), each Worker will only
                receive a new reservation when the previous task is completed.
                Learn more at
                [Multitasking](https://www.twilio.com/docs/taskrouter/multitask
                ing).
            timeout_activity_sid (str): The SID of the Activity that will be
                assigned to a Worker when a Task reservation times out without
                a response.
            prioritize_queue_order (str): The type of TaskQueue to prioritize
                when Workers are receiving Tasks from both types of
                TaskQueues. Can be: `LIFO` or `FIFO`. For more information,
                see [Queue
                Ordering](https://www.twilio.com/docs/taskrouter/queue-ordering
                -last-first-out-lifo).
            sid (str): The request template parameter.

        Returns:
            OK86: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('DefaultActivitySid')
                        .value(default_activity_sid))
            .form_param(Parameter()
                        .key('EventCallbackUrl')
                        .value(event_callback_url))
            .form_param(Parameter()
                        .key('EventsFilter')
                        .value(events_filter))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('MultiTaskEnabled')
                        .value(multi_task_enabled))
            .form_param(Parameter()
                        .key('TimeoutActivitySid')
                        .value(timeout_activity_sid))
            .form_param(Parameter()
                        .key('PrioritizeQueueOrder')
                        .value(prioritize_queue_order))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK86.from_dictionary)
        ).execute()

    def delete_workspace(self,
                         sid):
        """Does a DELETE request to /Workspaces/{Sid}.

        Args:
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_workspace_cumulative_statistics(self,
                                              end_date,
                                              minutes,
                                              start_date,
                                              task_channel,
                                              split_by_wait_time,
                                              accept,
                                              workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/CumulativeStatistics.

        Args:
            end_date (str): Only include usage that occurred on or before this
                date, specified in GMT as an [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
            minutes (int): Only calculate statistics since this many minutes
                in the past. The default 15 minutes. This is helpful for
                displaying statistics for the last 15 minutes, 240 minutes (4
                hours), and 480 minutes (8 hours) to see trends.
            start_date (str): Only calculate statistics from this date and
                time and later, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            task_channel (str): Only calculate cumulative statistics on this
                TaskChannel. Can be the TaskChannel's SID or its
                `unique_name`, such as `voice`, `sms`, or `default`.
            split_by_wait_time (str): A comma separated list of values that
                describes the thresholds, in seconds, to calculate statistics
                on. For each threshold specified, the number of Tasks canceled
                and reservations accepted above and below the specified
                thresholds in seconds are computed. For example, `5,30` would
                show splits of Tasks that were canceled or accepted before and
                after 5 seconds and before and after 30 seconds. This can be
                used to show short abandoned Tasks or Tasks that failed to
                meet an SLA. TaskRouter will calculate statistics on up to
                10,000 Tasks for any given threshold.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK88: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/CumulativeStatistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .query_param(Parameter()
                         .key('SplitByWaitTime')
                         .value(split_by_wait_time))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK88.from_dictionary)
        ).execute()

    def fetch_workspace_real_time_statistics(self,
                                             task_channel,
                                             accept,
                                             workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/RealTimeStatistics.

        Args:
            task_channel (str): Only calculate real-time statistics on this
                TaskChannel. Can be the TaskChannel's SID or its
                `unique_name`, such as `voice`, `sms`, or `default`.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK89: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/RealTimeStatistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK89.from_dictionary)
        ).execute()

    def fetch_workspace_statistics(self,
                                   minutes,
                                   start_date,
                                   end_date,
                                   task_channel,
                                   split_by_wait_time,
                                   accept,
                                   workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Statistics.

        Args:
            minutes (int): Only calculate statistics since this many minutes
                in the past. The default 15 minutes. This is helpful for
                displaying statistics for the last 15 minutes, 240 minutes (4
                hours), and 480 minutes (8 hours) to see trends.
            start_date (str): Only calculate statistics from this date and
                time and later, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            end_date (str): Only calculate statistics from this date and time
                and earlier, specified in GMT as an [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
            task_channel (str): Only calculate statistics on this TaskChannel.
                Can be the TaskChannel's SID or its `unique_name`, such as
                `voice`, `sms`, or `default`.
            split_by_wait_time (str): A comma separated list of values that
                describes the thresholds, in seconds, to calculate statistics
                on. For each threshold specified, the number of Tasks canceled
                and reservations accepted above and below the specified
                thresholds in seconds are computed. For example, `5,30` would
                show splits of Tasks that were canceled or accepted before and
                after 5 seconds and before and after 30 seconds. This can be
                used to show short abandoned Tasks or Tasks that failed to
                meet an SLA.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK83: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Statistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .query_param(Parameter()
                         .key('SplitByWaitTime')
                         .value(split_by_wait_time))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK83.from_dictionary)
        ).execute()
