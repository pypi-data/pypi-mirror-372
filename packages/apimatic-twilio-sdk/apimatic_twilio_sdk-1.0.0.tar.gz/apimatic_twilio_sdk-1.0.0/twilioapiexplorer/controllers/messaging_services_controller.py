# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_4 import Created4
from twilioapiexplorer.models.ok_7 import OK7
from twilioapiexplorer.models.ok_8 import OK8


class MessagingServicesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(MessagingServicesController, self).__init__(config)

    def create_service(self,
                       accept,
                       friendly_name,
                       inbound_request_url,
                       inbound_method,
                       fallback_url,
                       fallback_method,
                       status_callback,
                       sticky_sender,
                       mms_converter,
                       smart_encoding,
                       scan_message_content,
                       fallback_to_long_code,
                       area_code_geomatch,
                       validity_period,
                       synchronous_validation,
                       usecase,
                       use_inbound_webhook_on_number):
        """Does a POST request to /Services.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the resource. It can be up to 64 characters
                long.
            inbound_request_url (str): The URL we call using `inbound_method`
                when a message is received by any phone number or short code
                in the Service. When this property is `null`, receiving
                inbound messages is disabled. All messages sent to the Twilio
                phone number or short code will not be logged and received on
                the Account. If the `use_inbound_webhook_on_number` field is
                enabled then the webhook url defined on the phone number will
                override the `inbound_request_url` defined for the Messaging
                Service.
            inbound_method (str): The HTTP method we should use to call
                `inbound_request_url`. Can be `GET` or `POST` and the default
                is `POST`.
            fallback_url (str): The URL that we call using `fallback_method`
                if an error occurs while retrieving or executing the TwiML
                from the Inbound Request URL. If the
                `use_inbound_webhook_on_number` field is enabled then the
                webhook url defined on the phone number will override the
                `fallback_url` defined for the Messaging Service.
            fallback_method (str): The HTTP method we should use to call
                `fallback_url`. Can be: `GET` or `POST`.
            status_callback (str): The URL we should call to [pass status
                updates](https://www.twilio.com/docs/sms/api/message-resource#m
                essage-status-values) about message delivery.
            sticky_sender (bool): Whether to enable [Sticky
                Sender](https://www.twilio.com/docs/sms/services#sticky-sender)
                on the Service instance.
            mms_converter (bool): Whether to enable the [MMS
                Converter](https://www.twilio.com/docs/sms/services#mms-convert
                er) for messages sent through the Service instance.
            smart_encoding (bool): Whether to enable [Smart
                Encoding](https://www.twilio.com/docs/sms/services#smart-encodi
                ng) for messages sent through the Service instance.
            scan_message_content (str): Reserved.
            fallback_to_long_code (bool): Whether to enable [Fallback to Long
                Code](https://www.twilio.com/docs/sms/services#fallback-to-long
                -code) for messages sent through the Service instance.
            area_code_geomatch (bool): Whether to enable [Area Code
                Geomatch](https://www.twilio.com/docs/sms/services#area-code-ge
                omatch) on the Service Instance.
            validity_period (int): How long, in seconds, messages sent from
                the Service are valid. Can be an integer from `1` to `14,400`.
            synchronous_validation (bool): Reserved.
            usecase (str): A string that describes the scenario in which the
                Messaging Service will be used. Examples: [notification,
                marketing, verification, poll ..].
            use_inbound_webhook_on_number (bool): A boolean value that
                indicates either the webhook url configured on the phone
                number will be used or `inbound_request_url`/`fallback_url`
                url will be called when a message is received from the phone
                number. If this field is enabled then the webhook url defined
                on the phone number will override the
                `inbound_request_url`/`fallback_url` defined for the Messaging
                Service.

        Returns:
            Created4: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('InboundRequestUrl')
                        .value(inbound_request_url))
            .form_param(Parameter()
                        .key('InboundMethod')
                        .value(inbound_method))
            .form_param(Parameter()
                        .key('FallbackUrl')
                        .value(fallback_url))
            .form_param(Parameter()
                        .key('FallbackMethod')
                        .value(fallback_method))
            .form_param(Parameter()
                        .key('StatusCallback')
                        .value(status_callback))
            .form_param(Parameter()
                        .key('StickySender')
                        .value(sticky_sender))
            .form_param(Parameter()
                        .key('MmsConverter')
                        .value(mms_converter))
            .form_param(Parameter()
                        .key('SmartEncoding')
                        .value(smart_encoding))
            .form_param(Parameter()
                        .key('ScanMessageContent')
                        .value(scan_message_content))
            .form_param(Parameter()
                        .key('FallbackToLongCode')
                        .value(fallback_to_long_code))
            .form_param(Parameter()
                        .key('AreaCodeGeomatch')
                        .value(area_code_geomatch))
            .form_param(Parameter()
                        .key('ValidityPeriod')
                        .value(validity_period))
            .form_param(Parameter()
                        .key('SynchronousValidation')
                        .value(synchronous_validation))
            .form_param(Parameter()
                        .key('Usecase')
                        .value(usecase))
            .form_param(Parameter()
                        .key('UseInboundWebhookOnNumber')
                        .value(use_inbound_webhook_on_number))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created4.from_dictionary)
        ).execute()

    def list_service(self,
                     page_size,
                     accept):
        """Does a GET request to /Services.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK7: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/Services')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK7.from_dictionary)
        ).execute()

    def update_service(self,
                       sid,
                       accept,
                       friendly_name,
                       inbound_request_url,
                       inbound_method,
                       fallback_url,
                       fallback_method,
                       status_callback,
                       sticky_sender,
                       mms_converter,
                       smart_encoding,
                       scan_message_content,
                       fallback_to_long_code,
                       area_code_geomatch,
                       validity_period,
                       synchronous_validation,
                       usecase,
                       use_inbound_webhook_on_number):
        """Does a POST request to /Services/{Sid}.

        Args:
            sid (str): (Required) The SID of the Service resource to update.
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 64 characters long.
            inbound_request_url (str): The URL we call using `inbound_method`
                when a message is received by any phone number or short code
                in the Service. When this property is `null`, receiving
                inbound messages is disabled. All messages sent to the Twilio
                phone number or short code will not be logged and received on
                the Account. If the `use_inbound_webhook_on_number` field is
                enabled then the webhook url defined on the phone number will
                override the `inbound_request_url` defined for the Messaging
                Service.
            inbound_method (str): The HTTP method we should use to call
                `inbound_request_url`. Can be `GET` or `POST` and the default
                is `POST`.
            fallback_url (str): The URL that we call using `fallback_method`
                if an error occurs while retrieving or executing the TwiML
                from the Inbound Request URL. If the
                `use_inbound_webhook_on_number` field is enabled then the
                webhook url defined on the phone number will override the
                `fallback_url` defined for the Messaging Service.
            fallback_method (str): The HTTP method we should use to call
                `fallback_url`. Can be: `GET` or `POST`.
            status_callback (str): The URL we should call to [pass status
                updates](https://www.twilio.com/docs/sms/api/message-resource#m
                essage-status-values) about message delivery.
            sticky_sender (bool): Whether to enable [Sticky
                Sender](https://www.twilio.com/docs/sms/services#sticky-sender)
                on the Service instance.
            mms_converter (bool): Whether to enable the [MMS
                Converter](https://www.twilio.com/docs/sms/services#mms-convert
                er) for messages sent through the Service instance.
            smart_encoding (bool): Whether to enable [Smart
                Encoding](https://www.twilio.com/docs/sms/services#smart-encodi
                ng) for messages sent through the Service instance.
            scan_message_content (str): Reserved.
            fallback_to_long_code (bool): Whether to enable [Fallback to Long
                Code](https://www.twilio.com/docs/sms/services#fallback-to-long
                -code) for messages sent through the Service instance.
            area_code_geomatch (bool): Whether to enable [Area Code
                Geomatch](https://www.twilio.com/docs/sms/services#area-code-ge
                omatch) on the Service Instance.
            validity_period (int): How long, in seconds, messages sent from
                the Service are valid. Can be an integer from `1` to `14,400`.
            synchronous_validation (bool): Reserved.
            usecase (str): A string that describes the scenario in which the
                Messaging Service will be used. Examples: [notification,
                marketing, verification, poll ..]
            use_inbound_webhook_on_number (bool): A boolean value that
                indicates either the webhook url configured on the phone
                number will be used or `inbound_request_url`/`fallback_url`
                url will be called when a message is received from the phone
                number. If this field is enabled then the webhook url defined
                on the phone number will override the
                `inbound_request_url`/`fallback_url` defined for the Messaging
                Service.

        Returns:
            OK8: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/Services/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('InboundRequestUrl')
                        .value(inbound_request_url))
            .form_param(Parameter()
                        .key('InboundMethod')
                        .value(inbound_method))
            .form_param(Parameter()
                        .key('FallbackUrl')
                        .value(fallback_url))
            .form_param(Parameter()
                        .key('FallbackMethod')
                        .value(fallback_method))
            .form_param(Parameter()
                        .key('StatusCallback')
                        .value(status_callback))
            .form_param(Parameter()
                        .key('StickySender')
                        .value(sticky_sender))
            .form_param(Parameter()
                        .key('MmsConverter')
                        .value(mms_converter))
            .form_param(Parameter()
                        .key('SmartEncoding')
                        .value(smart_encoding))
            .form_param(Parameter()
                        .key('ScanMessageContent')
                        .value(scan_message_content))
            .form_param(Parameter()
                        .key('FallbackToLongCode')
                        .value(fallback_to_long_code))
            .form_param(Parameter()
                        .key('AreaCodeGeomatch')
                        .value(area_code_geomatch))
            .form_param(Parameter()
                        .key('ValidityPeriod')
                        .value(validity_period))
            .form_param(Parameter()
                        .key('SynchronousValidation')
                        .value(synchronous_validation))
            .form_param(Parameter()
                        .key('Usecase')
                        .value(usecase))
            .form_param(Parameter()
                        .key('UseInboundWebhookOnNumber')
                        .value(use_inbound_webhook_on_number))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK8.from_dictionary)
        ).execute()

    def fetch_service(self,
                      sid,
                      accept):
        """Does a GET request to /Services/{Sid}.

        Args:
            sid (str): The request template parameter.
            accept (str): The request header parameter.

        Returns:
            OK8: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/Services/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK8.from_dictionary)
        ).execute()

    def delete_service(self,
                       sid):
        """Does a DELETE request to /Services/{Sid}.

        Args:
            sid (str): (Required) The SID of the Service resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_2)
            .path('/Services/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
