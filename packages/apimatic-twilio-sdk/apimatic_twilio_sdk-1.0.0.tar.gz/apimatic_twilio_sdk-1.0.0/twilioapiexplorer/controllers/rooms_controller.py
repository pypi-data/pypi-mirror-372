# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_204 import OK204
from twilioapiexplorer.models.created_57 import Created57
from twilioapiexplorer.models.ok_206 import OK206


class RoomsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(RoomsController, self).__init__(config)

    def fetch_room(self,
                   sid,
                   accept):
        """Does a GET request to /v1/Rooms/{Sid}.

        Args:
            sid (str): (Required) The SID of the Room resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK204: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK204.from_dictionary)
        ).execute()

    def update_room(self,
                    sid,
                    accept,
                    status):
        """Does a POST request to /v1/Rooms/{Sid}.

        Args:
            sid (str): (Required) The SID of the Room resource to update.
            accept (str): The request header parameter.
            status (str): (Required) The new status of the resource. Set to
                `completed` to end the room.

        Returns:
            OK204: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK204.from_dictionary)
        ).execute()

    def create_room(self,
                    accept,
                    enable_turn,
                    mtype,
                    unique_name,
                    status_callback,
                    status_callback_method,
                    max_participants,
                    record_participants_on_connect,
                    video_codecs,
                    media_region,
                    audio_only,
                    max_participant_duration,
                    empty_room_timeout,
                    unused_room_timeout,
                    large_room):
        """Does a POST request to /v1/Rooms.

        Args:
            accept (str): The request header parameter.
            enable_turn (bool): Deprecated, now always considered to be true.
            mtype (str): The type of room. Can be: `go`, `peer-to-peer`,
                `group-small`, or `group`. The default value is `group`.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. It can be used as a `room_sid` in
                place of the resource's `sid` in the URL to address the
                resource, assuming it does not contain any [reserved
                characters](https://tools.ietf.org/html/rfc3986#section-2.2)
                that would need to be URL encoded. This value is unique for
                `in-progress` rooms. SDK clients can use this name to connect
                to the room. REST API clients can use this name in place of
                the Room SID to interact with the room as long as the room is
                `in-progress`.
            status_callback (str): The URL we should call using the
                `status_callback_method` to send status information to your
                application on every room event. See [Status
                Callbacks](https://www.twilio.com/docs/video/api/status-callbac
                ks) for more info.
            status_callback_method (str): The HTTP method we should use to
                call `status_callback`. Can be `POST` or `GET`.
            max_participants (int): The maximum number of concurrent
                Participants allowed in the room. Peer-to-peer rooms can have
                up to 10 Participants. Small Group rooms can have up to 4
                Participants. Group rooms can have up to 50 Participants.
            record_participants_on_connect (bool): Whether to start recording
                when Participants connect. ***This feature is not available in
                `peer-to-peer` rooms.***
            video_codecs (str): An array of the video codecs that are
                supported when publishing a track in the room.  Can be: `VP8`
                and `H264`.  ***This feature is not available in
                `peer-to-peer` rooms***
            media_region (str): The region for the media server in Group
                Rooms.  Can be: one of the [available Media
                Regions](https://www.twilio.com/docs/video/ip-address-whitelist
                ing#group-rooms-media-servers). ***This feature is not
                available in `peer-to-peer` rooms.***
            audio_only (bool): When set to true, indicates that the
                participants in the room will only publish audio. No video
                tracks will be allowed. Group rooms only.
            max_participant_duration (int): The maximum number of seconds a
                Participant can be connected to the room. The maximum possible
                value is 86400 seconds (24 hours). The default is 14400
                seconds (4 hours).
            empty_room_timeout (int): Configures how long (in minutes) a room
                will remain active after last participant leaves. Valid values
                range from 1 to 60 minutes (no fractions).
            unused_room_timeout (int): Configures how long (in minutes) a room
                will remain active if no one joins. Valid values range from 1
                to 60 minutes (no fractions).
            large_room (bool): When set to true, indicated that this is the
                large room.

        Returns:
            Created57: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('EnableTurn')
                        .value(enable_turn))
            .form_param(Parameter()
                        .key('Type')
                        .value(mtype))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('StatusCallback')
                        .value(status_callback))
            .form_param(Parameter()
                        .key('StatusCallbackMethod')
                        .value(status_callback_method))
            .form_param(Parameter()
                        .key('MaxParticipants')
                        .value(max_participants))
            .form_param(Parameter()
                        .key('RecordParticipantsOnConnect')
                        .value(record_participants_on_connect))
            .form_param(Parameter()
                        .key('VideoCodecs')
                        .value(video_codecs))
            .form_param(Parameter()
                        .key('MediaRegion')
                        .value(media_region))
            .form_param(Parameter()
                        .key('AudioOnly')
                        .value(audio_only))
            .form_param(Parameter()
                        .key('MaxParticipantDuration')
                        .value(max_participant_duration))
            .form_param(Parameter()
                        .key('EmptyRoomTimeout')
                        .value(empty_room_timeout))
            .form_param(Parameter()
                        .key('UnusedRoomTimeout')
                        .value(unused_room_timeout))
            .form_param(Parameter()
                        .key('LargeRoom')
                        .value(large_room))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created57.from_dictionary)
        ).execute()

    def list_room(self,
                  status,
                  unique_name,
                  date_created_after,
                  date_created_before,
                  page_size,
                  accept):
        """Does a GET request to /v1/Rooms.

        Args:
            status (str): Read only the rooms with this status. Can be:
                `in-progress` (default) or `completed`
            unique_name (str): Read only rooms with the this `unique_name`.
            date_created_after (str): Read only rooms that started on or after
                this date, given as `YYYY-MM-DD`.
            date_created_before (str): Read only rooms that started before
                this date, given as `YYYY-MM-DD`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK206: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Rooms')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('UniqueName')
                         .value(unique_name))
            .query_param(Parameter()
                         .key('DateCreatedAfter')
                         .value(date_created_after))
            .query_param(Parameter()
                         .key('DateCreatedBefore')
                         .value(date_created_before))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK206.from_dictionary)
        ).execute()
