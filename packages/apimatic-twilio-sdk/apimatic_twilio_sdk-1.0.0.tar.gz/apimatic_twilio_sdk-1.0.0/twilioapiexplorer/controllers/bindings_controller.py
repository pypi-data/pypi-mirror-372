# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_143 import OK143
from twilioapiexplorer.models.ok_144 import OK144
from twilioapiexplorer.models.created_40 import Created40


class BindingsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(BindingsController, self).__init__(config)

    def fetch_binding(self,
                      service_sid,
                      sid,
                      accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Bindings/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/notify/api/service-resour
                ce) to fetch the resource from.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Binding resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK143: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Bindings/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK143.from_dictionary)
        ).execute()

    def delete_binding(self,
                       service_sid,
                       sid):
        """Does a DELETE request to /v1/Services/{ServiceSid}/Bindings/{Sid}.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/notify/api/service-resour
                ce) to delete the resource from.
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Binding resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Bindings/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_binding(self,
                     start_date,
                     end_date,
                     identity,
                     tag,
                     page_size,
                     service_sid,
                     accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Bindings.

        Args:
            start_date (str): Only include usage that has occurred on or after
                this date. Specify the date in GMT and format as `YYYY-MM-DD`.
            end_date (str): Only include usage that occurred on or before this
                date. Specify the date in GMT and format as `YYYY-MM-DD`.
            identity (str): The
                [User](https://www.twilio.com/docs/chat/rest/user-resource)'s
                `identity` value of the resources to read.
            tag (str): Only list Bindings that have all of the specified Tags.
                The following implicit tags are available: `all`, `apn`,
                `fcm`, `gcm`, `sms`, `facebook-messenger`. Up to 5 tags are
                allowed.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/notify/api/service-resour
                ce) to read the resource from.
            accept (str): The request header parameter.

        Returns:
            OK144: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Bindings')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('Identity')
                         .value(identity))
            .query_param(Parameter()
                         .key('Tag')
                         .value(tag))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK144.from_dictionary)
        ).execute()

    def create_binding(self,
                       service_sid,
                       accept,
                       identity,
                       binding_type,
                       address,
                       tag,
                       notification_protocol_version,
                       credential_sid,
                       endpoint):
        """Does a POST request to /v1/Services/{ServiceSid}/Bindings.

        Args:
            service_sid (str): (Required) The SID of the
                [Service](https://www.twilio.com/docs/notify/api/service-resour
                ce) to create the resource under.
            accept (str): The request header parameter.
            identity (str): (Required) The `identity` value that uniquely
                identifies the new resource's
                [User](https://www.twilio.com/docs/chat/rest/user-resource)
                within the
                [Service](https://www.twilio.com/docs/notify/api/service-resour
                ce). Up to 20 Bindings can be created for the same Identity in
                a given Service.
            binding_type (str): (Required) The transport technology to use for
                the Binding. Can be: `apn`, `fcm`, `gcm`, `sms`, or
                `facebook-messenger`.
            address (str): (Required) The channel-specific address. For APNS,
                the device token. For FCM and GCM, the registration token. For
                SMS, a phone number in E.164 format. For Facebook Messenger,
                the Messenger ID of the user or a phone number in E.164 format.
            tag (str): A tag that can be used to select the Bindings to
                notify. Repeat this parameter to specify more than one tag, up
                to a total of 20 tags.
            notification_protocol_version (str): The protocol version to use
                to send the notification. This defaults to the value of
                `default_xxxx_notification_protocol_version` for the protocol
                in the
                [Service](https://www.twilio.com/docs/notify/api/service-resour
                ce). The current version is `"3"` for `apn`, `fcm`, and `gcm`
                type Bindings. The parameter is not applicable to `sms` and
                `facebook-messenger` type Bindings as the data format is fixed.
            credential_sid (str): The SID of the
                [Credential](https://www.twilio.com/docs/notify/api/credential-
                resource) resource to be used to send notifications to this
                Binding. If present, this overrides the Credential specified
                in the Service resource. Applies to only `apn`, `fcm`, and
                `gcm` type Bindings.
            endpoint (str): Deprecated.

        Returns:
            Created40: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Bindings')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Identity')
                        .value(identity))
            .form_param(Parameter()
                        .key('BindingType')
                        .value(binding_type))
            .form_param(Parameter()
                        .key('Address')
                        .value(address))
            .form_param(Parameter()
                        .key('Tag')
                        .value(tag))
            .form_param(Parameter()
                        .key('NotificationProtocolVersion')
                        .value(notification_protocol_version))
            .form_param(Parameter()
                        .key('CredentialSid')
                        .value(credential_sid))
            .form_param(Parameter()
                        .key('Endpoint')
                        .value(endpoint))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created40.from_dictionary)
        ).execute()
