# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_26 import Created26
from twilioapiexplorer.models.ok_102 import OK102
from twilioapiexplorer.models.ok_101 import OK101


class IPAccessControlListsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(IPAccessControlListsController, self).__init__(config)

    def create_ip_access_control_list(self,
                                      accept,
                                      ip_access_control_list_sid,
                                      trunk_sid):
        """Does a POST request to /Trunks/{TrunkSid}/IpAccessControlLists.

        Associate an IP Access Control List with a Trunk

        Args:
            accept (str): The request header parameter.
            ip_access_control_list_sid (str): (Required) The SID of the [IP
                Access Control
                List](https://www.twilio.com/docs/voice/sip/api/sip-ipaccesscon
                trollist-resource) that you want to associate with the trunk.
            trunk_sid (str): The request template parameter.

        Returns:
            Created26: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_10)
            .path('/Trunks/{TrunkSid}/IpAccessControlLists')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('IpAccessControlListSid')
                        .value(ip_access_control_list_sid))
            .template_param(Parameter()
                            .key('TrunkSid')
                            .value(trunk_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created26.from_dictionary)
        ).execute()

    def list_ip_access_control_list(self,
                                    page_size,
                                    accept,
                                    trunk_sid):
        """Does a GET request to /Trunks/{TrunkSid}/IpAccessControlLists.

        List all IP Access Control Lists for a Trunk

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            trunk_sid (str): The request template parameter.

        Returns:
            OK102: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_10)
            .path('/Trunks/{TrunkSid}/IpAccessControlLists')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('TrunkSid')
                            .value(trunk_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK102.from_dictionary)
        ).execute()

    def fetch_ip_access_control_list(self,
                                     accept,
                                     trunk_sid,
                                     sid):
        """Does a GET request to /Trunks/{TrunkSid}/IpAccessControlLists/{Sid}.

        Args:
            accept (str): The request header parameter.
            trunk_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK101: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_10)
            .path('/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('TrunkSid')
                            .value(trunk_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK101.from_dictionary)
        ).execute()

    def delete_ip_access_control_list(self,
                                      trunk_sid,
                                      sid):
        """Does a DELETE request to /Trunks/{TrunkSid}/IpAccessControlLists/{Sid}.

        Remove an associated IP Access Control List from a Trunk

        Args:
            trunk_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_10)
            .path('/Trunks/{TrunkSid}/IpAccessControlLists/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('TrunkSid')
                            .value(trunk_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
