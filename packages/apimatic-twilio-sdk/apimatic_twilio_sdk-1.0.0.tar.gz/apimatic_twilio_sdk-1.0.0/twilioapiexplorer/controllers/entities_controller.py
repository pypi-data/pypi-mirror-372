# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_78 import Created78
from twilioapiexplorer.models.ok_288 import OK288
from twilioapiexplorer.models.ok_289 import OK289


class EntitiesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(EntitiesController, self).__init__(config)

    def create_entity(self,
                      service_sid,
                      accept,
                      identity):
        """Does a POST request to /v2/Services/{ServiceSid}/Entities.

        Create a new Entity for the Service

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            accept (str): The request header parameter.
            identity (str): (Required) The unique external identifier for the
                Entity of the Service. This identifier should be immutable,
                not PII, length between 8 and 64 characters, and generated by
                your external system, such as your user's UUID, GUID, or SID.
                It can only contain dash (-) separated alphanumeric characters.

        Returns:
            Created78: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Identity')
                        .value(identity))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created78.from_dictionary)
        ).execute()

    def list_entity(self,
                    page_size,
                    service_sid,
                    accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Entities.

        Retrieve a list of all Entities for a Service.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            accept (str): The request header parameter.

        Returns:
            OK288: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK288.from_dictionary)
        ).execute()

    def delete_entity(self,
                      service_sid,
                      identity):
        """Does a DELETE request to /v2/Services/{ServiceSid}/Entities/{Identity}.

        Delete a specific Entity.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) The unique external identifier for the
                Entity of the Service. This identifier should be immutable,
                not PII, length between 8 and 64 characters, and generated by
                your external system, such as your user's UUID, GUID, or SID.
                It can only contain dash (-) separated alphanumeric characters.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_entity(self,
                     service_sid,
                     identity,
                     accept):
        """Does a GET request to /v2/Services/{ServiceSid}/Entities/{Identity}.

        Fetch a specific Entity.

        Args:
            service_sid (str): (Required) The unique SID identifier of the
                Service.
            identity (str): (Required) The unique external identifier for the
                Entity of the Service. This identifier should be immutable,
                not PII, length between 8 and 64 characters, and generated by
                your external system, such as your user's UUID, GUID, or SID.
                It can only contain dash (-) separated alphanumeric characters.
            accept (str): The request header parameter.

        Returns:
            OK289: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services/{ServiceSid}/Entities/{Identity}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Identity')
                            .value(identity)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK289.from_dictionary)
        ).execute()
