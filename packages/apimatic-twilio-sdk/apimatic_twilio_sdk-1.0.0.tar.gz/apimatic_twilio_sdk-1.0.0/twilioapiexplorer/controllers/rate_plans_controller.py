# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_186 import OK186
from twilioapiexplorer.models.created_52 import Created52
from twilioapiexplorer.models.ok_187 import OK187


class RatePlansController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(RatePlansController, self).__init__(config)

    def list_rate_plan(self,
                       page_size,
                       accept):
        """Does a GET request to /v1/RatePlans.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK186: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/RatePlans')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK186.from_dictionary)
        ).execute()

    def create_rate_plan(self,
                         accept,
                         unique_name,
                         friendly_name,
                         data_enabled,
                         data_limit,
                         data_metering,
                         messaging_enabled,
                         voice_enabled,
                         national_roaming_enabled,
                         international_roaming,
                         national_roaming_data_limit,
                         international_roaming_data_limit):
        """Does a POST request to /v1/RatePlans.

        Args:
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. It can be used in place of the
                resource's `sid` in the URL to address the resource.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It does not have to be unique.
            data_enabled (bool): Whether SIMs can use GPRS/3G/4G/LTE data
                connectivity.
            data_limit (int): The total data usage (download and upload
                combined) in Megabytes that the Network allows during one
                month on the home network (T-Mobile USA). The metering period
                begins the day of activation and ends on the same day in the
                following month. Can be up to 2TB and the default value is
                `1000`.
            data_metering (str): The model used to meter data usage. Can be:
                `payg` and `quota-1`, `quota-10`, and `quota-50`. Learn more
                about the available [data metering
                models](https://www.twilio.com/docs/wireless/api/rateplan-resou
                rce#payg-vs-quota-data-plans).
            messaging_enabled (bool): Whether SIMs can make, send, and receive
                SMS using
                [Commands](https://www.twilio.com/docs/wireless/api/command-res
                ource).
            voice_enabled (bool): Deprecated.
            national_roaming_enabled (bool): Whether SIMs can roam on networks
                other than the home network (T-Mobile USA) in the United
                States. See [national
                roaming](https://www.twilio.com/docs/wireless/api/rateplan-reso
                urce#national-roaming).
            international_roaming (str): The list of services that SIMs
                capable of using GPRS/3G/4G/LTE data connectivity can use
                outside of the United States. Can contain: `data` and
                `messaging`.
            national_roaming_data_limit (int): The total data usage (download
                and upload combined) in Megabytes that the Network allows
                during one month on non-home networks in the United States.
                The metering period begins the day of activation and ends on
                the same day in the following month. Can be up to 2TB. See
                [national
                roaming](https://www.twilio.com/docs/wireless/api/rateplan-reso
                urce#national-roaming) for more info.
            international_roaming_data_limit (int): The total data usage
                (download and upload combined) in Megabytes that the Network
                allows during one month when roaming outside the United
                States. Can be up to 2TB.

        Returns:
            Created52: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/RatePlans')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('DataEnabled')
                        .value(data_enabled))
            .form_param(Parameter()
                        .key('DataLimit')
                        .value(data_limit))
            .form_param(Parameter()
                        .key('DataMetering')
                        .value(data_metering))
            .form_param(Parameter()
                        .key('MessagingEnabled')
                        .value(messaging_enabled))
            .form_param(Parameter()
                        .key('VoiceEnabled')
                        .value(voice_enabled))
            .form_param(Parameter()
                        .key('NationalRoamingEnabled')
                        .value(national_roaming_enabled))
            .form_param(Parameter()
                        .key('InternationalRoaming')
                        .value(international_roaming))
            .form_param(Parameter()
                        .key('NationalRoamingDataLimit')
                        .value(national_roaming_data_limit))
            .form_param(Parameter()
                        .key('InternationalRoamingDataLimit')
                        .value(international_roaming_data_limit))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created52.from_dictionary)
        ).execute()

    def fetch_rate_plan(self,
                        sid,
                        accept):
        """Does a GET request to /v1/RatePlans/{Sid}.

        Args:
            sid (str): (Required) The SID of the RatePlan resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK187: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/RatePlans/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK187.from_dictionary)
        ).execute()

    def update_rate_plan(self,
                         sid,
                         accept,
                         unique_name,
                         friendly_name):
        """Does a POST request to /v1/RatePlans/{Sid}.

        Args:
            sid (str): (Required) The SID of the RatePlan resource to update.
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. It can be used in place of the
                resource's `sid` in the URL to address the resource.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It does not have to be unique.

        Returns:
            OK187: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/RatePlans/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK187.from_dictionary)
        ).execute()

    def delete_rate_plan(self,
                         sid):
        """Does a DELETE request to /v1/RatePlans/{Sid}.

        Args:
            sid (str): (Required) The SID of the RatePlan resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/RatePlans/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
