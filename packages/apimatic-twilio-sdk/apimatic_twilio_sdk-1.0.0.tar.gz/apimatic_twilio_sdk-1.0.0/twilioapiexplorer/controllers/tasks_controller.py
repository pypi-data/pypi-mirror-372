# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_69 import OK69
from twilioapiexplorer.models.created_20 import Created20
from twilioapiexplorer.models.ok_267 import OK267
from twilioapiexplorer.models.created_70 import Created70


class TasksController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(TasksController, self).__init__(config)

    def list_task(self,
                  priority,
                  assignment_status,
                  workflow_sid,
                  workflow_name,
                  task_queue_sid,
                  task_queue_name,
                  evaluate_task_attributes,
                  ordering,
                  has_addons,
                  page_size,
                  accept,
                  workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/Tasks.

        Args:
            priority (int): The priority value of the Tasks to read. Returns
                the list of all Tasks in the Workspace with the specified
                priority.
            assignment_status (str): The `assignment_status` of the Tasks you
                want to read. Can be: `pending`, `reserved`, `assigned`,
                `canceled`, `wrapping`, or `completed`. Returns all Tasks in
                the Workspace with the specified `assignment_status`.
            workflow_sid (str): The SID of the Workflow with the Tasks to
                read. Returns the Tasks controlled by the Workflow identified
                by this SID.
            workflow_name (str): The friendly name of the Workflow with the
                Tasks to read. Returns the Tasks controlled by the Workflow
                identified by this friendly name.
            task_queue_sid (str): The SID of the TaskQueue with the Tasks to
                read. Returns the Tasks waiting in the TaskQueue identified by
                this SID.
            task_queue_name (str): The `friendly_name` of the TaskQueue with
                the Tasks to read. Returns the Tasks waiting in the TaskQueue
                identified by this friendly name.
            evaluate_task_attributes (str): The attributes of the Tasks to
                read. Returns the Tasks that match the attributes specified in
                this parameter.
            ordering (str): How to order the returned Task resources. y
                default, Tasks are sorted by ascending DateCreated. This value
                is specified as: `Attribute:Order`, where `Attribute` can be
                either `Priority` or `DateCreated` and `Order` can be either
                `asc` or `desc`. For example, `Priority:desc` returns Tasks
                ordered in descending order of their Priority. Multiple sort
                orders can be specified in a comma-separated list such as
                `Priority:desc,DateCreated:asc`, which returns the Tasks in
                descending Priority order and ascending DateCreated Order.
            has_addons (bool): Whether to read Tasks with addons. If `true`,
                returns only Tasks with addons. If `false`, returns only Tasks
                without addons.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK69: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Tasks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Priority')
                         .value(priority))
            .query_param(Parameter()
                         .key('AssignmentStatus')
                         .value(assignment_status))
            .query_param(Parameter()
                         .key('WorkflowSid')
                         .value(workflow_sid))
            .query_param(Parameter()
                         .key('WorkflowName')
                         .value(workflow_name))
            .query_param(Parameter()
                         .key('TaskQueueSid')
                         .value(task_queue_sid))
            .query_param(Parameter()
                         .key('TaskQueueName')
                         .value(task_queue_name))
            .query_param(Parameter()
                         .key('EvaluateTaskAttributes')
                         .value(evaluate_task_attributes))
            .query_param(Parameter()
                         .key('Ordering')
                         .value(ordering))
            .query_param(Parameter()
                         .key('HasAddons')
                         .value(has_addons))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK69.from_dictionary)
        ).execute()

    def create_task(self,
                    accept,
                    timeout,
                    priority,
                    task_channel,
                    workflow_sid,
                    attributes,
                    workspace_sid):
        """Does a POST request to /Workspaces/{WorkspaceSid}/Tasks.

        Args:
            accept (str): The request header parameter.
            timeout (int): The amount of time in seconds the new task can live
                before being assigned. Can be up to a maximum of 2 weeks
                (1,209,600 seconds). The default value is 24 hours (86,400
                seconds). On timeout, the `task.canceled` event will fire with
                description `Task TTL Exceeded`.
            priority (int): The priority to assign the new task and override
                the default. When supplied, the new Task will have this
                priority unless it matches a Workflow Target with a Priority
                set. When not supplied, the new Task will have the priority of
                the matching Workflow Target. Value can be 0 to 2^31^
                (2,147,483,647).
            task_channel (str): When MultiTasking is enabled, specify the
                TaskChannel by passing either its `unique_name` or `sid`.
                Default value is `default`.
            workflow_sid (str): The SID of the Workflow that you would like to
                handle routing for the new Task. If there is only one Workflow
                defined for the Workspace that you are posting the new task
                to, this parameter is optional.
            attributes (str): A URL-encoded JSON string with the attributes of
                the new task. This value is passed to the Workflow's
                `assignment_callback_url` when the Task is assigned to a
                Worker. For example: `{ "task_type": "call",
                "twilio_call_sid": "CAxxx", "customer_ticket_number": "12345"
                }`.
            workspace_sid (str): The request template parameter.

        Returns:
            Created20: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/Tasks')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Timeout')
                        .value(timeout))
            .form_param(Parameter()
                        .key('Priority')
                        .value(priority))
            .form_param(Parameter()
                        .key('TaskChannel')
                        .value(task_channel))
            .form_param(Parameter()
                        .key('WorkflowSid')
                        .value(workflow_sid))
            .form_param(Parameter()
                        .key('Attributes')
                        .value(attributes))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created20.from_dictionary)
        ).execute()

    def list_task_1(self,
                    page_size,
                    assistant_sid,
                    accept):
        """Does a GET request to /v1/Assistants/{AssistantSid}/Tasks.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the resources to read.
            accept (str): The request header parameter.

        Returns:
            OK267: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Tasks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK267.from_dictionary)
        ).execute()

    def create_task_1(self,
                      assistant_sid,
                      accept,
                      unique_name,
                      friendly_name,
                      actions_url):
        """Does a POST request to /v1/Assistants/{AssistantSid}/Tasks.

        Args:
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the new resource.
            accept (str): The request header parameter.
            unique_name (str): (Required) An application-defined string that
                uniquely identifies the new resource. It can be used as an
                alternative to the `sid` in the URL path to address the
                resource. This value must be unique and 64 characters or less
                in length.
            friendly_name (str): A descriptive string that you create to
                describe the new resource. It is not unique and can be up to
                255 characters long.
            actions_url (str): The URL from which the Assistant can fetch
                actions.

        Returns:
            Created70: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Tasks')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('ActionsUrl')
                        .value(actions_url))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created70.from_dictionary)
        ).execute()
