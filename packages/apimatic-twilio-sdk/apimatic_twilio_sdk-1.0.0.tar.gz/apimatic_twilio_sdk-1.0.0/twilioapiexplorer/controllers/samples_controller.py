# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_261 import OK261
from twilioapiexplorer.models.created_69 import Created69


class SamplesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(SamplesController, self).__init__(config)

    def list_sample(self,
                    language,
                    page_size,
                    assistant_sid,
                    task_sid,
                    accept):
        """Does a GET request to /v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples.

        Args:
            language (str): The [ISO
                language-country](https://docs.oracle.com/cd/E13214_01/wli/docs
                92/xref/xqisocodes.html) string that specifies the language
                used for the sample. For example: `en-US`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the Task associated with the resources
                to read.
            task_sid (str): (Required) The SID of the
                [Task](https://www.twilio.com/docs/autopilot/api/task)
                associated with the Sample resources to read.
            accept (str): The request header parameter.

        Returns:
            OK261: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Language')
                         .value(language))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('TaskSid')
                            .value(task_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK261.from_dictionary)
        ).execute()

    def create_sample(self,
                      assistant_sid,
                      task_sid,
                      accept,
                      language,
                      tagged_text,
                      source_channel):
        """Does a POST request to /v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples.

        Args:
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the Task associated with the new
                resource.
            task_sid (str): (Required) The SID of the
                [Task](https://www.twilio.com/docs/autopilot/api/task)
                associated with the Sample resource to create.
            accept (str): The request header parameter.
            language (str): (Required) The [ISO
                language-country](https://docs.oracle.com/cd/E13214_01/wli/docs
                92/xref/xqisocodes.html) string that specifies the language
                used for the new sample. For example: `en-US`.
            tagged_text (str): (Required) The text example of how end users
                might express the task. The sample can contain [Field tag
                blocks](https://www.twilio.com/docs/autopilot/api/task-sample#f
                ield-tagging).
            source_channel (str): The communication channel from which the new
                sample was captured. Can be: `voice`, `sms`, `chat`, `alexa`,
                `google-assistant`, `slack`, or null if not included.

        Returns:
            Created69: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('TaskSid')
                            .value(task_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('Language')
                        .value(language))
            .form_param(Parameter()
                        .key('TaggedText')
                        .value(tagged_text))
            .form_param(Parameter()
                        .key('SourceChannel')
                        .value(source_channel))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created69.from_dictionary)
        ).execute()
