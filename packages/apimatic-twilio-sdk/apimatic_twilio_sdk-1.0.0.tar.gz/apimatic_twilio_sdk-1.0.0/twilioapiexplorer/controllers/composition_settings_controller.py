# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_197 import OK197
from twilioapiexplorer.models.created_55 import Created55


class CompositionSettingsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(CompositionSettingsController, self).__init__(config)

    def fetch_composition_settings(self,
                                   accept):
        """Does a GET request to /v1/CompositionSettings/Default.

        Args:
            accept (str): The request header parameter.

        Returns:
            OK197: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/CompositionSettings/Default')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK197.from_dictionary)
        ).execute()

    def create_composition_settings(self,
                                    accept,
                                    friendly_name,
                                    aws_credentials_sid,
                                    encryption_key_sid,
                                    aws_s_3_url,
                                    aws_storage_enabled,
                                    encryption_enabled):
        """Does a POST request to /v1/CompositionSettings/Default.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the resource and show to the user in the
                console
            aws_credentials_sid (str): The SID of the stored Credential
                resource.
            encryption_key_sid (str): The SID of the Public Key resource to
                use for encryption.
            aws_s_3_url (str): The URL of the AWS S3 bucket where the
                compositions should be stored. We only support DNS-compliant
                URLs like
                `https://documentation-example-twilio-bucket/compositions`,
                where `compositions` is the path in which you want the
                compositions to be stored. This URL accepts only URI-valid
                characters, as described in the <a
                href='https://tools.ietf.org/html/rfc3986#section-2'>RFC
                3986</a>.
            aws_storage_enabled (bool): Whether all compositions should be
                written to the `aws_s3_url`. When `false`, all compositions
                are stored in our cloud.
            encryption_enabled (bool): Whether all compositions should be
                stored in an encrypted form. The default is `false`.

        Returns:
            Created55: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/CompositionSettings/Default')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('AwsCredentialsSid')
                        .value(aws_credentials_sid))
            .form_param(Parameter()
                        .key('EncryptionKeySid')
                        .value(encryption_key_sid))
            .form_param(Parameter()
                        .key('AwsS3Url')
                        .value(aws_s_3_url))
            .form_param(Parameter()
                        .key('AwsStorageEnabled')
                        .value(aws_storage_enabled))
            .form_param(Parameter()
                        .key('EncryptionEnabled')
                        .value(encryption_enabled))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created55.from_dictionary)
        ).execute()
