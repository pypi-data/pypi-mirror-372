# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_88 import Created88
from twilioapiexplorer.models.ok_313 import OK313
from twilioapiexplorer.models.ok_314 import OK314


class AccountsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(AccountsController, self).__init__(config)

    def create_account(self,
                       accept,
                       friendly_name):
        """Does a POST request to /2010-04-01/Accounts.json.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): A human readable description of the account
                to create, defaults to `SubAccount Created at {YYYY-MM-DD
                HH:MM meridian}`

        Returns:
            Created88: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/2010-04-01/Accounts.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created88.from_dictionary)
        ).execute()

    def list_account(self,
                     friendly_name,
                     status,
                     page_size,
                     accept):
        """Does a GET request to /2010-04-01/Accounts.json.

        Args:
            friendly_name (str): Only return the Account resources with
                friendly names that exactly match this name.
            status (str): Only return Account resources with the given status.
                Can be `closed`, `suspended` or `active`.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK313: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/2010-04-01/Accounts.json')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FriendlyName')
                         .value(friendly_name))
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK313.from_dictionary)
        ).execute()

    def fetch_account(self,
                      accept,
                      sid):
        """Does a GET request to /2010-04-01/Accounts/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            sid (str): The request template parameter.

        Returns:
            OK314: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/2010-04-01/Accounts/{Sid}.json')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK314.from_dictionary)
        ).execute()

    def update_account(self,
                       accept,
                       friendly_name,
                       status,
                       sid):
        """Does a POST request to /2010-04-01/Accounts/{Sid}.json.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): Update the human-readable description of this
                Account
            status (str): Alter the status of this account: use `closed` to
                irreversibly close this account, `suspended` to temporarily
                suspend it, or `active` to reactivate it.
            sid (str): The request template parameter.

        Returns:
            OK314: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/2010-04-01/Accounts/{Sid}.json')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK314.from_dictionary)
        ).execute()
