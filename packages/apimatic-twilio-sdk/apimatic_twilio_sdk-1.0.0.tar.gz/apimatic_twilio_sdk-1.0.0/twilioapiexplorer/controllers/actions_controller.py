# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_262 import OK262


class ActionsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ActionsController, self).__init__(config)

    def fetch_task_actions(self,
                           assistant_sid,
                           task_sid,
                           accept):
        """Does a GET request to /v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions.

        Returns JSON actions for the Task.

        Args:
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the Task for which the task actions to
                fetch were defined.
            task_sid (str): (Required) The SID of the
                [Task](https://www.twilio.com/docs/autopilot/api/task) for
                which the task actions to fetch were defined.
            accept (str): The request header parameter.

        Returns:
            OK262: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('TaskSid')
                            .value(task_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK262.from_dictionary)
        ).execute()

    def update_task_actions(self,
                            assistant_sid,
                            task_sid,
                            accept):
        """Does a POST request to /v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions.

        Updates the actions of an Task identified by {TaskSid} or
        {TaskUniqueName}.

        Args:
            assistant_sid (str): (Required) The SID of the
                [Assistant](https://www.twilio.com/docs/autopilot/api/assistant
                ) that is the parent of the Task for which the task actions to
                update were defined.
            task_sid (str): (Required) The SID of the
                [Task](https://www.twilio.com/docs/autopilot/api/task) for
                which the task actions to update were defined.
            accept (str): The request header parameter.

        Returns:
            OK262: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('AssistantSid')
                            .value(assistant_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('TaskSid')
                            .value(task_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK262.from_dictionary)
        ).execute()
