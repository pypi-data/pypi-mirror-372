# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_189 import OK189
from twilioapiexplorer.models.ok_191 import OK191


class SIMsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(SIMsController, self).__init__(config)

    def fetch_sim(self,
                  sid,
                  accept):
        """Does a GET request to /v1/Sims/{Sid}.

        Fetch a Sim resource on your Account.

        Args:
            sid (str): (Required) The SID or the `unique_name` of the Sim
                resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK189: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Sims/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK189.from_dictionary)
        ).execute()

    def update_sim(self,
                   sid,
                   accept,
                   unique_name,
                   callback_method,
                   callback_url,
                   friendly_name,
                   rate_plan,
                   status,
                   commands_callback_method,
                   commands_callback_url,
                   sms_fallback_method,
                   sms_fallback_url,
                   sms_method,
                   sms_url,
                   voice_fallback_method,
                   voice_fallback_url,
                   voice_method,
                   voice_url,
                   reset_status,
                   account_sid):
        """Does a POST request to /v1/Sims/{Sid}.

        Updates the given properties of a Sim resource on your Account.

        Args:
            sid (str): (Required) The SID or the `unique_name` of the Sim
                resource to update.
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. It can be used in place of the `sid`
                in the URL path to address the resource.
            callback_method (str): The HTTP method we should use to call
                `callback_url`. Can be: `POST` or `GET`. The default is `POST`.
            callback_url (str): The URL we should call using the
                `callback_url` when the SIM has finished updating. When the
                SIM transitions from `new` to `ready` or from any status to
                `deactivated`, we call this URL when the status changes to an
                intermediate status (`ready` or `deactivated`) and again when
                the status changes to its final status (`active` or
                `canceled`).
            friendly_name (str): A descriptive string that you create to
                describe the Sim resource. It does not need to be unique.
            rate_plan (str): The SID or unique name of the [RatePlan
                resource](https://www.twilio.com/docs/wireless/api/rateplan-res
                ource) to which the Sim resource should be assigned.
            status (str): The new status of the Sim resource. Can be: `ready`,
                `active`, `suspended`, or `deactivated`.
            commands_callback_method (str): The HTTP method we should use to
                call `commands_callback_url`. Can be: `POST` or `GET`. The
                default is `POST`.
            commands_callback_url (str): The URL we should call using the
                `commands_callback_method` when the SIM sends a
                [Command](https://www.twilio.com/docs/wireless/api/command-reso
                urce). Your server should respond with an HTTP status code in
                the 200 range; any response body is ignored.
            sms_fallback_method (str): The HTTP method we should use to call
                `sms_fallback_url`. Can be: `GET` or `POST`. Default is `POST`.
            sms_fallback_url (str): The URL we should call using the
                `sms_fallback_method` when an error occurs while retrieving or
                executing the TwiML requested from `sms_url`.
            sms_method (str): The HTTP method we should use to call `sms_url`.
                Can be: `GET` or `POST`. Default is `POST`.
            sms_url (str): The URL we should call using the `sms_method` when
                the SIM-connected device sends an SMS message that is not a
                [Command](https://www.twilio.com/docs/wireless/api/command-reso
                urce).
            voice_fallback_method (str): Deprecated.
            voice_fallback_url (str): Deprecated.
            voice_method (str): Deprecated.
            voice_url (str): Deprecated.
            reset_status (str): Initiate a connectivity reset on the SIM. Set
                to `resetting` to initiate a connectivity reset on the SIM. No
                other value is valid.
            account_sid (str): The SID of the
                [Account](https://www.twilio.com/docs/iam/api/account) to
                which the Sim resource should belong. The Account SID can only
                be that of the requesting Account or that of a
                [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts)
                of the requesting Account. Only valid when the Sim resource's
                status is `new`. For more information, see the [Move SIMs
                between Subaccounts
                documentation](https://www.twilio.com/docs/wireless/api/sim-res
                ource#move-sims-between-subaccounts).

        Returns:
            OK189: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Sims/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('CallbackMethod')
                        .value(callback_method))
            .form_param(Parameter()
                        .key('CallbackUrl')
                        .value(callback_url))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('RatePlan')
                        .value(rate_plan))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .form_param(Parameter()
                        .key('CommandsCallbackMethod')
                        .value(commands_callback_method))
            .form_param(Parameter()
                        .key('CommandsCallbackUrl')
                        .value(commands_callback_url))
            .form_param(Parameter()
                        .key('SmsFallbackMethod')
                        .value(sms_fallback_method))
            .form_param(Parameter()
                        .key('SmsFallbackUrl')
                        .value(sms_fallback_url))
            .form_param(Parameter()
                        .key('SmsMethod')
                        .value(sms_method))
            .form_param(Parameter()
                        .key('SmsUrl')
                        .value(sms_url))
            .form_param(Parameter()
                        .key('VoiceFallbackMethod')
                        .value(voice_fallback_method))
            .form_param(Parameter()
                        .key('VoiceFallbackUrl')
                        .value(voice_fallback_url))
            .form_param(Parameter()
                        .key('VoiceMethod')
                        .value(voice_method))
            .form_param(Parameter()
                        .key('VoiceUrl')
                        .value(voice_url))
            .form_param(Parameter()
                        .key('ResetStatus')
                        .value(reset_status))
            .form_param(Parameter()
                        .key('AccountSid')
                        .value(account_sid))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK189.from_dictionary)
        ).execute()

    def delete_sim(self,
                   sid):
        """Does a DELETE request to /v1/Sims/{Sid}.

        Delete a Sim resource on your Account.

        Args:
            sid (str): (Required) The SID or the `unique_name` of the Sim
                resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Sims/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_sim(self,
                 status,
                 iccid,
                 rate_plan,
                 e_id,
                 sim_registration_code,
                 page_size,
                 accept):
        """Does a GET request to /v1/Sims.

        Retrieve a list of Sim resources on your Account.

        Args:
            status (str): Only return Sim resources with this status.
            iccid (str): Only return Sim resources with this ICCID. This will
                return a list with a maximum size of 1.
            rate_plan (str): The SID or unique name of a [RatePlan
                resource](https://www.twilio.com/docs/wireless/api/rateplan-res
                ource). Only return Sim resources assigned to this RatePlan
                resource.
            e_id (str): Deprecated.
            sim_registration_code (str): Only return Sim resources with this
                registration code. This will return a list with a maximum size
                of 1.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK191: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Sims')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Status')
                         .value(status))
            .query_param(Parameter()
                         .key('Iccid')
                         .value(iccid))
            .query_param(Parameter()
                         .key('RatePlan')
                         .value(rate_plan))
            .query_param(Parameter()
                         .key('EId')
                         .value(e_id))
            .query_param(Parameter()
                         .key('SimRegistrationCode')
                         .value(sim_registration_code))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK191.from_dictionary)
        ).execute()
