# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_351 import OK351
from twilioapiexplorer.models.ok_352 import OK352


class LogsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(LogsController, self).__init__(config)

    def list_log(self,
                 function_sid,
                 start_date,
                 end_date,
                 page_size,
                 service_sid,
                 environment_sid,
                 accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs.

        Retrieve a list of all logs.

        Args:
            function_sid (str): The SID of the function whose invocation
                produced the Log resources to read.
            start_date (str): The date/time (in GMT, ISO 8601) after which the
                Log resources must have been created. Defaults to 1 day prior
                to current date/time.
            end_date (str): The date/time (in GMT, ISO 8601) before which the
                Log resources must have been created. Defaults to current
                date/time.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            service_sid (str): (Required) The SID of the Service to read the
                Log resource from.
            environment_sid (str): (Required) The SID of the environment with
                the Log resources to read.
            accept (str): The request header parameter.

        Returns:
            OK351: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FunctionSid')
                         .value(function_sid))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('EnvironmentSid')
                            .value(environment_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK351.from_dictionary)
        ).execute()

    def fetch_log(self,
                  service_sid,
                  environment_sid,
                  sid,
                  accept):
        """Does a GET request to /v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs/{Sid}.

        Retrieve a specific log.

        Args:
            service_sid (str): (Required) The SID of the Service to fetch the
                Log resource from.
            environment_sid (str): (Required) The SID of the environment with
                the Log resource to fetch.
            sid (str): (Required) The SID of the Log resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK352: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{ServiceSid}/Environments/{EnvironmentSid}/Logs/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ServiceSid')
                            .value(service_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('EnvironmentSid')
                            .value(environment_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK352.from_dictionary)
        ).execute()
