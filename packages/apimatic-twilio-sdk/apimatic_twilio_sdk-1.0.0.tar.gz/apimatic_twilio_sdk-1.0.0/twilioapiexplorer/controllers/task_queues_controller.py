# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_73 import OK73
from twilioapiexplorer.models.ok_74 import OK74
from twilioapiexplorer.models.ok_75 import OK75
from twilioapiexplorer.models.ok_76 import OK76
from twilioapiexplorer.models.ok_78 import OK78
from twilioapiexplorer.models.created_22 import Created22
from twilioapiexplorer.models.ok_79 import OK79


class TaskQueuesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(TaskQueuesController, self).__init__(config)

    def fetch_task_queue_cumulative_statistics(self,
                                               end_date,
                                               minutes,
                                               start_date,
                                               task_channel,
                                               split_by_wait_time,
                                               accept,
                                               workspace_sid,
                                               task_queue_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/CumulativeStatistics.

        Args:
            end_date (str): Only calculate statistics from this date and time
                and earlier, specified in GMT as an [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
            minutes (int): Only calculate statistics since this many minutes
                in the past. The default is 15 minutes.
            start_date (str): Only calculate statistics from this date and
                time and later, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            task_channel (str): Only calculate cumulative statistics on this
                TaskChannel. Can be the TaskChannel's SID or its
                `unique_name`, such as `voice`, `sms`, or `default`.
            split_by_wait_time (str): A comma separated list of values that
                describes the thresholds, in seconds, to calculate statistics
                on. For each threshold specified, the number of Tasks canceled
                and reservations accepted above and below the specified
                thresholds in seconds are computed. TaskRouter will calculate
                statistics on up to 10,000 Tasks/Reservations for any given
                threshold.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            task_queue_sid (str): The request template parameter.

        Returns:
            OK73: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/CumulativeStatistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .query_param(Parameter()
                         .key('SplitByWaitTime')
                         .value(split_by_wait_time))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('TaskQueueSid')
                            .value(task_queue_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK73.from_dictionary)
        ).execute()

    def fetch_task_queue_real_time_statistics(self,
                                              task_channel,
                                              accept,
                                              workspace_sid,
                                              task_queue_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/RealTimeStatistics.

        Args:
            task_channel (str): The TaskChannel for which to fetch statistics.
                Can be the TaskChannel's SID or its `unique_name`, such as
                `voice`, `sms`, or `default`.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            task_queue_sid (str): The request template parameter.

        Returns:
            OK74: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/RealTimeStatistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('TaskQueueSid')
                            .value(task_queue_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK74.from_dictionary)
        ).execute()

    def fetch_task_queue_statistics(self,
                                    end_date,
                                    minutes,
                                    start_date,
                                    task_channel,
                                    split_by_wait_time,
                                    accept,
                                    workspace_sid,
                                    task_queue_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics.

        Args:
            end_date (str): Only calculate statistics from this date and time
                and earlier, specified in GMT as an [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
            minutes (int): Only calculate statistics since this many minutes
                in the past. The default is 15 minutes.
            start_date (str): Only calculate statistics from this date and
                time and later, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            task_channel (str): Only calculate real-time and cumulative
                statistics for the specified TaskChannel. Can be the
                TaskChannel's SID or its `unique_name`, such as `voice`,
                `sms`, or `default`.
            split_by_wait_time (str): A comma separated list of values that
                describes the thresholds, in seconds, to calculate statistics
                on. For each threshold specified, the number of Tasks canceled
                and reservations accepted above and below the specified
                thresholds in seconds are computed.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            task_queue_sid (str): The request template parameter.

        Returns:
            OK75: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .query_param(Parameter()
                         .key('SplitByWaitTime')
                         .value(split_by_wait_time))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('TaskQueueSid')
                            .value(task_queue_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK75.from_dictionary)
        ).execute()

    def fetch_task_queue(self,
                         accept,
                         workspace_sid,
                         sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/TaskQueues/{Sid}.

        Args:
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK76: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK76.from_dictionary)
        ).execute()

    def update_task_queue(self,
                          accept,
                          friendly_name,
                          target_workers,
                          reservation_activity_sid,
                          assignment_activity_sid,
                          max_reserved_workers,
                          task_order,
                          workspace_sid,
                          sid):
        """Does a POST request to /Workspaces/{WorkspaceSid}/TaskQueues/{Sid}.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the TaskQueue. For example `Support-Tier 1`, `Sales`,
                or `Escalation`.
            target_workers (str): A string describing the Worker selection
                criteria for any Tasks that enter the TaskQueue. For example
                '"language" == "spanish"' If no TargetWorkers parameter is
                provided, Tasks will wait in the queue until they are either
                deleted or moved to another queue. Additional examples on how
                to describing Worker selection criteria below.
            reservation_activity_sid (str): The SID of the Activity to assign
                Workers when a task is reserved for them.
            assignment_activity_sid (str): The SID of the Activity to assign
                Workers when a task is assigned for them.
            max_reserved_workers (int): The maximum number of Workers to
                create reservations for the assignment of a task while in the
                queue. Maximum of 50.
            task_order (str): How Tasks will be assigned to Workers. Can be:
                `FIFO` or `LIFO` and the default is `FIFO`. Use `FIFO` to
                assign the oldest task first and `LIFO` to assign the most
                recent task first. For more information, see [Queue
                Ordering](https://www.twilio.com/docs/taskrouter/queue-ordering
                -last-first-out-lifo).
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            OK76: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('TargetWorkers')
                        .value(target_workers))
            .form_param(Parameter()
                        .key('ReservationActivitySid')
                        .value(reservation_activity_sid))
            .form_param(Parameter()
                        .key('AssignmentActivitySid')
                        .value(assignment_activity_sid))
            .form_param(Parameter()
                        .key('MaxReservedWorkers')
                        .value(max_reserved_workers))
            .form_param(Parameter()
                        .key('TaskOrder')
                        .value(task_order))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK76.from_dictionary)
        ).execute()

    def delete_task_queue(self,
                          workspace_sid,
                          sid):
        """Does a DELETE request to /Workspaces/{WorkspaceSid}/TaskQueues/{Sid}.

        Args:
            workspace_sid (str): The request template parameter.
            sid (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def list_task_queue(self,
                        friendly_name,
                        evaluate_worker_attributes,
                        worker_sid,
                        ordering,
                        page_size,
                        accept,
                        workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/TaskQueues.

        Args:
            friendly_name (str): The `friendly_name` of the TaskQueue
                resources to read.
            evaluate_worker_attributes (str): The attributes of the Workers to
                read. Returns the TaskQueues with Workers that match the
                attributes specified in this parameter.
            worker_sid (str): The SID of the Worker with the TaskQueue
                resources to read.
            ordering (str): Sorting parameter for TaskQueues
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK78: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/TaskQueues')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FriendlyName')
                         .value(friendly_name))
            .query_param(Parameter()
                         .key('EvaluateWorkerAttributes')
                         .value(evaluate_worker_attributes))
            .query_param(Parameter()
                         .key('WorkerSid')
                         .value(worker_sid))
            .query_param(Parameter()
                         .key('Ordering')
                         .value(ordering))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK78.from_dictionary)
        ).execute()

    def create_task_queue(self,
                          accept,
                          friendly_name,
                          target_workers,
                          max_reserved_workers,
                          task_order,
                          reservation_activity_sid,
                          assignment_activity_sid,
                          workspace_sid):
        """Does a POST request to /Workspaces/{WorkspaceSid}/TaskQueues.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the TaskQueue. For example `Support-Tier
                1`, `Sales`, or `Escalation`.
            target_workers (str): A string that describes the Worker selection
                criteria for any Tasks that enter the TaskQueue. For example,
                `'"language" == "spanish"'`. The default value is `1==1`. If
                this value is empty, Tasks will wait in the TaskQueue until
                they are deleted or moved to another TaskQueue. For more
                information about Worker selection, see [Describing Worker
                selection
                criteria](https://www.twilio.com/docs/taskrouter/api/taskqueues
                #target-workers).
            max_reserved_workers (int): The maximum number of Workers to
                reserve for the assignment of a Task in the queue. Can be an
                integer between 1 and 50, inclusive and defaults to 1.
            task_order (str): How Tasks will be assigned to Workers. Set this
                parameter to `LIFO` to assign most recently created Task first
                or FIFO to assign the oldest Task first. Default is `FIFO`.
                [Click
                here](https://www.twilio.com/docs/taskrouter/queue-ordering-las
                t-first-out-lifo) to learn more.
            reservation_activity_sid (str): The SID of the Activity to assign
                Workers when a task is reserved for them.
            assignment_activity_sid (str): The SID of the Activity to assign
                Workers when a task is assigned to them.
            workspace_sid (str): The request template parameter.

        Returns:
            Created22: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/TaskQueues')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('TargetWorkers')
                        .value(target_workers))
            .form_param(Parameter()
                        .key('MaxReservedWorkers')
                        .value(max_reserved_workers))
            .form_param(Parameter()
                        .key('TaskOrder')
                        .value(task_order))
            .form_param(Parameter()
                        .key('ReservationActivitySid')
                        .value(reservation_activity_sid))
            .form_param(Parameter()
                        .key('AssignmentActivitySid')
                        .value(assignment_activity_sid))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created22.from_dictionary)
        ).execute()

    def list_task_queues_statistics(self,
                                    end_date,
                                    friendly_name,
                                    minutes,
                                    start_date,
                                    task_channel,
                                    split_by_wait_time,
                                    page_size,
                                    accept,
                                    workspace_sid):
        """Does a GET request to /Workspaces/{WorkspaceSid}/TaskQueues/Statistics.

        Args:
            end_date (str): Only calculate statistics from this date and time
                and earlier, specified in GMT as an [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
            friendly_name (str): The `friendly_name` of the TaskQueue
                statistics to read.
            minutes (int): Only calculate statistics since this many minutes
                in the past. The default is 15 minutes.
            start_date (str): Only calculate statistics from this date and
                time and later, specified in [ISO
                8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            task_channel (str): Only calculate statistics on this TaskChannel.
                Can be the TaskChannel's SID or its `unique_name`, such as
                `voice`, `sms`, or `default`.
            split_by_wait_time (str): A comma separated list of values that
                describes the thresholds, in seconds, to calculate statistics
                on. For each threshold specified, the number of Tasks canceled
                and reservations accepted above and below the specified
                thresholds in seconds are computed.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.
            workspace_sid (str): The request template parameter.

        Returns:
            OK79: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_7)
            .path('/Workspaces/{WorkspaceSid}/TaskQueues/Statistics')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('EndDate')
                         .value(end_date))
            .query_param(Parameter()
                         .key('FriendlyName')
                         .value(friendly_name))
            .query_param(Parameter()
                         .key('Minutes')
                         .value(minutes))
            .query_param(Parameter()
                         .key('StartDate')
                         .value(start_date))
            .query_param(Parameter()
                         .key('TaskChannel')
                         .value(task_channel))
            .query_param(Parameter()
                         .key('SplitByWaitTime')
                         .value(split_by_wait_time))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .template_param(Parameter()
                            .key('WorkspaceSid')
                            .value(workspace_sid)
                            .should_encode(True))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK79.from_dictionary)
        ).execute()
