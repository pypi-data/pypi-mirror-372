# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.created_42 import Created42
from twilioapiexplorer.models.ok_148 import OK148
from twilioapiexplorer.models.ok_149 import OK149
from twilioapiexplorer.models.ok_240 import OK240
from twilioapiexplorer.models.ok_242 import OK242
from twilioapiexplorer.models.created_63 import Created63
from twilioapiexplorer.models.created_84 import Created84
from twilioapiexplorer.models.ok_301 import OK301
from twilioapiexplorer.models.ok_302 import OK302
from twilioapiexplorer.models.ok_353 import OK353
from twilioapiexplorer.models.created_97 import Created97
from twilioapiexplorer.models.ok_354 import OK354


class ServicesController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(ServicesController, self).__init__(config)

    def create_service(self,
                       accept,
                       friendly_name,
                       apn_credential_sid,
                       gcm_credential_sid,
                       messaging_service_sid,
                       facebook_messenger_page_id,
                       default_apn_notification_protocol_version,
                       default_gcm_notification_protocol_version,
                       fcm_credential_sid,
                       default_fcm_notification_protocol_version,
                       log_enabled,
                       alexa_skill_id,
                       default_alexa_notification_protocol_version,
                       delivery_callback_url,
                       delivery_callback_enabled):
        """Does a POST request to /Services.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 64 characters long.
            apn_credential_sid (str): The SID of the
                [Credential](https://www.twilio.com/docs/notify/api/credential-
                resource) to use for APN Bindings.
            gcm_credential_sid (str): The SID of the
                [Credential](https://www.twilio.com/docs/notify/api/credential-
                resource) to use for GCM Bindings.
            messaging_service_sid (str): The SID of the [Messaging
                Service](https://www.twilio.com/docs/sms/send-messages#messagin
                g-services) to use for SMS Bindings. This parameter must be
                set in order to send SMS notifications.
            facebook_messenger_page_id (str): Deprecated.
            default_apn_notification_protocol_version (str): The protocol
                version to use for sending APNS notifications. Can be
                overridden on a Binding by Binding basis when creating a
                [Binding](https://www.twilio.com/docs/notify/api/binding-resour
                ce) resource.
            default_gcm_notification_protocol_version (str): The protocol
                version to use for sending GCM notifications. Can be
                overridden on a Binding by Binding basis when creating a
                [Binding](https://www.twilio.com/docs/notify/api/binding-resour
                ce) resource.
            fcm_credential_sid (str): The SID of the
                [Credential](https://www.twilio.com/docs/notify/api/credential-
                resource) to use for FCM Bindings.
            default_fcm_notification_protocol_version (str): The protocol
                version to use for sending FCM notifications. Can be
                overridden on a Binding by Binding basis when creating a
                [Binding](https://www.twilio.com/docs/notify/api/binding-resour
                ce) resource.
            log_enabled (bool): Whether to log notifications. Can be: `true`
                or `false` and the default is `true`.
            alexa_skill_id (str): Deprecated.
            default_alexa_notification_protocol_version (str): Deprecated.
            delivery_callback_url (str): URL to send delivery status callback.
            delivery_callback_enabled (bool): Callback configuration that
                enables delivery callbacks, default false

        Returns:
            Created42: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('ApnCredentialSid')
                        .value(apn_credential_sid))
            .form_param(Parameter()
                        .key('GcmCredentialSid')
                        .value(gcm_credential_sid))
            .form_param(Parameter()
                        .key('MessagingServiceSid')
                        .value(messaging_service_sid))
            .form_param(Parameter()
                        .key('FacebookMessengerPageId')
                        .value(facebook_messenger_page_id))
            .form_param(Parameter()
                        .key('DefaultApnNotificationProtocolVersion')
                        .value(default_apn_notification_protocol_version))
            .form_param(Parameter()
                        .key('DefaultGcmNotificationProtocolVersion')
                        .value(default_gcm_notification_protocol_version))
            .form_param(Parameter()
                        .key('FcmCredentialSid')
                        .value(fcm_credential_sid))
            .form_param(Parameter()
                        .key('DefaultFcmNotificationProtocolVersion')
                        .value(default_fcm_notification_protocol_version))
            .form_param(Parameter()
                        .key('LogEnabled')
                        .value(log_enabled))
            .form_param(Parameter()
                        .key('AlexaSkillId')
                        .value(alexa_skill_id))
            .form_param(Parameter()
                        .key('DefaultAlexaNotificationProtocolVersion')
                        .value(default_alexa_notification_protocol_version))
            .form_param(Parameter()
                        .key('DeliveryCallbackUrl')
                        .value(delivery_callback_url))
            .form_param(Parameter()
                        .key('DeliveryCallbackEnabled')
                        .value(delivery_callback_enabled))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created42.from_dictionary)
        ).execute()

    def list_service(self,
                     friendly_name,
                     page_size,
                     accept):
        """Does a GET request to /Services.

        Args:
            friendly_name (str): The string that identifies the Service
                resources to read.
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK148: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FriendlyName')
                         .value(friendly_name))
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK148.from_dictionary)
        ).execute()

    def delete_service(self,
                       sid):
        """Does a DELETE request to /v1/Services/{Sid}.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Service resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def fetch_service(self,
                      sid,
                      accept):
        """Does a GET request to /v1/Services/{Sid}.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Service resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK149: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK149.from_dictionary)
        ).execute()

    def update_service(self,
                       sid,
                       accept,
                       friendly_name,
                       apn_credential_sid,
                       gcm_credential_sid,
                       messaging_service_sid,
                       facebook_messenger_page_id,
                       default_apn_notification_protocol_version,
                       default_gcm_notification_protocol_version,
                       fcm_credential_sid,
                       default_fcm_notification_protocol_version,
                       log_enabled,
                       alexa_skill_id,
                       default_alexa_notification_protocol_version,
                       delivery_callback_url,
                       delivery_callback_enabled):
        """Does a POST request to /v1/Services/{Sid}.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Service resource to update.
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the resource. It can be up to 64 characters long.
            apn_credential_sid (str): The SID of the
                [Credential](https://www.twilio.com/docs/notify/api/credential-
                resource) to use for APN Bindings.
            gcm_credential_sid (str): The SID of the
                [Credential](https://www.twilio.com/docs/notify/api/credential-
                resource) to use for GCM Bindings.
            messaging_service_sid (str): The SID of the [Messaging
                Service](https://www.twilio.com/docs/sms/send-messages#messagin
                g-services) to use for SMS Bindings. This parameter must be
                set in order to send SMS notifications.
            facebook_messenger_page_id (str): Deprecated.
            default_apn_notification_protocol_version (str): The protocol
                version to use for sending APNS notifications. Can be
                overridden on a Binding by Binding basis when creating a
                [Binding](https://www.twilio.com/docs/notify/api/binding-resour
                ce) resource.
            default_gcm_notification_protocol_version (str): The protocol
                version to use for sending GCM notifications. Can be
                overridden on a Binding by Binding basis when creating a
                [Binding](https://www.twilio.com/docs/notify/api/binding-resour
                ce) resource.
            fcm_credential_sid (str): The SID of the
                [Credential](https://www.twilio.com/docs/notify/api/credential-
                resource) to use for FCM Bindings.
            default_fcm_notification_protocol_version (str): The protocol
                version to use for sending FCM notifications. Can be
                overridden on a Binding by Binding basis when creating a
                [Binding](https://www.twilio.com/docs/notify/api/binding-resour
                ce) resource.
            log_enabled (bool): Whether to log notifications. Can be: `true`
                or `false` and the default is `true`.
            alexa_skill_id (str): Deprecated.
            default_alexa_notification_protocol_version (str): Deprecated.
            delivery_callback_url (str): URL to send delivery status callback.
            delivery_callback_enabled (bool): Callback configuration that
                enables delivery callbacks, default false

        Returns:
            OK149: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('ApnCredentialSid')
                        .value(apn_credential_sid))
            .form_param(Parameter()
                        .key('GcmCredentialSid')
                        .value(gcm_credential_sid))
            .form_param(Parameter()
                        .key('MessagingServiceSid')
                        .value(messaging_service_sid))
            .form_param(Parameter()
                        .key('FacebookMessengerPageId')
                        .value(facebook_messenger_page_id))
            .form_param(Parameter()
                        .key('DefaultApnNotificationProtocolVersion')
                        .value(default_apn_notification_protocol_version))
            .form_param(Parameter()
                        .key('DefaultGcmNotificationProtocolVersion')
                        .value(default_gcm_notification_protocol_version))
            .form_param(Parameter()
                        .key('FcmCredentialSid')
                        .value(fcm_credential_sid))
            .form_param(Parameter()
                        .key('DefaultFcmNotificationProtocolVersion')
                        .value(default_fcm_notification_protocol_version))
            .form_param(Parameter()
                        .key('LogEnabled')
                        .value(log_enabled))
            .form_param(Parameter()
                        .key('AlexaSkillId')
                        .value(alexa_skill_id))
            .form_param(Parameter()
                        .key('DefaultAlexaNotificationProtocolVersion')
                        .value(default_alexa_notification_protocol_version))
            .form_param(Parameter()
                        .key('DeliveryCallbackUrl')
                        .value(delivery_callback_url))
            .form_param(Parameter()
                        .key('DeliveryCallbackEnabled')
                        .value(delivery_callback_enabled))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK149.from_dictionary)
        ).execute()

    def fetch_service_1(self,
                        sid,
                        accept):
        """Does a GET request to /v1/Services/{Sid}.

        Fetch a specific Service.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Service resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK240: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK240.from_dictionary)
        ).execute()

    def delete_service_1(self,
                         sid):
        """Does a DELETE request to /v1/Services/{Sid}.

        Delete a specific Service.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Service resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_service_1(self,
                         sid,
                         accept,
                         unique_name,
                         default_ttl,
                         callback_url,
                         geo_match_level,
                         number_selection_behavior,
                         intercept_callback_url,
                         out_of_session_callback_url,
                         chat_instance_sid):
        """Does a POST request to /v1/Services/{Sid}.

        Update a specific Service.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Service resource to update.
            accept (str): The request header parameter.
            unique_name (str): An application-defined string that uniquely
                identifies the resource. This value must be 191 characters or
                fewer in length and be unique. **This value should not have
                PII.**
            default_ttl (int): The default `ttl` value to set for Sessions
                created in the Service. The TTL (time to live) is measured in
                seconds after the Session's last create or last Interaction.
                The default value of `0` indicates an unlimited Session
                length. You can override a Session's default TTL value by
                setting its `ttl` value.
            callback_url (str): The URL we should call when the interaction
                status changes.
            geo_match_level (str): Where a proxy number must be located
                relative to the participant identifier. Can be: `country`,
                `area-code`, or `extended-area-code`. The default value is
                `country` and more specific areas than `country` are only
                available in North America.
            number_selection_behavior (str): The preference for Proxy Number
                selection in the Service instance. Can be: `prefer-sticky` or
                `avoid-sticky` and the default is `prefer-sticky`.
                `prefer-sticky` means that we will try and select the same
                Proxy Number for a given participant if they have previous
                [Sessions](https://www.twilio.com/docs/proxy/api/session), but
                we will not fail if that Proxy Number cannot be used. 
                `avoid-sticky` means that we will try to use different Proxy
                Numbers as long as that is possible within a given pool rather
                than try and use a previously assigned number.
            intercept_callback_url (str): The URL we call on each interaction.
                If we receive a 403 status, we block the interaction;
                otherwise the interaction continues.
            out_of_session_callback_url (str): The URL we should call when an
                inbound call or SMS action occurs on a closed or non-existent
                Session. If your server (or a Twilio
                [function](https://www.twilio.com/functions)) responds with
                valid [TwiML](https://www.twilio.com/docs/voice/twiml), we
                will process it. This means it is possible, for example, to
                play a message for a call, send an automated text message
                response, or redirect a call to another Phone Number. See
                [Out-of-Session Callback Response
                Guide](https://www.twilio.com/docs/proxy/out-session-callback-r
                esponse-guide) for more information.
            chat_instance_sid (str): The SID of the Chat Service Instance
                managed by Proxy Service. The Chat Service enables Proxy to
                forward SMS and channel messages to this chat instance. This
                is a one-to-one relationship.

        Returns:
            OK240: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('DefaultTtl')
                        .value(default_ttl))
            .form_param(Parameter()
                        .key('CallbackUrl')
                        .value(callback_url))
            .form_param(Parameter()
                        .key('GeoMatchLevel')
                        .value(geo_match_level))
            .form_param(Parameter()
                        .key('NumberSelectionBehavior')
                        .value(number_selection_behavior))
            .form_param(Parameter()
                        .key('InterceptCallbackUrl')
                        .value(intercept_callback_url))
            .form_param(Parameter()
                        .key('OutOfSessionCallbackUrl')
                        .value(out_of_session_callback_url))
            .form_param(Parameter()
                        .key('ChatInstanceSid')
                        .value(chat_instance_sid))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK240.from_dictionary)
        ).execute()

    def list_service_3(self,
                       page_size,
                       accept):
        """Does a GET request to /Services.

        Retrieve a list of all Services for Twilio Proxy. A maximum of 100
        records will be returned per page.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK242: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK242.from_dictionary)
        ).execute()

    def create_service_1(self,
                         accept,
                         unique_name,
                         default_ttl,
                         callback_url,
                         geo_match_level,
                         number_selection_behavior,
                         intercept_callback_url,
                         out_of_session_callback_url,
                         chat_instance_sid):
        """Does a POST request to /Services.

        Create a new Service for Twilio Proxy

        Args:
            accept (str): The request header parameter.
            unique_name (str): (Required) An application-defined string that
                uniquely identifies the resource. This value must be 191
                characters or fewer in length and be unique. **This value
                should not have PII.**
            default_ttl (int): The default `ttl` value to set for Sessions
                created in the Service. The TTL (time to live) is measured in
                seconds after the Session's last create or last Interaction.
                The default value of `0` indicates an unlimited Session
                length. You can override a Session's default TTL value by
                setting its `ttl` value.
            callback_url (str): The URL we should call when the interaction
                status changes.
            geo_match_level (str): Where a proxy number must be located
                relative to the participant identifier. Can be: `country`,
                `area-code`, or `extended-area-code`. The default value is
                `country` and more specific areas than `country` are only
                available in North America.
            number_selection_behavior (str): The preference for Proxy Number
                selection in the Service instance. Can be: `prefer-sticky` or
                `avoid-sticky` and the default is `prefer-sticky`.
                `prefer-sticky` means that we will try and select the same
                Proxy Number for a given participant if they have previous
                [Sessions](https://www.twilio.com/docs/proxy/api/session), but
                we will not fail if that Proxy Number cannot be used. 
                `avoid-sticky` means that we will try to use different Proxy
                Numbers as long as that is possible within a given pool rather
                than try and use a previously assigned number.
            intercept_callback_url (str): The URL we call on each interaction.
                If we receive a 403 status, we block the interaction;
                otherwise the interaction continues.
            out_of_session_callback_url (str): The URL we should call when an
                inbound call or SMS action occurs on a closed or non-existent
                Session. If your server (or a Twilio
                [function](https://www.twilio.com/functions)) responds with
                valid [TwiML](https://www.twilio.com/docs/voice/twiml), we
                will process it. This means it is possible, for example, to
                play a message for a call, send an automated text message
                response, or redirect a call to another Phone Number. See
                [Out-of-Session Callback Response
                Guide](https://www.twilio.com/docs/proxy/out-session-callback-r
                esponse-guide) for more information.
            chat_instance_sid (str): The SID of the Chat Service Instance
                managed by Proxy Service. The Chat Service enables Proxy to
                forward SMS and channel messages to this chat instance. This
                is a one-to-one relationship.

        Returns:
            Created63: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('DefaultTtl')
                        .value(default_ttl))
            .form_param(Parameter()
                        .key('CallbackUrl')
                        .value(callback_url))
            .form_param(Parameter()
                        .key('GeoMatchLevel')
                        .value(geo_match_level))
            .form_param(Parameter()
                        .key('NumberSelectionBehavior')
                        .value(number_selection_behavior))
            .form_param(Parameter()
                        .key('InterceptCallbackUrl')
                        .value(intercept_callback_url))
            .form_param(Parameter()
                        .key('OutOfSessionCallbackUrl')
                        .value(out_of_session_callback_url))
            .form_param(Parameter()
                        .key('ChatInstanceSid')
                        .value(chat_instance_sid))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created63.from_dictionary)
        ).execute()

    def create_service_2(self,
                         accept,
                         friendly_name,
                         code_length,
                         lookup_enabled,
                         skip_sms_to_landlines,
                         dtmf_input_required,
                         tts_name,
                         psd_2_enabled,
                         do_not_share_warning_enabled,
                         custom_code_enabled,
                         push_include_date,
                         push_apn_credential_sid,
                         push_fcm_credential_sid,
                         totp_issuer,
                         totp_time_step,
                         totp_code_length,
                         totp_skew,
                         default_template_sid):
        """Does a POST request to /v2/Services.

        Create a new Verification Service.

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the verification service. It can be up to
                30 characters long. **This value should not contain PII.**
            code_length (int): The length of the verification code to
                generate. Must be an integer value between 4 and 10, inclusive.
            lookup_enabled (bool): Whether to perform a lookup with each
                verification started and return info about the phone number.
            skip_sms_to_landlines (bool): Whether to skip sending SMS
                verifications to landlines. Requires `lookup_enabled`.
            dtmf_input_required (bool): Whether to ask the user to press a
                number before delivering the verify code in a phone call.
            tts_name (str): The name of an alternative text-to-speech service
                to use in phone calls. Applies only to TTS languages.
            psd_2_enabled (bool): Whether to pass PSD2 transaction parameters
                when starting a verification.
            do_not_share_warning_enabled (bool): Whether to add a security
                warning at the end of an SMS verification body. Disabled by
                default and applies only to SMS. Example SMS body: `Your
                AppName verification code is: 1234. Don’t share this code with
                anyone; our employees will never ask for the code`
            custom_code_enabled (bool): Whether to allow sending verifications
                with a custom code instead of a randomly generated one. Not
                available for all customers.
            push_include_date (bool): Optional configuration for the Push
                factors. If true, include the date in the Challenge's
                response. Otherwise, the date is omitted from the response.
                See
                [Challenge](https://www.twilio.com/docs/verify/api/challenge)
                resource’s details parameter for more info. Default: false.
                **Deprecated** do not use this parameter. This timestamp value
                is the same one as the one found in `date_created`, please use
                that one instead.
            push_apn_credential_sid (str): Optional configuration for the Push
                factors. Set the APN Credential for this service. This will
                allow to send push notifications to iOS devices. See
                [Credential
                Resource](https://www.twilio.com/docs/notify/api/credential-res
                ource)
            push_fcm_credential_sid (str): Optional configuration for the Push
                factors. Set the FCM Credential for this service. This will
                allow to send push notifications to Android devices. See
                [Credential
                Resource](https://www.twilio.com/docs/notify/api/credential-res
                ource)
            totp_issuer (str): Optional configuration for the TOTP factors.
                Set TOTP Issuer for this service. This will allow to configure
                the issuer of the TOTP URI. Defaults to the service friendly
                name if not provided.
            totp_time_step (int): Optional configuration for the TOTP factors.
                Defines how often, in seconds, are TOTP codes generated. i.e,
                a new TOTP code is generated every time_step seconds. Must be
                between 20 and 60 seconds, inclusive. Defaults to 30 seconds
            totp_code_length (int): Optional configuration for the TOTP
                factors. Number of digits for generated TOTP codes. Must be
                between 3 and 8, inclusive. Defaults to 6
            totp_skew (int): Optional configuration for the TOTP factors. The
                number of time-steps, past and future, that are valid for
                validation of TOTP codes. Must be between 0 and 2, inclusive.
                Defaults to 1
            default_template_sid (str): The default message
                [template](https://www.twilio.com/docs/verify/api/templates).
                Will be used for all SMS verifications unless explicitly
                overriden. SMS channel only.

        Returns:
            Created84: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('CodeLength')
                        .value(code_length))
            .form_param(Parameter()
                        .key('LookupEnabled')
                        .value(lookup_enabled))
            .form_param(Parameter()
                        .key('SkipSmsToLandlines')
                        .value(skip_sms_to_landlines))
            .form_param(Parameter()
                        .key('DtmfInputRequired')
                        .value(dtmf_input_required))
            .form_param(Parameter()
                        .key('TtsName')
                        .value(tts_name))
            .form_param(Parameter()
                        .key('Psd2Enabled')
                        .value(psd_2_enabled))
            .form_param(Parameter()
                        .key('DoNotShareWarningEnabled')
                        .value(do_not_share_warning_enabled))
            .form_param(Parameter()
                        .key('CustomCodeEnabled')
                        .value(custom_code_enabled))
            .form_param(Parameter()
                        .key('Push.IncludeDate')
                        .value(push_include_date))
            .form_param(Parameter()
                        .key('Push.ApnCredentialSid')
                        .value(push_apn_credential_sid))
            .form_param(Parameter()
                        .key('Push.FcmCredentialSid')
                        .value(push_fcm_credential_sid))
            .form_param(Parameter()
                        .key('Totp.Issuer')
                        .value(totp_issuer))
            .form_param(Parameter()
                        .key('Totp.TimeStep')
                        .value(totp_time_step))
            .form_param(Parameter()
                        .key('Totp.CodeLength')
                        .value(totp_code_length))
            .form_param(Parameter()
                        .key('Totp.Skew')
                        .value(totp_skew))
            .form_param(Parameter()
                        .key('DefaultTemplateSid')
                        .value(default_template_sid))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created84.from_dictionary)
        ).execute()

    def list_service_1(self,
                       page_size,
                       accept):
        """Does a GET request to /v2/Services.

        Retrieve a list of all Verification Services for an account.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK301: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Services')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK301.from_dictionary)
        ).execute()

    def fetch_service_2(self,
                        sid,
                        accept):
        """Does a GET request to /Services/{Sid}.

        Fetch specific Verification Service Instance.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Verification Service resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK302: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK302.from_dictionary)
        ).execute()

    def delete_service_2(self,
                         sid):
        """Does a DELETE request to /Services/{Sid}.

        Delete a specific Verification Service Instance.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Verification Service resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_service_2(self,
                         sid,
                         accept,
                         friendly_name,
                         code_length,
                         lookup_enabled,
                         skip_sms_to_landlines,
                         dtmf_input_required,
                         tts_name,
                         psd_2_enabled,
                         do_not_share_warning_enabled,
                         custom_code_enabled,
                         push_include_date,
                         push_apn_credential_sid,
                         push_fcm_credential_sid,
                         totp_issuer,
                         totp_time_step,
                         totp_code_length,
                         totp_skew,
                         default_template_sid):
        """Does a POST request to /Services/{Sid}.

        Update a specific Verification Service.

        Args:
            sid (str): (Required) The Twilio-provided string that uniquely
                identifies the Service resource to update.
            accept (str): The request header parameter.
            friendly_name (str): A descriptive string that you create to
                describe the verification service. It can be up to 30
                characters long. **This value should not contain PII.**
            code_length (int): The length of the verification code to
                generate. Must be an integer value between 4 and 10, inclusive.
            lookup_enabled (bool): Whether to perform a lookup with each
                verification started and return info about the phone number.
            skip_sms_to_landlines (bool): Whether to skip sending SMS
                verifications to landlines. Requires `lookup_enabled`.
            dtmf_input_required (bool): Whether to ask the user to press a
                number before delivering the verify code in a phone call.
            tts_name (str): The name of an alternative text-to-speech service
                to use in phone calls. Applies only to TTS languages.
            psd_2_enabled (bool): Whether to pass PSD2 transaction parameters
                when starting a verification.
            do_not_share_warning_enabled (bool): Whether to add a privacy
                warning at the end of an SMS. **Disabled by default and
                applies only for SMS.**
            custom_code_enabled (bool): Whether to allow sending verifications
                with a custom code instead of a randomly generated one. Not
                available for all customers.
            push_include_date (bool): Optional configuration for the Push
                factors. If true, include the date in the Challenge's
                response. Otherwise, the date is omitted from the response.
                See
                [Challenge](https://www.twilio.com/docs/verify/api/challenge)
                resource’s details parameter for more info. Default: false.
                **Deprecated** do not use this parameter.
            push_apn_credential_sid (str): Optional configuration for the Push
                factors. Set the APN Credential for this service. This will
                allow to send push notifications to iOS devices. See
                [Credential
                Resource](https://www.twilio.com/docs/notify/api/credential-res
                ource)
            push_fcm_credential_sid (str): Optional configuration for the Push
                factors. Set the FCM Credential for this service. This will
                allow to send push notifications to Android devices. See
                [Credential
                Resource](https://www.twilio.com/docs/notify/api/credential-res
                ource)
            totp_issuer (str): Optional configuration for the TOTP factors.
                Set TOTP Issuer for this service. This will allow to configure
                the issuer of the TOTP URI.
            totp_time_step (int): Optional configuration for the TOTP factors.
                Defines how often, in seconds, are TOTP codes generated. i.e,
                a new TOTP code is generated every time_step seconds. Must be
                between 20 and 60 seconds, inclusive. Defaults to 30 seconds
            totp_code_length (int): Optional configuration for the TOTP
                factors. Number of digits for generated TOTP codes. Must be
                between 3 and 8, inclusive. Defaults to 6
            totp_skew (int): Optional configuration for the TOTP factors. The
                number of time-steps, past and future, that are valid for
                validation of TOTP codes. Must be between 0 and 2, inclusive.
                Defaults to 1
            default_template_sid (str): The default message
                [template](https://www.twilio.com/docs/verify/api/templates).
                Will be used for all SMS verifications unless explicitly
                overriden. SMS channel only.

        Returns:
            OK302: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_11)
            .path('/Services/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('CodeLength')
                        .value(code_length))
            .form_param(Parameter()
                        .key('LookupEnabled')
                        .value(lookup_enabled))
            .form_param(Parameter()
                        .key('SkipSmsToLandlines')
                        .value(skip_sms_to_landlines))
            .form_param(Parameter()
                        .key('DtmfInputRequired')
                        .value(dtmf_input_required))
            .form_param(Parameter()
                        .key('TtsName')
                        .value(tts_name))
            .form_param(Parameter()
                        .key('Psd2Enabled')
                        .value(psd_2_enabled))
            .form_param(Parameter()
                        .key('DoNotShareWarningEnabled')
                        .value(do_not_share_warning_enabled))
            .form_param(Parameter()
                        .key('CustomCodeEnabled')
                        .value(custom_code_enabled))
            .form_param(Parameter()
                        .key('Push.IncludeDate')
                        .value(push_include_date))
            .form_param(Parameter()
                        .key('Push.ApnCredentialSid')
                        .value(push_apn_credential_sid))
            .form_param(Parameter()
                        .key('Push.FcmCredentialSid')
                        .value(push_fcm_credential_sid))
            .form_param(Parameter()
                        .key('Totp.Issuer')
                        .value(totp_issuer))
            .form_param(Parameter()
                        .key('Totp.TimeStep')
                        .value(totp_time_step))
            .form_param(Parameter()
                        .key('Totp.CodeLength')
                        .value(totp_code_length))
            .form_param(Parameter()
                        .key('Totp.Skew')
                        .value(totp_skew))
            .form_param(Parameter()
                        .key('DefaultTemplateSid')
                        .value(default_template_sid))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK302.from_dictionary)
        ).execute()

    def list_service_2(self,
                       page_size,
                       accept):
        """Does a GET request to /Services.

        Retrieve a list of all Services.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            accept (str): The request header parameter.

        Returns:
            OK353: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK353.from_dictionary)
        ).execute()

    def create_service_3(self,
                         accept,
                         unique_name,
                         friendly_name,
                         include_credentials,
                         ui_editable):
        """Does a POST request to /Services.

        Create a new Service resource.

        Args:
            accept (str): The request header parameter.
            unique_name (str): (Required) A user-defined string that uniquely
                identifies the Service resource. It can be used as an
                alternative to the `sid` in the URL path to address the
                Service resource. This value must be 50 characters or less in
                length and be unique.
            friendly_name (str): (Required) A descriptive string that you
                create to describe the Service resource. It can be a maximum
                of 255 characters.
            include_credentials (bool): Whether to inject Account credentials
                into a function invocation context. The default value is
                `true`.
            ui_editable (bool): Whether the Service's properties and
                subresources can be edited via the UI. The default value is
                `false`.

        Returns:
            Created97: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/Services')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('UniqueName')
                        .value(unique_name))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('IncludeCredentials')
                        .value(include_credentials))
            .form_param(Parameter()
                        .key('UiEditable')
                        .value(ui_editable))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Created97.from_dictionary)
        ).execute()

    def fetch_service_3(self,
                        sid,
                        accept):
        """Does a GET request to /v1/Services/{Sid}.

        Retrieve a specific Service resource.

        Args:
            sid (str): (Required) The `sid` or `unique_name` of the Service
                resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK354: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK354.from_dictionary)
        ).execute()

    def delete_service_3(self,
                         sid):
        """Does a DELETE request to /v1/Services/{Sid}.

        Delete a Service resource.

        Args:
            sid (str): (Required) The `sid` or `unique_name` of the Service
                resource to delete.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def update_service_3(self,
                         sid,
                         accept,
                         include_credentials,
                         friendly_name,
                         ui_editable):
        """Does a POST request to /v1/Services/{Sid}.

        Update a specific Service resource.

        Args:
            sid (str): (Required) The `sid` or `unique_name` of the Service
                resource to update.
            accept (str): The request header parameter.
            include_credentials (bool): Whether to inject Account credentials
                into a function invocation context.
            friendly_name (str): A descriptive string that you create to
                describe the Service resource. It can be a maximum of 255
                characters.
            ui_editable (bool): Whether the Service resource's properties and
                subresources can be edited via the UI. The default value is
                `false`.

        Returns:
            OK354: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v1/Services/{Sid}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('IncludeCredentials')
                        .value(include_credentials))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('UiEditable')
                        .value(ui_editable))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK354.from_dictionary)
        ).execute()
