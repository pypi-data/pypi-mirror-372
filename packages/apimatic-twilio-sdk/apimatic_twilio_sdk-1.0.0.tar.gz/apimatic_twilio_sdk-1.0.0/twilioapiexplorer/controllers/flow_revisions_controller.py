# -*- coding: utf-8 -*-

"""
twilioapiexplorer

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from twilioapiexplorer.api_helper import APIHelper
from twilioapiexplorer.configuration import Server
from twilioapiexplorer.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from twilioapiexplorer.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from twilioapiexplorer.models.ok_226 import OK226
from twilioapiexplorer.models.ok_227 import OK227
from twilioapiexplorer.models.ok_228 import OK228


class FlowRevisionsController(BaseController):

    """A Controller to access Endpoints in the twilioapiexplorer API."""
    def __init__(self, config):
        super(FlowRevisionsController, self).__init__(config)

    def list_flow_revision(self,
                           page_size,
                           sid,
                           accept):
        """Does a GET request to /v2/Flows/{Sid}/Revisions.

        Retrieve a list of all Flows revisions.

        Args:
            page_size (int): How many resources to return in each list page.
                The default is 50, and the maximum is 1000.
            sid (str): (Required) The SID of the Flow resource to fetch.
            accept (str): The request header parameter.

        Returns:
            OK226: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/{Sid}/Revisions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PageSize')
                         .value(page_size))
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK226.from_dictionary)
        ).execute()

    def fetch_flow_revision(self,
                            sid,
                            revision,
                            accept):
        """Does a GET request to /v2/Flows/{Sid}/Revisions/{Revision}.

        Retrieve a specific Flow revision.

        Args:
            sid (str): (Required) The SID of the Flow resource to fetch.
            revision (str): (Required) Specific Revision number or can be
                `LatestPublished` and `LatestRevision`.
            accept (str): The request header parameter.

        Returns:
            OK227: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/{Sid}/Revisions/{Revision}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Sid')
                            .value(sid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('Revision')
                            .value(revision)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK227.from_dictionary)
        ).execute()

    def update_flow_validate(self,
                             accept,
                             friendly_name,
                             status,
                             commit_message):
        """Does a POST request to /v2/Flows/Validate.

        Validate flow JSON definition

        Args:
            accept (str): The request header parameter.
            friendly_name (str): (Required) The string that you assigned to
                describe the Flow.
            status (str): (Required) The status of the Flow. Can be: `draft`
                or `published`.
            commit_message (str): Description of change made in the revision.

        Returns:
            OK228: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_9)
            .path('/v2/Flows/Validate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Accept')
                          .value(accept))
            .form_param(Parameter()
                        .key('FriendlyName')
                        .value(friendly_name))
            .form_param(Parameter()
                        .key('Status')
                        .value(status))
            .form_param(Parameter()
                        .key('CommitMessage')
                        .value(commit_message))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('basic'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(OK228.from_dictionary)
        ).execute()
