# coding: utf-8

"""
    Wrk Automation Platform - API v1

    The Wrk API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded requests and responses. It uses standard HTTP response codes, authentication, and verbs.  Please note you need will an API key with the appropriate access to use the following APIs. The API key can be obtained from [this page](https://account.wrk.com/api-key) in your Wrk account. To elevate access to your account, please [contact your Sales team](https://www.wrk.com/meet-automation-expert).

    The version of the OpenAPI document: 3.2.2
    Contact: support@wrk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wrk_platform_sdk.models.credential import Credential

class TestCredential(unittest.TestCase):
    """Credential unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Credential:
        """Test Credential
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Credential`
        """
        model = Credential()
        if include_optional:
            return Credential(
                metadata = wrk_platform_sdk.models.wrk_action_resource_metadata.WrkActionResourceMetadata(
                    organization = 'wrktech', 
                    library = 'core', 
                    name = 'wrktech/wrk-action-resource', ),
                spec = wrk_platform_sdk.models.credential_spec.Credential_spec(
                    authorization_flow = 'STATIC', 
                    application_ref = wrk_platform_sdk.models.wrk_action_resource_reference.WrkActionResourceReference(
                        organization = 'wrktech', 
                        library = 'core', 
                        name = 'wrktech/wrk-action-resource', ), 
                    description = '', 
                    display_name = 'AWS', 
                    schema = {"type":"object","required":["region","accessKeyId","secretAccessKey"],"properties":{"region":{"type":"string","format":"text","oneOf":[{"const":"af-south-1","title":"Africa (Cape Town) - af-south-1"},{"const":"ap-east-1","title":"Asia Pacific (Hong Kong) - ap-east-1"},{"const":"ap-south-1","title":"Asia Pacific (Mumbai) - ap-south-1"},{"const":"ap-southeast-1","title":"Asia Pacific (Singapore) - ap-southeast-1"},{"const":"ap-southeast-2","title":"Asia Pacific (Sydney) - ap-southeast-2"},{"const":"ap-southeast-3","title":"Asia Pacific (Jakarta) - ap-southeast-3"},{"const":"ap-northeast-1","title":"Asia Pacific (Tokyo) - ap-northeast-1"},{"const":"ap-northeast-2","title":"Asia Pacific (Seoul) - ap-northeast-2"},{"const":"ap-northeast-3","title":"Asia Pacific (Osaka) - ap-northeast-3"},{"const":"ca-central-1","title":"Canada (Central) - ca-central-1"},{"const":"eu-central-1","title":"Europe (Frankfurt) - eu-central-1"},{"const":"eu-north-1","title":"Europe (Stockholm) - eu-north-1"},{"const":"eu-south-1","title":"Europe (Milan) - eu-south-1"},{"const":"eu-west-1","title":"Europe (Ireland) - eu-west-1"},{"const":"eu-west-2","title":"Europe (London) - eu-west-2"},{"const":"eu-west-3","title":"Europe (Paris) - eu-west-3"},{"const":"me-south-1","title":"Middle East (Bahrain) - me-south-1"},{"const":"sa-east-1","title":"South America (São Paulo) - sa-east-1"},{"const":"us-east-1","title":"US East (N. Virginia) - us-east-1"},{"const":"us-east-2","title":"US East (Ohio) - us-east-2"},{"const":"us-west-1","title":"US West (N. California) - us-west-1"},{"const":"us-west-2","title":"US West (Oregon) - us-west-2"}],"propertyOrder":1000,"title":"Region","default":"us-east-1"},"s3Endpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1110,"title":"S3 Endpoint"},"accessKeyId":{"type":"string","format":"text","propertyOrder":1010,"title":"Access Key ID"},"sesEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1090,"title":"SES Endpoint"},"snsEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1080,"title":"SNS Endpoint"},"sqsEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1100,"title":"SQS Endpoint"},"sessionToken":{"type":"string","format":"text","propertyOrder":1040,"title":"Session Token"},"lambdaEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1070,"title":"Lambda Endpoint"},"customEndpoints":{"type":"boolean","propertyOrder":1050,"default":false,"title":"Custom Endpoints"},"secretAccessKey":{"type":"string","format":"text","propertyOrder":1020,"title":"Secret Access Key"},"rekognitionEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1060,"title":"Rekognition Endpoint"},"temporaryCredentials":{"type":"boolean","description":"Support for temporary credentials from AWS STS","propertyOrder":1030,"default":false,"title":"Temporary Security Credentials"}}}, 
                    scopes = [], )
            )
        else:
            return Credential(
                metadata = wrk_platform_sdk.models.wrk_action_resource_metadata.WrkActionResourceMetadata(
                    organization = 'wrktech', 
                    library = 'core', 
                    name = 'wrktech/wrk-action-resource', ),
                spec = wrk_platform_sdk.models.credential_spec.Credential_spec(
                    authorization_flow = 'STATIC', 
                    application_ref = wrk_platform_sdk.models.wrk_action_resource_reference.WrkActionResourceReference(
                        organization = 'wrktech', 
                        library = 'core', 
                        name = 'wrktech/wrk-action-resource', ), 
                    description = '', 
                    display_name = 'AWS', 
                    schema = {"type":"object","required":["region","accessKeyId","secretAccessKey"],"properties":{"region":{"type":"string","format":"text","oneOf":[{"const":"af-south-1","title":"Africa (Cape Town) - af-south-1"},{"const":"ap-east-1","title":"Asia Pacific (Hong Kong) - ap-east-1"},{"const":"ap-south-1","title":"Asia Pacific (Mumbai) - ap-south-1"},{"const":"ap-southeast-1","title":"Asia Pacific (Singapore) - ap-southeast-1"},{"const":"ap-southeast-2","title":"Asia Pacific (Sydney) - ap-southeast-2"},{"const":"ap-southeast-3","title":"Asia Pacific (Jakarta) - ap-southeast-3"},{"const":"ap-northeast-1","title":"Asia Pacific (Tokyo) - ap-northeast-1"},{"const":"ap-northeast-2","title":"Asia Pacific (Seoul) - ap-northeast-2"},{"const":"ap-northeast-3","title":"Asia Pacific (Osaka) - ap-northeast-3"},{"const":"ca-central-1","title":"Canada (Central) - ca-central-1"},{"const":"eu-central-1","title":"Europe (Frankfurt) - eu-central-1"},{"const":"eu-north-1","title":"Europe (Stockholm) - eu-north-1"},{"const":"eu-south-1","title":"Europe (Milan) - eu-south-1"},{"const":"eu-west-1","title":"Europe (Ireland) - eu-west-1"},{"const":"eu-west-2","title":"Europe (London) - eu-west-2"},{"const":"eu-west-3","title":"Europe (Paris) - eu-west-3"},{"const":"me-south-1","title":"Middle East (Bahrain) - me-south-1"},{"const":"sa-east-1","title":"South America (São Paulo) - sa-east-1"},{"const":"us-east-1","title":"US East (N. Virginia) - us-east-1"},{"const":"us-east-2","title":"US East (Ohio) - us-east-2"},{"const":"us-west-1","title":"US West (N. California) - us-west-1"},{"const":"us-west-2","title":"US West (Oregon) - us-west-2"}],"propertyOrder":1000,"title":"Region","default":"us-east-1"},"s3Endpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1110,"title":"S3 Endpoint"},"accessKeyId":{"type":"string","format":"text","propertyOrder":1010,"title":"Access Key ID"},"sesEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1090,"title":"SES Endpoint"},"snsEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1080,"title":"SNS Endpoint"},"sqsEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1100,"title":"SQS Endpoint"},"sessionToken":{"type":"string","format":"text","propertyOrder":1040,"title":"Session Token"},"lambdaEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1070,"title":"Lambda Endpoint"},"customEndpoints":{"type":"boolean","propertyOrder":1050,"default":false,"title":"Custom Endpoints"},"secretAccessKey":{"type":"string","format":"text","propertyOrder":1020,"title":"Secret Access Key"},"rekognitionEndpoint":{"type":"string","description":"Leave blank to use the default endpoint.","format":"text","propertyOrder":1060,"title":"Rekognition Endpoint"},"temporaryCredentials":{"type":"boolean","description":"Support for temporary credentials from AWS STS","propertyOrder":1030,"default":false,"title":"Temporary Security Credentials"}}}, 
                    scopes = [], ),
        )
        """

    def testCredential(self):
        """Test Credential"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
