# coding: utf-8

"""
    Wrk Automation Platform - API v1

    The Wrk API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded requests and responses. It uses standard HTTP response codes, authentication, and verbs.  Please note you need will an API key with the appropriate access to use the following APIs. The API key can be obtained from [this page](https://account.wrk.com/api-key) in your Wrk account. To elevate access to your account, please [contact your Sales team](https://www.wrk.com/meet-automation-expert).

    The version of the OpenAPI document: 3.2.1
    Contact: support@wrk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from wrk_platform_sdk.models.wrk_action_definition import WrkActionDefinition
from wrk_platform_sdk.models.wrk_action_link import WrkActionLink
from typing import Optional, Set
from typing_extensions import Self

class WrkflowDefinition(BaseModel):
    """
    This object represents a Wrkflow design, containing the Wrk Actions (nodes) and Wrk Action Links (edges) that make up the Wrkflow. The object also contains the configuration of every individual Wrk Actions in the Wrkflow.
    """ # noqa: E501
    uuid: Optional[StrictStr] = Field(default=None, description="The unique identifier of the Wrkflow. If not provided, a new Wrkflow will be generated. If provided, a new version of the Wrkflow will be created.")
    name: StrictStr = Field(description="The name of the Wrkflow")
    input_schema: Dict[str, Any] = Field(description="A JSON schema with properties containing the launch parameters required to launch the Wrkflow. The property required contains the minimum required properties to launch the Wrkflow.", alias="inputSchema")
    actions: List[WrkActionDefinition] = Field(description="A list of Wrk Actions that make up the Wrkflow. The order in which the Wrk Actions are listed does not represent the order in which they will be executed. The order of the workflow is determined by \"entryActionIndex\" and the Wrk Action Links. The first Wrk Action in the list has an index 0, followed by 1, 2, 3 etc, and the index is used to reference the Wrk Action in \"entryActionIndex\" and the Wrk Action Links. Be mindful to update the references when changing the order of the Wrk Actions in the list.")
    entry_action_index: Union[StrictFloat, StrictInt] = Field(description="The index of the first Wrk Action of the Wrkflow. The index number should correspond to the Wrk Action object in the property \"actions\". The first Wrk Action in the list is 0, followed by 1, 2, 3 etc.", alias="entryActionIndex")
    links: List[WrkActionLink] = Field(description="A list of WrkActionLink objects describing how Wrk Actions connect")
    __properties: ClassVar[List[str]] = ["uuid", "name", "inputSchema", "actions", "entryActionIndex", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WrkflowDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WrkflowDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "inputSchema": obj.get("inputSchema"),
            "actions": [WrkActionDefinition.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "entryActionIndex": obj.get("entryActionIndex"),
            "links": [WrkActionLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


