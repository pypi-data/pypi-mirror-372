# coding: utf-8

"""
    Wrk Automation Platform - API v1

    The Wrk API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded requests and responses. It uses standard HTTP response codes, authentication, and verbs.  Please note you need will an API key with the appropriate access to use the following APIs. The API key can be obtained from [this page](https://account.wrk.com/api-key) in your Wrk account. To elevate access to your account, please [contact your Sales team](https://www.wrk.com/meet-automation-expert).

    The version of the OpenAPI document: 3.2.1
    Contact: support@wrk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from wrk_platform_sdk.models.wrk_action_resource_reference import WrkActionResourceReference
from typing import Optional, Set
from typing_extensions import Self

class WrkActionLink(BaseModel):
    """
    WrkActionLink
    """ # noqa: E501
    var_from: Union[StrictFloat, StrictInt] = Field(description="The index of the Wrk Action from which this link originates. The index is used to reference the Wrk Action in the property \"actions\" of the WrkflowDefinition object.", alias="from")
    to: Union[StrictFloat, StrictInt] = Field(description="The index of the Wrk Action to which this link leads. The index is used to reference the Wrk Action in the property \"actions\" of the WrkflowDefinition object.")
    outcome_ref: WrkActionResourceReference = Field(alias="outcomeRef")
    __properties: ClassVar[List[str]] = ["from", "to", "outcomeRef"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WrkActionLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of outcome_ref
        if self.outcome_ref:
            _dict['outcomeRef'] = self.outcome_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WrkActionLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "from": obj.get("from"),
            "to": obj.get("to"),
            "outcomeRef": WrkActionResourceReference.from_dict(obj["outcomeRef"]) if obj.get("outcomeRef") is not None else None
        })
        return _obj


