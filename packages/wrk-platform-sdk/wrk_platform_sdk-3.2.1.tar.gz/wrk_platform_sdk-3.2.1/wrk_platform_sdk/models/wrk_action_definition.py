# coding: utf-8

"""
    Wrk Automation Platform - API v1

    The Wrk API is organized around REST. Our API has predictable resource-oriented URLs, accepts and returns JSON-encoded requests and responses. It uses standard HTTP response codes, authentication, and verbs.  Please note you need will an API key with the appropriate access to use the following APIs. The API key can be obtained from [this page](https://account.wrk.com/api-key) in your Wrk account. To elevate access to your account, please [contact your Sales team](https://www.wrk.com/meet-automation-expert).

    The version of the OpenAPI document: 3.2.1
    Contact: support@wrk.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from wrk_platform_sdk.models.wrk_action_resource_reference import WrkActionResourceReference
from typing import Optional, Set
from typing_extensions import Self

class WrkActionDefinition(BaseModel):
    """
    This object represents a Wrk Action configured with input values and references.
    """ # noqa: E501
    wrk_action_ref: WrkActionResourceReference = Field(alias="wrkActionRef")
    input_values: Dict[str, Any] = Field(description="A dictionary of input values passed into the Wrk Action.", alias="inputValues")
    fields_to_capture: Optional[Dict[str, Any]] = Field(default=None, description="A JSON schema with properties containing the output parameters to capture from the Wrk Action.", alias="fieldsToCapture")
    __properties: ClassVar[List[str]] = ["wrkActionRef", "inputValues", "fieldsToCapture"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WrkActionDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wrk_action_ref
        if self.wrk_action_ref:
            _dict['wrkActionRef'] = self.wrk_action_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WrkActionDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "wrkActionRef": WrkActionResourceReference.from_dict(obj["wrkActionRef"]) if obj.get("wrkActionRef") is not None else None,
            "inputValues": obj.get("inputValues"),
            "fieldsToCapture": obj.get("fieldsToCapture")
        })
        return _obj


