# -*- coding: utf-8 -*-

"""
instagramapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from instagramapi.api_helper import APIHelper
from instagramapi.models.media_entry import MediaEntry
from instagramapi.models.meta_data import MetaData


class MediaSearchResponse(object):

    """Implementation of the 'MediaSearchResponse' model.

    Attributes:
        data (List[MediaEntry]): Found media entries; some end-points do not
            return likes informtaion
        meta (MetaData): The model property of type MetaData.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "data": 'data',
        "meta": 'meta'
    }

    _optionals = [
        'data',
        'meta',
    ]

    def __init__(self,
                 data=APIHelper.SKIP,
                 meta=APIHelper.SKIP):
        """Constructor for the MediaSearchResponse class"""

        # Initialize members of the class
        if data is not APIHelper.SKIP:
            self.data = data 
        if meta is not APIHelper.SKIP:
            self.meta = meta 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        data = None
        if dictionary.get('data') is not None:
            data = [MediaEntry.from_dictionary(x) for x in dictionary.get('data')]
        else:
            data = APIHelper.SKIP
        meta = MetaData.from_dictionary(dictionary.get('meta')) if 'meta' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(data,
                   meta)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'data={(self.data if hasattr(self, "data") else None)!r}, '
                f'meta={(self.meta if hasattr(self, "meta") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'data={(self.data if hasattr(self, "data") else None)!s}, '
                f'meta={(self.meta if hasattr(self, "meta") else None)!s})')
