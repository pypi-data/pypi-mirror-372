"""type definitions of parameters used in ASE calculators and algorithms"""
import numbers
import numpy
import pandas

scalar_pars = {}

# VASP parameters have been sourced from
# https://gitlab.com/ase/ase/-/blob/master/ase/calculators/vasp/create_input.py

scalar_pars['vasp'] = {
    # special
    'lreal': (str, bool),
    # ase calc parameters, not from VASP
    'directory': str,
    'command': str,
    'txt': str,
    'restart': bool,
    'xc': str,
    'setups': str,
    'gamma': bool,
    'pp': str,
    'kpts': (numpy.ndarray, pandas.DataFrame),
    'reciprocal': bool,
    'charge': numbers.Integral,
    # floats
    'aexx': numbers.Real,
    'aggac': numbers.Real,
    'aggax': numbers.Real,
    'aldac': numbers.Real,
    'amin': numbers.Real,
    'amix': numbers.Real,
    'amix_mag': numbers.Real,
    'bmix': numbers.Real,
    'bmix_mag': numbers.Real,
    'deper': numbers.Real,
    'ebreak': numbers.Real,
    'efield':  numbers.Real,
    'emax': numbers.Real,
    'emin': numbers.Real,
    'enaug': numbers.Real,
    'encut': numbers.Real,
    'encutgw': numbers.Real,
    'encutfock': numbers.Real,
    'hfscreen': numbers.Real,
    'kspacing': numbers.Real,
    'potim': numbers.Real,
    'param1': numbers.Real,
    'param2': numbers.Real,
    'pomass': numbers.Real,
    'pstress': numbers.Real,
    'sigma': numbers.Real,
    'smass': numbers.Real,
    'weimin': numbers.Real,
    'zab_vdw': numbers.Real,
    'zval': numbers.Real,
    'clz': numbers.Real,
    'vdw_radius': numbers.Real,
    'vdw_scaling': numbers.Real,
    'vdw_d': numbers.Real,
    'vdw_cnradius': numbers.Real,
    'vdw_s6': numbers.Real,
    'vdw_s8': numbers.Real,
    'vdw_sr': numbers.Real,
    'vdw_a1': numbers.Real,
    'vdw_a2': numbers.Real,
    'langevin_gamma_l': numbers.Real,
    'pmass': numbers.Real,
    'bparam': numbers.Real,
    'cparam': numbers.Real,
    'aldax': numbers.Real,
    'tebeg': numbers.Real,
    'teend': numbers.Real,
    'andersen_prob': numbers.Real,
    'apaco': numbers.Real,
    'ch_sigma': numbers.Real,
    'cmbj': numbers.Real,
    'cmbja': numbers.Real,
    'cmbje': numbers.Real,
    'encutgwsoft': numbers.Real,
    'scissor': numbers.Real,
    'dimer_dist': numbers.Real,
    'step_size': numbers.Real,
    'step_max': numbers.Real,
    'minrot': numbers.Real,
    'hills_h': numbers.Real,
    'hfscreenc': numbers.Real,
    'hfrcut': numbers.Real,
    'enini': numbers.Real,
    'enmax': numbers.Real,
    'epsilon': numbers.Real,
    'scsrad': numbers.Real,
    'hitoler': numbers.Real,
    'nupdown': numbers.Real,
    'ediff': numbers.Real,
    'ediffg': numbers.Real,
    'symprec': numbers.Real,
    # integers
    'ialgo': numbers.Integral,
    'ibrion': numbers.Integral,
    'icharg': numbers.Integral,
    'idipol': numbers.Integral,
    'images': numbers.Integral,
    'iniwav': numbers.Integral,
    'isif': numbers.Integral,
    'ismear': numbers.Integral,
    'ispin': numbers.Integral,
    'istart': numbers.Integral,
    'isym': numbers.Integral,
    'iwavpr': numbers.Integral,
    'kpar': numbers.Integral,
    'ldauprint': numbers.Integral,
    'ldautype': numbers.Integral,
    'lmaxmix': numbers.Integral,
    'lorbit': numbers.Integral,
    'maxmix': numbers.Integral,
    'ngx': numbers.Integral,
    'ngxf': numbers.Integral,
    'ngy': numbers.Integral,
    'ngyf': numbers.Integral,
    'ngz': numbers.Integral,
    'ngzf': numbers.Integral,
    'nbands': numbers.Integral,
    'nblk': numbers.Integral,
    'nbmod': numbers.Integral,
    'nelm': numbers.Integral,
    'nelmdl': numbers.Integral,
    'nelmgw': numbers.Integral,
    'nelmin': numbers.Integral,
    'nfree': numbers.Integral,
    'nkred': numbers.Integral,
    'nkredx': numbers.Integral,
    'nkredy': numbers.Integral,
    'nkredz': numbers.Integral,
    'nomega': numbers.Integral,
    'nomegar': numbers.Integral,
    'npar': numbers.Integral,
    'nsim': numbers.Integral,
    'nsw': numbers.Integral,
    'nwrite': numbers.Integral,
    'vdwgr': numbers.Integral,
    'vdwrn': numbers.Integral,
    'voskown': numbers.Integral,
    'ichain': numbers.Integral,
    'iopt': numbers.Integral,
    'snl': numbers.Integral,
    'lbfgsmem': numbers.Integral,
    'fnmin': numbers.Integral,
    'icorelevel': numbers.Integral,
    'clnt': numbers.Integral,
    'cln': numbers.Integral,
    'cll': numbers.Integral,
    'ivdw': numbers.Integral,
    'nbandsgw': numbers.Integral,
    'nbandso': numbers.Integral,
    'nbandsv': numbers.Integral,
    'ncore': numbers.Integral,
    'mdalgo': numbers.Integral,
    'nedos': numbers.Integral,
    'turbo': numbers.Integral,
    'omegapar': numbers.Integral,
    'taupar': numbers.Integral,
    'ntaupar': numbers.Integral,
    'antires': numbers.Integral,
    'magatom': numbers.Integral,
    'jatom': numbers.Integral,
    'ichibare': numbers.Integral,
    'nbas': numbers.Integral,
    'rmds': numbers.Integral,
    'ilbfgsmem': numbers.Integral,
    'vcaimages': numbers.Integral,
    'ntemper': numbers.Integral,
    'ncshmem': numbers.Integral,
    'lmaxtau': numbers.Integral,
    'kinter': numbers.Integral,
    'ibse': numbers.Integral,
    'nbseeig': numbers.Integral,
    'naturalo': numbers.Integral,
    'nbandsexact': numbers.Integral,
    'nbandsgwlow': numbers.Integral,
    'nbandslf': numbers.Integral,
    'omegagrid': numbers.Integral,
    'telescope': numbers.Integral,
    'maxmem': numbers.Integral,
    'nelmhf': numbers.Integral,
    'dim': numbers.Integral,
    'nkredlf': numbers.Integral,
    'nkredlfx': numbers.Integral,
    'nkredlfy': numbers.Integral,
    'nkredlfz': numbers.Integral,
    'lmaxmp2': numbers.Integral,
    'switch': numbers.Integral,
    'findiff': numbers.Integral,
    'engine': numbers.Integral,
    'restartcg': numbers.Integral,
    'thermostat': numbers.Integral,
    'scaling': numbers.Integral,
    'shakemaxiter': numbers.Integral,
    'equi_regime': numbers.Integral,
    'hills_bin': numbers.Integral,
    'hills_maxstride': numbers.Integral,
    'dvvehistory': numbers.Integral,
    'ipead': numbers.Integral,
    'ngaus': numbers.Integral,
    'exxoep': numbers.Integral,
    'fourorbit': numbers.Integral,
    'model_gw': numbers.Integral,
    'hflmax': numbers.Integral,
    'lmaxfock': numbers.Integral,
    'lmaxfockae': numbers.Integral,
    'nmaxfockae': numbers.Integral,
    'nblock_fock': numbers.Integral,
    'idiot': numbers.Integral,
    'nrmm': numbers.Integral,
    'mremove': numbers.Integral,
    'inimix': numbers.Integral,
    'mixpre': numbers.Integral,
    'nelmall': numbers.Integral,
    'nblock': numbers.Integral,
    'kblock': numbers.Integral,
    'npaco': numbers.Integral,
    'lmaxpaw': numbers.Integral,
    'irestart': numbers.Integral,
    'nreboot': numbers.Integral,
    'nmin': numbers.Integral,
    'nlspline': numbers.Integral,
    'ispecial': numbers.Integral,
    'rcrep': numbers.Integral,
    'rcndl': numbers.Integral,
    'rcstrd': numbers.Integral,
    'vdw_idampf': numbers.Integral,
    'i_constrained_m': numbers.Integral,
    'igpar': numbers.Integral,
    'nppstr': numbers.Integral,
    'nbands_out': numbers.Integral,
    'kpts_out': numbers.Integral,
    'isp_out': numbers.Integral,
    'nomega_out': numbers.Integral,
    'maxiter_ft': numbers.Integral,
    'nmaxalt': numbers.Integral,
    'itmaxlsq': numbers.Integral,
    'ndatalsq': numbers.Integral,
    'ncore_in_image1': numbers.Integral,
    'kimages': numbers.Integral,
    'ncores_per_band': numbers.Integral,
    'maxlie': numbers.Integral,
    'ncrpalow': numbers.Integral,
    'ncrpahigh': numbers.Integral,
    'nwlow': numbers.Integral,
    'nwhigh': numbers.Integral,
    'nkopt': numbers.Integral,
    'nkoffopt': numbers.Integral,
    'nbvalopt': numbers.Integral,
    'nbconopt': numbers.Integral,
    'ch_nedos': numbers.Integral,
    'plevel': numbers.Integral,
    'qnl': numbers.Integral,
    'proutine': numbers.Integral,
    # strings
    'algo': str,
    'gga': str,
    'metagga': str,
    'prec': str,
    'system': str,
    'precfock': str,
    'radeq': str,
    'localized_basis': str,
    # booleans
    'addgrid': bool,
    'kgamma': bool,
    'laechg': bool,
    'lasph': bool,
    'lasync': bool,
    'lcharg': bool,
    'lcorr': bool,
    'ldau': bool,
    'ldiag': bool,
    'ldipol': bool,
    'lelf': bool,
    'lepsilon': bool,
    'lhfcalc': bool,
    'loptics': bool,
    'lpard': bool,
    'lplane': bool,
    'lscalapack': bool,
    'lscalu': bool,
    'lsepb': bool,
    'lsepk': bool,
    'lthomas': bool,
    'luse_vdw': bool,
    'lvhar': bool,
    'lvtot': bool,
    'lwave': bool,
    'lclimb': bool,
    'ltangentold': bool,
    'ldneb': bool,
    'lnebcell': bool,
    'lglobal': bool,
    'llineopt': bool,
    'lbeefens': bool,
    'lbeefbas': bool,
    'lcalcpol': bool,
    'lcalceps': bool,
    'lvdw': bool,
    'lvdw_ewald': bool,
    'lspectral': bool,
    'lrpa': bool,
    'lwannier90': bool,
    'lsorbit': bool,
    'lsol': bool,
    'lautoscale': bool,
    'interactive': bool,
    'lauger': bool,
    'lauger_eeh': bool,
    'lauger_ehh': bool,
    'lauger_collect': bool,
    'lauger_dhdk': bool,
    'lauger_jit': bool,
    'orbitalmag': bool,
    'lchimag': bool,
    'lwrtcur': bool,
    'lnmr_sym_red': bool,
    'lzora': bool,
    'lbone': bool,
    'lmagbloch': bool,
    'lgauge': bool,
    'lbfconst': bool,
    'nucind': bool,
    'lnicsall': bool,
    'llraug': bool,
    'lbbm': bool,
    'lnoncollinear': bool,
    'bfgsdfp': bool,
    'linemin': bool,
    'ldneborg': bool,
    'dseed': bool,
    'linteract': bool,
    'lmpmd': bool,
    'ltwodim': bool,
    'fmagflag': bool,
    'ltemper': bool,
    'qmflag': bool,
    'lmixtau': bool,
    'ljdftx': bool,
    'lrhob': bool,
    'lrhoion': bool,
    'lnabla': bool,
    'linterfast': bool,
    'lvel': bool,
    'lrpaforce': bool,
    'lhartree': bool,
    'ladder': bool,
    'lfxc': bool,
    'lrsrpa': bool,
    'lsingles': bool,
    'lfermigw': bool,
    'ltcte': bool,
    'ltete': bool,
    'ltriplet': bool,
    'lfxceps': bool,
    'lfxheg': bool,
    'l2order': bool,
    'lmp2lt': bool,
    'lgwlf': bool,
    'lusew': bool,
    'selfenergy': bool,
    'oddonlygw': bool,
    'evenonlygw': bool,
    'lspectralgw': bool,
    'ch_lspec': bool,
    'fletcher_reeves': bool,
    'lidm_selective': bool,
    'lblueout': bool,
    'hills_variable_w': bool,
    'dvvminus': bool,
    'lpead': bool,
    'skip_edotp': bool,
    'skip_scf': bool,
    'lchgfit': bool,
    'lgausrc': bool,
    'lstockholder': bool,
    'lsymgrad': bool,
    'lhfone': bool,
    'lrscor': bool,
    'lrhfcalc': bool,
    'lmodelhf': bool,
    'shiftred': bool,
    'hfkident': bool,
    'oddonly': bool,
    'evenonly': bool,
    'lfockaedft': bool,
    'lsubrot': bool,
    'mixfirst': bool,
    'lvcader': bool,
    'lcompat': bool,
    'lmusic': bool,
    'ldownsample': bool,
    'lscaaware': bool,
    'lorbitalreal': bool,
    'lmetagga': bool,
    'lspiral': bool,
    'lzeroz': bool,
    'lmono': bool,
    'lrelcore': bool,
    'lmimicfc': bool,
    'lmatchrw': bool,
    'ladaptelin': bool,
    'lonlysemicore': bool,
    'gga_compat': bool,
    'lrelvol': bool,
    'lj_only': bool,
    'lvdwscs': bool,
    'lcfdm': bool,
    'lvdw_sametype': bool,
    'lrescaler0': bool,
    'lscsgrad': bool,
    'lvdwexpansion': bool,
    'lvdw_relvolone': bool,
    'lberry': bool,
    'lpade_fit': bool,
    'lkproj': bool,
    'l_wr_moments': bool,
    'l_wr_density': bool,
    'lkotani': bool,
    'ldyson': bool,
    'laddherm': bool,
    'lcrpaplot': bool,
    'lplotdis': bool,
    'ldisentangle': bool,
    'lweighted': bool,
    'luseorth_lcaos': bool,
    'lfrpa': bool,
    'lregularize': bool,
    'ldrude': bool,
    'ldmatrix': bool,
    'lefg': bool,
    'lhyperfine': bool,
    'lwannier': bool,
    'localize': bool,
    'lintpol_wpot': bool,
    'lintpol_orb': bool,
    'lintpol_kpath': bool,
    'lintpol_kpath_orb': bool,
    'lread_eigenvalues': bool,
    'lintpol_velocity': bool,
    'lintpol_conductivity': bool,
    'lwannierinterpol': bool,
    'wanproj': bool,
    'lorbmom': bool,
    'lwannier90_run': bool,
    'lwrite_wanproj': bool,
    'lwrite_unk': bool,
    'lwrite_mmn_amn': bool,
    'lread_amn': bool,
    'lrhfatm': bool,
    'lvpot': bool,
    'lwpot': bool,
    'lwswq': bool,
    'pflat': bool,
    'qifcg': bool,
    'qdo_ins': bool,
    'qdo_pre': bool,
    'lnbo': bool,
}

array_pars = {}
array_pars['vasp'] = {
    # integers
    'iband': numpy.ndarray,
    'kpuse': numpy.ndarray,
    'ldaul': numpy.ndarray,
    'random_seed': numpy.ndarray,
    'auger_bmin_eeh': numpy.ndarray,
    'auger_bmax_eeh': numpy.ndarray,
    'auger_bmin_ehh': numpy.ndarray,
    'auger_bmax_ehh': numpy.ndarray,
    'balist': numpy.ndarray,
    'kpoint_bse': numpy.ndarray,
    'nsubsys': numpy.ndarray,
    'vdw_refstate': numpy.ndarray,
    'vdw_mbd_size': numpy.ndarray,
    'nbands_index': numpy.ndarray,
    'kpts_index': numpy.ndarray,
    'isp_index': numpy.ndarray,
    'nomega_index': numpy.ndarray,
    'ntarget_states': numpy.ndarray,
    'wanproj_i': numpy.ndarray,
    'wanproj_l': numpy.ndarray,
    # floats
    'dipol': numpy.ndarray,
    'eint': numpy.ndarray,
    'ferwe': numpy.ndarray,
    'ferdo': numpy.ndarray,
    'magmom': numpy.ndarray,
    'ropt': numpy.ndarray,
    'rwigs': numpy.ndarray,
    'ldauu': numpy.ndarray,
    'ldauj': numpy.ndarray,
    'vdw_c6': numpy.ndarray,
    'vdw_c6au': numpy.ndarray,
    'vdw_r0': numpy.ndarray,
    'vdw_r0au': numpy.ndarray,
    'vdw_alpha': numpy.ndarray,
    'langevin_gamma': numpy.ndarray,
    'psubsys': numpy.ndarray,
    'tsubsys': numpy.ndarray,
    # 'spring_k',  # units depend on the coordinate units
    # 'spring_r0',  # units depend on the coordinate units
    # 'spring_v0',  # units depend on the coordinate units
    'efield_pead': numpy.ndarray,
    'saxis': numpy.ndarray,
    'vca': numpy.ndarray,
    'qspiral': numpy.ndarray,
    'quad_efg': numpy.ndarray,
    'ngyromag': numpy.ndarray,
    'smearings': numpy.ndarray,
    # booleans
    'lattice_constraints': numpy.ndarray,
    'lrctype': numpy.ndarray,
    'lvdw_onecell': numpy.ndarray,
}

# turbomole calculator parameters

scalar_pars['turbomole'] = {
    'restart': bool,
    'define_str': str,
    'control_input': list,
    'control_kdg': list,
    'reset_tolerance': numbers.Real,
    'automatic orbital shift': numbers.Real,
    'basis set definition': list,
    'basis set name': str,
    'closed-shell orbital shift': numbers.Real,
    'damping adjustment step': numbers.Real,
    'default eht atomic orbitals': bool,
    'density convergence': numbers.Real,
    'density functional': str,
    'energy convergence': numbers.Real,
    'esp fit': str,
    'fermi annealing factor': numbers.Real,
    'fermi final temperature': numbers.Real,
    'fermi homo-lumo gap criterion': numbers.Real,
    'fermi initial temperature': numbers.Real,
    'fermi stopping criterion': numbers.Real,
    'force convergence': numbers.Real,
    'geometry optimization iterations': numbers.Integral,
    'grid size': str,
    'ground state': bool,
    'initial damping': numbers.Real,
    'initial guess': (str, dict),
    'minimal damping': numbers.Real,
    'multiplicity': numbers.Integral,
    'non-automatic orbital shift': bool,
    'numerical hessian': dict,
    'point group': str,
    'ri memory': numbers.Integral,
    'rohf': bool,
    'scf energy convergence': numbers.Real,
    'scf iterations': numbers.Integral,
    'task': str,
    'title': str,
    'total charge': numbers.Integral,
    'transition vector': numbers.Integral,
    'uhf': bool,
    'use basis set library': bool,
    'use dft': bool,
    'use fermi smearing': bool,
    'use redundant internals': bool,
    'use resolution of identity': bool,
}

array_pars['turbomole'] = {
    'basis set definition': dict
}

calc_pars = {}
calc_pars['vasp'] = {**scalar_pars['vasp'], **array_pars['vasp']}
calc_pars['turbomole'] = {**scalar_pars['turbomole'], **array_pars['turbomole']}

# name 'lj' as accepted by get_calculator_class()
calc_pars['lj'] = {
    'sigma': numbers.Real,
    'epsilon': numbers.Real,
    'rc': numbers.Real,
    'ro': numbers.Real,
    'smooth': bool,
}

# name 'lennardjones' as returned by lj.LennardJones().name
calc_pars['lennardjones'] = calc_pars['lj']

calc_pars['emt'] = {
    'restart': bool,
    'asap_cutoff': bool,
}

calc_pars['free_electrons'] = {
    'restart': str,
    'kpts': (pandas.DataFrame, numpy.ndarray),
    'path': str,  # only as key in kpts
    'npoints': numbers.Integral,  # only as key in kpts
    'nvalence': numbers.Integral,
    'nbands': numbers.Integral,
    'gridsize': numbers.Integral,
}
