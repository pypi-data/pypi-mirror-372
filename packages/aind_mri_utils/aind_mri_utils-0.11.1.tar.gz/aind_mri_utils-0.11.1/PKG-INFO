Metadata-Version: 2.4
Name: aind_mri_utils
Version: 0.11.1
Summary: MRI utilities library for aind teams.
Author: Allen Institute for Neural Dynamics
Author-email: Galen Lynch <galen@galenlynch.com>, Yoni Browning <yoni.browning@alleninstitute.org>
License-Expression: MIT
Project-URL: Repository, https://github.com/AllenNeuralDynamics/aind-mri-utils/
Project-URL: Issues, https://github.com/AllenNeuralDynamics/aind-mri-utils/issues
Project-URL: Changelog, https://github.com/AllenNeuralDynamics/aind-mri-utils/blob/main/CHANGELOG.md
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aind-anatomical-utils<0.3,>=0.1
Requires-Dist: matplotlib<4,>=3
Requires-Dist: numpy<3,>=1.7
Requires-Dist: openpyxl<4,>=3
Requires-Dist: pywavefront<2,>=1.3
Requires-Dist: Rtree<2,>=1
Requires-Dist: scipy<2,>=1
Requires-Dist: scikit-image<0.26,>=0.17
Requires-Dist: SimpleITK<3,>=2
Requires-Dist: trimesh<5,>=4
Dynamic: license-file

# aind-mri-utils

[![License](https://img.shields.io/badge/license-MIT-brightgreen)](LICENSE)
![Code Style](https://img.shields.io/badge/code%20style-black-black)
[![semantic-release: angular](https://img.shields.io/badge/semantic--release-angular-e10079?logo=semantic-release)](https://github.com/semantic-release/semantic-release)
![Interrogate](https://img.shields.io/badge/interrogate-97.3%25-brightgreen)
![Coverage](https://img.shields.io/badge/coverage-63%25-red?logo=codecov)
![Python](https://img.shields.io/badge/python->=3.9-blue?logo=python)

Library for aind mri utilities.

## Installation
To use the software, in the root directory, run
```bash
pip install -e .
```

To develop the code, run
```bash
pip install -e .[dev]
```

## Contributing

### Linters and testing

There are several libraries used to run linters, check documentation, and run tests.

- Please test your changes using the **coverage** library, which will run the tests and log a coverage report:

```bash
coverage run -m unittest discover && coverage report
```

- Use **interrogate** to check that modules, methods, etc. have been documented thoroughly:

```bash
interrogate .
```

- Use **flake8** to check that code is up to standards (no unused imports, etc.):
```bash
flake8 .
```

- Use **black** to automatically format the code into PEP standards:
```bash
black .
```

- Use **isort** to automatically sort import statements:
```bash
isort .
```

### Pull requests

For internal members, please create a branch. For external members, please fork the repository and open a pull request from the fork. We'll primarily use [Angular](https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit) style for commit messages. Roughly, they should follow the pattern:
```text
<type>(<scope>): <short summary>
```

where scope (optional) describes the packages affected by the code changes and type (mandatory) is one of:

- **build**: Changes that affect build tools or external dependencies (example scopes: pyproject.toml, setup.py)
- **ci**: Changes to our CI configuration files and scripts (examples: .github/workflows/ci.yml)
- **docs**: Documentation only changes
- **feat**: A new feature
- **fix**: A bugfix
- **perf**: A code change that improves performance
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **test**: Adding missing tests or correcting existing tests

### Documentation
To generate the rst files source files for documentation, run
```bash
sphinx-apidoc -o doc_template/source/ src
```
Then to create the documentation HTML files, run
```bash
sphinx-build -b html doc_template/source/ doc_template/build/html
```
More info on sphinx installation can be found [here](https://www.sphinx-doc.org/en/master/usage/installation.html).
