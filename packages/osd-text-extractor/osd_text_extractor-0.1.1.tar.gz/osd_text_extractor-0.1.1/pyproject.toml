[project]
name = "osd-text-extractor"
version = "0.1.1"
description = "A Python library for extracting plain text from various document formats for LLM and NLP purposes"
authors = [
    {name = "OneSlap Team", email = "lxarbuz@gmail.com"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.12"
keywords = ["text-extraction", "pdf", "docx", "xlsx", "html", "llm", "nlp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Text Processing",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Office Suites",
    "Typing :: Typed",
]

dependencies = [
    "beautifulsoup4>=4.13.5",
    "defusedxml>=0.7.1",
    "dishka>=1.6.0",
    "emoji>=2.14.1",
    "lxml>=6.0.1",
    "odfpy>=1.4.1",
    "openpyxl>=3.1.5",
    "pymupdf>=1.26.4",
    "python-docx>=1.2.0",
    "striprtf>=0.0.29",
]

[project.optional-dependencies]
dev = [
    "setuptools>=80.9.0",
    "wheel>=0.45.1",
    "build>=1.2.0",
    "twine>=6.0.0",
    "bandit>=1.8.6",
    "mypy>=1.17.1",
    "pylint>=3.3.8",
    "ruff>=0.6.9",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "safety>=3.2.8",
    "pre-commit>=3.8.0",
]

[project.urls]
"Homepage" = "https://github.com/oneslapdeal/osd_text_extractor"
"Bug Reports" = "https://github.com/oneslapdeal/osd_text_extractor/issues"
"Source" = "https://github.com/oneslapdeal/osd_text_extractor"
"Documentation" = "https://github.com/oneslapdeal/osd_text_extractor#readme"

[build-system]
requires = [
    "setuptools>=80.9.0,<81.0.0",
    "wheel>=0.45.1,<1.0.0"
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",
    "B",
    "C4",
    "UP",
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # flake8-bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "S101", # Use of assert detected
    "N999", # Invalid module name
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D", "ARG001"]
"src/osd_text_extractor/__init__.py" = ["F401"]
"src/osd_text_extractor/*/exceptions.py" = ["N818"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.12"
mypy_path = ["src"]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict = true
exclude = [
    "tests/",
    "build/",
    "htmlcov/",
]
explicit_package_bases = true
packages = ["osd_text_extractor"]

[[tool.mypy.overrides]]
module = [
    "docx.*",
    "fitz.*",
    "odf.*",
    "openpyxl.*",
    "striprtf.*",
    "defusedxml.*",
    "emoji.*",
    "dishka.*",
    "bs4.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "osd_text_extractor.infrastructure.extractors.*",
]
disable_error_code = ["no-any-return"]

[[tool.mypy.overrides]]
module = [
    "osd_text_extractor.infrastructure.di.*",
]
disable_error_code = ["misc"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--disable-warnings",
    "--cov=src/osd_text_extractor",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-fail-under=60"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "default",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
per-file-ignores = [
    "tests/*:E501,F841",
]

[tool.coverage.run]
source = ["src/osd_text_extractor"]
omit = [
    "**/__init__.py",
    "**/tests/**",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "htmlcov"]
skips = ["B101"]  # Skip assert_used test

[tool.pylint.main]
source-roots = ["src"]
py-version = "3.12"

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "import-error",
]

[tool.pylint.format]
max-line-length = 88
