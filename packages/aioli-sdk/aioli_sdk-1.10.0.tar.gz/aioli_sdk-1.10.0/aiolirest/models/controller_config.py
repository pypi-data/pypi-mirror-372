# coding: utf-8

"""
    HPE Machine Learning Inference Software (MLIS/Aioli)

    HPE MLIS is *Aioli* -- The AI On-line Inference Platform that enables easy deployment, tracking, and serving of your packaged models regardless of your preferred AI framework. <br/> <a href=\"/auth-token\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API token</a> <br/>

    The version of the OpenAPI document: 1.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from aiolirest.models.ezua_info import EZUAInfo
from aiolirest.models.telemetry_info import TelemetryInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ControllerConfig(BaseModel):
    """
    ControllerConfig
    """ # noqa: E501
    caching_enabled: Optional[StrictBool] = Field(default=None, description="Model Caching is enabled for the install, so show enable cache button on model.", alias="cachingEnabled")
    dashboard_enabled: Optional[StrictBool] = Field(default=None, description="Observability Dashboard is enabled for the install, so show Dashboard button on deployment.", alias="dashboardEnabled")
    ezua: Optional[EZUAInfo] = None
    telemetry: Optional[TelemetryInfo] = None
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["cachingEnabled", "dashboardEnabled", "ezua", "telemetry", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ControllerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ezua
        if self.ezua:
            _dict['ezua'] = self.ezua.to_dict()
        # override the default output from pydantic by calling `to_dict()` of telemetry
        if self.telemetry:
            _dict['telemetry'] = self.telemetry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ControllerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cachingEnabled": obj.get("cachingEnabled"),
            "dashboardEnabled": obj.get("dashboardEnabled"),
            "ezua": EZUAInfo.from_dict(obj.get("ezua")) if obj.get("ezua") is not None else None,
            "telemetry": TelemetryInfo.from_dict(obj.get("telemetry")) if obj.get("telemetry") is not None else None,
            "version": obj.get("version")
        })
        return _obj


