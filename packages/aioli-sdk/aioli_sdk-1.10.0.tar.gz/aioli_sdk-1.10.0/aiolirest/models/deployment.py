# coding: utf-8

"""
    HPE Machine Learning Inference Software (MLIS/Aioli)

    HPE MLIS is *Aioli* -- The AI On-line Inference Platform that enables easy deployment, tracking, and serving of your packaged models regardless of your preferred AI framework. <br/> <a href=\"/auth-token\" target=\"_blank\" rel=\"noopener noreferrer\">Generate an API token</a> <br/>

    The version of the OpenAPI document: 1.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from aiolirest.models.autoscaling import Autoscaling
from aiolirest.models.deployment_state import DeploymentState
from aiolirest.models.event_info import EventInfo
from aiolirest.models.security import Security
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Deployment(BaseModel):
    """
    Deployment describes the deployment of a service.
    """ # noqa: E501
    arguments: Optional[List[StrictStr]] = Field(default=None, description="Arguments to be added to the service command line")
    auto_scaling: Optional[Autoscaling] = Field(default=None, alias="autoScaling")
    canary_traffic_percent: Optional[StrictInt] = Field(default=None, description="Percent traffic to pass to new model version", alias="canaryTrafficPercent")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Name of the cluster.", alias="clusterName")
    environment: Optional[Dict[str, StrictStr]] = Field(default=None, description="Environment variables added to the service")
    goal_status: Optional[StrictStr] = Field(default='Ready', description="Specifies the intended status to be achieved by the deployment.  Supported values are: * `Ready` - The inference service will be deployed to enable inference calls. * `Paused` - The inference service will be stopped and no longer accept calls.  The default is `Ready`.", alias="goalStatus")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the deployment. This is a read-only property and is automatically assigned on creation.")
    last_event: Optional[EventInfo] = Field(default=None, alias="lastEvent")
    model: StrictStr = Field(description="PackagedModel name or ID to be deployed.")
    modified_at: Optional[StrictStr] = Field(default=None, description="Date-time of last modification of the deployment. This is a read-only field and is automatically updated.", alias="modifiedAt")
    name: StrictStr = Field(description="The deployment name.  It must be a valid subdomain name and consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character.")
    namespace: Optional[StrictStr] = Field(default=None, description="The Kubernetes namespace to be used for the deployment.")
    node_selectors: Optional[Dict[str, StrictStr]] = Field(default=None, description="Node selectors to be added to the service", alias="nodeSelectors")
    priority_class_name: Optional[StrictStr] = Field(default=None, description="Priority Class Name to be used for prioritization of deployments.", alias="priorityClassName")
    project: Optional[StrictStr] = Field(default=None, description="The ID of the containing project")
    secondary_state: Optional[DeploymentState] = Field(default=None, alias="secondaryState")
    security: Optional[Security] = None
    state: Optional[DeploymentState] = None
    status: Optional[StrictStr] = Field(default=None, description="Summary status of the deployed service. * `Deploying` - Service configuration is in progress. * `Failed` - The service configuration failed. * `Ready` - The service has been successfully configured and is serving. * `Updating` - A new service revision is being rolled-out. * `UpdateFailed` - The current service revision failed to rollout due to an error.   The prior version is still serving requests. * `Deleting` - The deployed service is being removed. * `Paused` - The deployed service has been stopped by the user or an external action. * `Unknown` - Unable to determined the status.  This is a read-only property. Must be one of the values: (Deploying,Ready,Updating,UpdateFailed,Failed,Deleting,Paused,Unknown).")
    __properties: ClassVar[List[str]] = ["arguments", "autoScaling", "canaryTrafficPercent", "clusterName", "environment", "goalStatus", "id", "lastEvent", "model", "modifiedAt", "name", "namespace", "nodeSelectors", "priorityClassName", "project", "secondaryState", "security", "state", "status"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Deployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_scaling
        if self.auto_scaling:
            _dict['autoScaling'] = self.auto_scaling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_event
        if self.last_event:
            _dict['lastEvent'] = self.last_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_state
        if self.secondary_state:
            _dict['secondaryState'] = self.secondary_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security
        if self.security:
            _dict['security'] = self.security.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Deployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arguments": obj.get("arguments"),
            "autoScaling": Autoscaling.from_dict(obj.get("autoScaling")) if obj.get("autoScaling") is not None else None,
            "canaryTrafficPercent": obj.get("canaryTrafficPercent"),
            "clusterName": obj.get("clusterName"),
            "environment": obj.get("environment"),
            "goalStatus": obj.get("goalStatus") if obj.get("goalStatus") is not None else 'Ready',
            "id": obj.get("id"),
            "lastEvent": EventInfo.from_dict(obj.get("lastEvent")) if obj.get("lastEvent") is not None else None,
            "model": obj.get("model"),
            "modifiedAt": obj.get("modifiedAt"),
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "nodeSelectors": obj.get("nodeSelectors"),
            "priorityClassName": obj.get("priorityClassName"),
            "project": obj.get("project"),
            "secondaryState": DeploymentState.from_dict(obj.get("secondaryState")) if obj.get("secondaryState") is not None else None,
            "security": Security.from_dict(obj.get("security")) if obj.get("security") is not None else None,
            "state": DeploymentState.from_dict(obj.get("state")) if obj.get("state") is not None else None,
            "status": obj.get("status")
        })
        return _obj


