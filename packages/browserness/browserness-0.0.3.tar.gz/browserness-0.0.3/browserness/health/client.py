# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.health_check_response import HealthCheckResponse
from ..types.health_status import HealthStatus
from .raw_client import AsyncRawHealthClient, RawHealthClient


class HealthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawHealthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawHealthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawHealthClient
        """
        return self._raw_client

    def check(self, *, request_options: typing.Optional[RequestOptions] = None) -> HealthStatus:
        """
        Check service health status.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthStatus
            Successful Response

        Examples
        --------
        from browserness import Browserness

        client = Browserness(
            token="YOUR_TOKEN",
        )
        client.health.check()
        """
        _response = self._raw_client.check(request_options=request_options)
        return _response.data

    def browser_health_check(
        self, browser_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HealthCheckResponse:
        """
        Check the health status of a specific browser instance from database.

        Parameters
        ----------
        browser_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthCheckResponse
            Successful Response

        Examples
        --------
        from browserness import Browserness

        client = Browserness(
            token="YOUR_TOKEN",
        )
        client.health.browser_health_check(
            browser_id="browser_id",
        )
        """
        _response = self._raw_client.browser_health_check(browser_id, request_options=request_options)
        return _response.data


class AsyncHealthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawHealthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawHealthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawHealthClient
        """
        return self._raw_client

    async def check(self, *, request_options: typing.Optional[RequestOptions] = None) -> HealthStatus:
        """
        Check service health status.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthStatus
            Successful Response

        Examples
        --------
        import asyncio

        from browserness import AsyncBrowserness

        client = AsyncBrowserness(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.health.check()


        asyncio.run(main())
        """
        _response = await self._raw_client.check(request_options=request_options)
        return _response.data

    async def browser_health_check(
        self, browser_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HealthCheckResponse:
        """
        Check the health status of a specific browser instance from database.

        Parameters
        ----------
        browser_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HealthCheckResponse
            Successful Response

        Examples
        --------
        import asyncio

        from browserness import AsyncBrowserness

        client = AsyncBrowserness(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.health.browser_health_check(
                browser_id="browser_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.browser_health_check(browser_id, request_options=request_options)
        return _response.data
