[project]
name = "claude-helpers"
version = "0.2.2"
description = "Cross-platform voice and HIL tools for Claude Code"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Vladimir Loskutov", email = "claude-helpers@modus.dev"}
]
keywords = ["claude", "voice", "ai", "transcription", "human-in-the-loop"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Topic :: Multimedia :: Sound/Audio",
]

dependencies = [
    # Core dependencies
    "click>=8.1.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    # Audio processing
    "sounddevice>=0.4.6",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    # API integration
    "openai>=1.0.0",
    # System integration
    "keyboard>=0.13.5",
    "watchdog>=3.0.0",
    # MCP server
    "fastmcp>=0.2.0",
    # LLM post-processing
    "dspy>=2.5.0",
    "litellm[proxy]>=1.0.0", # Full LiteLLM with all proxy dependencies
    "claude-code-sdk>=0.0.20",
    "pyyaml>=6.0.2",
]

# Platform-specific extras
[project.optional-dependencies]
linux = [
    "python-xlib>=0.33",
]
macos = [
    "pyobjc-framework-Cocoa>=9.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.urls]
Homepage = "https://github.com/claude-helpers/claude-helpers"
Repository = "https://github.com/claude-helpers/claude-helpers.git"
Issues = "https://github.com/claude-helpers/claude-helpers/issues"
Documentation = "https://github.com/claude-helpers/claude-helpers/blob/main/README.md"

[project.scripts]
claude-helpers = "claude_helpers.cli:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/claude_helpers"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["B011", "S101"]  # Allow assert in tests

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sounddevice.*",
    "keyboard.*",
    "watchdog.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=claude_helpers",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-branch",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "audio: marks tests that require audio hardware",
    "gui: marks tests that require GUI environment",
]

# Coverage configuration  
[tool.coverage.run]
source = ["claude_helpers"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
