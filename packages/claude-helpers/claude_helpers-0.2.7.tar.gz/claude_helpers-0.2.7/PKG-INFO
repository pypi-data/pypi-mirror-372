Metadata-Version: 2.4
Name: claude-helpers
Version: 0.2.7
Summary: Cross-platform voice and HIL tools for Claude Code
Project-URL: Homepage, https://github.com/claude-helpers/claude-helpers
Project-URL: Repository, https://github.com/claude-helpers/claude-helpers.git
Project-URL: Issues, https://github.com/claude-helpers/claude-helpers/issues
Project-URL: Documentation, https://github.com/claude-helpers/claude-helpers/blob/main/README.md
Author-email: Vladimir Loskutov <claude-helpers@modus.dev>
License: MIT
License-File: LICENSE
Keywords: ai,claude,human-in-the-loop,transcription,voice
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Multimedia :: Sound/Audio
Classifier: Topic :: Software Development
Requires-Python: >=3.10
Requires-Dist: claude-code-sdk>=0.0.20
Requires-Dist: click>=8.1.0
Requires-Dist: dspy>=2.5.0
Requires-Dist: fastmcp>=0.2.0
Requires-Dist: keyboard>=0.13.5
Requires-Dist: litellm[proxy]>=1.0.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: openai>=1.0.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pyyaml>=6.0.2
Requires-Dist: rich>=13.0.0
Requires-Dist: scipy>=1.10.0
Requires-Dist: sounddevice>=0.4.6
Requires-Dist: watchdog>=3.0.0
Provides-Extra: dev
Requires-Dist: mypy>=1.5.0; extra == 'dev'
Requires-Dist: pre-commit>=3.0.0; extra == 'dev'
Requires-Dist: pytest-cov>=4.0.0; extra == 'dev'
Requires-Dist: pytest-mock>=3.10.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Requires-Dist: ruff>=0.1.0; extra == 'dev'
Provides-Extra: linux
Requires-Dist: python-xlib>=0.33; extra == 'linux'
Provides-Extra: macos
Requires-Dist: pyobjc-framework-cocoa>=9.0; extra == 'macos'
Provides-Extra: test
Requires-Dist: pytest-cov>=4.0.0; extra == 'test'
Requires-Dist: pytest-mock>=3.10.0; extra == 'test'
Requires-Dist: pytest>=7.0.0; extra == 'test'
Description-Content-Type: text/markdown

# Claude Helpers

**CLI Agentic-SWE toolkit for Claude Code: Voice input, Human-in-the-Loop, and structured project management.**

## Install

PYPI install:
```bash
uv tool install claude-helpers
```

or PYPI update:

```bash
uv tool upgrade claude-helpers
```

or loocal install:

```bash
git clone {repo} claude-helpers
cd claude-helpers
uv tool install --force --editable .
```

## Setup

```bash
claude-helpers setup
```
Configures OpenAI API keys, audio device, and Claude Code integration.

## Commands

### Basic Usage
```bash
claude-helpers voice          # Record voice, get text transcription
claude-helpers init           # Setup HIL in current project  
claude-helpers listen         # Start HIL background listener
claude-helpers status         # Check configuration and features
claude-helpers skeleton       # List available project templates
```

### Project Templates
```bash
# List all available templates (built-in + Memory-Bank)
claude-helpers skeleton

# Create new project from template
claude-helpers skeleton python-basic --name my-service
claude-helpers skeleton fastapi-service --name my-api

# Create template files in current directory
mkdir my-service && cd my-service
claude-helpers skeleton python-basic --here
```

Custom templates can be added to Memory-Bank at `templates/skeletons/template-name/`.

### Memory-Bank (Advanced)
```bash
# Create Memory-Bank repository
claude-helpers memory-bank spawn-structure
claude-helpers memory-bank spawn-templates  
claude-helpers memory-bank spawn-prompts

# Link Memory-Bank to work project (repo SHALL contain .helpers, by `claude-helpers init`)
claude-helpers memory-bank init
```

### MCP Servers
```bash
# (For Agent mcp STDIO use, server is not required)
claude-helpers mcp-server         # HIL MCP server
claude-helpers memory-bank-mcp    # Memory-Bank MCP server
```

#### HIL MCP Server
Enables agents to interact with humans during development:
- `ask_human(question)` - Ask human a question, wait for response
- `voice_input(prompt)` - Record voice input from human
- File-based async communication between agents and background listener

#### Memory-Bank MCP Server  
Project management and documentation for structured development:
- `get-focus(release, component)` - Get current work context and standards
- `get-progress(release, component)` - View implementation progress
- `current-task/epic/component` - Navigate project structure
- `validate-project-structure(path, purpose)` - Check file placement
- `update-task-status(task, status)` - Mark tasks complete
- `note-journal(content, role)` - Add development notes

## Integration

Add to Claude Code MCP configuration:

**HIL Integration:**
```json
{
  "type": "stdio",
  "command": "claude-helpers", 
  "args": ["mcp-server"]
}
```

**Memory-Bank Integration:**
```json
{
  "type": "stdio",
  "command": "claude-helpers",
  "args": ["memory-bank-mcp"]
}
```

## What it does

- **Voice**: Record voice prompts, get Whisper transcription
- **HIL**: Agents can ask questions, humans respond via GUI/terminal
- **Memory-Bank**: Structured project docs and workflow templates
- **MCP**: Seamless Claude Code integration for all features

## Requirements

- Python 3.10+
- OpenAI API key
- Audio device (for voice)

## License

MIT