Entry,Type,Description,Mandatory?,Allowed values
`failed`,`list`,"Index/name of failed cavities.

Must be a `list[list[int]]` or

`list[list[str]]`.",✅,
`history_kwargs`,`dict`,"kwargs for the

:class:`.OptimizationHistory`.",❌,
`id_nature`,`str`,"Indicates if failed is element

index/cavity index/name,

`element` or `cavity` or `name`.",✅,"('element', 'cavity', 'name')"
`objective_preset`,`str`,"Objectives for the

optimisation algorithm.",✅,"('EnergyMismatch', 'EnergyPhaseMismatch', 'EnergySeveralMismatches', 'EnergySyncPhaseMismatch', 'experimental', 'rephased_ADS', 'simple_ADS', 'sync_phase_as_objective_ADS')"
"`optimisation_`

`algorithm`",`str`,"Name of optimisation

algorithm.",✅,"('bayesian_optimization', 'differential_evolution', 'downhill_simplex', 'downhill_simplex_penalty', 'experimental', 'explorator', 'least_squares', 'least_squares_penalty', 'nelder_mead', 'nelder_mead_penalty', 'nsga', 'simulated_annealing')"
"`optimisation_`

`algorithm_kwargs`",`dict`,"Keyword arguments passed to

the optimisation algorithm.",❌,
`strategy`,`str`,"How compensating cavities are

selected.",✅,"('k out of n', 'l neighboring lattices', 'global', 'global_downstream', 'manual')"
`tie_politics`,`str`,"How to select the compensating

elements when several are

equidistant to the failure.",❌,"('upstream first', 'downstream first')"
`shift`,`int`,"Distance increase for

downstream elements (`shift <`

`0`) or upstream elements

(`shift > 0`). Used to have a

window of compensating

cavities which is not centered

around the failed elements.",❌,
`l`,`int`,"Number of compensating

lattices per failed cavity.",✅,
"`min_number_of_`

`cavities_in_lattice`",`int`,"Minimum number of compensating

cavities in the lattice; when

a lattice does not reach this

number, we use it anyway for

compensation, but we also take

another lattice. Designed to

remove the lattices that do

not have any cavity.",❌,
