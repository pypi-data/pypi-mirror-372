name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches:
      - main
  push:
    tags:
      - 'v*'

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub context
        run: echo '${{ toJson(github) }}'

  wait-for-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI to complete
        if: github.event_name == 'push'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: 'Run tests'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
        
  extract-tag:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
      - id: get_tag
        run: echo "tag_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT

  build:
    name: Build the package
    runs-on: ubuntu-latest
    needs: [wait-for-ci]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Build package
        run: |
          uv venv
          uv sync --locked
          uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  release:
    name: Create GitHub Release
    needs: [extract-tag, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to avoid issues with tags and branches

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
            gh release create ${{ needs.extract-tag.outputs.tag_name }} dist/* --title ${{ needs.extract-tag.outputs.tag_name }} --generate-notes
          
  publish:
    name: Publish the package on PyPI
    needs: [extract-tag, build, release]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Publish distribution to PyPI
        run: uv publish