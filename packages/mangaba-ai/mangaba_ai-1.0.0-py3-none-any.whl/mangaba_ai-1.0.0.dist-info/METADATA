Metadata-Version: 2.4
Name: mangaba-ai
Version: 1.0.0
Summary: Agente de IA inteligente e vers√°til
Home-page: https://github.com/mangaba-ai/mangaba-ai
Author: Mangaba AI Team
Author-email: contato@mangaba.ai
Project-URL: Bug Reports, https://github.com/mangaba-ai/mangaba-ai/issues
Project-URL: Source, https://github.com/mangaba-ai/mangaba-ai
Project-URL: Documentation, https://github.com/mangaba-ai/mangaba-ai#readme
Keywords: ai,gemini,google,chatbot,artificial intelligence
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: google-generativeai>=0.3.0
Requires-Dist: python-dotenv>=0.19.0
Requires-Dist: loguru>=0.6.0
Requires-Dist: pydantic>=1.8.0
Requires-Dist: requests>=2.25.0
Requires-Dist: websockets>=10.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license-file
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# ü•≠ Mangaba AI

[![PyPI version](https://img.shields.io/pypi/v/mangaba.svg)](https://pypi.org/project/mangaba/)
[![Python](https://img.shields.io/pypi/pyversions/mangaba.svg)](https://www.python.org/)
[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)
[![Build Status](https://img.shields.io/badge/build-passing-brightgreen.svg)](https://github.com/usuario/mangaba-ai/actions)

Reposit√≥rio minimalista para cria√ß√£o de agentes de IA inteligentes e vers√°teis com protocolos **A2A** (Agent-to-Agent) e **MCP** (Model Context Protocol).

> üìö **[WIKI AVAN√áADA](wiki/README.md)** - Documenta√ß√£o completa em portugu√™s brasileiro

> üìã **[√çNDICE COMPLETO](INDICE.md)** - Navega√ß√£o r√°pida por todo o reposit√≥rio

## ‚ú® Caracter√≠sticas Principais

- ü§ñ **Agente de IA Vers√°til**: Suporte a qualquer provedor de IA
- üîó **Protocolo A2A**: Comunica√ß√£o entre agentes
- üß† **Protocolo MCP**: Gerenciamento avan√ßado de contexto
- üìù **Funcionalidades Integradas**: Chat, an√°lise, tradu√ß√£o e mais
- ‚ö° **Configura√ß√£o Simples**: Apenas 2 passos para come√ßar

## üöÄ Instala√ß√£o R√°pida

### Op√ß√£o 1: Configura√ß√£o Autom√°tica (Recomendado)

```bash
# Configura√ß√£o completa em um comando
python quick_setup.py
```

### Op√ß√£o 2: Configura√ß√£o Manual

```bash
# 1. Instalar depend√™ncias
pip install -r requirements.txt

# 2. Configurar ambiente
copy .env.template .env
# Edite o arquivo .env com suas configura√ß√µes

# 3. Validar instala√ß√£o
python validate_env.py
```

## ‚öôÔ∏è Configura√ß√£o

### üîß Configura√ß√£o Autom√°tica

O script `quick_setup.py` automatiza todo o processo:
- ‚úÖ Cria ambiente virtual
- ‚úÖ Instala depend√™ncias
- ‚úÖ Configura arquivo .env
- ‚úÖ Valida instala√ß√£o

### üõ†Ô∏è Configura√ß√£o Manual

1. **Configure o arquivo .env** (copie de `.env.template`):
```env
# Obrigat√≥rio
GOOGLE_API_KEY=sua_chave_google_api_aqui

# Opcional (com valores padr√£o)
MODEL_NAME=gemini-2.5-flash
AGENT_NAME=MangabaAgent
LOG_LEVEL=INFO
```

2. **Obtenha sua Google API Key**:
   - Acesse: https://makersuite.google.com/app/apikey
   - Crie uma nova chave
   - Cole no arquivo .env

### üîç Valida√ß√£o do Ambiente

```bash
# Verifica se tudo est√° configurado corretamente
python validate_env.py

# Salva relat√≥rio detalhado
python validate_env.py --save-report
```

## üìñ Uso Super Simples

```python
from mangaba_ai import MangabaAgent

# Inicializar com protocolos A2A e MCP habilitados
agent = MangabaAgent()

# Chat com contexto autom√°tico
resposta = agent.chat("Ol√°! Como voc√™ pode me ajudar?")
print(resposta)
```

## üéØ Exemplos Pr√°ticos

### Chat B√°sico com Contexto MCP
```python
from mangaba_ai import MangabaAgent

agent = MangabaAgent()

# O contexto √© mantido automaticamente
print(agent.chat("Meu nome √© Jo√£o"))
print(agent.chat("Qual √© o meu nome?"))  # Lembra do contexto anterior
```

### An√°lise de Texto
```python
agent = MangabaAgent()
text = "A intelig√™ncia artificial est√° transformando o mundo."
analysis = agent.analyze_text(text, "Fa√ßa uma an√°lise detalhada")
print(analysis)
```

### Tradu√ß√£o
```python
agent = MangabaAgent()
translation = agent.translate("Hello, how are you?", "portugu√™s")
print(translation)
```

### Resumo do Contexto
```python
agent = MangabaAgent()

# Ap√≥s algumas intera√ß√µes...
summary = agent.get_context_summary()
print(summary)
```

## üîó Protocolo A2A (Agent-to-Agent)

O protocolo A2A permite comunica√ß√£o entre m√∫ltiplos agentes:

### Comunica√ß√£o entre Agentes
```python
# Criar dois agentes
agent1 = MangabaAgent()
agent2 = MangabaAgent()

# Enviar requisi√ß√£o de um agente para outro
result = agent1.send_agent_request(
    target_agent_id=agent2.agent_id,
    action="chat",
    params={"message": "Ol√° do Agent 1!"}
)
```

### Broadcast para M√∫ltiplos Agentes
```python
agent = MangabaAgent()

# Enviar mensagem para todos os agentes conectados
result = agent.broadcast_message(
    message="Ol√° a todos!",
    tags=["general", "announcement"]
)
```

### Tipos de Mensagens A2A
- **REQUEST**: Requisi√ß√µes entre agentes
- **RESPONSE**: Respostas a requisi√ß√µes
- **BROADCAST**: Mensagens para m√∫ltiplos agentes
- **NOTIFICATION**: Notifica√ß√µes ass√≠ncronas
- **ERROR**: Mensagens de erro

## üß† Protocolo MCP (Model Context Protocol)

O protocolo MCP gerencia contexto avan√ßado automaticamente:

### Tipos de Contexto
- **CONVERSATION**: Conversas e di√°logos
- **TASK**: Tarefas e opera√ß√µes espec√≠ficas
- **MEMORY**: Mem√≥rias de longo prazo
- **SYSTEM**: Informa√ß√µes do sistema

### Prioridades de Contexto
- **HIGH**: Contexto cr√≠tico (sempre preservado)
- **MEDIUM**: Contexto importante
- **LOW**: Contexto opcional

### Funcionalidades MCP
```python
agent = MangabaAgent()

# Chat com contexto autom√°tico
response = agent.chat("Mensagem", use_context=True)

# Chat sem contexto
response = agent.chat("Mensagem", use_context=False)

# Obter resumo do contexto atual
summary = agent.get_context_summary()
```

## üõ†Ô∏è Exemplo Avan√ßado

```python
from mangaba_ai import MangabaAgent

def demo_completa():
    # Criar agente com protocolos habilitados
    agent = MangabaAgent()
    
    print(f"Agent ID: {agent.agent_id}")
    print(f"MCP Habilitado: {agent.mcp_enabled}")
    
    # Sequ√™ncia de intera√ß√µes com contexto
    agent.chat("Ol√°, meu nome √© Maria")
    agent.chat("Eu trabalho com programa√ß√£o")
    
    # An√°lise com contexto preservado
    analysis = agent.analyze_text(
        "Python √© uma linguagem vers√°til",
        "Analise considerando meu perfil profissional"
    )
    
    # Tradu√ß√£o
    translation = agent.translate("Good morning", "portugu√™s")
    
    # Resumo do contexto acumulado
    context = agent.get_context_summary()
    print("Contexto atual:", context)
    
    # Comunica√ß√£o A2A
    agent.broadcast_message("Demonstra√ß√£o conclu√≠da!")

if __name__ == "__main__":
    demo_completa()
```

## üéÆ Exemplo Interativo

Execute o exemplo interativo:

```bash
python examples/basic_example.py
```

Comandos dispon√≠veis:
- `/analyze <texto>` - Analisa texto
- `/translate <texto>` - Traduz texto
- `/context` - Mostra contexto atual
- `/broadcast <mensagem>` - Envia broadcast
- `/request <agent_id> <action>` - Requisi√ß√£o para outro agente
- `/help` - Ajuda

## üß™ Demonstra√ß√£o dos Protocolos

Para ver uma demonstra√ß√£o completa dos protocolos A2A e MCP:

```bash
python examples/basic_example.py --demo
```

## üìã Funcionalidades Principais

### MangabaAgent
- `chat(message, use_context=True)` - Chat com/sem contexto
- `analyze_text(text, instruction)` - An√°lise de texto
- `translate(text, target_language)` - Tradu√ß√£o
- `get_context_summary()` - Resumo do contexto
- `send_agent_request(agent_id, action, params)` - Requisi√ß√£o A2A
- `broadcast_message(message, tags)` - Broadcast A2A

### Protocolos Integrados
- **A2A Protocol**: Comunica√ß√£o entre agentes
- **MCP Protocol**: Gerenciamento de contexto
- **Handlers Customizados**: Para requisi√ß√µes espec√≠ficas
- **Sess√µes MCP**: Contexto isolado por sess√£o

## üîß Configura√ß√£o Avan√ßada

### Vari√°veis de Ambiente
```bash
API_KEY=sua_chave_api_aqui          # Obrigat√≥rio
MODEL=modelo_desejado               # Opcional
LOG_LEVEL=INFO                      # Opcional (DEBUG, INFO, WARNING, ERROR)
```

### Personaliza√ß√£o
```python
# Agente com configura√ß√µes customizadas
agent = MangabaAgent()

# Acessar protocolos diretamente
a2a = agent.a2a_protocol
mcp = agent.mcp

# ID √∫nico do agente
print(f"Agent ID: {agent.agent_id}")

# Sess√£o MCP atual
print(f"Session ID: {agent.current_session_id}")
```

agent = MangabaAgent()
resposta = agent.chat_with_context(
    context="Voc√™ √© um tutor de programa√ß√£o",
    message="Como criar uma lista em Python?"
)
print(resposta)
```

### An√°lise de Texto
```python
from mangaba_ai import MangabaAgent

agent = MangabaAgent()
texto = "Este √© um texto para analisar..."
analise = agent.analyze_text(texto, "Resuma os pontos principais")
print(analise)
```

## üîß Personaliza√ß√£o

Para usar um modelo diferente, apenas mude no `.env`:
```
MODEL=modelo-avancado     # Modelo mais avan√ßado
MODEL=modelo-multimodal   # Para diferentes tipos de entrada
```

## üöÄ Scripts Dispon√≠veis

> üîß **Todos os scripts est√£o organizados na pasta [scripts/](scripts/)**

- [`validate_env.py`](scripts/validate_env.py) - Valida configura√ß√£o do ambiente
- [`quick_setup.py`](scripts/quick_setup.py) - Configura√ß√£o r√°pida automatizada
- [`example_env_usage.py`](scripts/example_env_usage.py) - Exemplo de uso das configura√ß√µes
- [`exemplo_curso_basico.py`](scripts/exemplo_curso_basico.py) - Exemplos pr√°ticos do curso b√°sico
- [`setup_env.py`](scripts/setup_env.py) - Configura√ß√£o manual detalhada

## üìÅ Estrutura do Projeto

```
mangaba_ai/
‚îú‚îÄ‚îÄ üìÅ docs/                    # üìö Documenta√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ CURSO_BASICO.md         # Curso b√°sico completo
‚îÇ   ‚îú‚îÄ‚îÄ SETUP.md                # Guia de configura√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ PROTOCOLS.md            # Documenta√ß√£o dos protocolos
‚îÇ   ‚îú‚îÄ‚îÄ CHANGELOG.md            # Hist√≥rico de mudan√ßas
‚îÇ   ‚îú‚îÄ‚îÄ SCRIPTS.md              # Documenta√ß√£o dos scripts
‚îÇ   ‚îî‚îÄ‚îÄ README.md               # √çndice da documenta√ß√£o
‚îú‚îÄ‚îÄ üìÅ scripts/                 # üîß Scripts de configura√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ validate_env.py         # Valida√ß√£o do ambiente
‚îÇ   ‚îú‚îÄ‚îÄ quick_setup.py          # Setup r√°pido automatizado
‚îÇ   ‚îú‚îÄ‚îÄ example_env_usage.py    # Exemplo de uso
‚îÇ   ‚îú‚îÄ‚îÄ exemplo_curso_basico.py # Exemplos do curso
‚îÇ   ‚îú‚îÄ‚îÄ setup_env.py            # Setup manual detalhado
‚îÇ   ‚îî‚îÄ‚îÄ README.md               # Documenta√ß√£o dos scripts
‚îú‚îÄ‚îÄ üìÅ protocols/               # üåê Protocolos de comunica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ mcp_protocol.py         # Model Context Protocol
‚îÇ   ‚îî‚îÄ‚îÄ a2a_protocol.py         # Agent-to-Agent Protocol
‚îú‚îÄ‚îÄ üìÅ examples/                # üìñ Exemplos de uso
‚îÇ   ‚îî‚îÄ‚îÄ basic_example.py        # Exemplo b√°sico completo
‚îú‚îÄ‚îÄ üìÅ utils/                   # üõ†Ô∏è Utilit√°rios
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ logger.py               # Sistema de logs
‚îú‚îÄ‚îÄ mangaba_agent.py            # ü§ñ Agente principal
‚îú‚îÄ‚îÄ config.py                   # ‚öôÔ∏è Configura√ß√µes do sistema
‚îú‚îÄ‚îÄ ESTRUTURA.md                # üìÅ Organiza√ß√£o do reposit√≥rio
‚îú‚îÄ‚îÄ .env.example                # üîê Exemplo de configura√ß√£o
‚îú‚îÄ‚îÄ requirements.txt            # üì¶ Depend√™ncias Python
‚îî‚îÄ‚îÄ README.md                   # üìñ Este arquivo
```

> üìã **Para detalhes completos da estrutura, consulte [ESTRUTURA.md](ESTRUTURA.md)**

## üß™ Testar Rapidamente

```bash
# 1. Configura√ß√£o r√°pida
python scripts/quick_setup.py

# 2. Validar ambiente
python scripts/validate_env.py

# 3. Testar exemplo
python scripts/example_env_usage.py

# 4. Exemplos do curso b√°sico
python scripts/exemplo_curso_basico.py

# 5. Exemplo interativo
python examples/basic_example.py
```

## üìö Wiki Avan√ßada e Documenta√ß√£o

### üåü **[üìñ WIKI COMPLETA](docs/WIKI.md) - Portal Principal da Documenta√ß√£o**

A **Wiki Avan√ßada** do Mangaba AI oferece documenta√ß√£o abrangente em portugu√™s brasileiro para todos os n√≠veis:

#### üéì **Para Iniciantes**
- [üöÄ Vis√£o Geral do Projeto](docs/WIKI.md#-vis√£o-geral-do-projeto) - O que √© e para que serve
- [üéì Curso B√°sico Completo](docs/CURSO_BASICO.md) - Tutorial passo-a-passo  
- [‚öôÔ∏è Instala√ß√£o e Configura√ß√£o](docs/SETUP.md) - Guia detalhado de setup
- [‚ùì FAQ - Perguntas Frequentes](docs/FAQ.md) - D√∫vidas comuns e solu√ß√µes

#### üë®‚Äçüíª **Para Desenvolvedores**
- [üåê Protocolos A2A e MCP](docs/PROTOCOLS.md) - Documenta√ß√£o t√©cnica completa
- [‚≠ê Melhores Pr√°ticas](docs/MELHORES_PRATICAS.md) - Guia de boas pr√°ticas
- [ü§ù Como Contribuir](docs/CONTRIBUICAO.md) - Diretrizes de contribui√ß√£o
- [üìù Gloss√°rio de Termos](docs/GLOSSARIO.md) - Defini√ß√µes t√©cnicas

#### üõ†Ô∏è **Recursos T√©cnicos**
- [üîß Scripts e Automa√ß√£o](docs/SCRIPTS.md) - Documenta√ß√£o dos scripts
- [üìä Hist√≥rico de Mudan√ßas](docs/CHANGELOG.md) - Changelog completo
- [üìÅ Estrutura do Projeto](ESTRUTURA.md) - Organiza√ß√£o do reposit√≥rio

> üéØ **Comece pela [Wiki Principal](docs/WIKI.md)** - √â seu portal de entrada para toda a documenta√ß√£o!

## ü§ù Contribui√ß√£o

Agradecemos seu interesse em contribuir! Consulte nosso **[Guia Completo de Contribui√ß√£o](docs/CONTRIBUICAO.md)** para informa√ß√µes detalhadas.

### üöÄ **Primeiros Passos**
1. üìö Leia as [Diretrizes de Contribui√ß√£o](docs/CONTRIBUICAO.md)
2. üç¥ Fa√ßa fork do projeto
3. üîß Configure o ambiente de desenvolvimento
4. ‚≠ê Siga as [Melhores Pr√°ticas](docs/MELHORES_PRATICAS.md)
5. üß™ Execute os testes
6. üì§ Abra um Pull Request

### üí° **Formas de Contribuir**
- üêõ **Corre√ß√£o de bugs**
- ‚ú® **Novas funcionalidades**
- üìö **Melhoria da documenta√ß√£o**
- üß™ **Adi√ß√£o de testes**
- üåê **Tradu√ß√£o para outros idiomas**

> üìñ **Primeira contribui√ß√£o?** Procure por issues marcadas com `good first issue`!

## üìÑ Licen√ßa

MIT License

---

**Mangaba AI** - Agentes de IA simples e eficazes! ü§ñ‚ú®
