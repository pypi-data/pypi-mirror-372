# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: help@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.approval_result import ApprovalResult
from cobo_waas2.models.approval_show_info import ApprovalShowInfo
from typing import Optional, Set
from typing_extensions import Self


class ApprovalUserDetail(BaseModel):
    """
    The user detail for a transaction approval. This includes the user's email, public key, signature, statement UUID, result of the approval, creation time, template version, header title, whether it is for signing, and additional information to show. 
    """  # noqa: E501
    user_email: Optional[StrictStr] = Field(default=None, description="The email address of the user who approved the transaction.")
    pubkey: Optional[StrictStr] = Field(default=None, description="The public key of the user who approved the transaction.")
    signature: Optional[StrictStr] = Field(default=None, description="The signature of the transaction approval.")
    statement_uuid: Optional[StrictStr] = Field(default=None, description="The UUID of the statement associated with the transaction approval.")
    result: Optional[ApprovalResult] = None
    created_time: Optional[StrictInt] = Field(default=None, description="The timestamp when the approval was created.")
    template_version: Optional[StrictStr] = Field(default=None, description="The version of the template used for the transaction approval.")
    header_title: Optional[StrictStr] = Field(default=None, description="The title of the header for the transaction approval.")
    is_for_sign: Optional[StrictBool] = Field(default=None, description="Indicates whether the approval is for signing.")
    show_info: Optional[ApprovalShowInfo] = None
    __properties: ClassVar[List[str]] = ["user_email", "pubkey", "signature", "statement_uuid", "result", "created_time", "template_version", "header_title", "is_for_sign", "show_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApprovalUserDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of show_info
        if self.show_info:
            _dict['show_info'] = self.show_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApprovalUserDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_email": obj.get("user_email"),
            "pubkey": obj.get("pubkey"),
            "signature": obj.get("signature"),
            "statement_uuid": obj.get("statement_uuid"),
            "result": obj.get("result"),
            "created_time": obj.get("created_time"),
            "template_version": obj.get("template_version"),
            "header_title": obj.get("header_title"),
            "is_for_sign": obj.get("is_for_sign"),
            "show_info": ApprovalShowInfo.from_dict(obj["show_info"]) if obj.get("show_info") is not None else None
        })
        return _obj


