[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "signxai2"
version = "0.13.8"
authors = [
    {name = "TimeXAIgroup", email = "nils.gumpfer@kite.thm.de"},
]
maintainers = [
    {name = "Nils Gumpfer", email = "nils.gumpfer@kite.thm.de"},
]
description = "A comprehensive explainable AI library supporting both TensorFlow and PyTorch with unified API and advanced XAI methods including SIGN, LRP, and Grad-CAM. Authored by Nils Gumpfer, Jana Fischer and Alexander Paul."
readme = "README.md"
license = "BSD-3-Clause"
requires-python = ">=3.9,<3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Operating System :: OS Independent",
    "Typing :: Typed",
    "Framework :: Jupyter",
]
keywords = ["explainable ai", "xai", "interpretability", "machine learning", "deep learning", "tensorflow", "pytorch", "lrp", "grad-cam", "sign", "attribution", "saliency"]

# Core dependencies only - framework must be explicitly selected
# To install, use: pip install signxai2[tensorflow] or signxai2[pytorch] or signxai2[all]
dependencies = [
    # Core dependencies
    "numpy==1.26.4",
    "matplotlib>=3.7.0",
    "scipy>=1.10.0",
    "pillow>=8.0.0",
    "requests>=2.25.0",
    "setuptools~=68.2.2",
    "version-parser>=1.0.1",
    "protobuf<=3.20.3",
    "scikit-learn~=1.5.0",
    "scikit-image>=0.19.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "ipywidgets>=7.0.0",
    "notebook>=6.0.0",
    "wfdb~=4.1.2",
]

[project.optional-dependencies]
# TensorFlow installation
tensorflow = [
    "tensorflow>=2.8.0,<=2.12.1 ; platform_system=='Linux'",
    "tensorflow>=2.8.0,<=2.12.1 ; platform_system=='Windows'",
    "tensorflow-macos>=2.8.0,<=2.12.0 ; platform_system=='Darwin'",
]

# PyTorch installation
pytorch = [
    "torch>=1.10.0",
    "zennit==0.5.1",
]

# All frameworks (TensorFlow + PyTorch)
all = [
    # TensorFlow
    "tensorflow>=2.8.0,<=2.12.1 ; platform_system=='Linux'",
    "tensorflow>=2.8.0,<=2.12.1 ; platform_system=='Windows'",
    "tensorflow-macos>=2.8.0,<=2.12.0 ; platform_system=='Darwin'",
    # PyTorch
    "torch>=1.10.0",
    "zennit==0.5.1",
]

# Development dependencies (includes all frameworks)
dev = [
    # All frameworks
    "tensorflow>=2.8.0,<=2.12.1 ; platform_system=='Linux'",
    "tensorflow>=2.8.0,<=2.12.1 ; platform_system=='Windows'",
    "tensorflow-macos>=2.8.0,<=2.12.0 ; platform_system=='Darwin'",
    "torch>=1.10.0",
    "zennit==0.5.1",

    # Testing and development tools
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",  # Parallel testing
    "pytest-benchmark>=3.4.0",  # Performance benchmarking
    "flake8>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",  # Import sorting
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.2",
    "pydata-sphinx-theme>=0.13",  # Modern theme option
    "nbsphinx>=0.9",
    "myst-parser>=1.0",
]

[project.urls]
Homepage = "https://www.thm.de/mnd/jennifer-hannig/timexai-erklaerbare-kuenstliche-intelligenz-fuer-zeitreihen"
Documentation = "https://TimeXAIgroup.github.io/signxai2/index.html"
Repository = "https://github.com/TimeXAIgroup/signxai2.git"
"Bug Reports" = "https://github.com/TimeXAIgroup/signxai2/issues"
Changelog = "https://github.com/TimeXAIgroup/signxai2/blob/main/CHANGELOG.md"
"Publication" = "https://www.sciencedirect.com/science/article/pii/S1566253523001999?via%3Dihub"

[project.scripts]
signxai2-setup = "signxai2.cli.setup:main"
signxai2-benchmark = "signxai2.cli.benchmark:main"
signxai2-validate = "signxai2.cli.validate:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["signxai*"]
exclude = ["tests*", "docs*", "examples*", "utils*", "benchmarks*"]

[tool.setuptools.package-data]
signxai2 = [
    "py.typed",
    "data/*.json",
    "data/*.yaml",
    "configs/*.yaml",
    "configs/*.json",
]

# Modern Python tooling configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | docs
  | examples/data
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
skip = ["__init__.py"]
known_first_party = ["signxai2"]
known_third_party = ["numpy", "tensorflow", "torch", "matplotlib", "scipy"]

[tool.mypy]
python_version = "3.9"
namespace_packages = true
explicit_package_bases = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # Too strict for some libraries
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "torch.*",
    "matplotlib.*",
    "scipy.*",
    "sklearn.*",
    "wfdb.*",
    "zennit.*",
]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=signxai2",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-n auto",  # Use pytest-xdist for parallel execution
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU (deselect with '-m \"not gpu\"')",
    "tensorflow: marks tests specific to TensorFlow",
    "pytorch: marks tests specific to PyTorch",
    "benchmark: marks performance benchmark tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:tensorflow.*",
    "ignore::DeprecationWarning:torch.*",
]

[tool.coverage.run]
source = ["signxai2"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/cli/*",
    "*/setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Ruff - Modern Python linter (faster alternative to flake8)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "PT",   # flake8-pytest-style
    "SIM",  # flake8-simplify
    "NPY",  # NumPy-specific rules
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function calls in argument defaults
    "C901",   # Too complex
    "NPY002", # Legacy numpy random
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "docs",
    "examples/data",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["S101"]      # Allow assert in tests

# Bandit - Security linting
[tool.bandit]
exclude_dirs = ["tests", "docs", "examples"]
skips = ["B101", "B601"]  # Skip assert_used and shell_usage tests

# Documentation coverage
[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests", "examples"]
verbose = 0
quiet = false
color = true
omit-covered-files = false