# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel


class MigrateLedgerEntry(BaseModel):
    migrate_ledger_entry: Union[
        "MigrateLedgerEntryMigrateLedgerEntryBadRequestError",
        "MigrateLedgerEntryMigrateLedgerEntryInternalError",
        "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResult",
    ] = Field(alias="migrateLedgerEntry", discriminator="typename__")


class MigrateLedgerEntryMigrateLedgerEntryBadRequestError(BaseModel):
    typename__: Literal["BadRequestError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


class MigrateLedgerEntryMigrateLedgerEntryInternalError(BaseModel):
    typename__: Literal["InternalError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResult(BaseModel):
    typename__: Literal["MigrateLedgerEntryResult"] = Field(alias="__typename")
    reversing_ledger_entry: (
        "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntry"
    ) = Field(alias="reversingLedgerEntry")
    reversed_ledger_entry: (
        "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntry"
    ) = Field(alias="reversedLedgerEntry")
    new_ledger_entry: (
        "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntry"
    ) = Field(alias="newLedgerEntry")
    is_ik_replay: bool = Field(alias="isIkReplay")


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntry(
    BaseModel
):
    ik: str
    id: str
    created: Any
    posted: Any
    type: Optional[Any]
    description: Optional[str]
    reversed_at: Optional[Any] = Field(alias="reversedAt")
    hidden: bool
    lines: "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntryLines"


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntryLines(
    BaseModel
):
    nodes: List[
        "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntryLinesNodes"
    ]


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntryLinesNodes(
    BaseModel
):
    id: str
    amount: Any
    account: "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntryLinesNodesAccount"


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntryLinesNodesAccount(
    BaseModel
):
    path: str


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntry(
    BaseModel
):
    ik: str
    id: str
    created: Any
    posted: Any
    type: Optional[Any]
    description: Optional[str]
    reversed_at: Optional[Any] = Field(alias="reversedAt")
    hidden: bool
    lines: "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntryLines"


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntryLines(
    BaseModel
):
    nodes: List[
        "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntryLinesNodes"
    ]


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntryLinesNodes(
    BaseModel
):
    id: str
    amount: Any
    account: "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntryLinesNodesAccount"


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntryLinesNodesAccount(
    BaseModel
):
    path: str


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntry(
    BaseModel
):
    ik: str
    id: str
    created: Any
    posted: Any
    type: Optional[Any]
    description: Optional[str]
    reversed_at: Optional[Any] = Field(alias="reversedAt")
    hidden: bool
    lines: "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntryLines"


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntryLines(
    BaseModel
):
    nodes: List[
        "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntryLinesNodes"
    ]


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntryLinesNodes(
    BaseModel
):
    id: str
    amount: Any
    account: "MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntryLinesNodesAccount"


class MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntryLinesNodesAccount(
    BaseModel
):
    path: str


MigrateLedgerEntry.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResult.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntry.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntryLines.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversingLedgerEntryLinesNodes.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntry.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntryLines.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultReversedLedgerEntryLinesNodes.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntry.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntryLines.model_rebuild()
MigrateLedgerEntryMigrateLedgerEntryMigrateLedgerEntryResultNewLedgerEntryLinesNodes.model_rebuild()
