# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import CurrencyCode


class SyncCustomAccounts(BaseModel):
    sync_custom_accounts: Union[
        "SyncCustomAccountsSyncCustomAccountsBadRequestError",
        "SyncCustomAccountsSyncCustomAccountsInternalError",
        "SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult",
    ] = Field(alias="syncCustomAccounts", discriminator="typename__")


class SyncCustomAccountsSyncCustomAccountsBadRequestError(BaseModel):
    typename__: Literal["BadRequestError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


class SyncCustomAccountsSyncCustomAccountsInternalError(BaseModel):
    typename__: Literal["InternalError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


class SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult(BaseModel):
    typename__: Literal["SyncCustomAccountsResult"] = Field(alias="__typename")
    accounts: List[
        "SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccounts"
    ]


class SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccounts(BaseModel):
    id: str
    external_id: str = Field(alias="externalId")
    name: str
    currency: Optional[
        "SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsCurrency"
    ]


class SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccountsCurrency(
    BaseModel
):
    code: CurrencyCode
    custom_currency_id: Optional[Any] = Field(alias="customCurrencyId")


SyncCustomAccounts.model_rebuild()
SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResult.model_rebuild()
SyncCustomAccountsSyncCustomAccountsSyncCustomAccountsResultAccounts.model_rebuild()
