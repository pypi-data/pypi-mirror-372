# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import LedgerDataMigrationStatus


class GetEntryDataMigrations(BaseModel):
    ledger: Optional["GetEntryDataMigrationsLedger"]


class GetEntryDataMigrationsLedger(BaseModel):
    ledger_entry_data_migrations: (
        "GetEntryDataMigrationsLedgerLedgerEntryDataMigrations"
    ) = Field(alias="ledgerEntryDataMigrations")


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrations(BaseModel):
    nodes: List["GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodes"]
    page_info: "GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsPageInfo" = Field(
        alias="pageInfo"
    )


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodes(BaseModel):
    entry_type: Any = Field(alias="entryType")
    type_version: int = Field(alias="typeVersion")
    status: LedgerDataMigrationStatus
    current_migration: Optional[
        "GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesCurrentMigration"
    ] = Field(alias="currentMigration")
    ledger_entries: (
        "GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesLedgerEntries"
    ) = Field(alias="ledgerEntries")
    history: "GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesHistory"


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesCurrentMigration(
    BaseModel
):
    schema_version: int = Field(alias="schemaVersion")
    status: LedgerDataMigrationStatus


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesLedgerEntries(
    BaseModel
):
    nodes: List[
        "GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodes"
    ]
    page_info: (
        "GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesLedgerEntriesPageInfo"
    ) = Field(alias="pageInfo")


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodes(
    BaseModel
):
    id: str
    type: Optional[Any]
    posted: Any
    parameters: Optional[Any]


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesLedgerEntriesPageInfo(
    BaseModel
):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesHistory(BaseModel):
    nodes: List[
        "GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesHistoryNodes"
    ]
    page_info: (
        "GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesHistoryPageInfo"
    ) = Field(alias="pageInfo")


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesHistoryNodes(BaseModel):
    schema_version: int = Field(alias="schemaVersion")
    status: LedgerDataMigrationStatus


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesHistoryPageInfo(
    BaseModel
):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")


class GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")


GetEntryDataMigrations.model_rebuild()
GetEntryDataMigrationsLedger.model_rebuild()
GetEntryDataMigrationsLedgerLedgerEntryDataMigrations.model_rebuild()
GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodes.model_rebuild()
GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesLedgerEntries.model_rebuild()
GetEntryDataMigrationsLedgerLedgerEntryDataMigrationsNodesHistory.model_rebuild()
