# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel


class AddLedgerEntryRuntime(BaseModel):
    add_ledger_entry: Union[
        "AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult",
        "AddLedgerEntryRuntimeAddLedgerEntryBadRequestError",
        "AddLedgerEntryRuntimeAddLedgerEntryInternalError",
    ] = Field(alias="addLedgerEntry", discriminator="typename__")


class AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult(BaseModel):
    typename__: Literal["AddLedgerEntryResult"] = Field(alias="__typename")
    is_ik_replay: bool = Field(alias="isIkReplay")
    entry: "AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntry"
    lines: List["AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLines"]


class AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultEntry(BaseModel):
    type: Optional[Any]
    id: str
    ik: str
    posted: Any
    created: Any


class AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLines(BaseModel):
    id: str
    amount: Any
    account: "AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesAccount"


class AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLinesAccount(BaseModel):
    path: str


class AddLedgerEntryRuntimeAddLedgerEntryBadRequestError(BaseModel):
    typename__: Literal["BadRequestError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


class AddLedgerEntryRuntimeAddLedgerEntryInternalError(BaseModel):
    typename__: Literal["InternalError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


AddLedgerEntryRuntime.model_rebuild()
AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResult.model_rebuild()
AddLedgerEntryRuntimeAddLedgerEntryAddLedgerEntryResultLines.model_rebuild()
