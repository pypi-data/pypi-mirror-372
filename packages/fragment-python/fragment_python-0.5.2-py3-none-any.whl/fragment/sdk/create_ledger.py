# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel


class CreateLedger(BaseModel):
    create_ledger: Union[
        "CreateLedgerCreateLedgerBadRequestError",
        "CreateLedgerCreateLedgerCreateLedgerResult",
        "CreateLedgerCreateLedgerInternalError",
    ] = Field(alias="createLedger", discriminator="typename__")


class CreateLedgerCreateLedgerBadRequestError(BaseModel):
    typename__: Literal["BadRequestError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


class CreateLedgerCreateLedgerCreateLedgerResult(BaseModel):
    typename__: Literal["CreateLedgerResult"] = Field(alias="__typename")
    ledger: "CreateLedgerCreateLedgerCreateLedgerResultLedger"
    is_ik_replay: bool = Field(alias="isIkReplay")


class CreateLedgerCreateLedgerCreateLedgerResultLedger(BaseModel):
    id: str
    ik: Any
    name: str
    created: Any
    schema_: Optional["CreateLedgerCreateLedgerCreateLedgerResultLedgerSchema"] = Field(
        alias="schema"
    )


class CreateLedgerCreateLedgerCreateLedgerResultLedgerSchema(BaseModel):
    key: Any


class CreateLedgerCreateLedgerInternalError(BaseModel):
    typename__: Literal["InternalError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


CreateLedger.model_rebuild()
CreateLedgerCreateLedgerCreateLedgerResult.model_rebuild()
CreateLedgerCreateLedgerCreateLedgerResultLedger.model_rebuild()
