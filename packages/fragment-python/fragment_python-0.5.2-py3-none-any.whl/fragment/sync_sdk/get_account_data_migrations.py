# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import LedgerDataMigrationStatus


class GetAccountDataMigrations(BaseModel):
    ledger: Optional["GetAccountDataMigrationsLedger"]


class GetAccountDataMigrationsLedger(BaseModel):
    ledger_account_data_migrations: (
        "GetAccountDataMigrationsLedgerLedgerAccountDataMigrations"
    ) = Field(alias="ledgerAccountDataMigrations")


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrations(BaseModel):
    nodes: List["GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodes"]
    page_info: "GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsPageInfo" = (
        Field(alias="pageInfo")
    )


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodes(BaseModel):
    account_path: str = Field(alias="accountPath")
    status: LedgerDataMigrationStatus
    current_migration: Optional[
        "GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesCurrentMigration"
    ] = Field(alias="currentMigration")
    ledger_entries: (
        "GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesLedgerEntries"
    ) = Field(alias="ledgerEntries")
    history: "GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesHistory"


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesCurrentMigration(
    BaseModel
):
    schema_version: int = Field(alias="schemaVersion")
    status: LedgerDataMigrationStatus


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesLedgerEntries(
    BaseModel
):
    nodes: List[
        "GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodes"
    ]
    page_info: (
        "GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesLedgerEntriesPageInfo"
    ) = Field(alias="pageInfo")


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodes(
    BaseModel
):
    id: str
    type: Optional[Any]
    posted: Any
    parameters: Optional[Any]


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesLedgerEntriesPageInfo(
    BaseModel
):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesHistory(BaseModel):
    nodes: List[
        "GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesHistoryNodes"
    ]
    page_info: (
        "GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesHistoryPageInfo"
    ) = Field(alias="pageInfo")


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesHistoryNodes(
    BaseModel
):
    schema_version: int = Field(alias="schemaVersion")
    status: LedgerDataMigrationStatus


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesHistoryPageInfo(
    BaseModel
):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")


class GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")


GetAccountDataMigrations.model_rebuild()
GetAccountDataMigrationsLedger.model_rebuild()
GetAccountDataMigrationsLedgerLedgerAccountDataMigrations.model_rebuild()
GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodes.model_rebuild()
GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesLedgerEntries.model_rebuild()
GetAccountDataMigrationsLedgerLedgerAccountDataMigrationsNodesHistory.model_rebuild()
