# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel


class GetEntriesToMigrateForLedgerEntryDataMigration(BaseModel):
    ledger: Optional["GetEntriesToMigrateForLedgerEntryDataMigrationLedger"]


class GetEntriesToMigrateForLedgerEntryDataMigrationLedger(BaseModel):
    ledger_entry_data_migrations: (
        "GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrations"
    ) = Field(alias="ledgerEntryDataMigrations")


class GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrations(
    BaseModel
):
    nodes: List[
        "GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodes"
    ]


class GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodes(
    BaseModel
):
    ledger_entries: (
        "GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntries"
    ) = Field(alias="ledgerEntries")


class GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntries(
    BaseModel
):
    nodes: List[
        "GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodes"
    ]
    page_info: (
        "GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesPageInfo"
    ) = Field(alias="pageInfo")


class GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodes(
    BaseModel
):
    id: str
    ik: str
    type: Optional[Any]
    type_version: Optional[int] = Field(alias="typeVersion")
    description: Optional[str]
    posted: Any
    created: Any
    parameters: Optional[Any]
    lines: "GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodesLines"


class GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodesLines(
    BaseModel
):
    nodes: List[
        "GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodesLinesNodes"
    ]


class GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodesLinesNodes(
    BaseModel
):
    id: str
    amount: Any
    account: "GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodesLinesNodesAccount"


class GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodesLinesNodesAccount(
    BaseModel
):
    path: str


class GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesPageInfo(
    BaseModel
):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")


GetEntriesToMigrateForLedgerEntryDataMigration.model_rebuild()
GetEntriesToMigrateForLedgerEntryDataMigrationLedger.model_rebuild()
GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrations.model_rebuild()
GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodes.model_rebuild()
GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntries.model_rebuild()
GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodes.model_rebuild()
GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodesLines.model_rebuild()
GetEntriesToMigrateForLedgerEntryDataMigrationLedgerLedgerEntryDataMigrationsNodesLedgerEntriesNodesLinesNodes.model_rebuild()
