# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel


class GetEntriesToMigrateForLedgerAccountDataMigration(BaseModel):
    ledger: Optional["GetEntriesToMigrateForLedgerAccountDataMigrationLedger"]


class GetEntriesToMigrateForLedgerAccountDataMigrationLedger(BaseModel):
    ledger_account_data_migrations: (
        "GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrations"
    ) = Field(alias="ledgerAccountDataMigrations")


class GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrations(
    BaseModel
):
    nodes: List[
        "GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodes"
    ]


class GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodes(
    BaseModel
):
    ledger_entries: (
        "GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntries"
    ) = Field(alias="ledgerEntries")


class GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntries(
    BaseModel
):
    nodes: List[
        "GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodes"
    ]
    page_info: (
        "GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesPageInfo"
    ) = Field(alias="pageInfo")


class GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodes(
    BaseModel
):
    id: str
    ik: str
    type: Optional[Any]
    type_version: Optional[int] = Field(alias="typeVersion")
    description: Optional[str]
    posted: Any
    created: Any
    parameters: Optional[Any]
    lines: "GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodesLines"


class GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodesLines(
    BaseModel
):
    nodes: List[
        "GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodesLinesNodes"
    ]


class GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodesLinesNodes(
    BaseModel
):
    id: str
    amount: Any
    account: "GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodesLinesNodesAccount"


class GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodesLinesNodesAccount(
    BaseModel
):
    path: str


class GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesPageInfo(
    BaseModel
):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")


GetEntriesToMigrateForLedgerAccountDataMigration.model_rebuild()
GetEntriesToMigrateForLedgerAccountDataMigrationLedger.model_rebuild()
GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrations.model_rebuild()
GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodes.model_rebuild()
GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntries.model_rebuild()
GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodes.model_rebuild()
GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodesLines.model_rebuild()
GetEntriesToMigrateForLedgerAccountDataMigrationLedgerLedgerAccountDataMigrationsNodesLedgerEntriesNodesLinesNodes.model_rebuild()
