# Generated by fragment (with the help of ariadne-codegen)
# Source: queries/

from typing import Any, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import CurrencyCode


class CreateCustomCurrency(BaseModel):
    create_custom_currency: Union[
        "CreateCustomCurrencyCreateCustomCurrencyBadRequestError",
        "CreateCustomCurrencyCreateCustomCurrencyCreateCustomCurrencyResult",
        "CreateCustomCurrencyCreateCustomCurrencyInternalError",
    ] = Field(alias="createCustomCurrency", discriminator="typename__")


class CreateCustomCurrencyCreateCustomCurrencyBadRequestError(BaseModel):
    typename__: Literal["BadRequestError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


class CreateCustomCurrencyCreateCustomCurrencyCreateCustomCurrencyResult(BaseModel):
    typename__: Literal["CreateCustomCurrencyResult"] = Field(alias="__typename")
    custom_currency: (
        "CreateCustomCurrencyCreateCustomCurrencyCreateCustomCurrencyResultCustomCurrency"
    ) = Field(alias="customCurrency")


class CreateCustomCurrencyCreateCustomCurrencyCreateCustomCurrencyResultCustomCurrency(
    BaseModel
):
    code: CurrencyCode
    custom_currency_id: Optional[Any] = Field(alias="customCurrencyId")
    precision: int
    name: str
    custom_code: Optional[str] = Field(alias="customCode")


class CreateCustomCurrencyCreateCustomCurrencyInternalError(BaseModel):
    typename__: Literal["InternalError"] = Field(alias="__typename")
    code: str
    message: str
    retryable: bool


CreateCustomCurrency.model_rebuild()
CreateCustomCurrencyCreateCustomCurrencyCreateCustomCurrencyResult.model_rebuild()
