"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .askindexresponsesource import (
    AskIndexResponseSource,
    AskIndexResponseSourceTypedDict,
)
from duckyai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class AskIndexResponseTypedDict(TypedDict):
    answer: str
    r"""The synthesized answer to the question"""
    confidence: int
    r"""Confidence score for the answer quality (0 to 1000)"""
    sources: List[AskIndexResponseSourceTypedDict]
    r"""List of source documents that contributed to the answer"""
    thread_id: NotRequired[Nullable[str]]
    r"""Reserved for future use - conversation thread identifier"""


class AskIndexResponse(BaseModel):
    answer: str
    r"""The synthesized answer to the question"""

    confidence: int
    r"""Confidence score for the answer quality (0 to 1000)"""

    sources: List[AskIndexResponseSource]
    r"""List of source documents that contributed to the answer"""

    thread_id: OptionalNullable[str] = UNSET
    r"""Reserved for future use - conversation thread identifier"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["thread_id"]
        nullable_fields = ["thread_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
