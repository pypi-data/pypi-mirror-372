import os
import json
from box import Box

from MalwareClassifier.Logging import setup_logging, get_logger

class MalwareClassifier():
    '''
    Model for malware classification.
    This class handles data extraction, vectorization, training, and prediction.
    '''
    
    def __init__(self, config_path="./config.json"):
        '''
        Read the configuration file, create necessary directories, and setup logging.

        Parameters:
        config_path (str): Path to the configuration file (default: "./config.json").
        '''
        # Read config.json
        self.config_path = config_path
        with open(config_path) as f:
            self.config = Box(json.load(f))
        
        # Create necessary directories
        self.mkdir()

        # Setup logging
        setup_logging(log_dir=self.config.folder.log)
        self.logger = get_logger(__name__)
        self.logger.info("Initializing MalwareClassifier")

    def feature(self):
        '''
        Extracts features from the malware dataset.
        '''
        self.logger.info("Extracting features from the dataset")
        raise NotImplementedError("This method (feature) should be overridden by subclasses")
        
    
    def vectorize(self):
        '''
        Vectorizes the extracted features into a numpy array.
        '''
        self.logger.info("Vectorizing features into numpy array")
        raise NotImplementedError("This method (vectorize) should be overridden by subclasses")

    def model(self, action:str="train"):
        '''
        Trains the model.
        
        Parameters:
        action (str): The action to perform (default: "train").
            - "train": Train the model.
            - "predict": Perform inference with the model.
        '''
        self.logger.info(f"Model action: {action}")
        raise NotImplementedError("This method (model) should be overridden by subclasses")
    
    def predict(self):
        '''
        Predicts whether the given files are malware or benignware.
        '''
        self.logger.info("Making predictions on the dataset")
        raise NotImplementedError("This method (predict) should be overridden by subclasses")
        
    def mkdir(self):
        '''
        Creates necessary directories for the model.
        '''
        for folder_name, folder_path in self.config.folder.items():
            os.makedirs(folder_path, exist_ok=True)
        
if __name__ == "__main__":
    classifier = MalwareClassifier()
    classifier.feature()
    classifier.vectorize()
    classifier.model(action="train")
    classifier.predict()