[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "logic-lm-mcp-server"
dynamic = ["version"]
description = "A Model Context Protocol server that provides symbolic reasoning capabilities using Logic-LM framework and Answer Set Programming"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Steven Wang", email = "stevenwangbe@gmail.com"},
]
keywords = ["logic", "reasoning", "mcp", "answer-set-programming", "asp", "symbolic-solver", "clingo"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "fastmcp>=2.0.0",
    "pydantic>=2.0.0", 
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
solver = ["clingo>=5.8.0"]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
]
all = ["logic-lm-mcp-server[solver,dev]"]

[project.urls]
Homepage = "https://github.com/stevenwangbe/logic-lm-mcp-server"
Repository = "https://github.com/stevenwangbe/logic-lm-mcp-server"
Issues = "https://github.com/stevenwangbe/logic-lm-mcp-server/issues"
Documentation = "https://github.com/stevenwangbe/logic-lm-mcp-server/blob/main/README.md"

[project.scripts]
logic-lm-mcp = "logic_lm_mcp.main:main"

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/logic_lm_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]
exclude = [
    "/venv",
    "/__pycache__",
    "*.pyc",
    "/.git",
]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
select = ["E", "F", "W", "I", "N", "UP", "YTT", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["E501", "COM812", "ISC001"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-v --tb=short"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
asyncio_mode = "auto"