# Script to handle a coupled SSM
# Adapted from MAP Client code generated by Ju Zhang
# Adapted by Nynke Rooks & Laura Carman
# 18/01/2022 - 26/09/2024

# All node numbers are local node numbers (node numbers per bone, not the whole coupled SSM).

from gias3.learning import PCA
from gias3.mesh import vtktools
from gias3.mesh import simplemesh
import numpy as np
import os


class SSMHandler:
    def __init__(self, general_fit_settings, num, side, loo=False):
        self.side = side
        self.include_patella = general_fit_settings['include_patella']
        if loo:
            self.ssm_name_bones_incl = 'shape_model_LOO'
            self.coupled_ssm_dir = r'{}/coupled_ssm/{}'.format(os.getcwd(), self.ssm_name_bones_incl)
        else:
            self.ssm_name_bones_incl = 'pel_fem_tib_fib_pat' if self.include_patella else 'pel_fem_tib_fib'
            self.coupled_ssm_dir = os.path.join(os.path.dirname(__file__), 'coupled_ssm', f'{self.ssm_name_bones_incl}_both_side')

        self.coupled_pcs = None
        self.ssm_pc_file = None
        self.ssm_mean_file = None
        self.ssm_mean = {}
        self.ssm_mean_split_per_bone = {}
        self.ssm_faces_split_per_bone = {}
        self.ssm_bone_node_nrs_file = None
        self.ssm_bone_node_nrs = {}
        self.ssm_bone_face_nrs = {}

        self.ssm_lm_node_nrs_femur = {}
        self.ssm_lm_node_nrs_pelvis = {}
        self.ssm_lm_node_nrs_tibiafibula = {}
        self.ssm_lm_node_nrs_patella = {}
        self.ssm_regions_node_nrs_pelvis = {}
        self.ssm_regions_node_nrs_femur = {}
        self.ssm_regions_node_nrs_tibiafibula = {}

        self.ssm_regions_dir = os.path.join(os.path.dirname(__file__), 'coupled_ssm_regions_local')
        self.ssm_lm_node_nrs_pelvis['left'] = \
            read_lm_node_nrs_from_txt(
                r'{}/pelvis/local_landmark_node_nrs_left.txt'.format(self.ssm_regions_dir))
        self.ssm_lm_node_nrs_pelvis['right'] = \
            read_lm_node_nrs_from_txt(
                r'{}/pelvis/local_landmark_node_nrs_right.txt'.format(self.ssm_regions_dir))
        self.ssm_regions_node_nrs_pelvis[self.side] = \
            read_region_node_nrs_from_txt(
                r'{}/pelvis/acetabulum_{}_verts.txt'.format(self.ssm_regions_dir, self.side), 'acetabulum_nodes')
        self.ssm_lm_node_nrs_femur[self.side] = \
            read_lm_node_nrs_from_txt(
                r'{}/femur/local_landmark_node_nrs_{}.txt'.format(self.ssm_regions_dir, self.side))
        self.ssm_lm_node_nrs_tibiafibula[self.side] = \
            read_lm_node_nrs_from_txt(
                r'{}/tibiafibula/local_landmark_node_nrs_{}.txt'.format(self.ssm_regions_dir, self.side))
        if self.include_patella is True:
            self.ssm_lm_node_nrs_patella[self.side] = \
                read_lm_node_nrs_from_txt(
                    r'{}/patella/local_landmark_node_nrs_{}.txt'.format(self.ssm_regions_dir, self.side))
        self.ssm_regions_node_nrs_femur[self.side] = \
            read_region_node_nrs_from_txt(
                r'{}/femur/knee_node_nrs_femur_{}.txt'.format(self.ssm_regions_dir, self.side), 'knee_nodes')
        self.ssm_regions_node_nrs_femur[self.side].update(
            read_region_node_nrs_from_txt(
                r'{}/femur/femur_head_{}_verts.txt'.format(self.ssm_regions_dir, self.side), 'femur_head_nodes'))
        self.ssm_regions_node_nrs_tibiafibula[self.side] = \
            read_region_node_nrs_from_txt(
                r'{}/tibiafibula/knee_node_nrs_tibia_{}.txt'.format(self.ssm_regions_dir, self.side), 'knee_nodes')

        if loo:
            self.load_coupled_ssm_loo(num)
        else:
            self.load_coupled_ssm()

        self.reconstructed = None
        self.reconstructed_nodes_per_bone = {}

    def load_coupled_ssm(self):
        self.ssm_pc_file = r'{}/shape_model_{}_side.pc.npz'.format(self.coupled_ssm_dir, self.side)
        self.ssm_mean_file = r'{}/shape_model_{}_side_mean.ply'.format(self.coupled_ssm_dir, self.side)
        self.ssm_mean = vtktools.loadpoly(self.ssm_mean_file)
        # self.coupled_pcs = PCA.loadPrincipalComponents(self.ssm_pc_file, mean = self.ssm_mean.v.reshape(-1))
        self.coupled_pcs = PCA.loadPrincipalComponents(self.ssm_pc_file)
        self.ssm_bone_node_nrs_file = r'{}/Coupled_SSM_node_nrs_per_bone_mesh_{}.txt'.format(self.coupled_ssm_dir, self.side)
        self.ssm_bone_face_nrs_file = r'{}/Coupled_SSM_face_nrs_per_bone_mesh_{}.txt'.format(self.coupled_ssm_dir, self.side)
        self.split_mean_ssm_geometry_per_bone(self.ssm_mean.v)
        self.split_mean_ssm_faces(self.ssm_mean.f)

    def load_coupled_ssm_loo(self, num):
        self.ssm_pc_file = r'{}/Left_side{}.pc.npz'.format(self.coupled_ssm_dir, str(num))
        self.coupled_pcs = PCA.loadPrincipalComponents(self.ssm_pc_file)
        self.ssm_mean_file = r'{}/Left_side{}_mean.ply'.format(self.coupled_ssm_dir, str(num))
        self.ssm_mean = vtktools.loadpoly(self.ssm_mean_file)
        self.ssm_bone_node_nrs_file = r'{}/Coupled_SSM_node_nrs_per_bone_mesh.txt'.format(self.coupled_ssm_dir)
        self.split_mean_ssm_geometry_per_bone(self.ssm_mean.v)
        self.split_mean_ssm_faces(self.ssm_mean.f)

    def reconstruct_ssm(self, pc_weights, pc_modes):
        # print('pred_weights:',self.coupled_pcs.getWeightsBySD(pc_modes, pc_weights))
        # print('sd weights:', pc_weights)
        reconstructed = self.coupled_pcs.reconstruct(self.coupled_pcs.getWeightsBySD(pc_modes, pc_weights), pc_modes)
        self.reconstructed = reconstructed.reshape(int(len(reconstructed)/3), 3)

    def split_ssm_geometry_per_bone(self, geometry_nodes):
        with open(self.ssm_bone_node_nrs_file) as f:
            lines = f.readlines()
            for line in lines:
                split = line.split(" ")
                split_last = [int(i) for i in split[2].split() if i.isdigit][0]
                self.ssm_bone_node_nrs['{}'.format(split[0])] = [int(split[1]), split_last]
        for key in self.ssm_bone_node_nrs:
            bone_node_nrs = self.ssm_bone_node_nrs[key]
            self.reconstructed_nodes_per_bone[key] = geometry_nodes[bone_node_nrs[0]:bone_node_nrs[1], :]

    def split_mean_ssm_geometry_per_bone(self, geometry_nodes):
        with open(self.ssm_bone_node_nrs_file) as f:
            lines = f.readlines()
            for line in lines:
                split = line.split(" ")
                split_last = [int(i) for i in split[2].split() if i.isdigit][0]
                self.ssm_bone_node_nrs['{}'.format(split[0])] = [int(split[1]), split_last]

        for key in self.ssm_bone_node_nrs:
            bone_node_nrs = self.ssm_bone_node_nrs[key]
            self.ssm_mean_split_per_bone[key] = geometry_nodes[bone_node_nrs[0]:bone_node_nrs[1], :]

    def split_mean_ssm_faces(self, faces):
        with open(self.ssm_bone_face_nrs_file) as f:
            lines = f.readlines()
            for line in lines:
                split = line.split(" ")
                split_last = [int(i) for i in split[2].split() if i.isdigit][0]
                self.ssm_bone_face_nrs['{}'.format(split[0])] = [int(split[1]), split_last]

        p = 0
        for key in self.ssm_bone_face_nrs:
            bone_face_nrs = self.ssm_bone_face_nrs[key]
            if p > 0:
                off = self.ssm_bone_node_nrs[prev][1]
            else:
                off = 0
            self.ssm_faces_split_per_bone[key] = faces[bone_face_nrs[0]:bone_face_nrs[1], :] - off
            p = 1
            prev = key

    def obtain_mesh_from_point_cloud(self, node_coords):
        mesh = vtktools.loadpoly(self.ssm_mean_file)
        mesh.v = node_coords
        return mesh

    def create_mesh_each_bone(self, pel_nodes, fem_nodes, tib_nodes, fib_nodes):
        pel_mesh = simplemesh.SimpleMesh()
        pel_mesh.v = pel_nodes
        fem_mesh = simplemesh.SimpleMesh()
        fem_mesh.v = fem_nodes
        tib_mesh = simplemesh.SimpleMesh()
        tib_mesh.v = tib_nodes
        fib_mesh = simplemesh.SimpleMesh()
        fib_mesh.v = fib_nodes

        if self.side == 'left':
            fem_mesh.f = self.ssm_faces_split_per_bone["Fem_L"]
            pel_mesh.f = self.ssm_faces_split_per_bone["Pel_L"]
            tib_mesh.f = self.ssm_faces_split_per_bone["Tib_L"]
            fib_mesh.f = self.ssm_faces_split_per_bone["Fib_L"]
        else:
            fem_mesh.f = self.ssm_faces_split_per_bone["Fem_R"]
            pel_mesh.f = self.ssm_faces_split_per_bone["Pel_R"]
            tib_mesh.f = self.ssm_faces_split_per_bone["Tib_R"]
            fib_mesh.f = self.ssm_faces_split_per_bone["Fib_R"]
        return pel_mesh, fem_mesh, tib_mesh, fib_mesh


# ----------------------------------------------------------------------------------------------------------------------
# Functions to read node number files

def read_lm_node_nrs_from_ini(ini_file):
    ssm_lm_node_nrs = {}
    with open(ini_file) as f:
        lines = f.readlines()
        for line_nr in range(0, len(lines)):
            if '[vertices]' in lines[line_nr]:
                start_line_nr = line_nr + 1
        for line_nr in range(start_line_nr, len(lines)):
            if lines[line_nr] == '\n':
                end_line_nr = line_nr - 1
                break
        for line_nr in range(start_line_nr, end_line_nr + 1):
            split = lines[line_nr].split(" ")
            ssm_lm_node_nrs[split[0]] = int(split[2][:-1])
    return ssm_lm_node_nrs


def read_lm_node_nrs_from_txt(txt_file):
    ssm_lm_node_nrs = {}
    with open(txt_file) as f:
        lines = f.readlines()
        for line in lines:
            split = line.split(" ")
            ssm_lm_node_nrs[split[0]] = int(split[1][:])
    return ssm_lm_node_nrs


def read_region_node_nrs_from_txt(txt_file, region_name):
    ssm_region_node_nrs = {region_name: [int(x) for x in np.loadtxt(txt_file)]}
    return ssm_region_node_nrs
