name: Continuous Integration

"on":
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  schedule:
    # Run weekly dependency vulnerability scan
    - cron: '0 6 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12', '3.13']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.13'
          - os: macos-latest
            python-version: '3.13'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
        check-latest: true

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gcc

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[test,performance]"
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1
        PIP_NO_CACHE_DIR: 1

    - name: Install optional dependencies
      continue-on-error: true
      run: |
        # Install optional dependencies for comprehensive testing
        pip install -e ".[mcmc,robust,data]" || echo "Some optional dependencies failed to install"
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1

    - name: Run core tests
      run: |
        pytest homodyne/tests/ -v --tb=short --cov=homodyne --cov-report=xml --cov-report=term-missing -x -m "not slow and not integration and not mcmc"

    - name: Run integration tests
      run: |
        pytest homodyne/tests/ -v --tb=short -m "integration and not slow"

    - name: Run MCMC tests (with optional dependencies)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      continue-on-error: true
      run: |
        pytest homodyne/tests/ -v --tb=short -m "mcmc and not slow"

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      continue-on-error: true
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
        check-latest: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1

    - name: Run Black formatter check
      run: |
        black --check --diff homodyne/

    - name: Run flake8 linter
      run: |
        flake8 homodyne/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 homodyne/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run mypy type checker
      continue-on-error: true
      run: |
        mypy homodyne/ --ignore-missing-imports

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff --profile black homodyne/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        check-latest: true

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety pip-audit
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1

    - name: Run Bandit security scan
      run: |
        bandit -r homodyne/ -f json -o bandit-report.json || true
        bandit -r homodyne/ || true

    - name: Run Safety vulnerability check
      continue-on-error: true
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Run pip-audit vulnerability check
      continue-on-error: true
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
        check-latest: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1

    - name: Build documentation
      run: |
        cd docs
        make clean
        make html

    - name: Check documentation links
      continue-on-error: true
      run: |
        # Install linkcheck dependencies if available
        pip install sphinx-linkcheck || true
        cd docs && make linkcheck || true

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.run_number }}
        path: docs/_build/html
        retention-days: 30

  build:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        check-latest: true

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: 1

    - name: Build package
      run: |
        python -m build

    - name: Check package metadata
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import homodyne; print('Package installed successfully')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages-${{ github.run_number }}
        path: dist/
        retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        comment-summary-in-pr: true

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, quality, security, docs, build]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Check job status
      run: |
        echo "Test status: ${{ needs.test.result }}"
        echo "Quality status: ${{ needs.quality.result }}"
        echo "Security status: ${{ needs.security.result }}"
        echo "Docs status: ${{ needs.docs.result }}"
        echo "Build status: ${{ needs.build.result }}"
        
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.quality.result }}" == "success" && 
              "${{ needs.docs.result }}" == "success" && 
              "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
        else
          echo "❌ Some CI checks failed"
        fi

    - name: Create job summary
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Package Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.test.result }}" == "success" && 
              "${{ needs.quality.result }}" == "success" && 
              "${{ needs.docs.result }}" == "success" && 
              "${{ needs.build.result }}" == "success" ]]; then
          echo "Overall Status: **success**" >> $GITHUB_STEP_SUMMARY
        else
          echo "Overall Status: **failure**" >> $GITHUB_STEP_SUMMARY
        fi