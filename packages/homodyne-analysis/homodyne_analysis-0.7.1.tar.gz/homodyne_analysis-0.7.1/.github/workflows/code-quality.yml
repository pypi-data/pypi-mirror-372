name: Code Quality Analysis

"on":
  schedule:
    # Run every Sunday at 3 AM UTC
    - cron: "0 3 * * 0"
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "**.py"
      - "pyproject.toml"
      - ".github/workflows/code-quality.yml"

env:
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

jobs:
  code-analysis:
    name: Advanced Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install vulture radon xenon complexity mccabe pycodestyle pydocstyle
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Run complexity analysis
        run: |
          echo "## Code Complexity Analysis" >> complexity_report.md
          echo "" >> complexity_report.md

          echo "### Cyclomatic Complexity (McCabe)" >> complexity_report.md
          echo '```' >> complexity_report.md
          python -m mccabe --min 10 homodyne/ >> complexity_report.md || true
          echo '```' >> complexity_report.md
          echo "" >> complexity_report.md

          echo "### Maintainability Index" >> complexity_report.md
          echo '```' >> complexity_report.md
          radon mi homodyne/ >> complexity_report.md || true
          echo '```' >> complexity_report.md
          echo "" >> complexity_report.md

          echo "### Raw Metrics" >> complexity_report.md
          echo '```' >> complexity_report.md
          radon raw homodyne/ >> complexity_report.md || true
          echo '```' >> complexity_report.md

      - name: Find dead code
        continue-on-error: true
        run: |
          echo "### Dead Code Detection" >> complexity_report.md
          echo '```' >> complexity_report.md
          vulture homodyne/ --min-confidence 80 >> complexity_report.md || true
          echo '```' >> complexity_report.md

      - name: Style analysis
        continue-on-error: true
        run: |
          echo "" >> style_report.md
          echo "## Style Analysis Report" >> style_report.md
          echo "" >> style_report.md

          echo "### PEP8 Style Issues" >> style_report.md
          echo '```' >> style_report.md
          pycodestyle homodyne/ --max-line-length=88 --statistics >> style_report.md || true
          echo '```' >> style_report.md
          echo "" >> style_report.md

          echo "### Documentation Style Issues" >> style_report.md
          echo '```' >> style_report.md
          pydocstyle homodyne/ >> style_report.md || true
          echo '```' >> style_report.md

      - name: Create combined report
        run: |
          echo "# Code Quality Report - $(date)" > code_quality_report.md
          echo "" >> code_quality_report.md
          echo "Generated for commit: ${{ github.sha }}" >> code_quality_report.md
          echo "" >> code_quality_report.md

          if [ -f complexity_report.md ]; then
            cat complexity_report.md >> code_quality_report.md
          fi

          if [ -f style_report.md ]; then
            cat style_report.md >> code_quality_report.md
          fi

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report-${{ github.run_number }}
          path: |
            code_quality_report.md
            complexity_report.md
            style_report.md
          retention-days: 90

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('code_quality_report.md')) {
              const report = fs.readFileSync('code_quality_report.md', 'utf8');

              // Truncate report if too long for comment
              const maxLength = 50000;
              const truncatedReport = report.length > maxLength
                ? report.substring(0, maxLength) + '\n\n... (Report truncated. See full report in artifacts)'
                : report;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: truncatedReport
              });
            }

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pip-tools and analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pipdeptree pip-licenses pip-audit safety

      - name: Analyze dependencies
        run: |
          echo "# Dependency Analysis Report - $(date)" > dependency_report.md
          echo "" >> dependency_report.md

          echo "## Dependency Tree" >> dependency_report.md
          echo '```' >> dependency_report.md
          pip install -e .
          pipdeptree >> dependency_report.md || true
          echo '```' >> dependency_report.md
          echo "" >> dependency_report.md

          echo "## License Analysis" >> dependency_report.md
          echo '```' >> dependency_report.md
          pip-licenses --format=markdown >> dependency_report.md || true
          echo '```' >> dependency_report.md
          echo "" >> dependency_report.md

      - name: Security vulnerability scan
        continue-on-error: true
        run: |
          echo "## Security Vulnerabilities" >> dependency_report.md
          echo "" >> dependency_report.md

          echo "### Safety Scan" >> dependency_report.md
          echo '```' >> dependency_report.md
          safety check >> dependency_report.md || true
          echo '```' >> dependency_report.md
          echo "" >> dependency_report.md

          echo "### Pip Audit Scan" >> dependency_report.md
          echo '```' >> dependency_report.md
          pip-audit >> dependency_report.md || true
          echo '```' >> dependency_report.md

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-report-${{ github.run_number }}
          path: dependency_report.md
          retention-days: 90

  test-coverage:
    name: Detailed Coverage Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          pip install coverage[toml] pytest-html

      - name: Run comprehensive test suite with coverage
        run: |
          coverage run -m pytest homodyne/tests/ --html=test_report.html --self-contained-html -v --tb=long --durations=10

      - name: Generate coverage reports
        run: |
          coverage report --show-missing > coverage_summary.txt
          coverage html -d coverage_html
          coverage xml

          echo "# Test Coverage Report - $(date)" > coverage_report.md
          echo "" >> coverage_report.md
          echo "## Coverage Summary" >> coverage_report.md
          echo '```' >> coverage_report.md
          cat coverage_summary.txt >> coverage_report.md
          echo '```' >> coverage_report.md

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.run_number }}
          path: |
            coverage_html/
            test_report.html
            coverage_report.md
            coverage.xml
          retention-days: 90

      - name: Upload to Codecov
        continue-on-error: true
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: comprehensive
          name: comprehensive-coverage
          fail_ci_if_error: false

  summary:
    name: Generate Quality Summary
    runs-on: ubuntu-latest
    needs: [code-analysis, dependency-analysis, test-coverage]
    if: always()
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v4

      - name: Create quality dashboard
        run: |
          echo "# 📊 Code Quality Dashboard - $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Analysis | ${{ needs.code-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Analysis | ${{ needs.dependency-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Coverage | ${{ needs.test-coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📁 Generated Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Comprehensive Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Reports are available in the workflow artifacts and will be retained for 90 days." >> $GITHUB_STEP_SUMMARY
