[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "works-on-my-machine"
version = "2.6.8"
description = "Universal development tools for Python and JavaScript - Automatic installation, cross-platform configuration, global commands"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Neuraaak" }]
maintainers = [{ name = "Neuraaak" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "development-tools",
    "python",
    "javascript",
    "automation",
    "project-setup",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "questionary>=2.0.0",
    "InquirerPy>=0.3.4",
    "tomli>=2.0.0",
]

[project.optional-dependencies]
dev = [
    # Development tools
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",

    # Security
    "bandit>=1.7.0",
    "cryptography>=41.0.0",
    "psutil>=5.9.0",

    # Tests
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",

    # Build and distribution
    "build>=1.0.0",
    "twine>=4.0.0",
    "pyinstaller>=5.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
]

[project.urls]
"Homepage" = "https://github.com/neuraaak/works-on-my-machine"
"Repository" = "https://github.com/neuraaak/works-on-my-machine"
"Bug Tracker" = "https://github.com/neuraaak/works-on-my-machine/issues"

[project.scripts]
# Main CLI command
womm = "womm.cli:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["womm*"]
exclude = [
    "tests*",
    "build*",
    "dist*",
    "*.egg-info*",
    ".pytest_cache*",
    ".mypy_cache*",
    ".ruff_cache*",
    ".cursor*",
    "benchmarks*",
    "coverage*",
    "htmlcov*",
    ".venv*",
    "venv*",
    "node_modules*",
    ".vscode*",
    ".idea*",
    "__pycache__*",
    "**/__pycache__*",
    ".git*",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    ".coverage",
    "*.log",
    ".DS_Store",
    "Thumbs.db",
    "docs*",
    "pyproject.toml",
    "setup.py",
    "Makefile",
]

[tool.womm.installation]
# Additional exclusions for local installation (womm install)
additional-exclude = [
    "ignore-install.txt",
    "MANIFEST.in",
    "womm.bat",
    "womm-installed.py",
    "*.tmp",
    "*.bak",
    "*.swp",
    "*.swo",
    ".tox",
    ".pre-commit-config.yaml",
    ".cspell-dict",
]

[tool.setuptools.package-data]
# Inclure les ressources non-Python du package womm (pour la wheel)
"womm" = [
    "*.py",
    "bin/*",
    "configs/*",
    "languages/*",
    "languages/**/*",
    "core/**/templates/*",
    "languages/**/templates/*",
    "languages/**/configs/*",
    "languages/**/vscode/*",
    "languages/**/scripts/*",
]

# Configuration Black
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.pytest_cache
  | \.benchmarks
  | \.venv
  | venv
  | build
  | dist
  | htmlcov
  | \.vscode
  | __pycache__
  | \.egg-info
  | \.hooks
)/
'''

# Configuration isort
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = [".", "shared", "languages"]
skip = [
    ".venv",
    "venv",
    "build",
    "dist",
    ".pytest_cache",
    ".benchmarks",
    "htmlcov",
    ".vscode",
    "__pycache__",
    ".egg-info",
    ".hooks",
]

# Configuration MyPy
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false       # Plus flexible pour ce projet
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignorer certains modules pour lesquels on n'a pas de stubs
[[tool.mypy.overrides]]
module = "winreg"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "win32*"
ignore_missing_imports = true

# Configuration Pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=shared",
    "--cov=languages",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=60",
    "--verbose",
    "--tb=short",
    "--color=yes",
    "--durations=10",
    "--maxfail=5",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "windows: marks tests specific to Windows",
    "linux: marks tests specific to Linux",
    "macos: marks tests specific to macOS",
    "unix: marks tests specific to Unix/Linux/Mac",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:shared.*",
]

# Configuration Coverage
[tool.coverage.run]
source = ["shared", "languages", "."]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/.pytest_cache/*",
    "*/.benchmarks/*",
    "*/.vscode/*",
    "*/.egg-info/*",
    "*/.hooks/*",
    "setup.py",
    "lint.py",
    "init.py",
    "build/*",
    "dist/*",
    ".venv/*",
    "venv/*",
    "htmlcov/*",
    "coverage.xml",
    ".coverage",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if platform.system\\(\\) == \"Windows\":",
    "except ImportError:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration (security)
[tool.bandit]
exclude_dirs = ["tests", "build", "dist", "venv", ".venv", ".hooks"]
skips = ["B101", "B601"]

# Configuration Ruff (remplace flake8)
[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit security
    "T20", # flake8-print
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "S101", # assert_used (pour les tests)
    "S106", # hardcoded_password_funcarg
    "T201", # print statements (pour init.py et scripts)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "S311", "E501"]
"init.py" = ["T201", "E501"]
"*/scripts/*" = ["T201", "E501"]
"lint.py" = ["T201", "E501"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
