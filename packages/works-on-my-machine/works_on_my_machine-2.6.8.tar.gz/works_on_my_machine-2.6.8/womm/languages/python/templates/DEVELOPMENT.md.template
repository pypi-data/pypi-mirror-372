# 🐍 Development Guide - {{PROJECT_NAME}}

[🏠 Main](../../README.md) > [🐍 Python](../PYTHON.md) > [📖 Development Guide](DEVELOPMENT.md)

[← Back to Python Documentation](../PYTHON.md)

## Table of Contents
- [Environment Setup](#-environment-setup)
- [Development Tools](#️-development-tools)
- [Code Standards](#-code-standards)
- [Pre-commit Hooks](#-pre-commit-hooks)
- [Tests](#-tests)
- [Recommended Development Workflow](#️-recommended-development-workflow)

## Related Documentation
- [Python Tools](../PYTHON.md) - Python development tools
- [Main README](../../README.md) - Project overview

## 🚀 Environment Setup

### Quick Installation
```bash
# Install package in development mode
pip install -e ".[dev]"
```

## 🛠️ Development Tools

### Automatic Formatting

#### VSCode (Recommended)
The project includes a complete VSCode configuration in `.vscode/settings.json` that enables:
- **Automatic formatting on save** with Black
- **Automatic import organization** with isort
- **Real-time linting** with flake8
- **Test discovery** with pytest

### Development Commands

#### Development scripts
```bash
# Formatting and quality
womm lint python        # Check code quality
womm lint python --fix  # Auto-fix issues

# Tests
pytest                                   # Run tests
pytest --cov                           # Tests with coverage
```

#### With Make (Linux/Mac/WSL)
```bash
make help           # Show help
make format         # Format code (black + isort)
make lint           # Check code quality
make test           # Run tests
make clean          # Clean temporary files
```

## 📏 Code Standards

### Black Configuration
- **Line length**: 88 characters
- **Python versions**: 3.9+
- **Automatic formatting** enabled on save

### isort Configuration
- **Profile**: black (compatible)
- **Line length**: 88
- **Automatic import organization**

### Ruff Configuration
- **Max length**: 88 characters
- **Configuration**: `pyproject.toml`

## 🔒 Pre-commit Hooks

### Installation
```bash
# Install pre-commit
pip install pre-commit

# Install hooks
pre-commit install
```

### Automatic checks
Hooks run before each commit:
- Formatting with Black
- Import organization with isort
- Linting with Ruff
- General checks

## 🧪 Tests

### Test Structure
```
tests/
├── conftest.py                 # pytest configuration
├── test_*.py                   # Unit tests
└── ...
```

### Execution
```bash
# Quick tests
pytest

# Tests with coverage
pytest --cov={{PROJECT_NAME}}

# Specific tests
pytest tests/test_specific.py -v
```

## 🔧 Recommended Development Workflow

### 1. Before starting
```bash
# Update dependencies
pip install -e ".[dev]"

# Install hooks
pre-commit install
```

### 2. During development
- **VSCode** will format automatically on save
- **Or manually**: `womm lint python --fix`
- **Tests**: `pytest`

### 3. Before committing
```bash
# Complete verification
womm lint python
pytest
```

### 4. Pre-commit hooks run automatically

## 📁 Project Structure

```
{{PROJECT_NAME}}/
├── .vscode/               # VSCode configuration
├── docs/                  # Documentation
├── {{PROJECT_NAME}}/      # Source code
├── tests/                 # Test suite
├── pyproject.toml         # Project configuration
# Ruff configuration in pyproject.toml
├── .pre-commit-config.yaml # Pre-commit hooks
└── .gitignore            # Git ignored files
```

## 📝 Conventions

### Commits
- **Format**: `type: clear description`
- **Types**: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`

### Code
- **Type hints** recommended
- **Docstrings** standard format
- **Tests** for new features

### Documentation
- **Comments** in English for international compatibility
- **README** in English for international compatibility
