[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{{PROJECT_NAME}}"
version = "0.1.0"
description = "{{PROJECT_DESCRIPTION}}"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "{{AUTHOR_NAME}}", email = "{{AUTHOR_EMAIL}}"}
]
maintainers = [
    {name = "{{AUTHOR_NAME}}", email = "{{AUTHOR_EMAIL}}"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["{{PROJECT_KEYWORDS}}"]
requires-python = ">=3.8"
dependencies = [
    # Main project dependencies
    # "requests>=2.25.0",
    # "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    # Development tools
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    
    # Security
    "bandit>=1.7.0",
    "cryptography>=41.0.0",
    
    # Tests
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    
    # Documentation
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
gui = [
    # Optional GUI dependencies
    # "PyQt6>=6.4.0",
    # "PySide6>=6.4.0",
]

[project.urls]
"Homepage" = "{{PROJECT_URL}}"
"Repository" = "{{PROJECT_REPOSITORY}}"
"Documentation" = "{{PROJECT_DOCS_URL}}"
"Bug Tracker" = "{{PROJECT_REPOSITORY}}/issues"
"Changelog" = "{{PROJECT_REPOSITORY}}/blob/main/CHANGELOG.md"

[project.scripts]
# Command line scripts
# {{PROJECT_NAME}} = "{{PROJECT_NAME}}.cli:main"

[project.gui-scripts]
# GUI applications
# {{PROJECT_NAME}}-gui = "{{PROJECT_NAME}}.gui:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["{{PROJECT_NAME}}*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
# Include data files
"{{PROJECT_NAME}}" = [
    "*.txt",
    "*.json",
    "*.yaml",
    "*.yml",
    "data/*",
    "templates/*",
    "static/*",
]

# Configuration Black
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.pytest_cache
  | \.benchmarks
  | \.venv
  | venv
  | build
  | dist
  | htmlcov
  | \.vscode
  | __pycache__
  | \.egg-info
)/
'''

# Configuration isort
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip = [
    ".venv", "venv", "build", "dist", 
    ".pytest_cache", ".benchmarks", "htmlcov", 
    ".vscode", "__pycache__", ".egg-info"
]

# Configuration MyPy
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Configuration Pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov={{PROJECT_NAME}}",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests as GUI tests",
]

# Configuration Coverage
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/.pytest_cache/*",
    "*/.benchmarks/*",
    "*/.vscode/*",
    "*/.egg-info/*",
    "setup.py",
    "build/*",
    "dist/*",
    ".venv/*",
    "venv/*",
    "htmlcov/*",
    "coverage.xml",
    ".coverage",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration (security)
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Configuration Ruff (remplace flake8)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit security
    "T20", # flake8-print
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # assert_used (pour les tests)
    "S106",  # hardcoded_password_funcarg
    "T201",  # print statements (pour les scripts)
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "S311", "E501"]
"*/scripts/*" = ["T201", "E501"]

[tool.ruff.mccabe]
max-complexity = 10