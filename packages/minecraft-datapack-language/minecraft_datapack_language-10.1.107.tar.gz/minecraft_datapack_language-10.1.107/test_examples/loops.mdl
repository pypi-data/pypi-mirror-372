// loops.mdl - Smart while loops showcase
pack "loops" "Smart while loops test" 82;

namespace "test";

// Simple number variables
var num counter = 0;
var num max_count = 10;
var num step = 1;
var num level = 1;

function "main" {
    // Reset counter
    counter = 0;
    
    // Simple while loop (default recursion method)
    while "$counter$ < 5" {
        counter = $counter$ + 1;
        say "Counter: $counter$";
    }
    
    // While loop with variable condition
    counter = 0;
    while "$counter$ < $max_count$" {
        counter = $counter$ + $step$;
        say "Step: $counter$";
    }
    
    // Explicit recursion method (default)
    level = 1;
    while "$level$ < 3" method="recursion" {
        say "Level: $level$";
        level = $level$ + 1;
    }
    
    // Schedule method for long-running loops
    counter = 0;
    while "$counter$ < 100" method="schedule" {
        say "Processing item $counter$";
        counter = $counter$ + 10;
    }
    
    // Nested loops with different methods
    counter = 0;
    while "$counter$ < 3" {
        say "Outer loop: $counter$";
        
        var num inner = 0;
        while "$inner$ < 2" method="recursion" {
            inner = $inner$ + 1;
            say "  Inner: $inner$";
        }
        
        counter = $counter$ + 1;
    }
}

function "countdown" {
    var num count = 10;
    
    while "$count$ > 0" {
        say "Countdown: $count$";
        count = $count$ - 1;
    }
    
    say "Blast off!";
}

function "performance_test" {
    var num large_counter = 0;
    
    // Use schedule method for large loops
    while "$large_counter$ < 1000" method="schedule" {
        say "Large loop: $large_counter$";
        large_counter = $large_counter$ + 100;
    }
}

on_tick "test:main";
on_tick "test:countdown";
on_tick "test:performance_test";
