// sample.mdl - Modern MDL example showcasing all features
pack "Sample Pack" description "A comprehensive example of modern MDL features" pack_format 82;

namespace "example";

// Global state variables
var num global_counter = 0;
var str global_message = "System Ready";
var list global_items = ["sword", "shield", "potion"];

function "init" {
    say [example:init] Initializing system;
    global_counter = 0;
    global_message = "System initialized";
    global_items.clear();
    global_items.append("wooden_sword");
    global_items.append("leather_armor");
    
    tellraw @a {"text":"Sample Pack loaded!","color":"green"};
}

function "tick" {
    global_counter = global_counter + 1;
    
    if "score @s global_counter matches 100" {
        say Counter reached 100!;
        global_counter = 0;
        global_message = "Counter reset";
    }
    
    // Process all players
    for player in @a {
        effect give @s minecraft:speed 1 0;
    }
    
    // List operations
    var num item_count = global_items.length;
    if "score @s item_count > 5" {
        say Inventory getting full!;
        global_items.pop();
    }
}

function "combat_check" {
    if "entity @s[type=minecraft:player,nbt={SelectedItem:{id:'minecraft:diamond_sword'}}]" {
        say Diamond sword detected!;
        effect give @s minecraft:strength 10 1;
        effect give @s minecraft:glowing 10 0;
    } else if "entity @s[type=minecraft:player,nbt={SelectedItem:{id:'minecraft:bow'}}]" {
        say Bow detected!;
        effect give @s minecraft:speed 10 1;
        effect give @s minecraft:jump_boost 10 0;
    }
}

function "variable_demo" {
    // Local variable declarations
    var num local_counter = 10;
    var str player_name = "Steve";
    var list local_items = ["apple", "bread", "steak"];
    
    // Number operations
    local_counter = local_counter + 5;
    global_counter = global_counter + 1;
    
    // String operations
    player_name = "Alex";
    global_message = "Updated: " + player_name;
    var str full_name = player_name + " Minecraft";
    
    // List operations
    local_items.append("golden_apple");
    local_items.insert(1, "enchanted_sword");
    var num first_item = local_items[0];
    var num item_count = local_items.length;
    
    // Complex calculations
    var num result = (local_counter * 2) + global_counter;
    var num modulo_result = result % 7;
    
    // String concatenation with variables
    var str status = player_name + " has " + item_count + " items";
    
    say Variable demo complete;
    tellraw @s {"text":"Result: " + result};
    tellraw @s {"text":"Modulo: " + modulo_result};
    tellraw @s {"text":"Status: " + status};
}

function "loop_demo" {
    var num outer_count = 0;
    var num inner_count = 0;
    var num total_iterations = 0;
    
    // Nested loops
    while "score @s outer_count < 3" {
        inner_count = 0;
        
        while "score @s inner_count < 2" {
            total_iterations = total_iterations + 1;
            
            // Complex calculation within loop
            var num calculation = (outer_count * 10) + inner_count;
            var num modulo_result = calculation % 5;
            
            if "score @s modulo_result == 0" {
                say Perfect calculation: calculation;
            } else {
                say Calculation: calculation (mod 5 = modulo_result);
            }
            
            inner_count = inner_count + 1;
        }
        
        outer_count = outer_count + 1;
    }
    
    // Loop with break and continue
    var num break_counter = 0;
    var num continue_counter = 0;
    var num break_sum = 0;
    var num continue_sum = 0;
    
    while "score @s break_counter < 10" {
        break_counter = break_counter + 1;
        
        if "score @s break_counter == 7" {
            break;
        }
        
        break_sum = break_sum + break_counter;
    }
    
    while "score @s continue_counter < 10" {
        continue_counter = continue_counter + 1;
        
        if "score @s continue_counter % 2 == 0" {
            continue;
        }
        
        continue_sum = continue_sum + continue_counter;
    }
    
    say Loop demo complete;
    tellraw @s {"text":"Total iterations: " + total_iterations};
    tellraw @s {"text":"Break sum: " + break_sum};
    tellraw @s {"text":"Continue sum: " + continue_sum};
}

function "error_handling" {
    // Test division by zero handling
    var num dividend = 10;
    var num divisor = 0;
    var num result = 0;
    
    try {
        if "score @s divisor != 0" {
            result = dividend / divisor;
        } else {
            throw "Division by zero attempted";
        }
    } catch (error) {
        say Caught error: error;
        result = 0;
        say Division by zero prevented;
    }
    
    // Test list bounds checking
    var list test_list = ["apple", "banana", "cherry"];
    var num safe_index = 1;
    var num unsafe_index = 10;
    var str safe_value = "";
    var str unsafe_value = "";
    
    try {
        if "score @s safe_index < test_list.length" {
            safe_value = test_list[safe_index];
        } else {
            throw "Safe index out of bounds";
        }
    } catch (error) {
        say Caught error: error;
        safe_value = "default";
    }
    
    try {
        if "score @s unsafe_index < test_list.length" {
            unsafe_value = test_list[unsafe_index];
        } else {
            throw "Unsafe index out of bounds";
        }
    } catch (error) {
        say Caught error: error;
        unsafe_value = "default";
        say List bounds check passed;
    }
    
    say Error handling complete;
    tellraw @s {"text":"Safe value: " + safe_value};
    tellraw @s {"text":"Unsafe value: " + unsafe_value};
}

// Hook the functions into load and tick
on_load "example:init";
on_tick "example:tick";
on_tick "example:combat_check";
on_tick "example:variable_demo";
on_tick "example:loop_demo";
on_tick "example:error_handling";

// Second namespace with cross-namespace calls
namespace "util";

function "helper" {
    say [util:helper] Helping out...;
    var num helper_count = 0;
    helper_count = helper_count + 1;
    say Helper count: helper_count;
}

function "boss" {
    say [util:boss] Calling example functions;
    function example:init;
    function example:variable_demo;
    function example:loop_demo;
    function util:helper;
}

// Run boss every tick
on_tick "util:boss";

// Function tag examples
tag function "minecraft:load" {
    add "example:init";
}

tag function "minecraft:tick" {
    add "example:tick";
    add "example:combat_check";
    add "example:variable_demo";
    add "example:loop_demo";
    add "example:error_handling";
    add "util:boss";
}

// Data tag examples across registries
tag item "example:swords" {
    add "minecraft:diamond_sword";
    add "minecraft:netherite_sword";
    add "minecraft:golden_sword";
}

tag block "example:glassy" {
    add "minecraft:glass";
    add "minecraft:tinted_glass";
    add "minecraft:white_stained_glass";
}

// Garbage collection
function "cleanup" {
    function mdl:garbage_collect;
    say Cleanup complete;
}

on_tick "example:cleanup";
