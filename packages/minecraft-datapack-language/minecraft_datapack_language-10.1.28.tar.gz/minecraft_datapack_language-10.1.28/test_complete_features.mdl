// test_complete_features.mdl - Comprehensive test of all MDL features
pack "Complete Features Test" description "Testing all implemented MDL features" pack_format 82;
namespace "complete";

// Test all variable types
var num counter = 5;
var str message = "Hello World";
var list items = ["sword", "shield", "potion"];
var list numbers = [1, 2, 3, 4, 5];

function "test_all_features" {
    // Test number operations
    counter = counter + 10;
    counter = counter - 3;
    
    // Test string concatenation
    message = "Updated: " + message;
    
    // Test list append operations
    items.append("ruby");
    items.append("diamond");
    numbers.append(6);
    numbers.append(7);
    
    // Test list remove operations
    items.remove("shield");
    numbers.remove(3);
    
    // Test list insert operations
    items.insert(1, "emerald");
    numbers.insert(2, 8);
    
    // Test list pop operations
    items.pop();
    numbers.pop(0);
    
    // Test list clear operations
    var list temp_list = ["temp1", "temp2"];
    temp_list.clear();
    
    // Test list access (commented out for now - needs parser support)
    // var str first_item = items[0];
    // var str second_item = items[1];
    
    // Test control flow
    if "counter > 10" {
        say Counter is greater than 10;
    } else if "counter > 5" {
        say Counter is greater than 5;
    } else {
        say Counter is 5 or less;
    }
    
    // Test loops
    for item in "@e[type=player]" {
        tellraw @s {"text":"Processing player"};
    }
    
    while "counter > 0" {
        counter = counter - 1;
        say Counter:;
        tellraw @s {"score":{"name":"counter","objective":"counter"}};
    }
    
    // Test function calls
    function "complete:helper_function";
    
    // Test garbage collection
    function "mdl:garbage_collect";
}

function "helper_function" {
    say Helper function called;
    tellraw @s {"text":"This is a helper function"};
}

function "test" {
    say Complete features test;
    function "complete:test_all_features";
}

// Test hooks
on_tick "complete:test";

// Test tags
tag function "minecraft:load" {
    add "complete:test";
}
