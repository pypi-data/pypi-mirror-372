# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openaiapi.api_helper import APIHelper
from openaiapi.configuration import Server
from openaiapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openaiapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openaiapi.models.create_assistant import CreateAssistant
from openaiapi.models.list_assistants import ListAssistants
from openaiapi.models.retrieve_assistants import RetrieveAssistants
from openaiapi.models.modify_assistants import ModifyAssistants
from openaiapi.models.delete_assistants import DeleteAssistants


class OpenAIAssistantsAPIBetaController(BaseController):

    """A Controller to access Endpoints in the openaiapi API."""
    def __init__(self, config):
        super(OpenAIAssistantsAPIBetaController, self).__init__(config)

    def create_assistant(self,
                         open_ai_beta,
                         body):
        """Does a POST request to /assistants.

        ### POST /{{baseVersion}}/assistants
        This endpoint is used to create a new assistant for the OpenAI
        platform.
        #### Request Body
        - `instructions` (text): The set of instructions or prompts for the
        assistant.

        - `name` (text): The name of the assistant.

        - `tools` (array): An array of tools or capabilities for the
        assistant, where each tool object contains a `type` attribute.

        - `model` (text): The model to be used for the assistant.

        #### Response
        The response for this request follows the JSON schema below:
        ``` json
        {
          "type": "object",
          "properties": {
            "id": { "type": "string" },
            "object": { "type": "string" },
            "created_at": { "type": "number" },
            "name": { "type": "string" },
            "description": { "type": "string" },
            "model": { "type": "string" },
            "instructions": { "type": "string" },
            "tools": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": { "type": "string" }
                }
              }
            },
            "top_p": { "type": "number" },
            "temperature": { "type": "number" },
            "tool_resources": {
              "type": "object",
              "properties": {
                "code_interpreter": {
                  "type": "object",
                  "properties": {
                    "file_ids": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                }
              }
            },
            "metadata": { "type": "object" },
            "response_format": { "type": "string" }
          }
        }
         ```

        Args:
            open_ai_beta (str): The request header parameter.
            body (CreateAssistantRequest): The request body parameter.

        Returns:
            CreateAssistant: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/assistants')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CreateAssistant.from_dictionary)
        ).execute()

    def list_assistants(self,
                        order,
                        limit,
                        open_ai_beta):
        """Does a GET request to /assistants.

        Args:
            order (str): The request query parameter.
            limit (int): The request query parameter.
            open_ai_beta (str): The request header parameter.

        Returns:
            ListAssistants: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/assistants')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('order')
                         .value(order))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListAssistants.from_dictionary)
        ).execute()

    def retrieve_assistants(self,
                            open_ai_beta):
        """Does a GET request to /assistants/.

        Args:
            open_ai_beta (str): The request header parameter.

        Returns:
            RetrieveAssistants: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/assistants/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveAssistants.from_dictionary)
        ).execute()

    def modify_assistants(self,
                          open_ai_beta,
                          body):
        """Does a POST request to /assistants/.

        Args:
            open_ai_beta (str): The request header parameter.
            body (ModifyAssistantsRequest): The request body parameter.

        Returns:
            ModifyAssistants: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/assistants/')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ModifyAssistants.from_dictionary)
        ).execute()

    def delete_assistants(self,
                          open_ai_beta):
        """Does a DELETE request to /assistants/.

        Args:
            open_ai_beta (str): The request header parameter.

        Returns:
            DeleteAssistants: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/assistants/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeleteAssistants.from_dictionary)
        ).execute()
