# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openaiapi.api_helper import APIHelper
from openaiapi.configuration import Server
from openaiapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openaiapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openaiapi.models.create_thread_and_run import CreateThreadAndRun
from openaiapi.models.create_run import CreateRun
from openaiapi.models.list_runs import ListRuns
from openaiapi.models.get_run import GetRun
from openaiapi.models.modify_run import ModifyRun
from openaiapi.models.list_run_steps import ListRunSteps
from openaiapi.models.get_run_steps import GetRunSteps


class RunsController(BaseController):

    """A Controller to access Endpoints in the openaiapi API."""
    def __init__(self, config):
        super(RunsController, self).__init__(config)

    def create_thread_and_run(self,
                              open_ai_beta,
                              body):
        """Does a POST request to /threads/runs.

        Args:
            open_ai_beta (str): The request header parameter.
            body (CreateThreadAndRunRequest): The request body parameter.

        Returns:
            CreateThreadAndRun: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads/runs')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CreateThreadAndRun.from_dictionary)
        ).execute()

    def create_run(self,
                   open_ai_beta,
                   body):
        """Does a POST request to /threads//runs.

        Args:
            open_ai_beta (str): The request header parameter.
            body (CreateRunRequest): The request body parameter.

        Returns:
            CreateRun: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads//runs')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CreateRun.from_dictionary)
        ).execute()

    def list_runs(self,
                  limit,
                  open_ai_beta):
        """Does a GET request to /threads//runs.

        Args:
            limit (int): The request query parameter.
            open_ai_beta (str): The request header parameter.

        Returns:
            ListRuns: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads//runs')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListRuns.from_dictionary)
        ).execute()

    def get_run(self,
                open_ai_beta):
        """Does a GET request to /threads//runs/.

        Args:
            open_ai_beta (str): The request header parameter.

        Returns:
            GetRun: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads//runs/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetRun.from_dictionary)
        ).execute()

    def modify_run(self,
                   open_ai_beta,
                   body):
        """Does a POST request to /threads//runs/.

        Args:
            open_ai_beta (str): The request header parameter.
            body (ModifyRunRequest): The request body parameter.

        Returns:
            ModifyRun: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads//runs/')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ModifyRun.from_dictionary)
        ).execute()

    def submit_tool_outputs(self,
                            open_ai_beta,
                            body):
        """Does a POST request to /threads//runs//submit_tool_outputs.

        Args:
            open_ai_beta (str): The request header parameter.
            body (SubmitToolOutputsRequest): The request body parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads//runs//submit_tool_outputs')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).execute()

    def cancel_run(self,
                   open_ai_beta):
        """Does a POST request to /threads//runs//cancel.

        Args:
            open_ai_beta (str): The request header parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads//runs//cancel')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .auth(Single('bearer'))
        ).execute()

    def list_run_steps(self,
                       open_ai_beta):
        """Does a GET request to /threads//runs//steps.

        Args:
            open_ai_beta (str): The request header parameter.

        Returns:
            ListRunSteps: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads//runs//steps')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListRunSteps.from_dictionary)
        ).execute()

    def get_run_steps(self,
                      open_ai_beta):
        """Does a GET request to /threads//runs//steps/.

        Args:
            open_ai_beta (str): The request header parameter.

        Returns:
            GetRunSteps: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads//runs//steps/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetRunSteps.from_dictionary)
        ).execute()
