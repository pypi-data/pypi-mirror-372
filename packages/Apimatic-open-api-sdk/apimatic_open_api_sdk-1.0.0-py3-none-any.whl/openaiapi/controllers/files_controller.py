# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openaiapi.api_helper import APIHelper
from openaiapi.configuration import Server
from openaiapi.utilities.file_wrapper import FileWrapper
from openaiapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openaiapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openaiapi.models.upload_files import UploadFiles
from openaiapi.models.upload_files_batch import UploadFilesBatch
from openaiapi.models.list_files import ListFiles
from openaiapi.models.retrieve_file import RetrieveFile


class FilesController(BaseController):

    """A Controller to access Endpoints in the openaiapi API."""
    def __init__(self, config):
        super(FilesController, self).__init__(config)

    def upload_files_fine_tune(self,
                               purpose,
                               file):
        """Does a POST request to /files.

        Args:
            purpose (str): The request form parameter.
            file (typing.BinaryIO): The request form parameter.

        Returns:
            UploadFiles: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('purpose')
                        .value(purpose))
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadFiles.from_dictionary)
        ).execute()

    def upload_files_batch(self,
                           purpose,
                           file):
        """Does a POST request to /files.

        Args:
            purpose (str): The request form parameter.
            file (typing.BinaryIO): The request form parameter.

        Returns:
            UploadFilesBatch: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('purpose')
                        .value(purpose))
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadFilesBatch.from_dictionary)
        ).execute()

    def list_files(self,
                   limit):
        """Does a GET request to /files.

        Args:
            limit (int): The request query parameter.

        Returns:
            ListFiles: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListFiles.from_dictionary)
        ).execute()

    def retrieve_file(self):
        """Does a GET request to /files/.

        Returns:
            RetrieveFile: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveFile.from_dictionary)
        ).execute()

    def delete_file(self):
        """Does a DELETE request to /files/.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files/')
            .http_method(HttpMethodEnum.DELETE)
            .auth(Single('bearer'))
        ).execute()

    def retrieve_file_contents(self):
        """Does a GET request to /files//content.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files//content')
            .http_method(HttpMethodEnum.GET)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()
