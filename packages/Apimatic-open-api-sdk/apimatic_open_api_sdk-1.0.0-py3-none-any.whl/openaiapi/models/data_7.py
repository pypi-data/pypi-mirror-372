# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.content import Content


class Data7(object):

    """Implementation of the 'Data7' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        created_at (int): The model property of type int.
        assistant_id (str): The model property of type str.
        thread_id (str): The model property of type str.
        run_id (str): The model property of type str.
        role (str): The model property of type str.
        content (List[Content]): The model property of type List[Content].
        attachments (List[str]): The model property of type List[str].
        metadata (Any): The model property of type Any.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "created_at": 'created_at',
        "assistant_id": 'assistant_id',
        "thread_id": 'thread_id',
        "run_id": 'run_id',
        "role": 'role',
        "content": 'content',
        "attachments": 'attachments',
        "metadata": 'metadata'
    }

    _nullables = [
        'assistant_id',
        'run_id',
    ]

    def __init__(self,
                 id=None,
                 object=None,
                 created_at=None,
                 assistant_id=None,
                 thread_id=None,
                 run_id=None,
                 role=None,
                 content=None,
                 attachments=None,
                 metadata=None):
        """Constructor for the Data7 class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.created_at = created_at 
        self.assistant_id = assistant_id 
        self.thread_id = thread_id 
        self.run_id = run_id 
        self.role = role 
        self.content = content 
        self.attachments = attachments 
        self.metadata = metadata 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        assistant_id = dictionary.get("assistant_id") if dictionary.get("assistant_id") else None
        thread_id = dictionary.get("thread_id") if dictionary.get("thread_id") else None
        run_id = dictionary.get("run_id") if dictionary.get("run_id") else None
        role = dictionary.get("role") if dictionary.get("role") else None
        content = None
        if dictionary.get('content') is not None:
            content = [Content.from_dictionary(x) for x in dictionary.get('content')]
        attachments = dictionary.get("attachments") if dictionary.get("attachments") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        # Return an object of this model
        return cls(id,
                   object,
                   created_at,
                   assistant_id,
                   thread_id,
                   run_id,
                   role,
                   content,
                   attachments,
                   metadata)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'created_at={self.created_at!r}, '
                f'assistant_id={self.assistant_id!r}, '
                f'thread_id={self.thread_id!r}, '
                f'run_id={self.run_id!r}, '
                f'role={self.role!r}, '
                f'content={self.content!r}, '
                f'attachments={self.attachments!r}, '
                f'metadata={self.metadata!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'created_at={self.created_at!s}, '
                f'assistant_id={self.assistant_id!s}, '
                f'thread_id={self.thread_id!s}, '
                f'run_id={self.run_id!s}, '
                f'role={self.role!s}, '
                f'content={self.content!s}, '
                f'attachments={self.attachments!s}, '
                f'metadata={self.metadata!s})')
