# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.step_details import StepDetails
from openaiapi.models.usage_10 import Usage10


class GetRunSteps(object):

    """Implementation of the 'Get Run Steps' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        created_at (int): The model property of type int.
        run_id (str): The model property of type str.
        assistant_id (str): The model property of type str.
        thread_id (str): The model property of type str.
        mtype (str): The model property of type str.
        status (str): The model property of type str.
        cancelled_at (str): The model property of type str.
        completed_at (int): The model property of type int.
        expires_at (str): The model property of type str.
        failed_at (str): The model property of type str.
        last_error (str): The model property of type str.
        step_details (StepDetails): The model property of type StepDetails.
        usage (Usage10): The model property of type Usage10.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "created_at": 'created_at',
        "run_id": 'run_id',
        "assistant_id": 'assistant_id',
        "thread_id": 'thread_id',
        "mtype": 'type',
        "status": 'status',
        "cancelled_at": 'cancelled_at',
        "completed_at": 'completed_at',
        "expires_at": 'expires_at',
        "failed_at": 'failed_at',
        "last_error": 'last_error',
        "step_details": 'step_details',
        "usage": 'usage'
    }

    _nullables = [
        'cancelled_at',
        'expires_at',
        'failed_at',
        'last_error',
    ]

    def __init__(self,
                 id=None,
                 object=None,
                 created_at=None,
                 run_id=None,
                 assistant_id=None,
                 thread_id=None,
                 mtype=None,
                 status=None,
                 cancelled_at=None,
                 completed_at=None,
                 expires_at=None,
                 failed_at=None,
                 last_error=None,
                 step_details=None,
                 usage=None):
        """Constructor for the GetRunSteps class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.created_at = created_at 
        self.run_id = run_id 
        self.assistant_id = assistant_id 
        self.thread_id = thread_id 
        self.mtype = mtype 
        self.status = status 
        self.cancelled_at = cancelled_at 
        self.completed_at = completed_at 
        self.expires_at = expires_at 
        self.failed_at = failed_at 
        self.last_error = last_error 
        self.step_details = step_details 
        self.usage = usage 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        run_id = dictionary.get("run_id") if dictionary.get("run_id") else None
        assistant_id = dictionary.get("assistant_id") if dictionary.get("assistant_id") else None
        thread_id = dictionary.get("thread_id") if dictionary.get("thread_id") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        cancelled_at = dictionary.get("cancelled_at") if dictionary.get("cancelled_at") else None
        completed_at = dictionary.get("completed_at") if dictionary.get("completed_at") else None
        expires_at = dictionary.get("expires_at") if dictionary.get("expires_at") else None
        failed_at = dictionary.get("failed_at") if dictionary.get("failed_at") else None
        last_error = dictionary.get("last_error") if dictionary.get("last_error") else None
        step_details = StepDetails.from_dictionary(dictionary.get('step_details')) if dictionary.get('step_details') else None
        usage = Usage10.from_dictionary(dictionary.get('usage')) if dictionary.get('usage') else None
        # Return an object of this model
        return cls(id,
                   object,
                   created_at,
                   run_id,
                   assistant_id,
                   thread_id,
                   mtype,
                   status,
                   cancelled_at,
                   completed_at,
                   expires_at,
                   failed_at,
                   last_error,
                   step_details,
                   usage)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'created_at={self.created_at!r}, '
                f'run_id={self.run_id!r}, '
                f'assistant_id={self.assistant_id!r}, '
                f'thread_id={self.thread_id!r}, '
                f'mtype={self.mtype!r}, '
                f'status={self.status!r}, '
                f'cancelled_at={self.cancelled_at!r}, '
                f'completed_at={self.completed_at!r}, '
                f'expires_at={self.expires_at!r}, '
                f'failed_at={self.failed_at!r}, '
                f'last_error={self.last_error!r}, '
                f'step_details={self.step_details!r}, '
                f'usage={self.usage!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'created_at={self.created_at!s}, '
                f'run_id={self.run_id!s}, '
                f'assistant_id={self.assistant_id!s}, '
                f'thread_id={self.thread_id!s}, '
                f'mtype={self.mtype!s}, '
                f'status={self.status!s}, '
                f'cancelled_at={self.cancelled_at!s}, '
                f'completed_at={self.completed_at!s}, '
                f'expires_at={self.expires_at!s}, '
                f'failed_at={self.failed_at!s}, '
                f'last_error={self.last_error!s}, '
                f'step_details={self.step_details!s}, '
                f'usage={self.usage!s})')
