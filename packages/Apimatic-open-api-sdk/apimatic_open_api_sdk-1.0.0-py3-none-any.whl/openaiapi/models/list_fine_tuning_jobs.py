# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.datum_2 import Datum2


class ListFineTuningJobs(object):

    """Implementation of the 'List Fine Tuning Jobs' model.

    Attributes:
        object (str): The model property of type str.
        data (List[Datum2]): The model property of type List[Datum2].
        has_more (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "object": 'object',
        "data": 'data',
        "has_more": 'has_more'
    }

    def __init__(self,
                 object=None,
                 data=None,
                 has_more=None):
        """Constructor for the ListFineTuningJobs class"""

        # Initialize members of the class
        self.object = object 
        self.data = data 
        self.has_more = has_more 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        object = dictionary.get("object") if dictionary.get("object") else None
        data = None
        if dictionary.get('data') is not None:
            data = [Datum2.from_dictionary(x) for x in dictionary.get('data')]
        has_more = dictionary.get("has_more") if "has_more" in dictionary.keys() else None
        # Return an object of this model
        return cls(object,
                   data,
                   has_more)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!r}, '
                f'data={self.data!r}, '
                f'has_more={self.has_more!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!s}, '
                f'data={self.data!s}, '
                f'has_more={self.has_more!s})')
