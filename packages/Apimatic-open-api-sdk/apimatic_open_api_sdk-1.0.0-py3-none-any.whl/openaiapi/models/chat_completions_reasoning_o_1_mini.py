# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.choice_2 import Choice2
from openaiapi.models.usage_4 import Usage4


class ChatCompletionsReasoningO1Mini(object):

    """Implementation of the 'Chat Completions - Reasoning o1-mini' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        created (int): The model property of type int.
        model (str): The model property of type str.
        choices (List[Choice2]): The model property of type List[Choice2].
        usage (Usage4): The model property of type Usage4.
        service_tier (str): The model property of type str.
        system_fingerprint (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "created": 'created',
        "model": 'model',
        "choices": 'choices',
        "usage": 'usage',
        "service_tier": 'service_tier',
        "system_fingerprint": 'system_fingerprint'
    }

    def __init__(self,
                 id=None,
                 object=None,
                 created=None,
                 model=None,
                 choices=None,
                 usage=None,
                 service_tier=None,
                 system_fingerprint=None):
        """Constructor for the ChatCompletionsReasoningO1Mini class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.created = created 
        self.model = model 
        self.choices = choices 
        self.usage = usage 
        self.service_tier = service_tier 
        self.system_fingerprint = system_fingerprint 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        created = dictionary.get("created") if dictionary.get("created") else None
        model = dictionary.get("model") if dictionary.get("model") else None
        choices = None
        if dictionary.get('choices') is not None:
            choices = [Choice2.from_dictionary(x) for x in dictionary.get('choices')]
        usage = Usage4.from_dictionary(dictionary.get('usage')) if dictionary.get('usage') else None
        service_tier = dictionary.get("service_tier") if dictionary.get("service_tier") else None
        system_fingerprint = dictionary.get("system_fingerprint") if dictionary.get("system_fingerprint") else None
        # Return an object of this model
        return cls(id,
                   object,
                   created,
                   model,
                   choices,
                   usage,
                   service_tier,
                   system_fingerprint)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'created={self.created!r}, '
                f'model={self.model!r}, '
                f'choices={self.choices!r}, '
                f'usage={self.usage!r}, '
                f'service_tier={self.service_tier!r}, '
                f'system_fingerprint={self.system_fingerprint!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'created={self.created!s}, '
                f'model={self.model!s}, '
                f'choices={self.choices!s}, '
                f'usage={self.usage!s}, '
                f'service_tier={self.service_tier!s}, '
                f'system_fingerprint={self.system_fingerprint!s})')
