# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.schema import Schema


class JsonSchema(object):

    """Implementation of the 'JsonSchema' model.

    Attributes:
        name (str): The model property of type str.
        schema (Schema): The model property of type Schema.
        strict (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "schema": 'schema',
        "strict": 'strict'
    }

    def __init__(self,
                 name=None,
                 schema=None,
                 strict=None):
        """Constructor for the JsonSchema class"""

        # Initialize members of the class
        self.name = name 
        self.schema = schema 
        self.strict = strict 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else None
        schema = Schema.from_dictionary(dictionary.get('schema')) if dictionary.get('schema') else None
        strict = dictionary.get("strict") if "strict" in dictionary.keys() else None
        # Return an object of this model
        return cls(name,
                   schema,
                   strict)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'schema={self.schema!r}, '
                f'strict={self.strict!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'schema={self.schema!s}, '
                f'strict={self.strict!s})')
