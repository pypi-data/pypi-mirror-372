# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.explanation import Explanation
from openaiapi.models.output import Output


class Properties2(object):

    """Implementation of the 'Properties2' model.

    Attributes:
        explanation (Explanation): The model property of type Explanation.
        output (Output): The model property of type Output.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "explanation": 'explanation',
        "output": 'output'
    }

    def __init__(self,
                 explanation=None,
                 output=None):
        """Constructor for the Properties2 class"""

        # Initialize members of the class
        self.explanation = explanation 
        self.output = output 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        explanation = Explanation.from_dictionary(dictionary.get('explanation')) if dictionary.get('explanation') else None
        output = Output.from_dictionary(dictionary.get('output')) if dictionary.get('output') else None
        # Return an object of this model
        return cls(explanation,
                   output)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'explanation={self.explanation!r}, '
                f'output={self.output!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'explanation={self.explanation!s}, '
                f'output={self.output!s})')
