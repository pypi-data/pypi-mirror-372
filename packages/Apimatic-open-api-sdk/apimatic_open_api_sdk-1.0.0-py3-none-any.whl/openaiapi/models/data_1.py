# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.metrics import Metrics


class Data1(object):

    """Implementation of the 'Data1' model.

    Attributes:
        object (str): The model property of type str.
        id (str): The model property of type str.
        created_at (int): The model property of type int.
        fine_tuned_model_checkpoint (str): The model property of type str.
        fine_tuning_job_id (str): The model property of type str.
        metrics (Metrics): The model property of type Metrics.
        step_number (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "object": 'object',
        "id": 'id',
        "created_at": 'created_at',
        "fine_tuned_model_checkpoint": 'fine_tuned_model_checkpoint',
        "fine_tuning_job_id": 'fine_tuning_job_id',
        "metrics": 'metrics',
        "step_number": 'step_number'
    }

    def __init__(self,
                 object=None,
                 id=None,
                 created_at=None,
                 fine_tuned_model_checkpoint=None,
                 fine_tuning_job_id=None,
                 metrics=None,
                 step_number=None):
        """Constructor for the Data1 class"""

        # Initialize members of the class
        self.object = object 
        self.id = id 
        self.created_at = created_at 
        self.fine_tuned_model_checkpoint = fine_tuned_model_checkpoint 
        self.fine_tuning_job_id = fine_tuning_job_id 
        self.metrics = metrics 
        self.step_number = step_number 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        object = dictionary.get("object") if dictionary.get("object") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        fine_tuned_model_checkpoint = dictionary.get("fine_tuned_model_checkpoint") if dictionary.get("fine_tuned_model_checkpoint") else None
        fine_tuning_job_id = dictionary.get("fine_tuning_job_id") if dictionary.get("fine_tuning_job_id") else None
        metrics = Metrics.from_dictionary(dictionary.get('metrics')) if dictionary.get('metrics') else None
        step_number = dictionary.get("step_number") if dictionary.get("step_number") else None
        # Return an object of this model
        return cls(object,
                   id,
                   created_at,
                   fine_tuned_model_checkpoint,
                   fine_tuning_job_id,
                   metrics,
                   step_number)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!r}, '
                f'id={self.id!r}, '
                f'created_at={self.created_at!r}, '
                f'fine_tuned_model_checkpoint={self.fine_tuned_model_checkpoint!r}, '
                f'fine_tuning_job_id={self.fine_tuning_job_id!r}, '
                f'metrics={self.metrics!r}, '
                f'step_number={self.step_number!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!s}, '
                f'id={self.id!s}, '
                f'created_at={self.created_at!s}, '
                f'fine_tuned_model_checkpoint={self.fine_tuned_model_checkpoint!s}, '
                f'fine_tuning_job_id={self.fine_tuning_job_id!s}, '
                f'metrics={self.metrics!s}, '
                f'step_number={self.step_number!s})')
