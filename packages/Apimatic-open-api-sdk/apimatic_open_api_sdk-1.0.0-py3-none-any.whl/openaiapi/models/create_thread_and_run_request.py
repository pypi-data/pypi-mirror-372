# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.thread import Thread


class CreateThreadAndRunRequest(object):

    """Implementation of the 'Create Thread and Run Request' model.

    Attributes:
        assistant_id (str): The model property of type str.
        thread (Thread): The model property of type Thread.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "assistant_id": 'assistant_id',
        "thread": 'thread'
    }

    def __init__(self,
                 assistant_id=None,
                 thread=None):
        """Constructor for the CreateThreadAndRunRequest class"""

        # Initialize members of the class
        self.assistant_id = assistant_id 
        self.thread = thread 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        assistant_id = dictionary.get("assistant_id") if dictionary.get("assistant_id") else None
        thread = Thread.from_dictionary(dictionary.get('thread')) if dictionary.get('thread') else None
        # Return an object of this model
        return cls(assistant_id,
                   thread)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'assistant_id={self.assistant_id!r}, '
                f'thread={self.thread!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'assistant_id={self.assistant_id!s}, '
                f'thread={self.thread!s})')
