# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Data4(object):

    """Implementation of the 'Data4' model.

    Attributes:
        revised_prompt (str): The model property of type str.
        url (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "revised_prompt": 'revised_prompt',
        "url": 'url'
    }

    def __init__(self,
                 revised_prompt=None,
                 url=None):
        """Constructor for the Data4 class"""

        # Initialize members of the class
        self.revised_prompt = revised_prompt 
        self.url = url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        revised_prompt = dictionary.get("revised_prompt") if dictionary.get("revised_prompt") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        # Return an object of this model
        return cls(revised_prompt,
                   url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'revised_prompt={self.revised_prompt!r}, '
                f'url={self.url!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'revised_prompt={self.revised_prompt!s}, '
                f'url={self.url!s})')
