# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.tool_call import ToolCall


class Message3(object):

    """Implementation of the 'Message3' model.

    Attributes:
        role (str): The model property of type str.
        content (str): The model property of type str.
        tool_calls (List[ToolCall]): The model property of type List[ToolCall].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "role": 'role',
        "content": 'content',
        "tool_calls": 'tool_calls'
    }

    _nullables = [
        'content',
    ]

    def __init__(self,
                 role=None,
                 content=None,
                 tool_calls=None):
        """Constructor for the Message3 class"""

        # Initialize members of the class
        self.role = role 
        self.content = content 
        self.tool_calls = tool_calls 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        role = dictionary.get("role") if dictionary.get("role") else None
        content = dictionary.get("content") if dictionary.get("content") else None
        tool_calls = None
        if dictionary.get('tool_calls') is not None:
            tool_calls = [ToolCall.from_dictionary(x) for x in dictionary.get('tool_calls')]
        # Return an object of this model
        return cls(role,
                   content,
                   tool_calls)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'role={self.role!r}, '
                f'content={self.content!r}, '
                f'tool_calls={self.tool_calls!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'role={self.role!s}, '
                f'content={self.content!s}, '
                f'tool_calls={self.tool_calls!s})')
