# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.api_helper import APIHelper


class RequestCounts(object):

    """Implementation of the 'RequestCounts' model.

    Attributes:
        total (int): The model property of type int.
        completed (int): The model property of type int.
        failed (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "total": 'total',
        "completed": 'completed',
        "failed": 'failed'
    }

    def __init__(self,
                 total=None,
                 completed=None,
                 failed=None):
        """Constructor for the RequestCounts class"""

        # Initialize members of the class
        self.total = total 
        self.completed = completed 
        self.failed = failed 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        total = dictionary.get("total") if dictionary.get("total") else None
        completed = dictionary.get("completed") if dictionary.get("completed") else None
        failed = dictionary.get("failed") if dictionary.get("failed") else None
        # Return an object of this model
        return cls(total,
                   completed,
                   failed)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.total,
                                           type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.completed,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.failed,
                                            type_callable=lambda value: isinstance(value, int))

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('total'),
                                       type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('completed'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('failed'),
                                        type_callable=lambda value: isinstance(value, int))

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'total={self.total!r}, '
                f'completed={self.completed!r}, '
                f'failed={self.failed!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'total={self.total!s}, '
                f'completed={self.completed!s}, '
                f'failed={self.failed!s})')
