# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.prompt_token_details import PromptTokenDetails


class Usage10(object):

    """Implementation of the 'Usage10' model.

    Attributes:
        prompt_tokens (int): The model property of type int.
        completion_tokens (int): The model property of type int.
        total_tokens (int): The model property of type int.
        prompt_token_details (PromptTokenDetails): The model property of type
            PromptTokenDetails.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "prompt_tokens": 'prompt_tokens',
        "completion_tokens": 'completion_tokens',
        "total_tokens": 'total_tokens',
        "prompt_token_details": 'prompt_token_details'
    }

    def __init__(self,
                 prompt_tokens=None,
                 completion_tokens=None,
                 total_tokens=None,
                 prompt_token_details=None):
        """Constructor for the Usage10 class"""

        # Initialize members of the class
        self.prompt_tokens = prompt_tokens 
        self.completion_tokens = completion_tokens 
        self.total_tokens = total_tokens 
        self.prompt_token_details = prompt_token_details 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        prompt_tokens = dictionary.get("prompt_tokens") if dictionary.get("prompt_tokens") else None
        completion_tokens = dictionary.get("completion_tokens") if dictionary.get("completion_tokens") else None
        total_tokens = dictionary.get("total_tokens") if dictionary.get("total_tokens") else None
        prompt_token_details = PromptTokenDetails.from_dictionary(dictionary.get('prompt_token_details')) if dictionary.get('prompt_token_details') else None
        # Return an object of this model
        return cls(prompt_tokens,
                   completion_tokens,
                   total_tokens,
                   prompt_token_details)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'prompt_tokens={self.prompt_tokens!r}, '
                f'completion_tokens={self.completion_tokens!r}, '
                f'total_tokens={self.total_tokens!r}, '
                f'prompt_token_details={self.prompt_token_details!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'prompt_tokens={self.prompt_tokens!s}, '
                f'completion_tokens={self.completion_tokens!s}, '
                f'total_tokens={self.total_tokens!s}, '
                f'prompt_token_details={self.prompt_token_details!s})')
