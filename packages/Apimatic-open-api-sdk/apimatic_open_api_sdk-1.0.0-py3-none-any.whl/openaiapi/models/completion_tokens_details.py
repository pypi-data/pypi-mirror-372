# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class CompletionTokensDetails(object):

    """Implementation of the 'CompletionTokensDetails' model.

    Attributes:
        reasoning_tokens (int): The model property of type int.
        audio_tokens (int): The model property of type int.
        accepted_prediction_tokens (int): The model property of type int.
        rejected_prediction_tokens (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "reasoning_tokens": 'reasoning_tokens',
        "audio_tokens": 'audio_tokens',
        "accepted_prediction_tokens": 'accepted_prediction_tokens',
        "rejected_prediction_tokens": 'rejected_prediction_tokens'
    }

    def __init__(self,
                 reasoning_tokens=None,
                 audio_tokens=None,
                 accepted_prediction_tokens=None,
                 rejected_prediction_tokens=None):
        """Constructor for the CompletionTokensDetails class"""

        # Initialize members of the class
        self.reasoning_tokens = reasoning_tokens 
        self.audio_tokens = audio_tokens 
        self.accepted_prediction_tokens = accepted_prediction_tokens 
        self.rejected_prediction_tokens = rejected_prediction_tokens 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        reasoning_tokens = dictionary.get("reasoning_tokens") if dictionary.get("reasoning_tokens") else None
        audio_tokens = dictionary.get("audio_tokens") if dictionary.get("audio_tokens") else None
        accepted_prediction_tokens = dictionary.get("accepted_prediction_tokens") if dictionary.get("accepted_prediction_tokens") else None
        rejected_prediction_tokens = dictionary.get("rejected_prediction_tokens") if dictionary.get("rejected_prediction_tokens") else None
        # Return an object of this model
        return cls(reasoning_tokens,
                   audio_tokens,
                   accepted_prediction_tokens,
                   rejected_prediction_tokens)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'reasoning_tokens={self.reasoning_tokens!r}, '
                f'audio_tokens={self.audio_tokens!r}, '
                f'accepted_prediction_tokens={self.accepted_prediction_tokens!r}, '
                f'rejected_prediction_tokens={self.rejected_prediction_tokens!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'reasoning_tokens={self.reasoning_tokens!s}, '
                f'audio_tokens={self.audio_tokens!s}, '
                f'accepted_prediction_tokens={self.accepted_prediction_tokens!s}, '
                f'rejected_prediction_tokens={self.rejected_prediction_tokens!s})')
