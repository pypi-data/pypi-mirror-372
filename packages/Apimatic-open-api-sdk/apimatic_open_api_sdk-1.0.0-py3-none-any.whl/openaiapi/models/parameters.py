# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.properties import Properties


class Parameters(object):

    """Implementation of the 'Parameters' model.

    Attributes:
        mtype (str): The model property of type str.
        properties (Properties): The model property of type Properties.
        required (List[str]): The model property of type List[str].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "properties": 'properties',
        "required": 'required'
    }

    def __init__(self,
                 mtype=None,
                 properties=None,
                 required=None):
        """Constructor for the Parameters class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.properties = properties 
        self.required = required 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        properties = Properties.from_dictionary(dictionary.get('properties')) if dictionary.get('properties') else None
        required = dictionary.get("required") if dictionary.get("required") else None
        # Return an object of this model
        return cls(mtype,
                   properties,
                   required)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'properties={self.properties!r}, '
                f'required={self.required!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'properties={self.properties!s}, '
                f'required={self.required!s})')
