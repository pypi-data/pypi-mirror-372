# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.data import Data


class Datum3(object):

    """Implementation of the 'Datum3' model.

    Attributes:
        object (str): The model property of type str.
        id (str): The model property of type str.
        created_at (int): The model property of type int.
        level (str): The model property of type str.
        message (str): The model property of type str.
        data (Data): The model property of type Data.
        mtype (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "object": 'object',
        "id": 'id',
        "created_at": 'created_at',
        "level": 'level',
        "message": 'message',
        "data": 'data',
        "mtype": 'type'
    }

    def __init__(self,
                 object=None,
                 id=None,
                 created_at=None,
                 level=None,
                 message=None,
                 data=None,
                 mtype=None):
        """Constructor for the Datum3 class"""

        # Initialize members of the class
        self.object = object 
        self.id = id 
        self.created_at = created_at 
        self.level = level 
        self.message = message 
        self.data = data 
        self.mtype = mtype 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        object = dictionary.get("object") if dictionary.get("object") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        level = dictionary.get("level") if dictionary.get("level") else None
        message = dictionary.get("message") if dictionary.get("message") else None
        data = Data.from_dictionary(dictionary.get('data')) if dictionary.get('data') else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        # Return an object of this model
        return cls(object,
                   id,
                   created_at,
                   level,
                   message,
                   data,
                   mtype)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!r}, '
                f'id={self.id!r}, '
                f'created_at={self.created_at!r}, '
                f'level={self.level!r}, '
                f'message={self.message!r}, '
                f'data={self.data!r}, '
                f'mtype={self.mtype!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!s}, '
                f'id={self.id!s}, '
                f'created_at={self.created_at!s}, '
                f'level={self.level!s}, '
                f'message={self.message!s}, '
                f'data={self.data!s}, '
                f'mtype={self.mtype!s})')
