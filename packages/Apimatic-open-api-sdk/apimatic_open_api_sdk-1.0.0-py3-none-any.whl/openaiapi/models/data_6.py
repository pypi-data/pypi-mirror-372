# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Data6(object):

    """Implementation of the 'Data6' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        created (int): The model property of type int.
        owned_by (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "created": 'created',
        "owned_by": 'owned_by'
    }

    def __init__(self,
                 id=None,
                 object=None,
                 created=None,
                 owned_by=None):
        """Constructor for the Data6 class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.created = created 
        self.owned_by = owned_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        created = dictionary.get("created") if dictionary.get("created") else None
        owned_by = dictionary.get("owned_by") if dictionary.get("owned_by") else None
        # Return an object of this model
        return cls(id,
                   object,
                   created,
                   owned_by)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'created={self.created!r}, '
                f'owned_by={self.owned_by!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'created={self.created!s}, '
                f'owned_by={self.owned_by!s})')
