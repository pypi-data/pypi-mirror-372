# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.api_helper import APIHelper


class Hyperparameters2(object):

    """Implementation of the 'Hyperparameters2' model.

    Attributes:
        n_epochs (int | str): The model property of type int | str.
        batch_size (int | str): The model property of type int | str.
        learning_rate_multiplier (int | str): The model property of type int |
            str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "n_epochs": 'n_epochs',
        "batch_size": 'batch_size',
        "learning_rate_multiplier": 'learning_rate_multiplier'
    }

    def __init__(self,
                 n_epochs=None,
                 batch_size=None,
                 learning_rate_multiplier=None):
        """Constructor for the Hyperparameters2 class"""

        # Initialize members of the class
        self.n_epochs = n_epochs 
        self.batch_size = batch_size 
        self.learning_rate_multiplier = learning_rate_multiplier 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from openaiapi.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        n_epochs = APIHelper.deserialize_union_type(UnionTypeLookUp.get('Hyperparameters2NEpochs'), dictionary.get('n_epochs'), False) if dictionary.get('n_epochs') is not None else None
        batch_size = APIHelper.deserialize_union_type(UnionTypeLookUp.get('Hyperparameters2BatchSize'), dictionary.get('batch_size'), False) if dictionary.get('batch_size') is not None else None
        learning_rate_multiplier = APIHelper.deserialize_union_type(UnionTypeLookUp.get('Hyperparameters2LearningRateMultiplier'), dictionary.get('learning_rate_multiplier'), False) if dictionary.get('learning_rate_multiplier') is not None else None
        # Return an object of this model
        return cls(n_epochs,
                   batch_size,
                   learning_rate_multiplier)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from openaiapi.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return UnionTypeLookUp.get('Hyperparameters2NEpochs').validate(dictionary.n_epochs).is_valid \
                and UnionTypeLookUp.get('Hyperparameters2BatchSize').validate(dictionary.batch_size).is_valid \
                and UnionTypeLookUp.get('Hyperparameters2LearningRateMultiplier').validate(dictionary.learning_rate_multiplier).is_valid

        if not isinstance(dictionary, dict):
            return False

        return UnionTypeLookUp.get('Hyperparameters2NEpochs').validate(dictionary.get('n_epochs')).is_valid \
            and UnionTypeLookUp.get('Hyperparameters2BatchSize').validate(dictionary.get('batch_size')).is_valid \
            and UnionTypeLookUp.get('Hyperparameters2LearningRateMultiplier').validate(dictionary.get('learning_rate_multiplier')).is_valid

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'n_epochs={self.n_epochs!r}, '
                f'batch_size={self.batch_size!r}, '
                f'learning_rate_multiplier={self.learning_rate_multiplier!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'n_epochs={self.n_epochs!s}, '
                f'batch_size={self.batch_size!s}, '
                f'learning_rate_multiplier={self.learning_rate_multiplier!s})')
