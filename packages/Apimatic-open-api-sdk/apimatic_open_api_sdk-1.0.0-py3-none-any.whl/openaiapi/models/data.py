# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Data(object):

    """Implementation of the 'Data' model.

    Attributes:
        step (int): The model property of type int.
        train_loss (float): The model property of type float.
        total_steps (int): The model property of type int.
        train_mean_token_accuracy (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "step": 'step',
        "train_loss": 'train_loss',
        "total_steps": 'total_steps',
        "train_mean_token_accuracy": 'train_mean_token_accuracy'
    }

    def __init__(self,
                 step=None,
                 train_loss=None,
                 total_steps=None,
                 train_mean_token_accuracy=None):
        """Constructor for the Data class"""

        # Initialize members of the class
        self.step = step 
        self.train_loss = train_loss 
        self.total_steps = total_steps 
        self.train_mean_token_accuracy = train_mean_token_accuracy 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        step = dictionary.get("step") if dictionary.get("step") else None
        train_loss = dictionary.get("train_loss") if dictionary.get("train_loss") else None
        total_steps = dictionary.get("total_steps") if dictionary.get("total_steps") else None
        train_mean_token_accuracy = dictionary.get("train_mean_token_accuracy") if dictionary.get("train_mean_token_accuracy") else None
        # Return an object of this model
        return cls(step,
                   train_loss,
                   total_steps,
                   train_mean_token_accuracy)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'step={self.step!r}, '
                f'train_loss={self.train_loss!r}, '
                f'total_steps={self.total_steps!r}, '
                f'train_mean_token_accuracy={self.train_mean_token_accuracy!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'step={self.step!s}, '
                f'train_loss={self.train_loss!s}, '
                f'total_steps={self.total_steps!s}, '
                f'train_mean_token_accuracy={self.train_mean_token_accuracy!s})')
