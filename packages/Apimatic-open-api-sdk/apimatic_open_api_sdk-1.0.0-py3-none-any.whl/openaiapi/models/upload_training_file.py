# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class UploadTrainingFile(object):

    """Implementation of the 'Upload Training File' model.

    Attributes:
        object (str): The model property of type str.
        id (str): The model property of type str.
        purpose (str): The model property of type str.
        filename (str): The model property of type str.
        bytes (int): The model property of type int.
        created_at (int): The model property of type int.
        status (str): The model property of type str.
        status_details (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "object": 'object',
        "id": 'id',
        "purpose": 'purpose',
        "filename": 'filename',
        "bytes": 'bytes',
        "created_at": 'created_at',
        "status": 'status',
        "status_details": 'status_details'
    }

    _nullables = [
        'status_details',
    ]

    def __init__(self,
                 object=None,
                 id=None,
                 purpose=None,
                 filename=None,
                 bytes=None,
                 created_at=None,
                 status=None,
                 status_details=None):
        """Constructor for the UploadTrainingFile class"""

        # Initialize members of the class
        self.object = object 
        self.id = id 
        self.purpose = purpose 
        self.filename = filename 
        self.bytes = bytes 
        self.created_at = created_at 
        self.status = status 
        self.status_details = status_details 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        object = dictionary.get("object") if dictionary.get("object") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        purpose = dictionary.get("purpose") if dictionary.get("purpose") else None
        filename = dictionary.get("filename") if dictionary.get("filename") else None
        bytes = dictionary.get("bytes") if dictionary.get("bytes") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        status_details = dictionary.get("status_details") if dictionary.get("status_details") else None
        # Return an object of this model
        return cls(object,
                   id,
                   purpose,
                   filename,
                   bytes,
                   created_at,
                   status,
                   status_details)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!r}, '
                f'id={self.id!r}, '
                f'purpose={self.purpose!r}, '
                f'filename={self.filename!r}, '
                f'bytes={self.bytes!r}, '
                f'created_at={self.created_at!r}, '
                f'status={self.status!r}, '
                f'status_details={self.status_details!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!s}, '
                f'id={self.id!s}, '
                f'purpose={self.purpose!s}, '
                f'filename={self.filename!s}, '
                f'bytes={self.bytes!s}, '
                f'created_at={self.created_at!s}, '
                f'status={self.status!s}, '
                f'status_details={self.status_details!s})')
