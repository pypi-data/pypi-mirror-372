# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.file_counts import FileCounts


class RetrieveVectorStore(object):

    """Implementation of the 'Retrieve Vector Store' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        name (str): The model property of type str.
        status (str): The model property of type str.
        usage_bytes (int): The model property of type int.
        created_at (int): The model property of type int.
        file_counts (FileCounts): The model property of type FileCounts.
        metadata (Any): The model property of type Any.
        expires_after (str): The model property of type str.
        expires_at (str): The model property of type str.
        last_active_at (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "name": 'name',
        "status": 'status',
        "usage_bytes": 'usage_bytes',
        "created_at": 'created_at',
        "file_counts": 'file_counts',
        "metadata": 'metadata',
        "expires_after": 'expires_after',
        "expires_at": 'expires_at',
        "last_active_at": 'last_active_at'
    }

    _nullables = [
        'expires_after',
        'expires_at',
    ]

    def __init__(self,
                 id=None,
                 object=None,
                 name=None,
                 status=None,
                 usage_bytes=None,
                 created_at=None,
                 file_counts=None,
                 metadata=None,
                 expires_after=None,
                 expires_at=None,
                 last_active_at=None):
        """Constructor for the RetrieveVectorStore class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.name = name 
        self.status = status 
        self.usage_bytes = usage_bytes 
        self.created_at = created_at 
        self.file_counts = file_counts 
        self.metadata = metadata 
        self.expires_after = expires_after 
        self.expires_at = expires_at 
        self.last_active_at = last_active_at 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        usage_bytes = dictionary.get("usage_bytes") if dictionary.get("usage_bytes") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        file_counts = FileCounts.from_dictionary(dictionary.get('file_counts')) if dictionary.get('file_counts') else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        expires_after = dictionary.get("expires_after") if dictionary.get("expires_after") else None
        expires_at = dictionary.get("expires_at") if dictionary.get("expires_at") else None
        last_active_at = dictionary.get("last_active_at") if dictionary.get("last_active_at") else None
        # Return an object of this model
        return cls(id,
                   object,
                   name,
                   status,
                   usage_bytes,
                   created_at,
                   file_counts,
                   metadata,
                   expires_after,
                   expires_at,
                   last_active_at)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'name={self.name!r}, '
                f'status={self.status!r}, '
                f'usage_bytes={self.usage_bytes!r}, '
                f'created_at={self.created_at!r}, '
                f'file_counts={self.file_counts!r}, '
                f'metadata={self.metadata!r}, '
                f'expires_after={self.expires_after!r}, '
                f'expires_at={self.expires_at!r}, '
                f'last_active_at={self.last_active_at!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'name={self.name!s}, '
                f'status={self.status!s}, '
                f'usage_bytes={self.usage_bytes!s}, '
                f'created_at={self.created_at!s}, '
                f'file_counts={self.file_counts!s}, '
                f'metadata={self.metadata!s}, '
                f'expires_after={self.expires_after!s}, '
                f'expires_at={self.expires_at!s}, '
                f'last_active_at={self.last_active_at!s})')
