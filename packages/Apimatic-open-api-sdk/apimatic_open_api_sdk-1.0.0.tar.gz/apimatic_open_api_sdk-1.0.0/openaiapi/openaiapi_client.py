# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from openaiapi.configuration import Configuration
from openaiapi.controllers.base_controller import BaseController
from openaiapi.configuration import Environment
from openaiapi.http.auth.o_auth_2 import OAuth2
from openaiapi.controllers.text_generation_chat_completions_api_controller\
    import TextGenerationChatCompletionsAPIController
from openaiapi.controllers.function_calling_chat_completions_api_controller\
    import FunctionCallingChatCompletionsAPIController
from openaiapi.controllers.build_a_simple_faq_system_embeddings_api_controller\
    import BuildASimpleFAQSystemEmbeddingsAPIController
from openaiapi.controllers.reasoning_controller import ReasoningController
from openaiapi.controllers.chat_completions_controller\
    import ChatCompletionsController
from openaiapi.controllers.structured_outputs_controller\
    import StructuredOutputsController
from openaiapi.controllers.predicted_outputs_controller\
    import PredictedOutputsController
from openaiapi.controllers.embeddings_controller import EmbeddingsController
from openaiapi.controllers.fine_tuning_controller import FineTuningController
from openaiapi.controllers.batch_api_requests_controller\
    import BatchAPIRequestsController
from openaiapi.controllers.files_controller import FilesController
from openaiapi.controllers.image_generation_controller\
    import ImageGenerationController
from openaiapi.controllers.models_controller import ModelsController
from openaiapi.controllers.moderations_controller import ModerationsController
from openaiapi.controllers.messages_controller import MessagesController
from openaiapi.controllers.runs_controller import RunsController
from openaiapi.controllers.threads_controller import ThreadsController
from openaiapi.controllers.batches_controller import BatchesController
from openaiapi.controllers.vector_store_files_controller\
    import VectorStoreFilesController
from openaiapi.controllers.vector_store_controller import VectorStoreController
from openaiapi.controllers.open_ai_assistants_api_beta_controller\
    import OpenAIAssistantsAPIBetaController


class OpenaiapiClient(object):
    @LazyProperty
    def text_generation_chat_completions_api(self):
        return TextGenerationChatCompletionsAPIController(self.global_configuration)

    @LazyProperty
    def function_calling_chat_completions_api(self):
        return FunctionCallingChatCompletionsAPIController(self.global_configuration)

    @LazyProperty
    def build_a_simple_faq_system_embeddings_api(self):
        return BuildASimpleFAQSystemEmbeddingsAPIController(self.global_configuration)

    @LazyProperty
    def reasoning(self):
        return ReasoningController(self.global_configuration)

    @LazyProperty
    def chat_completions(self):
        return ChatCompletionsController(self.global_configuration)

    @LazyProperty
    def structured_outputs(self):
        return StructuredOutputsController(self.global_configuration)

    @LazyProperty
    def predicted_outputs(self):
        return PredictedOutputsController(self.global_configuration)

    @LazyProperty
    def embeddings(self):
        return EmbeddingsController(self.global_configuration)

    @LazyProperty
    def fine_tuning(self):
        return FineTuningController(self.global_configuration)

    @LazyProperty
    def batch_api_requests(self):
        return BatchAPIRequestsController(self.global_configuration)

    @LazyProperty
    def files(self):
        return FilesController(self.global_configuration)

    @LazyProperty
    def image_generation(self):
        return ImageGenerationController(self.global_configuration)

    @LazyProperty
    def models(self):
        return ModelsController(self.global_configuration)

    @LazyProperty
    def moderations(self):
        return ModerationsController(self.global_configuration)

    @LazyProperty
    def messages(self):
        return MessagesController(self.global_configuration)

    @LazyProperty
    def runs(self):
        return RunsController(self.global_configuration)

    @LazyProperty
    def threads(self):
        return ThreadsController(self.global_configuration)

    @LazyProperty
    def batches(self):
        return BatchesController(self.global_configuration)

    @LazyProperty
    def vector_store_files(self):
        return VectorStoreFilesController(self.global_configuration)

    @LazyProperty
    def vector_store(self):
        return VectorStoreController(self.global_configuration)

    @LazyProperty
    def open_ai_assistants_api_beta(self):
        return OpenAIAssistantsAPIBetaController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, access_token=None,
                 bearer_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, access_token=access_token,
            bearer_auth_credentials=bearer_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['bearer']}
        self.auth_managers['bearer'] = OAuth2(
            self.config.bearer_auth_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

