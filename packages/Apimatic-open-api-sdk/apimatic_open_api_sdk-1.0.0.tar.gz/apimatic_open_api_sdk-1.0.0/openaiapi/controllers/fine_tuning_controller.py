# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openaiapi.api_helper import APIHelper
from openaiapi.configuration import Server
from openaiapi.utilities.file_wrapper import FileWrapper
from openaiapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openaiapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openaiapi.models.upload_training_file import UploadTrainingFile
from openaiapi.models.create_fine_tuning_job import CreateFineTuningJob
from openaiapi.models.list_fine_tuning_jobs import ListFineTuningJobs
from openaiapi.models.list_fine_tuning_events import ListFineTuningEvents
from openaiapi.models.list_fine_tuning_checkpoints import ListFineTuningCheckpoints
from openaiapi.models.retrieve_fine_tuning_jobs import RetrieveFineTuningJobs


class FineTuningController(BaseController):

    """A Controller to access Endpoints in the openaiapi API."""
    def __init__(self, config):
        super(FineTuningController, self).__init__(config)

    def upload_training_file(self,
                             purpose,
                             file):
        """Does a POST request to /files.

        Args:
            purpose (str): The request form parameter.
            file (typing.BinaryIO): The request form parameter.

        Returns:
            UploadTrainingFile: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('purpose')
                        .value(purpose))
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadTrainingFile.from_dictionary)
        ).execute()

    def create_fine_tuning_job(self,
                               body):
        """Does a POST request to /fine_tuning/jobs.

        Args:
            body (CreateFineTuningJobRequest): The request body parameter.

        Returns:
            CreateFineTuningJob: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine_tuning/jobs')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CreateFineTuningJob.from_dictionary)
        ).execute()

    def enable_weights_and_biases_integration(self,
                                              body):
        """Does a POST request to /fine_tuning/jobs.

        Weights and Biases (W&B) is a popular tool for tracking machine
        learning experiments. You can use the OpenAI integration with W&B to
        track your fine-tuning jobs in W&B. This integration will
        automatically log metrics, hyperparameters, and other job-related
        information to the W&B project you specify.
        To integrate your fine-tuning jobs with W&B, you'll need to
        Provide authentication credentials for your Weights and Biases account
        to OpenAI  
        Configure the W&B integration when creating new fine-tuning jobs

        Args:
            body (EnableWeightsAndBiasesIntegrationRequest): The request body
                parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine_tuning/jobs')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).execute()

    def list_fine_tuning_jobs(self,
                              limit):
        """Does a GET request to /fine_tuning/jobs.

        Args:
            limit (int): The request query parameter.

        Returns:
            ListFineTuningJobs: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine_tuning/jobs')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListFineTuningJobs.from_dictionary)
        ).execute()

    def list_fine_tuning_events(self):
        """Does a GET request to /fine_tuning/jobs//events.

        Returns:
            ListFineTuningEvents: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine_tuning/jobs//events')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListFineTuningEvents.from_dictionary)
        ).execute()

    def list_fine_tuning_checkpoints(self):
        """Does a GET request to /fine_tuning/jobs//checkpoints.

        Returns:
            ListFineTuningCheckpoints: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine_tuning/jobs//checkpoints')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListFineTuningCheckpoints.from_dictionary)
        ).execute()

    def retrieve_fine_tuning_jobs(self):
        """Does a GET request to /.

        Returns:
            RetrieveFineTuningJobs: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_3)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveFineTuningJobs.from_dictionary)
        ).execute()

    def cancel_fine_tuning_jobs(self):
        """Does a POST request to /fine_tuning/jobs//cancel.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine_tuning/jobs//cancel')
            .http_method(HttpMethodEnum.POST)
            .auth(Single('bearer'))
        ).execute()
