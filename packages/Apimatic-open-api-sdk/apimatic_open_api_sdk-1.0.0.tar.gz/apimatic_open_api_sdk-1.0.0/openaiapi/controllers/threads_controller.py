# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openaiapi.api_helper import APIHelper
from openaiapi.configuration import Server
from openaiapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openaiapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openaiapi.models.retrieve_thread import RetrieveThread
from openaiapi.models.delete_thread import DeleteThread


class ThreadsController(BaseController):

    """A Controller to access Endpoints in the openaiapi API."""
    def __init__(self, config):
        super(ThreadsController, self).__init__(config)

    def create_thread(self,
                      open_ai_beta):
        """Does a GET request to /threads.

        Args:
            open_ai_beta (str): The request header parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .auth(Single('bearer'))
        ).execute()

    def retrieve_thread(self,
                        open_ai_beta):
        """Does a GET request to /threads/.

        Args:
            open_ai_beta (str): The request header parameter.

        Returns:
            RetrieveThread: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads/')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveThread.from_dictionary)
        ).execute()

    def modify_thread(self,
                      open_ai_beta,
                      body):
        """Does a POST request to /threads/.

        Args:
            open_ai_beta (str): The request header parameter.
            body (ModifyThreadRequest): The request body parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads/')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).execute()

    def delete_thread(self,
                      open_ai_beta):
        """Does a DELETE request to /threads/.

        Args:
            open_ai_beta (str): The request header parameter.

        Returns:
            DeleteThread: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/threads/')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .header_param(Parameter()
                          .key('OpenAI-Beta')
                          .value(open_ai_beta))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeleteThread.from_dictionary)
        ).execute()
