# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.tool_1 import Tool1


class ModifyAssistantsRequest(object):

    """Implementation of the 'Modify Assistants Request' model.

    Attributes:
        instructions (str): The model property of type str.
        tools (List[Tool1]): The model property of type List[Tool1].
        model (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "instructions": 'instructions',
        "tools": 'tools',
        "model": 'model'
    }

    def __init__(self,
                 instructions=None,
                 tools=None,
                 model=None):
        """Constructor for the ModifyAssistantsRequest class"""

        # Initialize members of the class
        self.instructions = instructions 
        self.tools = tools 
        self.model = model 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        instructions = dictionary.get("instructions") if dictionary.get("instructions") else None
        tools = None
        if dictionary.get('tools') is not None:
            tools = [Tool1.from_dictionary(x) for x in dictionary.get('tools')]
        model = dictionary.get("model") if dictionary.get("model") else None
        # Return an object of this model
        return cls(instructions,
                   tools,
                   model)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'instructions={self.instructions!r}, '
                f'tools={self.tools!r}, '
                f'model={self.model!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'instructions={self.instructions!s}, '
                f'tools={self.tools!s}, '
                f'model={self.model!s})')
