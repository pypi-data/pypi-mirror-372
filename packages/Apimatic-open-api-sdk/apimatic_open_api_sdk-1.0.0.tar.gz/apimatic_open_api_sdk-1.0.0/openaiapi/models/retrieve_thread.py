# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.tool_resources import ToolResources


class RetrieveThread(object):

    """Implementation of the 'Retrieve Thread' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        created_at (int): The model property of type int.
        metadata (Any): The model property of type Any.
        tool_resources (ToolResources): The model property of type
            ToolResources.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "created_at": 'created_at',
        "metadata": 'metadata',
        "tool_resources": 'tool_resources'
    }

    def __init__(self,
                 id=None,
                 object=None,
                 created_at=None,
                 metadata=None,
                 tool_resources=None):
        """Constructor for the RetrieveThread class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.created_at = created_at 
        self.metadata = metadata 
        self.tool_resources = tool_resources 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        tool_resources = ToolResources.from_dictionary(dictionary.get('tool_resources')) if dictionary.get('tool_resources') else None
        # Return an object of this model
        return cls(id,
                   object,
                   created_at,
                   metadata,
                   tool_resources)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'created_at={self.created_at!r}, '
                f'metadata={self.metadata!r}, '
                f'tool_resources={self.tool_resources!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'created_at={self.created_at!s}, '
                f'metadata={self.metadata!s}, '
                f'tool_resources={self.tool_resources!s})')
