# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class FileCounts(object):

    """Implementation of the 'FileCounts' model.

    Attributes:
        in_progress (int): The model property of type int.
        completed (int): The model property of type int.
        failed (int): The model property of type int.
        cancelled (int): The model property of type int.
        total (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "in_progress": 'in_progress',
        "completed": 'completed',
        "failed": 'failed',
        "cancelled": 'cancelled',
        "total": 'total'
    }

    def __init__(self,
                 in_progress=None,
                 completed=None,
                 failed=None,
                 cancelled=None,
                 total=None):
        """Constructor for the FileCounts class"""

        # Initialize members of the class
        self.in_progress = in_progress 
        self.completed = completed 
        self.failed = failed 
        self.cancelled = cancelled 
        self.total = total 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        in_progress = dictionary.get("in_progress") if dictionary.get("in_progress") else None
        completed = dictionary.get("completed") if dictionary.get("completed") else None
        failed = dictionary.get("failed") if dictionary.get("failed") else None
        cancelled = dictionary.get("cancelled") if dictionary.get("cancelled") else None
        total = dictionary.get("total") if dictionary.get("total") else None
        # Return an object of this model
        return cls(in_progress,
                   completed,
                   failed,
                   cancelled,
                   total)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'in_progress={self.in_progress!r}, '
                f'completed={self.completed!r}, '
                f'failed={self.failed!r}, '
                f'cancelled={self.cancelled!r}, '
                f'total={self.total!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'in_progress={self.in_progress!s}, '
                f'completed={self.completed!s}, '
                f'failed={self.failed!s}, '
                f'cancelled={self.cancelled!s}, '
                f'total={self.total!s})')
