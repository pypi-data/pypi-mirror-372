# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class CreateBatchRequest(object):

    """Implementation of the 'Create Batch Request' model.

    Attributes:
        input_file_id (str): The model property of type str.
        endpoint (str): The model property of type str.
        completion_window (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "input_file_id": 'input_file_id',
        "endpoint": 'endpoint',
        "completion_window": 'completion_window'
    }

    def __init__(self,
                 input_file_id=None,
                 endpoint=None,
                 completion_window=None):
        """Constructor for the CreateBatchRequest class"""

        # Initialize members of the class
        self.input_file_id = input_file_id 
        self.endpoint = endpoint 
        self.completion_window = completion_window 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        input_file_id = dictionary.get("input_file_id") if dictionary.get("input_file_id") else None
        endpoint = dictionary.get("endpoint") if dictionary.get("endpoint") else None
        completion_window = dictionary.get("completion_window") if dictionary.get("completion_window") else None
        # Return an object of this model
        return cls(input_file_id,
                   endpoint,
                   completion_window)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'input_file_id={self.input_file_id!r}, '
                f'endpoint={self.endpoint!r}, '
                f'completion_window={self.completion_window!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'input_file_id={self.input_file_id!s}, '
                f'endpoint={self.endpoint!s}, '
                f'completion_window={self.completion_window!s})')
