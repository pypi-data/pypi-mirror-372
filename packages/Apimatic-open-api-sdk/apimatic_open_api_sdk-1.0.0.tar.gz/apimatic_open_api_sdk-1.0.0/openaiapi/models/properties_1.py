# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.final_answer import FinalAnswer
from openaiapi.models.steps import Steps


class Properties1(object):

    """Implementation of the 'Properties1' model.

    Attributes:
        steps (Steps): The model property of type Steps.
        final_answer (FinalAnswer): The model property of type FinalAnswer.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "steps": 'steps',
        "final_answer": 'final_answer'
    }

    def __init__(self,
                 steps=None,
                 final_answer=None):
        """Constructor for the Properties1 class"""

        # Initialize members of the class
        self.steps = steps 
        self.final_answer = final_answer 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        steps = Steps.from_dictionary(dictionary.get('steps')) if dictionary.get('steps') else None
        final_answer = FinalAnswer.from_dictionary(dictionary.get('final_answer')) if dictionary.get('final_answer') else None
        # Return an object of this model
        return cls(steps,
                   final_answer)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'steps={self.steps!r}, '
                f'final_answer={self.final_answer!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'steps={self.steps!s}, '
                f'final_answer={self.final_answer!s})')
