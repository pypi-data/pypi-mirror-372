# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.hyperparameters_4 import Hyperparameters4


class Supervised2(object):

    """Implementation of the 'Supervised2' model.

    Attributes:
        hyperparameters (Hyperparameters4): The model property of type
            Hyperparameters4.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "hyperparameters": 'hyperparameters'
    }

    def __init__(self,
                 hyperparameters=None):
        """Constructor for the Supervised2 class"""

        # Initialize members of the class
        self.hyperparameters = hyperparameters 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        hyperparameters = Hyperparameters4.from_dictionary(dictionary.get('hyperparameters')) if dictionary.get('hyperparameters') else None
        # Return an object of this model
        return cls(hyperparameters)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'hyperparameters={self.hyperparameters!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'hyperparameters={self.hyperparameters!s})')
