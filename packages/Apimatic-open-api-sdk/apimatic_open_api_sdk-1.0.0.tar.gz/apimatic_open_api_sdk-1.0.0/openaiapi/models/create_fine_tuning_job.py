# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.hyperparameters import Hyperparameters
from openaiapi.models.method import Method


class CreateFineTuningJob(object):

    """Implementation of the 'Create Fine Tuning Job' model.

    Attributes:
        object (str): The model property of type str.
        id (str): The model property of type str.
        model (str): The model property of type str.
        created_at (int): The model property of type int.
        finished_at (str): The model property of type str.
        fine_tuned_model (str): The model property of type str.
        organization_id (str): The model property of type str.
        result_files (List[str]): The model property of type List[str].
        status (str): The model property of type str.
        validation_file (str): The model property of type str.
        training_file (str): The model property of type str.
        hyperparameters (Hyperparameters): The model property of type
            Hyperparameters.
        trained_tokens (str): The model property of type str.
        error (Any): The model property of type Any.
        user_provided_suffix (str): The model property of type str.
        seed (int): The model property of type int.
        estimated_finish (str): The model property of type str.
        integrations (List[str]): The model property of type List[str].
        method (Method): The model property of type Method.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "object": 'object',
        "id": 'id',
        "model": 'model',
        "created_at": 'created_at',
        "finished_at": 'finished_at',
        "fine_tuned_model": 'fine_tuned_model',
        "organization_id": 'organization_id',
        "result_files": 'result_files',
        "status": 'status',
        "validation_file": 'validation_file',
        "training_file": 'training_file',
        "hyperparameters": 'hyperparameters',
        "trained_tokens": 'trained_tokens',
        "error": 'error',
        "user_provided_suffix": 'user_provided_suffix',
        "seed": 'seed',
        "estimated_finish": 'estimated_finish',
        "integrations": 'integrations',
        "method": 'method'
    }

    _nullables = [
        'finished_at',
        'fine_tuned_model',
        'validation_file',
        'trained_tokens',
        'user_provided_suffix',
        'estimated_finish',
    ]

    def __init__(self,
                 object=None,
                 id=None,
                 model=None,
                 created_at=None,
                 finished_at=None,
                 fine_tuned_model=None,
                 organization_id=None,
                 result_files=None,
                 status=None,
                 validation_file=None,
                 training_file=None,
                 hyperparameters=None,
                 trained_tokens=None,
                 error=None,
                 user_provided_suffix=None,
                 seed=None,
                 estimated_finish=None,
                 integrations=None,
                 method=None):
        """Constructor for the CreateFineTuningJob class"""

        # Initialize members of the class
        self.object = object 
        self.id = id 
        self.model = model 
        self.created_at = created_at 
        self.finished_at = finished_at 
        self.fine_tuned_model = fine_tuned_model 
        self.organization_id = organization_id 
        self.result_files = result_files 
        self.status = status 
        self.validation_file = validation_file 
        self.training_file = training_file 
        self.hyperparameters = hyperparameters 
        self.trained_tokens = trained_tokens 
        self.error = error 
        self.user_provided_suffix = user_provided_suffix 
        self.seed = seed 
        self.estimated_finish = estimated_finish 
        self.integrations = integrations 
        self.method = method 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        object = dictionary.get("object") if dictionary.get("object") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        model = dictionary.get("model") if dictionary.get("model") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        finished_at = dictionary.get("finished_at") if dictionary.get("finished_at") else None
        fine_tuned_model = dictionary.get("fine_tuned_model") if dictionary.get("fine_tuned_model") else None
        organization_id = dictionary.get("organization_id") if dictionary.get("organization_id") else None
        result_files = dictionary.get("result_files") if dictionary.get("result_files") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        validation_file = dictionary.get("validation_file") if dictionary.get("validation_file") else None
        training_file = dictionary.get("training_file") if dictionary.get("training_file") else None
        hyperparameters = Hyperparameters.from_dictionary(dictionary.get('hyperparameters')) if dictionary.get('hyperparameters') else None
        trained_tokens = dictionary.get("trained_tokens") if dictionary.get("trained_tokens") else None
        error = dictionary.get("error") if dictionary.get("error") else None
        user_provided_suffix = dictionary.get("user_provided_suffix") if dictionary.get("user_provided_suffix") else None
        seed = dictionary.get("seed") if dictionary.get("seed") else None
        estimated_finish = dictionary.get("estimated_finish") if dictionary.get("estimated_finish") else None
        integrations = dictionary.get("integrations") if dictionary.get("integrations") else None
        method = Method.from_dictionary(dictionary.get('method')) if dictionary.get('method') else None
        # Return an object of this model
        return cls(object,
                   id,
                   model,
                   created_at,
                   finished_at,
                   fine_tuned_model,
                   organization_id,
                   result_files,
                   status,
                   validation_file,
                   training_file,
                   hyperparameters,
                   trained_tokens,
                   error,
                   user_provided_suffix,
                   seed,
                   estimated_finish,
                   integrations,
                   method)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!r}, '
                f'id={self.id!r}, '
                f'model={self.model!r}, '
                f'created_at={self.created_at!r}, '
                f'finished_at={self.finished_at!r}, '
                f'fine_tuned_model={self.fine_tuned_model!r}, '
                f'organization_id={self.organization_id!r}, '
                f'result_files={self.result_files!r}, '
                f'status={self.status!r}, '
                f'validation_file={self.validation_file!r}, '
                f'training_file={self.training_file!r}, '
                f'hyperparameters={self.hyperparameters!r}, '
                f'trained_tokens={self.trained_tokens!r}, '
                f'error={self.error!r}, '
                f'user_provided_suffix={self.user_provided_suffix!r}, '
                f'seed={self.seed!r}, '
                f'estimated_finish={self.estimated_finish!r}, '
                f'integrations={self.integrations!r}, '
                f'method={self.method!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!s}, '
                f'id={self.id!s}, '
                f'model={self.model!s}, '
                f'created_at={self.created_at!s}, '
                f'finished_at={self.finished_at!s}, '
                f'fine_tuned_model={self.fine_tuned_model!s}, '
                f'organization_id={self.organization_id!s}, '
                f'result_files={self.result_files!s}, '
                f'status={self.status!s}, '
                f'validation_file={self.validation_file!s}, '
                f'training_file={self.training_file!s}, '
                f'hyperparameters={self.hyperparameters!s}, '
                f'trained_tokens={self.trained_tokens!s}, '
                f'error={self.error!s}, '
                f'user_provided_suffix={self.user_provided_suffix!s}, '
                f'seed={self.seed!s}, '
                f'estimated_finish={self.estimated_finish!s}, '
                f'integrations={self.integrations!s}, '
                f'method={self.method!s})')
