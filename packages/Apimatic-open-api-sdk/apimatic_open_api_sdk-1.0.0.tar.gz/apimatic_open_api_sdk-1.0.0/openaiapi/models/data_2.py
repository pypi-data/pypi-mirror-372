# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.api_helper import APIHelper
from openaiapi.models.request_counts import RequestCounts


class Data2(object):

    """Implementation of the 'Data2' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        endpoint (str): The model property of type str.
        errors (str): The model property of type str.
        input_file_id (str): The model property of type str.
        completion_window (str): The model property of type str.
        status (str): The model property of type str.
        output_file_id (str): The model property of type str.
        error_file_id (str): The model property of type str.
        created_at (int): The model property of type int.
        in_progress_at (int): The model property of type int.
        expires_at (int): The model property of type int.
        finalizing_at (str | None | int): The model property of type str |
            None | int.
        completed_at (str | None | int): The model property of type str | None
            | int.
        failed_at (str): The model property of type str.
        expired_at (str): The model property of type str.
        cancelling_at (str): The model property of type str.
        cancelled_at (str): The model property of type str.
        request_counts (RequestCounts): The model property of type
            RequestCounts.
        metadata (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "endpoint": 'endpoint',
        "errors": 'errors',
        "input_file_id": 'input_file_id',
        "completion_window": 'completion_window',
        "status": 'status',
        "output_file_id": 'output_file_id',
        "error_file_id": 'error_file_id',
        "created_at": 'created_at',
        "in_progress_at": 'in_progress_at',
        "expires_at": 'expires_at',
        "finalizing_at": 'finalizing_at',
        "completed_at": 'completed_at',
        "failed_at": 'failed_at',
        "expired_at": 'expired_at',
        "cancelling_at": 'cancelling_at',
        "cancelled_at": 'cancelled_at',
        "request_counts": 'request_counts',
        "metadata": 'metadata'
    }

    _nullables = [
        'errors',
        'output_file_id',
        'error_file_id',
        'finalizing_at',
        'completed_at',
        'failed_at',
        'expired_at',
        'cancelling_at',
        'cancelled_at',
        'metadata',
    ]

    def __init__(self,
                 id=None,
                 object=None,
                 endpoint=None,
                 errors=None,
                 input_file_id=None,
                 completion_window=None,
                 status=None,
                 output_file_id=None,
                 error_file_id=None,
                 created_at=None,
                 in_progress_at=None,
                 expires_at=None,
                 finalizing_at=None,
                 completed_at=None,
                 failed_at=None,
                 expired_at=None,
                 cancelling_at=None,
                 cancelled_at=None,
                 request_counts=None,
                 metadata=None):
        """Constructor for the Data2 class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.endpoint = endpoint 
        self.errors = errors 
        self.input_file_id = input_file_id 
        self.completion_window = completion_window 
        self.status = status 
        self.output_file_id = output_file_id 
        self.error_file_id = error_file_id 
        self.created_at = created_at 
        self.in_progress_at = in_progress_at 
        self.expires_at = expires_at 
        self.finalizing_at = finalizing_at 
        self.completed_at = completed_at 
        self.failed_at = failed_at 
        self.expired_at = expired_at 
        self.cancelling_at = cancelling_at 
        self.cancelled_at = cancelled_at 
        self.request_counts = request_counts 
        self.metadata = metadata 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from openaiapi.utilities.union_type_lookup import UnionTypeLookUp

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        endpoint = dictionary.get("endpoint") if dictionary.get("endpoint") else None
        errors = dictionary.get("errors") if dictionary.get("errors") else None
        input_file_id = dictionary.get("input_file_id") if dictionary.get("input_file_id") else None
        completion_window = dictionary.get("completion_window") if dictionary.get("completion_window") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        output_file_id = dictionary.get("output_file_id") if dictionary.get("output_file_id") else None
        error_file_id = dictionary.get("error_file_id") if dictionary.get("error_file_id") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        in_progress_at = dictionary.get("in_progress_at") if dictionary.get("in_progress_at") else None
        expires_at = dictionary.get("expires_at") if dictionary.get("expires_at") else None
        finalizing_at = APIHelper.deserialize_union_type(UnionTypeLookUp.get('Data2FinalizingAt'), dictionary.get('finalizing_at'), False) if dictionary.get('finalizing_at') is not None else None
        completed_at = APIHelper.deserialize_union_type(UnionTypeLookUp.get('Data2CompletedAt'), dictionary.get('completed_at'), False) if dictionary.get('completed_at') is not None else None
        failed_at = dictionary.get("failed_at") if dictionary.get("failed_at") else None
        expired_at = dictionary.get("expired_at") if dictionary.get("expired_at") else None
        cancelling_at = dictionary.get("cancelling_at") if dictionary.get("cancelling_at") else None
        cancelled_at = dictionary.get("cancelled_at") if dictionary.get("cancelled_at") else None
        request_counts = RequestCounts.from_dictionary(dictionary.get('request_counts')) if dictionary.get('request_counts') else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        # Return an object of this model
        return cls(id,
                   object,
                   endpoint,
                   errors,
                   input_file_id,
                   completion_window,
                   status,
                   output_file_id,
                   error_file_id,
                   created_at,
                   in_progress_at,
                   expires_at,
                   finalizing_at,
                   completed_at,
                   failed_at,
                   expired_at,
                   cancelling_at,
                   cancelled_at,
                   request_counts,
                   metadata)

    @classmethod
    def validate(cls, dictionary):
        """Validates dictionary against class required properties

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            boolean : if dictionary is valid contains required properties.

        """
        from openaiapi.utilities.union_type_lookup import UnionTypeLookUp

        if isinstance(dictionary, cls):
            return APIHelper.is_valid_type(value=dictionary.id,
                                           type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.object,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.endpoint,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.errors,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.input_file_id,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.completion_window,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.status,
                                            type_callable=lambda value: isinstance(value, str)) \
                and APIHelper.is_valid_type(value=dictionary.output_file_id,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.error_file_id,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.created_at,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.in_progress_at,
                                            type_callable=lambda value: isinstance(value, int)) \
                and APIHelper.is_valid_type(value=dictionary.expires_at,
                                            type_callable=lambda value: isinstance(value, int)) \
                and UnionTypeLookUp.get('Data2FinalizingAt').validate(dictionary.finalizing_at).is_valid \
                and UnionTypeLookUp.get('Data2CompletedAt').validate(dictionary.completed_at).is_valid \
                and APIHelper.is_valid_type(value=dictionary.failed_at,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.expired_at,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.cancelling_at,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.cancelled_at,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True) \
                and APIHelper.is_valid_type(value=dictionary.request_counts,
                                            type_callable=lambda value: RequestCounts.validate(value),
                                            is_model_dict=True) \
                and APIHelper.is_valid_type(value=dictionary.metadata,
                                            type_callable=lambda value: isinstance(value, str),
                                            is_value_nullable=True)

        if not isinstance(dictionary, dict):
            return False

        return APIHelper.is_valid_type(value=dictionary.get('id'),
                                       type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('object'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('endpoint'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('errors'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('input_file_id'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('completion_window'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('status'),
                                        type_callable=lambda value: isinstance(value, str)) \
            and APIHelper.is_valid_type(value=dictionary.get('output_file_id'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('error_file_id'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('created_at'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('in_progress_at'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and APIHelper.is_valid_type(value=dictionary.get('expires_at'),
                                        type_callable=lambda value: isinstance(value, int)) \
            and UnionTypeLookUp.get('Data2FinalizingAt').validate(dictionary.get('finalizing_at')).is_valid \
            and UnionTypeLookUp.get('Data2CompletedAt').validate(dictionary.get('completed_at')).is_valid \
            and APIHelper.is_valid_type(value=dictionary.get('failed_at'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('expired_at'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('cancelling_at'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('cancelled_at'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True) \
            and APIHelper.is_valid_type(value=dictionary.get('request_counts'),
                                        type_callable=lambda value: RequestCounts.validate(value),
                                        is_model_dict=True) \
            and APIHelper.is_valid_type(value=dictionary.get('metadata'),
                                        type_callable=lambda value: isinstance(value, str),
                                        is_value_nullable=True)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'endpoint={self.endpoint!r}, '
                f'errors={self.errors!r}, '
                f'input_file_id={self.input_file_id!r}, '
                f'completion_window={self.completion_window!r}, '
                f'status={self.status!r}, '
                f'output_file_id={self.output_file_id!r}, '
                f'error_file_id={self.error_file_id!r}, '
                f'created_at={self.created_at!r}, '
                f'in_progress_at={self.in_progress_at!r}, '
                f'expires_at={self.expires_at!r}, '
                f'finalizing_at={self.finalizing_at!r}, '
                f'completed_at={self.completed_at!r}, '
                f'failed_at={self.failed_at!r}, '
                f'expired_at={self.expired_at!r}, '
                f'cancelling_at={self.cancelling_at!r}, '
                f'cancelled_at={self.cancelled_at!r}, '
                f'request_counts={self.request_counts!r}, '
                f'metadata={self.metadata!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'endpoint={self.endpoint!s}, '
                f'errors={self.errors!s}, '
                f'input_file_id={self.input_file_id!s}, '
                f'completion_window={self.completion_window!s}, '
                f'status={self.status!s}, '
                f'output_file_id={self.output_file_id!s}, '
                f'error_file_id={self.error_file_id!s}, '
                f'created_at={self.created_at!s}, '
                f'in_progress_at={self.in_progress_at!s}, '
                f'expires_at={self.expires_at!s}, '
                f'finalizing_at={self.finalizing_at!s}, '
                f'completed_at={self.completed_at!s}, '
                f'failed_at={self.failed_at!s}, '
                f'expired_at={self.expired_at!s}, '
                f'cancelling_at={self.cancelling_at!s}, '
                f'cancelled_at={self.cancelled_at!s}, '
                f'request_counts={self.request_counts!s}, '
                f'metadata={self.metadata!s})')
