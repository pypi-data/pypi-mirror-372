# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Metadata4(object):

    """Implementation of the 'Metadata4' model.

    Attributes:
        modified (str): The model property of type str.
        user (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "modified": 'modified',
        "user": 'user'
    }

    def __init__(self,
                 modified=None,
                 user=None):
        """Constructor for the Metadata4 class"""

        # Initialize members of the class
        self.modified = modified 
        self.user = user 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        modified = dictionary.get("modified") if dictionary.get("modified") else None
        user = dictionary.get("user") if dictionary.get("user") else None
        # Return an object of this model
        return cls(modified,
                   user)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'modified={self.modified!r}, '
                f'user={self.user!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'modified={self.modified!s}, '
                f'user={self.user!s})')
