# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.tool_1 import Tool1
from openaiapi.models.tool_resources import ToolResources


class Data11(object):

    """Implementation of the 'Data11' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        created_at (int): The model property of type int.
        name (str): The model property of type str.
        description (str): The model property of type str.
        model (str): The model property of type str.
        instructions (str): The model property of type str.
        tools (List[Tool1]): The model property of type List[Tool1].
        top_p (int): The model property of type int.
        temperature (int): The model property of type int.
        tool_resources (ToolResources): The model property of type
            ToolResources.
        metadata (Any): The model property of type Any.
        response_format (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "created_at": 'created_at',
        "name": 'name',
        "description": 'description',
        "model": 'model',
        "instructions": 'instructions',
        "tools": 'tools',
        "top_p": 'top_p',
        "temperature": 'temperature',
        "tool_resources": 'tool_resources',
        "metadata": 'metadata',
        "response_format": 'response_format'
    }

    _nullables = [
        'description',
    ]

    def __init__(self,
                 id=None,
                 object=None,
                 created_at=None,
                 name=None,
                 description=None,
                 model=None,
                 instructions=None,
                 tools=None,
                 top_p=None,
                 temperature=None,
                 tool_resources=None,
                 metadata=None,
                 response_format=None):
        """Constructor for the Data11 class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.created_at = created_at 
        self.name = name 
        self.description = description 
        self.model = model 
        self.instructions = instructions 
        self.tools = tools 
        self.top_p = top_p 
        self.temperature = temperature 
        self.tool_resources = tool_resources 
        self.metadata = metadata 
        self.response_format = response_format 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        name = dictionary.get("name") if dictionary.get("name") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        model = dictionary.get("model") if dictionary.get("model") else None
        instructions = dictionary.get("instructions") if dictionary.get("instructions") else None
        tools = None
        if dictionary.get('tools') is not None:
            tools = [Tool1.from_dictionary(x) for x in dictionary.get('tools')]
        top_p = dictionary.get("top_p") if dictionary.get("top_p") else None
        temperature = dictionary.get("temperature") if dictionary.get("temperature") else None
        tool_resources = ToolResources.from_dictionary(dictionary.get('tool_resources')) if dictionary.get('tool_resources') else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        response_format = dictionary.get("response_format") if dictionary.get("response_format") else None
        # Return an object of this model
        return cls(id,
                   object,
                   created_at,
                   name,
                   description,
                   model,
                   instructions,
                   tools,
                   top_p,
                   temperature,
                   tool_resources,
                   metadata,
                   response_format)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'created_at={self.created_at!r}, '
                f'name={self.name!r}, '
                f'description={self.description!r}, '
                f'model={self.model!r}, '
                f'instructions={self.instructions!r}, '
                f'tools={self.tools!r}, '
                f'top_p={self.top_p!r}, '
                f'temperature={self.temperature!r}, '
                f'tool_resources={self.tool_resources!r}, '
                f'metadata={self.metadata!r}, '
                f'response_format={self.response_format!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'created_at={self.created_at!s}, '
                f'name={self.name!s}, '
                f'description={self.description!s}, '
                f'model={self.model!s}, '
                f'instructions={self.instructions!s}, '
                f'tools={self.tools!s}, '
                f'top_p={self.top_p!s}, '
                f'temperature={self.temperature!s}, '
                f'tool_resources={self.tool_resources!s}, '
                f'metadata={self.metadata!s}, '
                f'response_format={self.response_format!s})')
