# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.code_interpreter import CodeInterpreter


class ToolResources(object):

    """Implementation of the 'ToolResources' model.

    Attributes:
        code_interpreter (CodeInterpreter): The model property of type
            CodeInterpreter.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code_interpreter": 'code_interpreter'
    }

    def __init__(self,
                 code_interpreter=None):
        """Constructor for the ToolResources class"""

        # Initialize members of the class
        self.code_interpreter = code_interpreter 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code_interpreter = CodeInterpreter.from_dictionary(dictionary.get('code_interpreter')) if dictionary.get('code_interpreter') else None
        # Return an object of this model
        return cls(code_interpreter)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code_interpreter={self.code_interpreter!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code_interpreter={self.code_interpreter!s})')
