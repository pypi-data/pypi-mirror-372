# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.message_creation import MessageCreation


class StepDetails(object):

    """Implementation of the 'StepDetails' model.

    Attributes:
        mtype (str): The model property of type str.
        message_creation (MessageCreation): The model property of type
            MessageCreation.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "message_creation": 'message_creation'
    }

    def __init__(self,
                 mtype=None,
                 message_creation=None):
        """Constructor for the StepDetails class"""

        # Initialize members of the class
        self.mtype = mtype 
        self.message_creation = message_creation 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if dictionary.get("type") else None
        message_creation = MessageCreation.from_dictionary(dictionary.get('message_creation')) if dictionary.get('message_creation') else None
        # Return an object of this model
        return cls(mtype,
                   message_creation)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!r}, '
                f'message_creation={self.message_creation!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={self.mtype!s}, '
                f'message_creation={self.message_creation!s})')
