# -*- coding: utf-8 -*-

"""
openaiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openaiapi.models.tool_1 import Tool1
from openaiapi.models.truncation_strategy import TruncationStrategy
from openaiapi.models.usage_10 import Usage10


class GetRun(object):

    """Implementation of the 'Get Run' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        created_at (int): The model property of type int.
        assistant_id (str): The model property of type str.
        thread_id (str): The model property of type str.
        status (str): The model property of type str.
        started_at (int): The model property of type int.
        expires_at (str): The model property of type str.
        cancelled_at (str): The model property of type str.
        failed_at (str): The model property of type str.
        completed_at (int): The model property of type int.
        required_action (str): The model property of type str.
        last_error (str): The model property of type str.
        model (str): The model property of type str.
        instructions (str): The model property of type str.
        tools (List[Tool1]): The model property of type List[Tool1].
        tool_resources (Any): The model property of type Any.
        metadata (Any): The model property of type Any.
        temperature (int): The model property of type int.
        top_p (int): The model property of type int.
        max_completion_tokens (str): The model property of type str.
        max_prompt_tokens (str): The model property of type str.
        truncation_strategy (TruncationStrategy): The model property of type
            TruncationStrategy.
        incomplete_details (str): The model property of type str.
        usage (Usage10): The model property of type Usage10.
        response_format (str): The model property of type str.
        tool_choice (str): The model property of type str.
        parallel_tool_calls (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "created_at": 'created_at',
        "assistant_id": 'assistant_id',
        "thread_id": 'thread_id',
        "status": 'status',
        "started_at": 'started_at',
        "expires_at": 'expires_at',
        "cancelled_at": 'cancelled_at',
        "failed_at": 'failed_at',
        "completed_at": 'completed_at',
        "required_action": 'required_action',
        "last_error": 'last_error',
        "model": 'model',
        "instructions": 'instructions',
        "tools": 'tools',
        "tool_resources": 'tool_resources',
        "metadata": 'metadata',
        "temperature": 'temperature',
        "top_p": 'top_p',
        "max_completion_tokens": 'max_completion_tokens',
        "max_prompt_tokens": 'max_prompt_tokens',
        "truncation_strategy": 'truncation_strategy',
        "incomplete_details": 'incomplete_details',
        "usage": 'usage',
        "response_format": 'response_format',
        "tool_choice": 'tool_choice',
        "parallel_tool_calls": 'parallel_tool_calls'
    }

    _nullables = [
        'expires_at',
        'cancelled_at',
        'failed_at',
        'required_action',
        'last_error',
        'max_completion_tokens',
        'max_prompt_tokens',
        'incomplete_details',
    ]

    def __init__(self,
                 id=None,
                 object=None,
                 created_at=None,
                 assistant_id=None,
                 thread_id=None,
                 status=None,
                 started_at=None,
                 expires_at=None,
                 cancelled_at=None,
                 failed_at=None,
                 completed_at=None,
                 required_action=None,
                 last_error=None,
                 model=None,
                 instructions=None,
                 tools=None,
                 tool_resources=None,
                 metadata=None,
                 temperature=None,
                 top_p=None,
                 max_completion_tokens=None,
                 max_prompt_tokens=None,
                 truncation_strategy=None,
                 incomplete_details=None,
                 usage=None,
                 response_format=None,
                 tool_choice=None,
                 parallel_tool_calls=None):
        """Constructor for the GetRun class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.created_at = created_at 
        self.assistant_id = assistant_id 
        self.thread_id = thread_id 
        self.status = status 
        self.started_at = started_at 
        self.expires_at = expires_at 
        self.cancelled_at = cancelled_at 
        self.failed_at = failed_at 
        self.completed_at = completed_at 
        self.required_action = required_action 
        self.last_error = last_error 
        self.model = model 
        self.instructions = instructions 
        self.tools = tools 
        self.tool_resources = tool_resources 
        self.metadata = metadata 
        self.temperature = temperature 
        self.top_p = top_p 
        self.max_completion_tokens = max_completion_tokens 
        self.max_prompt_tokens = max_prompt_tokens 
        self.truncation_strategy = truncation_strategy 
        self.incomplete_details = incomplete_details 
        self.usage = usage 
        self.response_format = response_format 
        self.tool_choice = tool_choice 
        self.parallel_tool_calls = parallel_tool_calls 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        created_at = dictionary.get("created_at") if dictionary.get("created_at") else None
        assistant_id = dictionary.get("assistant_id") if dictionary.get("assistant_id") else None
        thread_id = dictionary.get("thread_id") if dictionary.get("thread_id") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        started_at = dictionary.get("started_at") if dictionary.get("started_at") else None
        expires_at = dictionary.get("expires_at") if dictionary.get("expires_at") else None
        cancelled_at = dictionary.get("cancelled_at") if dictionary.get("cancelled_at") else None
        failed_at = dictionary.get("failed_at") if dictionary.get("failed_at") else None
        completed_at = dictionary.get("completed_at") if dictionary.get("completed_at") else None
        required_action = dictionary.get("required_action") if dictionary.get("required_action") else None
        last_error = dictionary.get("last_error") if dictionary.get("last_error") else None
        model = dictionary.get("model") if dictionary.get("model") else None
        instructions = dictionary.get("instructions") if dictionary.get("instructions") else None
        tools = None
        if dictionary.get('tools') is not None:
            tools = [Tool1.from_dictionary(x) for x in dictionary.get('tools')]
        tool_resources = dictionary.get("tool_resources") if dictionary.get("tool_resources") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        temperature = dictionary.get("temperature") if dictionary.get("temperature") else None
        top_p = dictionary.get("top_p") if dictionary.get("top_p") else None
        max_completion_tokens = dictionary.get("max_completion_tokens") if dictionary.get("max_completion_tokens") else None
        max_prompt_tokens = dictionary.get("max_prompt_tokens") if dictionary.get("max_prompt_tokens") else None
        truncation_strategy = TruncationStrategy.from_dictionary(dictionary.get('truncation_strategy')) if dictionary.get('truncation_strategy') else None
        incomplete_details = dictionary.get("incomplete_details") if dictionary.get("incomplete_details") else None
        usage = Usage10.from_dictionary(dictionary.get('usage')) if dictionary.get('usage') else None
        response_format = dictionary.get("response_format") if dictionary.get("response_format") else None
        tool_choice = dictionary.get("tool_choice") if dictionary.get("tool_choice") else None
        parallel_tool_calls = dictionary.get("parallel_tool_calls") if "parallel_tool_calls" in dictionary.keys() else None
        # Return an object of this model
        return cls(id,
                   object,
                   created_at,
                   assistant_id,
                   thread_id,
                   status,
                   started_at,
                   expires_at,
                   cancelled_at,
                   failed_at,
                   completed_at,
                   required_action,
                   last_error,
                   model,
                   instructions,
                   tools,
                   tool_resources,
                   metadata,
                   temperature,
                   top_p,
                   max_completion_tokens,
                   max_prompt_tokens,
                   truncation_strategy,
                   incomplete_details,
                   usage,
                   response_format,
                   tool_choice,
                   parallel_tool_calls)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'created_at={self.created_at!r}, '
                f'assistant_id={self.assistant_id!r}, '
                f'thread_id={self.thread_id!r}, '
                f'status={self.status!r}, '
                f'started_at={self.started_at!r}, '
                f'expires_at={self.expires_at!r}, '
                f'cancelled_at={self.cancelled_at!r}, '
                f'failed_at={self.failed_at!r}, '
                f'completed_at={self.completed_at!r}, '
                f'required_action={self.required_action!r}, '
                f'last_error={self.last_error!r}, '
                f'model={self.model!r}, '
                f'instructions={self.instructions!r}, '
                f'tools={self.tools!r}, '
                f'tool_resources={self.tool_resources!r}, '
                f'metadata={self.metadata!r}, '
                f'temperature={self.temperature!r}, '
                f'top_p={self.top_p!r}, '
                f'max_completion_tokens={self.max_completion_tokens!r}, '
                f'max_prompt_tokens={self.max_prompt_tokens!r}, '
                f'truncation_strategy={self.truncation_strategy!r}, '
                f'incomplete_details={self.incomplete_details!r}, '
                f'usage={self.usage!r}, '
                f'response_format={self.response_format!r}, '
                f'tool_choice={self.tool_choice!r}, '
                f'parallel_tool_calls={self.parallel_tool_calls!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'created_at={self.created_at!s}, '
                f'assistant_id={self.assistant_id!s}, '
                f'thread_id={self.thread_id!s}, '
                f'status={self.status!s}, '
                f'started_at={self.started_at!s}, '
                f'expires_at={self.expires_at!s}, '
                f'cancelled_at={self.cancelled_at!s}, '
                f'failed_at={self.failed_at!s}, '
                f'completed_at={self.completed_at!s}, '
                f'required_action={self.required_action!s}, '
                f'last_error={self.last_error!s}, '
                f'model={self.model!s}, '
                f'instructions={self.instructions!s}, '
                f'tools={self.tools!s}, '
                f'tool_resources={self.tool_resources!s}, '
                f'metadata={self.metadata!s}, '
                f'temperature={self.temperature!s}, '
                f'top_p={self.top_p!s}, '
                f'max_completion_tokens={self.max_completion_tokens!s}, '
                f'max_prompt_tokens={self.max_prompt_tokens!s}, '
                f'truncation_strategy={self.truncation_strategy!s}, '
                f'incomplete_details={self.incomplete_details!s}, '
                f'usage={self.usage!s}, '
                f'response_format={self.response_format!s}, '
                f'tool_choice={self.tool_choice!s}, '
                f'parallel_tool_calls={self.parallel_tool_calls!s})')
