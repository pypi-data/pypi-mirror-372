---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/cross_package_mixed_import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
core = _cribo.types.SimpleNamespace(__name__='core')
core_database = _cribo.types.SimpleNamespace(__name__='core.database')
core.database = core_database
core_utils = _cribo.types.SimpleNamespace(__name__='core.utils')
core.utils = core_utils
core_version = _cribo.types.SimpleNamespace(__name__='core.version')
core.version = core_version
models = _cribo.types.SimpleNamespace(__name__='models')
models_base = _cribo.types.SimpleNamespace(__name__='models.base')
models.base = models_base
models_user = _cribo.types.SimpleNamespace(__name__='models.user')
models.user = models_user
CORE_MODEL_VERSION = "1.0.0"
class BaseModel:
    """Base model class."""

    def __init__(self, name: str):
        if not name or name.startswith("_"):
            raise ValueError(f"Invalid model name: {name}")
        self.name = name
        self.version = "1.0.0"

    def get_info(self):
        """Get model information."""
        return {"name": self.name, "type": "base", "model_version": self.version}
def process_user(name: str) -> str:
    """Process a user-related string.\n\n    This function is imported by core.database.connection,\n    demonstrating a cross-package absolute import.\n    """
    return f"user_{name}_processed"
def set_config_reference(config):
    """Set the configuration reference - called by parent package."""
    global _module_config
    _module_config = config
def get_config():
    """Get the current configuration."""
    if _module_config is None:
        return {"debug": False}
    return _module_config.copy()
def is_debug():
    """Check if debug mode is enabled."""
    if _module_config is None:
        return False
    return _module_config.get("debug", False)
def validate(value: str) -> bool:
    """Validate a string value.\n\n    This function is imported by core.database.connection using\n    a relative import (..utils.helpers), demonstrating relative\n    imports within the same package hierarchy.\n    """
    return bool(value and not value.startswith("_"))
"""User model providing cross-package functionality."""
"""Base model module."""
BaseModel.__module__ = 'models.base'
"""Configuration utilities for the core package."""
"""Version module separate from __init__ to avoid circular imports."""
"""Helper utilities for the core package."""
core_utils_config = _cribo.types.SimpleNamespace(__name__='core.utils.config')
core_utils.config = core_utils_config
core_utils_helpers = _cribo.types.SimpleNamespace(__name__='core.utils.helpers')
core_utils.helpers = core_utils_helpers
_cribo_core__initialized = None
_cribo_core__config = None
_cribo_models__base_model = None
@_cribo.functools.cache
def _cribo_init___cribo_f00e4b_core():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'core'
    global _cribo_core__config, _cribo_core__initialized
    """Core package with initialization logic and cross-package imports."""
    _initialized = False
    _cribo_core__initialized = _initialized
    _cribo_module._initialized = _cribo_core__initialized
    _config = {"debug": False}
    _cribo_core__config = _config
    _cribo_module._config = _cribo_core__config
    _cribo_module.CORE_MODEL_VERSION = CORE_MODEL_VERSION
    _cribo_module.validate = validate
    _cribo_module.get_config = get_config
    _cribo_module.set_config_reference = set_config_reference
    set_config_reference(_cribo_module._config)

    def initialize_core(debug=False):
        """Initialize the core package with configuration."""
        global _cribo_core__initialized, _cribo_core__config
        _cribo_core__initialized = True
        _cribo_module._initialized = _cribo_core__initialized
        _cribo_core__config["debug"] = debug
        if debug:
            print(f"Core initialized with version: {CORE_MODEL_VERSION}")
        return _cribo_core__initialized
    _cribo_module.initialize_core = initialize_core

    def is_initialized():
        """Check if core is initialized."""
        return _cribo_module._initialized
    _cribo_module.is_initialized = is_initialized
    _cribo_module.version = core_version
    _cribo_module.utils = core_utils
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_563ea2_models():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'models'
    global _cribo_models__base_model
    """Models package with conditional imports and circular dependency handling."""
    sys = _cribo.sys
    _cribo_module.sys = sys
    _VERSION = "1.0.0"
    _cribo_module._VERSION = _VERSION

    def get_model_version():
        """Get the models package version."""
        return _cribo_module._VERSION
    _cribo_module.get_model_version = get_model_version
    if _cribo.sys.version_info >= (3, 9):
        TypeAlias = _cribo.typing.TypeAlias
        _cribo_module.TypeAlias = TypeAlias
        ModelID: _cribo.typing.TypeAlias = str
    else:
        ModelID = str
        _cribo_module.ModelID = ModelID
    _base_model = None
    _cribo_models__base_model = _base_model
    _cribo_module._base_model = _cribo_models__base_model

    def get_base_model():
        """Lazy import of BaseModel to avoid circular imports."""
        global _cribo_models__base_model
        if _cribo_models__base_model is None:
            _cribo_module.BaseModel = BaseModel
            _cribo_models__base_model = BaseModel
        return _cribo_models__base_model
    _cribo_module.get_base_model = get_base_model
    _cribo_module.process_user = process_user
    DEFAULT_MODEL_CONFIG = {"version": _cribo_module._VERSION, "features": ["user_processing", "lazy_loading"]}
    _cribo_module.DEFAULT_MODEL_CONFIG = DEFAULT_MODEL_CONFIG
    try:
        from models.advanced import AdvancedModel
        _cribo_module.AdvancedModel = AdvancedModel
        HAS_ADVANCED = True
        _cribo_module.HAS_ADVANCED = HAS_ADVANCED
        DEFAULT_MODEL_CONFIG["features"].append("advanced_model")
    except ImportError:
        HAS_ADVANCED = False
        _cribo_module.HAS_ADVANCED = HAS_ADVANCED
        AdvancedModel = None
        _cribo_module.AdvancedModel = AdvancedModel
    __all__ = ["get_model_version", "process_user", "get_base_model", "ModelID", "DEFAULT_MODEL_CONFIG", "HAS_ADVANCED"]
    if HAS_ADVANCED:
        __all__.append("AdvancedModel")
    _cribo_module.user = models_user
    _cribo_module.base = models_base
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_1f0c3d_core_database_connection():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'core.database.connection'
    """Database connection module demonstrating mixed import patterns.\n\nThis module combines:\n1. Absolute import from a different package (models.user)\n2. Relative import from within the same package (..utils.helpers)\n3. Import from parent package's version module (not __init__.py)\n4. No imports from parent package's __init__.py to avoid circular dependencies\n"""
    _cribo_module.process_user = process_user
    _cribo_module.helper_validate = validate
    helper_validate = validate
    _cribo_module.CORE_MODEL_VERSION = CORE_MODEL_VERSION
    models = _cribo_init___cribo_563ea2_models()
    DEFAULT_MODEL_CONFIG = models.DEFAULT_MODEL_CONFIG
    _cribo_module.DEFAULT_MODEL_CONFIG = DEFAULT_MODEL_CONFIG
    get_base_model = models.get_base_model
    _cribo_module.get_base_model = get_base_model
    _connection_types = ["standard", "pooled", "async"]
    _cribo_module._connection_types = _connection_types
    CONNECTION_METADATA = {"supported_types": _cribo_module._connection_types, "validator": helper_validate.__name__, "processor": process_user.__name__, "core_version": CORE_MODEL_VERSION, "model_config": DEFAULT_MODEL_CONFIG}
    _cribo_module.CONNECTION_METADATA = CONNECTION_METADATA

    class Connection:
        """Connection class using mixed imports."""

        def __init__(self, database_name: str):
            if not helper_validate(database_name) or any(char in database_name for char in ["/", "\\", ":"]):
                raise ValueError(f"Invalid database name: {database_name}")
            self.name = process_user(database_name)
            self.metadata = CONNECTION_METADATA.copy()
            if database_name.startswith("model_"):
                BaseModel = get_base_model()
                self.model = BaseModel(database_name)
                self.metadata["model_info"] = self.model.get_info()

        def __str__(self):
            return f"Connection to {self.name}"
    Connection.__module__ = 'core.database.connection'
    _cribo_module.Connection = Connection

    def connect(database_name: str) -> Connection:
        """Create a new database connection."""
        return Connection(database_name)
    _cribo_module.connect = connect

    def get_connection_info() -> dict:
        """Get general connection information."""
        _cribo_module.is_debug = is_debug
        info = {"metadata": _cribo_module.CONNECTION_METADATA, "debug_mode": is_debug(), "available_validators": ["validate_db_name", helper_validate.__name__]}
        if is_debug():
            _cribo_module.get_full_config = get_config
            get_full_config = get_config
            info["config"] = get_full_config()
        return info
    _cribo_module.get_connection_info = get_connection_info
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_782908_core_database():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'core.database'
    """Database subpackage with import-time initialization and re-exports."""
    _cribo_module.validate = validate
    _registered_types = []
    _cribo_module._registered_types = _registered_types

    def _register_type(type_name):
        """Internal function to register database types."""
        _cribo_module._registered_types.append(type_name)
        return type_name
    _cribo_module._register_type = _register_type
    _register_type("connection")
    _register_type("cursor")

    def validate_db_name(name: str) -> bool:
        """Validate database name with additional rules."""
        if not validate(name):
            return False
        return not any(char in name for char in ["/", "\\", ":"])
    _cribo_module.validate_db_name = validate_db_name
    core.database.connection = _cribo_init___cribo_1f0c3d_core_database_connection()
    connect = core.database.connection.connect
    _cribo_module.connect = connect
    get_connection_info = core.database.connection.get_connection_info
    _cribo_module.get_connection_info = get_connection_info

    def safe_connect(database_name: str) -> str:
        """Connect only if core is initialized."""
        __cribo_init_result = _cribo_init___cribo_f00e4b_core()
        for attr in dir(__cribo_init_result):
            if not attr.startswith('_'):
                setattr(core, attr, getattr(__cribo_init_result, attr))
        is_initialized = core.is_initialized
        if not is_initialized():
            raise RuntimeError("Core package must be initialized before connecting")
        return connect(database_name)
    _cribo_module.safe_connect = safe_connect
    return _cribo_module
models_user.process_user = process_user
models_base.BaseModel = BaseModel
core_utils_config.set_config_reference = set_config_reference
core_utils_config.get_config = get_config
core_utils_config.is_debug = is_debug
core_version.CORE_MODEL_VERSION = CORE_MODEL_VERSION
core_utils_helpers.validate = validate
"""Test fixture demonstrating cross-package mixed import patterns.\n\nThis tests the specific pattern where a module uses both:\n1. Deep absolute imports crossing package boundaries (e.g., from models.user)\n2. Relative imports within its package (e.g., from ..utils.helpers)\n3. Import order dependencies with __init__.py files\n"""
__cribo_init_result = _cribo_init___cribo_f00e4b_core()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(core, attr, getattr(__cribo_init_result, attr))
initialize_core = core.initialize_core
__cribo_init_result = _cribo_init___cribo_782908_core_database()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(core.database, attr, getattr(__cribo_init_result, attr))
db_connect = core.database.connect
core.database.connection = _cribo_init___cribo_1f0c3d_core_database_connection()
connect = core.database.connection.connect
get_connection_info = core.database.connection.get_connection_info
CONNECTION_METADATA = core.database.connection.CONNECTION_METADATA
models = _cribo_init___cribo_563ea2_models()
get_model_version = models.get_model_version
DEFAULT_MODEL_CONFIG = models.DEFAULT_MODEL_CONFIG
HAS_ADVANCED = models.HAS_ADVANCED
__cribo_init_result = _cribo_init___cribo_f00e4b_core()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(core, attr, getattr(__cribo_init_result, attr))
def demonstrate_import_patterns():
    """Demonstrate various import pattern behaviors."""
    print("=== Import Pattern Demonstration ===")
    print(f"\n1. Import-time values:")
    print(f"   - Model version from models package: {get_model_version()}")
    print(f"   - Core model version: {CONNECTION_METADATA['core_version']}")
    print(f"   - Model config features: {DEFAULT_MODEL_CONFIG['features']}")
    print(f"   - Has advanced model: {HAS_ADVANCED}")
    print(f"\n2. Pre-initialization state:")
    print(f"   - Config before init: {get_config()}")
    initialize_core(debug=True)
    print(f"\n3. Post-initialization state:")
    print(f"   - Config after init: {get_config()}")
    print(f"\n4. Testing connections:")
    conn1 = connect("test_db")
    print(f"   - Direct import: {conn1}")
    conn2 = db_connect("prod_db")
    print(f"   - Package-level import: {conn2}")
    conn3 = connect("model_user_db")
    print(f"   - With lazy import: {conn3}")
    info = get_connection_info()
    print(f"\n5. Connection info shows all imports:")
    print(f"   - Debug mode: {info['debug_mode']}")
    print(f"   - Available validators: {info['available_validators']}")
    print(f"   - Metadata processor: {info['metadata']['processor']}")
    print(f"   - Config included: {'config' in info}")
    return info
def main():
    """Main entry point."""
    results = demonstrate_import_patterns()
    print(f"\n6. Package-level re-exports:")
    print(f"   - validate('test'): {validate('test')}")
    print(f"   - validate('_hidden'): {validate('_hidden')}")
    return results
if __name__ == "__main__":
    result = main()
    print(f"\n=== Final Result ===")
    print(f"Successfully demonstrated cross-package mixed import patterns")
