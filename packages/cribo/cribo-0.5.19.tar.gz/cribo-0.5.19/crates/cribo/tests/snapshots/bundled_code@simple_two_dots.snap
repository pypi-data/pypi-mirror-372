---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/simple_two_dots/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
ANIMAL = "cat"
def tada() -> str:
    return f"Tada {ANIMAL}!"
foo = _cribo.types.SimpleNamespace(__name__='foo')
foo_boo = _cribo.types.SimpleNamespace(__name__='foo.boo')
foo.boo = foo_boo
foo_boo___main__ = _cribo.types.SimpleNamespace(__name__='foo.boo.__main__')
foo_boo.__main__ = foo_boo___main__
foo_zoo = _cribo.types.SimpleNamespace(__name__='foo.zoo')
foo.zoo = foo_zoo
foo_boo___main__.tada = tada
foo_zoo.ANIMAL = ANIMAL
if __name__ == "__main__":
    print(tada())
