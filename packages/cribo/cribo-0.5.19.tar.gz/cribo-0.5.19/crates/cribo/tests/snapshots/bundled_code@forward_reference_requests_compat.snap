---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/forward_reference_requests_compat/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
myrequests = _cribo.types.SimpleNamespace(__name__='myrequests')
@_cribo.functools.cache
def _cribo_init___cribo_5ad29b_myrequests_compat():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'myrequests.compat'
    """Compat module that provides base classes and utilities used by other modules."""
    try:
        import simplejson as json
        _cribo_module.json = json
    except ImportError:
        json = _cribo.json
        _cribo_module.json = json
    if hasattr(_cribo.json, "JSONDecodeError"):
        JSONDecodeError = _cribo.json.JSONDecodeError
        _cribo_module.JSONDecodeError = JSONDecodeError
    else:
        JSONDecodeError = ValueError
        _cribo_module.JSONDecodeError = JSONDecodeError
    MutableMapping = _cribo.collections.abc.MutableMapping
    _cribo_module.MutableMapping = MutableMapping
    Mapping = _cribo.collections.abc.Mapping
    _cribo_module.Mapping = Mapping
    cookielib = _cribo.http.cookiejar
    _cribo_module.cookielib = cookielib
    builtin_str = str
    _cribo_module.builtin_str = builtin_str
    basestring = str, bytes
    _cribo_module.basestring = basestring
    urlparse = _cribo.urllib.parse.urlparse
    _cribo_module.urlparse = urlparse
    urlunparse = _cribo.urllib.parse.urlunparse
    _cribo_module.urlunparse = urlunparse
    urljoin = _cribo.urllib.parse.urljoin
    _cribo_module.urljoin = urljoin
    _cribo_module.MutableMapping = _cribo.collections.abc.MutableMapping
    _cribo_module.Mapping = _cribo.collections.abc.Mapping
    _cribo_module.cookielib = _cribo.http.cookiejar
    _cribo_module.urlparse = _cribo.urllib.parse.urlparse
    _cribo_module.urlunparse = _cribo.urllib.parse.urlunparse
    _cribo_module.urljoin = _cribo.urllib.parse.urljoin
    return _cribo_module
myrequests.compat = _cribo_init___cribo_5ad29b_myrequests_compat()
class RequestException(Exception):
    """Base exception for all request errors."""
    pass
class InvalidJSONError(RequestException):
    """A JSON error occurred."""
    pass
class JSONDecodeError(InvalidJSONError, myrequests.compat.JSONDecodeError):
    """Couldn't decode the text into json."""
    pass
class CookieJar(myrequests.compat.cookielib.CookieJar, myrequests.compat.MutableMapping):
    """A cookie jar that also implements the MutableMapping interface."""

    def __init__(self):
        super().__init__()
        self._cookies = {}

    def __getitem__(self, name):
        return self._cookies[name]

    def __setitem__(self, name, value):
        self._cookies[name] = value

    def __delitem__(self, name):
        del self._cookies[name]

    def __iter__(self):
        return iter(self._cookies)

    def __len__(self):
        return len(self._cookies)

    def get(self, name, default=None):
        return self._cookies.get(name, default)

    def set(self, name, value):
        self._cookies[name] = value
def decode_json(content):
    """Decode JSON content."""
    try:
        return _cribo.json.loads(content)
    except (ValueError, TypeError) as e:
        OurJSONDecodeError = JSONDecodeError
        raise OurJSONDecodeError(str(e))
def to_native_string(string):
    """Convert to native string type."""
    if isinstance(string, myrequests.compat.builtin_str):
        return string
    return str(string)
"""Main package that imports from multiple submodules."""
"""Utils module that also uses compat."""
RequestException.__module__ = 'myrequests.exceptions'
InvalidJSONError.__module__ = 'myrequests.exceptions'
JSONDecodeError.__module__ = 'myrequests.exceptions'
"""Exceptions module that uses compat types in class inheritance."""
CookieJar.__module__ = 'myrequests.cookies'
"""Cookies module that uses compat's MutableMapping in class inheritance."""
myrequests_utils = _cribo.types.SimpleNamespace(__name__='myrequests.utils')
myrequests.utils = myrequests_utils
myrequests_exceptions = _cribo.types.SimpleNamespace(__name__='myrequests.exceptions')
myrequests.exceptions = myrequests_exceptions
myrequests_cookies = _cribo.types.SimpleNamespace(__name__='myrequests.cookies')
myrequests.cookies = myrequests_cookies
myrequests.compat = _cribo_init___cribo_5ad29b_myrequests_compat()
cookies = myrequests_cookies
exceptions = myrequests_exceptions
utils = myrequests_utils
compat = myrequests.compat
myrequests_cookies.CookieJar = CookieJar
myrequests_exceptions.InvalidJSONError = InvalidJSONError
myrequests_exceptions.JSONDecodeError = JSONDecodeError
myrequests_exceptions.RequestException = RequestException
myrequests_utils.decode_json = decode_json
myrequests_utils.to_native_string = to_native_string
"""Test that mimics requests' pattern causing forward reference."""
myrequests.CookieJar = CookieJar
myrequests.JSONDecodeError = JSONDecodeError
jar = myrequests.CookieJar()
jar.set("test", "value")
print(f"Cookie: {jar.get('test')}")
print(f"JSONDecodeError MRO: {[c.__name__ for c in myrequests.JSONDecodeError.__mro__]}")
print("Test completed")
