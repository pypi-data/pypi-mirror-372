---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/circular_import_function_reference/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
class BaseModel:
    """Base model class."""

    def __init__(self):
        self.model_type = "base"

    def get_adapter_class(self):
        """Reference to adapter class (creates circular dependency)."""
        return _adapters_module.Adapter if hasattr(_adapters_module, "Adapter") else None
class Adapter(BaseModel):
    """Adapter class that uses auth functionality."""

    def __init__(self):
        super().__init__()
        self.auth_header = None

    def use_auth(self, username, password):
        """Use the imported auth function."""
        self.auth_header = _basic_auth_str(username, password)
        print(f"Auth header set: {self.auth_header}")
        return self.auth_header
def _basic_auth_str(username, password):
    """Returns a basic auth string."""
    formatted = utils.format_credentials(username, password)
    return f"Basic {formatted}"
def format_credentials(username, password):
    """Format credentials for auth."""
    if BaseModel:
        return f"{username}:{password}"
    return ""
"""Auth module that defines a utility function."""
"""Utils module that completes the circular chain."""
BaseModel.__module__ = 'pkg.models'
"""Models module that creates part of the circular chain."""
Adapter.__module__ = 'pkg.adapters'
"""Adapters module that imports a function from auth."""
pkg = _cribo.types.SimpleNamespace(__name__='pkg')
pkg_auth = _cribo.types.SimpleNamespace(__name__='pkg.auth')
pkg.auth = pkg_auth
pkg_utils = _cribo.types.SimpleNamespace(__name__='pkg.utils')
pkg.utils = pkg_utils
pkg_models = _cribo.types.SimpleNamespace(__name__='pkg.models')
pkg.models = pkg_models
pkg_adapters = _cribo.types.SimpleNamespace(__name__='pkg.adapters')
pkg.adapters = pkg_adapters
adapters = pkg_adapters
auth = pkg_auth
utils = pkg_utils
_adapters_module = pkg_adapters
pkg_adapters.Adapter = Adapter
pkg_utils.format_credentials = format_credentials
pkg_auth._basic_auth_str = _basic_auth_str
pkg_models.BaseModel = BaseModel
"""Test fixture for circular import with function reference issue.\n\nThis reproduces the _basic_auth_str issue from requests where a function\ndefined in one module (auth) is imported by another module (adapters),\nbut due to circular dependencies, the function is not available when needed.\n"""
adapter = pkg.adapters.Adapter()
adapter.use_auth("user", "pass")
print("SUCCESS: Function was properly available")
