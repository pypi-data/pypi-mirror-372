---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/private_module_vars/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
pkg = _cribo.types.SimpleNamespace(__name__='pkg')
@_cribo.functools.cache
def _cribo_init___cribo_73cafd_pkg__internal():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'pkg._internal'
    """Internal module with private variables."""
    re = _cribo.re
    _cribo_module.re = re
    _VALID_HEADER_NAME_RE_BYTE = _cribo.re.compile(rb"^[^:\s][^:\r\n]*$")
    _cribo_module._VALID_HEADER_NAME_RE_BYTE = _VALID_HEADER_NAME_RE_BYTE
    _VALID_HEADER_NAME_RE_STR = _cribo.re.compile(r"^[^:\s][^:\r\n]*$")
    _cribo_module._VALID_HEADER_NAME_RE_STR = _VALID_HEADER_NAME_RE_STR
    _VALID_HEADER_VALUE_RE_BYTE = _cribo.re.compile(rb"^\S[^\r\n]*$|^$")
    _cribo_module._VALID_HEADER_VALUE_RE_BYTE = _VALID_HEADER_VALUE_RE_BYTE
    _VALID_HEADER_VALUE_RE_STR = _cribo.re.compile(r"^\S[^\r\n]*$|^$")
    _cribo_module._VALID_HEADER_VALUE_RE_STR = _VALID_HEADER_VALUE_RE_STR
    _HEADER_VALIDATORS_STR = _cribo_module._VALID_HEADER_NAME_RE_STR, _cribo_module._VALID_HEADER_VALUE_RE_STR
    _cribo_module._HEADER_VALIDATORS_STR = _HEADER_VALIDATORS_STR
    _HEADER_VALIDATORS_BYTE = _cribo_module._VALID_HEADER_NAME_RE_BYTE, _cribo_module._VALID_HEADER_VALUE_RE_BYTE
    _cribo_module._HEADER_VALIDATORS_BYTE = _HEADER_VALIDATORS_BYTE
    HEADER_VALIDATORS = {bytes: _cribo_module._HEADER_VALIDATORS_BYTE, str: _cribo_module._HEADER_VALIDATORS_STR}
    _cribo_module.HEADER_VALIDATORS = HEADER_VALIDATORS

    def process_headers(headers):
        """Example function that uses the validators."""
        return f"Processing {len(headers)} headers with validators"
    _cribo_module.process_headers = process_headers
    return _cribo_module
pkg._internal = _cribo_init___cribo_73cafd_pkg__internal()
def get_validators():
    """Return the validators."""
    assert pkg._internal._HEADER_VALIDATORS_BYTE is not None
    assert pkg._internal._HEADER_VALIDATORS_STR is not None
    return pkg._internal.HEADER_VALIDATORS
def validate_header(header_type, header_data):
    """Use the imported private variables."""
    if header_type == bytes:
        validators = pkg._internal._HEADER_VALIDATORS_BYTE
    else:
        validators = pkg._internal._HEADER_VALIDATORS_STR
    name_re, value_re = validators
    return f"Validated with {name_re.pattern}"
"""Consumer module that imports private variables from _internal module."""
pkg_consumer = _cribo.types.SimpleNamespace(__name__='pkg.consumer')
pkg.consumer = pkg_consumer
pkg._internal = _cribo_init___cribo_73cafd_pkg__internal()
pkg_consumer.get_validators = get_validators
pkg_consumer.validate_header = validate_header
"""Test case for bundling modules that have private module variables accessed by other modules."""
validators = get_validators()
print(f"Got validators: {validators}")
assert isinstance(validators, dict)
assert bytes in validators
assert str in validators
assert len(validators[bytes]) == 2
assert len(validators[str]) == 2
print("âœ“ All tests passed!")
