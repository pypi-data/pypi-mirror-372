---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pyfail_relative_import_cycles/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
services = _cribo.types.SimpleNamespace(__name__='services')
services_auth = _cribo.types.SimpleNamespace(__name__='services.auth')
services.auth = services_auth
def get_user_context():
    """Get user context - used by database module"""
    return "user_context_from_auth"
def authenticate_user(username):
    """Authenticate user using database connection"""
    conn = get_connection()
    return f"auth({username}, conn={conn})"
def get_connection():
    """Get database connection with user context"""
    context = get_user_context()
    return f"db_connection(context={context})"
services_auth.get_user_context = get_user_context
services_auth.authenticate_user = authenticate_user
services_database = _cribo.types.SimpleNamespace(__name__='services.database')
services.database = services_database
services_database.get_connection = get_connection
auth = services_auth
def main():
    result = auth.authenticate_user("test_user")
    print(f"Relative import cycle result: {result}")
if __name__ == "__main__":
    main()
