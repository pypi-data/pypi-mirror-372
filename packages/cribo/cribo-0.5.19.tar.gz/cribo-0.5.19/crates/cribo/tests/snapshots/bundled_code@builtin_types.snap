---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/builtin_types/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
@_cribo.functools.cache
def _cribo_init___cribo_97f65c_compat_module():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'compat_module'
    """Module with side effects that assigns builtin types to variables.\n\nThis minimal test case reproduces the bug where builtin types are incorrectly\ntransformed to module.str, module.int, etc. when the bundler wraps modules\nwith side effects in init functions.\n"""
    print("Loading compat module...")
    str = __import__('builtins').str
    _cribo_module.str = str
    int = __import__('builtins').int
    _cribo_module.int = int
    bytes = __import__('builtins').bytes
    _cribo_module.bytes = bytes
    builtin_str = __import__('builtins').str
    _cribo_module.builtin_str = builtin_str
    builtin_int = __import__('builtins').int
    _cribo_module.builtin_int = builtin_int
    builtin_bytes = __import__('builtins').bytes
    _cribo_module.builtin_bytes = builtin_bytes
    basestring = __import__('builtins').str, __import__('builtins').bytes
    _cribo_module.basestring = basestring
    numeric_types = __import__('builtins').int, float
    _cribo_module.numeric_types = numeric_types
    return _cribo_module
"""Test that builtin type assignments work in modules with side effects."""
compat_module = _cribo_init___cribo_97f65c_compat_module()
builtin_str = compat_module.builtin_str
builtin_int = compat_module.builtin_int
basestring = compat_module.basestring
numeric_types = compat_module.numeric_types
assert builtin_str is str
assert builtin_int is int
assert builtin_str("test") == "test"
assert builtin_int("42") == 42
assert basestring == (str, bytes)
assert numeric_types == (int, float)
print("All tests passed!")
