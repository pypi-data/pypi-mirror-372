---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/wildcard_all_setattr/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
package = _cribo.types.SimpleNamespace(__name__='package')
package__subpackage = _cribo.types.SimpleNamespace(__name__='package._subpackage')
package._subpackage = package__subpackage
class MyClass:
    """A class exported through wildcards."""

    def __init__(self):
        self.value = "from module_a"
def my_function():
    """A function exported through wildcards."""
    return "from module_b"
"""Subpackage that re-exports from modules using wildcards."""
"""Module B with my_function."""
"""Module A with MyClass."""
MyClass.__module__ = 'package._subpackage.module_a'
package__subpackage.MyClass = MyClass
package__subpackage.my_function = my_function
package__subpackage_module_b = _cribo.types.SimpleNamespace(__name__='package._subpackage.module_b')
package__subpackage.module_b = package__subpackage_module_b
package__subpackage_module_a = _cribo.types.SimpleNamespace(__name__='package._subpackage.module_a')
package__subpackage.module_a = package__subpackage_module_a
@_cribo.functools.cache
def _cribo_init___cribo_cca96f_package():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'package'
    global MyClass, my_function
    _cribo_module.MyClass = MyClass
    _cribo_module.my_function = my_function
    """Package using wildcard imports and setattr pattern like httpx."""
    __all__ = ["MyClass", "my_function"]
    __locals = vars(_cribo_module)
    _cribo_module.__locals = __locals
    for __name in __all__:
        if not __name.startswith("__"):
            setattr(_cribo_module.__locals[__name], "__module__", "package")
    _cribo_module._subpackage = package__subpackage
    return _cribo_module
package = _cribo_init___cribo_cca96f_package()
package__subpackage_module_b.my_function = my_function
package__subpackage_module_a.MyClass = MyClass
"""Test wildcard imports with __all__ and setattr pattern."""
package = _cribo_init___cribo_cca96f_package()
MyClass = package.MyClass
my_function = package.my_function
obj = MyClass()
print(f"MyClass instance value: {obj.value}")
print(f"my_function result: {my_function()}")
print("Success!")
