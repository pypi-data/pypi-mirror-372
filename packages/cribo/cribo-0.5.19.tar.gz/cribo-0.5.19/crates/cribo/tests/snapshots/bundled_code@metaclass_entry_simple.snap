---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/metaclass_entry_simple/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
class BaseLoader:
    """Base loader class"""

    def __init__(self):
        self.name = "BaseLoader"
class Loader(BaseLoader):
    """Standard YAML loader"""

    def __init__(self):
        super().__init__()
        self.name = "Loader"
class FullLoader(BaseLoader):
    """Full featured YAML loader"""

    def __init__(self):
        super().__init__()
        self.name = "FullLoader"
BaseLoader.__module__ = 'loader'
Loader.__module__ = 'loader'
FullLoader.__module__ = 'loader'
"""\nTest case where entry file has metaclasses and wildcard imports.\nThis reproduces the PyYAML issue.\n"""
class YAMLObjectMetaclass(type):
    """The metaclass for YAMLObject."""

    def __init__(cls, name, bases, kwds):
        super().__init__(name, bases, kwds)
        print(f"Metaclass __init__ for {name}")
class YAMLObject(metaclass=YAMLObjectMetaclass):
    """\n    An object that can be serialized to/from YAML.\n    Uses wildcard-imported symbols in class body.\n    """
    yaml_loader = [Loader, FullLoader]

    def __repr__(self):
        return f"YAMLObject(loaders={len(self.yaml_loader)})"
print("Testing YAMLObject...")
obj = YAMLObject()
print(f"YAMLObject created: {obj}")
print(f"YAMLObject has metaclass: {type(YAMLObject).__name__}")
print("All tests passed!")
