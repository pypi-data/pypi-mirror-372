---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/all_variable_loop_reference/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypkg = _cribo.types.SimpleNamespace(__name__='mypkg')
mypkg__internal = _cribo.types.SimpleNamespace(__name__='mypkg._internal')
mypkg._internal = mypkg__internal
class MyClass:

    def __init__(self):
        self.value = "Hello from MyClass"
def my_func():
    return "Hello from my_func"
MyClass.__module__ = 'mypkg._internal'
@_cribo.functools.cache
def _cribo_init___cribo_4c9561_mypkg():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'mypkg'
    _cribo_module.MyClass = MyClass
    _cribo_module.my_func = my_func
    __all__ = ["MyClass", "my_func"]
    __locals = vars(_cribo_module)
    _cribo_module.__locals = __locals
    for __name in __all__:
        if not __name.startswith("__"):
            setattr(_cribo_module.__locals[__name], "__module__", "mypkg")
    _cribo_module._internal = mypkg__internal
    return _cribo_module
mypkg__internal.MyClass = MyClass
mypkg__internal.my_func = my_func
mypkg = _cribo_init___cribo_4c9561_mypkg()
obj = MyClass()
print(obj.value)
print(my_func())
