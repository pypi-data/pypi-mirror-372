---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/importlib_deduplication/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
package = _cribo.types.SimpleNamespace(__name__='package')
@_cribo.functools.cache
def _cribo_init___cribo_75ebb7_package_submodule():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'package.submodule'
    print("package/submodule.py is being executed!")
    sub_counter = 10
    _cribo_module.sub_counter = sub_counter
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_20ca72_package():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'package'
    print("package/__init__.py is being executed!")
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_26ef78_mymodule():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'mymodule'
    print("mymodule.py is being executed!")
    counter = 1
    _cribo_module.counter = counter
    test_value = "Original"
    _cribo_module.test_value = test_value
    return _cribo_module
"""Test how importlib.import_module handles sys.modules and deduplication"""
print("=== Testing importlib.import_module deduplication ===\n")
mymodule = _cribo_init___cribo_26ef78_mymodule()
mymodule2 = _cribo_init___cribo_26ef78_mymodule()
print(f"   Are they the same object? {mymodule is mymodule2}")
__cribo_init_result = _cribo_init___cribo_20ca72_package()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(package, attr, getattr(__cribo_init_result, attr))
package.submodule = _cribo_init___cribo_75ebb7_package_submodule()
submodule = package.submodule
submodule2 = _cribo_init___cribo_75ebb7_package_submodule()
print(f"   Are they the same object? {submodule is submodule2}")
submodule3 = _cribo_init___cribo_75ebb7_package_submodule()
print(f"   Are they the same object? {submodule is submodule3}")
print("\n=== Testing modification propagation ===")
mymodule.test_value = "Modified!"
print(f"Set mymodule.test_value = 'Modified!'")
print(f"mymodule2.test_value = {mymodule2.test_value}")
mymodule_new = _cribo_init___cribo_26ef78_mymodule()
print(f"After reimport mymodule_new.counter = {mymodule_new.counter}")
print(f"Are they the same object? {mymodule is mymodule_new}")
print(f"Original mymodule still has counter = {mymodule.counter}")
