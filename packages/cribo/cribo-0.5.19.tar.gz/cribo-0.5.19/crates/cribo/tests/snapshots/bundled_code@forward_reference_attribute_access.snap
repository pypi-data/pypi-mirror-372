---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/forward_reference_attribute_access/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
MyError = None
JSONDecodeError = _cribo.json.JSONDecodeError
class MyError(Exception):
    """Base error class"""
    pass
MyError.__module__ = 'mymodule.exceptions'
mymodule = _cribo.types.SimpleNamespace(__name__='mymodule')
mymodule_compat = _cribo.types.SimpleNamespace(__name__='mymodule.compat')
mymodule.compat = mymodule_compat
mymodule_exceptions = _cribo.types.SimpleNamespace(__name__='mymodule.exceptions')
mymodule.exceptions = mymodule_exceptions
mymodule_compat.JSONDecodeError = JSONDecodeError
mymodule_exceptions.MyError = MyError
CompatJSONDecodeError = JSONDecodeError
class CustomError(MyError, CompatJSONDecodeError):

    def __init__(self, *args):
        CompatJSONDecodeError.__init__(self, *args)
        MyError.__init__(self, str(self.args[0]) if self.args else "")
try:
    raise CustomError("Test error", "doc", 42)
except CustomError as e:
    print(f"Caught CustomError: {e}")
    print("SUCCESS")
