---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pyfail_three_module_cycle/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
def get_value_a():
    return "value_from_A"
def process_a():
    """Process A that depends on B"""
    return process_b() + "->A"
def process_b():
    """Process B that depends on C"""
    return process_c() + "->B"
def process_c():
    """Process C that depends back on A - creates the cycle"""
    value = get_value_a()
    return f"C(using_{value})"
module_a = _cribo.types.SimpleNamespace(__name__='module_a', get_value_a=get_value_a, process_a=process_a)
def main():
    result = module_a.process_a()
    print(f"Result: {result}")
if __name__ == "__main__":
    main()
