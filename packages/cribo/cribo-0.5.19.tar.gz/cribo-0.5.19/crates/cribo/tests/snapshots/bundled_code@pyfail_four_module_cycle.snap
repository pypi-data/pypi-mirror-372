---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/pyfail_four_module_cycle/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
def final_step():
    """Final step called by module_d to complete the cycle"""
    return "A_final"
def start_process():
    """Start the processing chain A -> B -> C -> D -> A"""
    return f"A({process_in_b()})"
def process_in_b():
    """Process in B, depends on C"""
    return f"B({process_in_c()})"
def process_in_c():
    """Process in C, depends on D"""
    return f"C({process_in_d()})"
def process_in_d():
    """Process in D, depends back on A - completes the 4-module cycle"""
    return f"D({final_step()})"
module_a = _cribo.types.SimpleNamespace(__name__='module_a', final_step=final_step, start_process=start_process)
def main():
    result = module_a.start_process()
    print(f"Four module cycle result: {result}")
if __name__ == "__main__":
    main()
