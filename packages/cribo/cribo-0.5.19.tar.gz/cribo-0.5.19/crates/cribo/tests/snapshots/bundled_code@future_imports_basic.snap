---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/future_imports_basic/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

from __future__ import annotations
import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
mypackage = _cribo.types.SimpleNamespace(__name__='mypackage')
mypackage_submodule = _cribo.types.SimpleNamespace(__name__='mypackage.submodule')
mypackage.submodule = mypackage_submodule
"""Submodule with future imports."""
"""Package initialization with future import."""
@_cribo.functools.cache
def _cribo_init___cribo_c3d681_mypackage_submodule_utils():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'mypackage.submodule.utils'
    Dict = _cribo.typing.Dict
    _cribo_module.Dict = Dict
    Any = _cribo.typing.Any
    _cribo_module.Any = Any
    Union = _cribo.typing.Union
    _cribo_module.Union = Union

    def validate_input(data: InputData) -> bool:
        """Validate input data structure.\n\n    Uses forward reference that requires future import.\n    """
        if not isinstance(data, dict):
            return False
        return "key" in data and isinstance(data.get("numbers"), list)
    _cribo_module.validate_input = validate_input

    def format_output(data: _cribo.typing.Any) -> FormattedOutput:
        """Format data for output."""
        return f"Formatted: {data}"
    _cribo_module.format_output = format_output
    InputData = _cribo.typing.Dict[str, _cribo.typing.Any]
    _cribo_module.InputData = InputData
    FormattedOutput = _cribo.typing.Union[str, _cribo.typing.Dict[str, _cribo.typing.Any]]
    _cribo_module.FormattedOutput = FormattedOutput
    _cribo_module.Dict = _cribo.typing.Dict
    _cribo_module.Any = _cribo.typing.Any
    _cribo_module.Union = _cribo.typing.Union
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_41d36f_mypackage_core():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'mypackage.core'
    Dict = _cribo.typing.Dict
    _cribo_module.Dict = Dict
    List = _cribo.typing.List
    _cribo_module.List = List
    Any = _cribo.typing.Any
    _cribo_module.Any = Any

    def process_data(data: _cribo.typing.Dict[str, _cribo.typing.Any]) -> _cribo.typing.Dict[str, _cribo.typing.Any]:
        """Process input data and return results.\n\n    This function uses forward references in type hints.\n    """
        result: ProcessingResult = {"input": data, "processed": True, "output": _transform_data(data)}
        return result
    _cribo_module.process_data = process_data

    def _transform_data(data: _cribo.typing.Dict[str, _cribo.typing.Any]) -> _cribo.typing.List[str]:
        """Transform data into list format."""
        return [f"{k}={v}" for k, v in data.items()]
    _cribo_module._transform_data = _transform_data
    ProcessingResult = _cribo.typing.Dict[str, _cribo.typing.Any]
    _cribo_module.ProcessingResult = ProcessingResult
    _cribo_module.Dict = _cribo.typing.Dict
    _cribo_module.List = _cribo.typing.List
    _cribo_module.Any = _cribo.typing.Any
    return _cribo_module
mypackage.core = _cribo_init___cribo_41d36f_mypackage_core()
mypackage.submodule.utils = _cribo_init___cribo_c3d681_mypackage_submodule_utils()
process_data = mypackage.core.process_data
validate_input = mypackage.submodule.utils.validate_input
def main() -> None:
    """Main function with type annotations that require future import."""
    data = {"key": "value", "numbers": [1, 2, 3]}
    if validate_input(data):
        result = process_data(data)
        print(f"Processing result: {result}")
    else:
        print("Invalid input data")
if __name__ == "__main__":
    main()
