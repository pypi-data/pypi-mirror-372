---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/symlink_multi_circular/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
def from_e():
    return "E(->A)"
def from_c():
    return "C(->A)"
def start_chain():
    return f"A -> {from_b()}"
def from_d():
    return f"D(->B) -> {from_e()}"
def continue_chain():
    return from_d()
def from_b():
    return f"B -> {from_c()} -> {continue_chain()}"
def start_chain_link_e():
    return f"A -> {from_b()}"
def from_c_link_e():
    return "C(->A)"
def from_e_link_e():
    return "E(->A)"
def from_b_link_d():
    return f"B -> {from_c()} -> {continue_chain()}"
def continue_chain_link_d():
    return from_d()
def from_d_link_d():
    return f"D(->B) -> {from_e()}"
def start_chain_link_c():
    return f"A -> {from_b()}"
def from_c_link_c():
    return "C(->A)"
def from_e_link_c():
    return "E(->A)"
from_e = from_e_link_e
print("Testing multi-symlink circular dependency")
result = start_chain()
print(f"Chain result: {result}")
print("SUCCESS: Multi-symlink circular dependency handled!")
