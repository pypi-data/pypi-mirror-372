---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/module_first_resolution/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
@_cribo.functools.cache
def _cribo_init___cribo_e25798_foo():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'foo'
    source = "foo/__init__.py (package)"
    _cribo_module.source = source
    value = "CORRECT - package"
    _cribo_module.value = value
    print("Successfully imported foo package")
    return _cribo_module
foo = _cribo_init___cribo_e25798_foo()
print(f"Imported foo from: {foo.source}")
print(f"foo.value = {foo.value}")
