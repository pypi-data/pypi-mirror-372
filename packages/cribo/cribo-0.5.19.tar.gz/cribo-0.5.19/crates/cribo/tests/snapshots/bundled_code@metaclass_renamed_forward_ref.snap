---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/metaclass_renamed_forward_ref/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
@_cribo.functools.cache
def _cribo_init___cribo_c0fc3d_other():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'other'
    """Another module with similar class names to trigger renaming."""

    class MyMetaclass(type):
        """Another metaclass with the same name."""

        def __init__(cls, name, bases, kwds):
            super(MyMetaclass, cls).__init__(name, bases, kwds)
            cls.other_attr = "from other"
    MyMetaclass.__module__ = 'other'
    _cribo_module.MyMetaclass = MyMetaclass

    class MyObject(metaclass=MyMetaclass):
        """Another class with the same name."""

        def __repr__(self):
            return f"OtherMyObject(other_attr={self.other_attr})"
    MyObject.__module__ = 'other'
    _cribo_module.MyObject = MyObject
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_a6386c_base():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'base'
    """Base module with metaclass definitions."""

    class MyMetaclass(type):
        """A metaclass that adds attributes."""

        def __init__(cls, name, bases, kwds):
            super(MyMetaclass, cls).__init__(name, bases, kwds)
            cls.base_attr = "from base"
    MyMetaclass.__module__ = 'base'
    _cribo_module.MyMetaclass = MyMetaclass

    class MyObject(metaclass=MyMetaclass):
        """A class using the metaclass."""

        def __repr__(self):
            return f"MyObject(base_attr={self.base_attr})"
    MyObject.__module__ = 'base'
    _cribo_module.MyObject = MyObject
    return _cribo_module
"""\nTest fixture for metaclass forward reference with renaming issue.\n\nThis reproduces the bug where class renaming causes forward references\nto metaclasses, similar to what happens with PyYAML.\n"""
base = _cribo_init___cribo_a6386c_base()
MyMetaclass = base.MyMetaclass
MyObject = base.MyObject
other = _cribo_init___cribo_c0fc3d_other()
OtherMeta = other.MyMetaclass
OtherObject = other.MyObject
obj1 = MyObject()
print(f"Object 1 created: {obj1}")
obj2 = OtherObject()
print(f"Object 2 created: {obj2}")
print("Test passed!")
