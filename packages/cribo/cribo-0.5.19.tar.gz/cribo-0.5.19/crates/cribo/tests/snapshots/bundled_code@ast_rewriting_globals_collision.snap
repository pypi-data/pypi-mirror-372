---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/ast_rewriting_globals_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
core = _cribo.types.SimpleNamespace(__name__='core')
models = _cribo.types.SimpleNamespace(__name__='models')
services = _cribo.types.SimpleNamespace(__name__='services')
core_database = _cribo.types.SimpleNamespace(__name__='core.database')
services_auth = _cribo.types.SimpleNamespace(__name__='services.auth')
core.database = core_database
services.auth = services_auth
process_count = 0
validate_cache = {}
Logger_6 = str
Connection_6 = "not_a_class"
class Logger_6:
    """Logger class in utils module"""

    def __init__(self, name):
        self.name = name
        self.messages = []

    def log(self, message):
        self.messages.append(f"[{self.name}] {message}")

    def get_message(self):
        return f"utils_logger_{self.name}"
class Connection_6:
    """Connection class in utils - different from database Connection"""

    def __init__(self):
        self.type = "utility_connection"

    def connect(self):
        return "utils_connection_established"
def process_7(data):
    """Process function in utils module"""
    global process_count
    process_count += 1
    return f"utils_process: {data} (#{process_count})"
def validate_6(data):
    """Validate function in utils module"""
    if data in validate_cache:
        return validate_cache[data]
    result = f"utils_validate: {data}"
    validate_cache[data] = result
    return result
def sanitize(text):
    """Utility function without conflicts"""
    return text.strip().lower()
def format_result(result):
    """Another utility function"""
    return f"formatted: {result}"
"""Core utility helpers module - NO external dependencies to avoid circular imports"""
Logger_6.__module__ = 'core.utils.helpers'
Logger_6.__name__ = 'Logger'
Logger_6.__qualname__ = 'Logger'
Connection_6.__module__ = 'core.utils.helpers'
Connection_6.__name__ = 'Connection'
Connection_6.__qualname__ = 'Connection'
core_utils = _cribo.types.SimpleNamespace(__name__='core.utils')
core.utils = core_utils
core_utils_helpers = _cribo.types.SimpleNamespace(__name__='core.utils.helpers')
core_utils.helpers = core_utils_helpers
_cribo_models_base_Connection = None
@_cribo.functools.cache
def _cribo_init___cribo_0a162a_models_base():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'models.base'
    global _cribo_models_base_Connection
    """Base models module - imports only from core to avoid circular dependencies"""
    _cribo_module.util_validate = validate_6
    util_validate = validate_6
    process = lambda x: f"base_process: {x}"
    _cribo_module.process = process
    validate = 123
    _cribo_module.validate = validate
    Logger = None
    _cribo_module.Logger = Logger
    Connection = []
    _cribo_models_base_Connection = Connection
    _cribo_module.Connection = _cribo_models_base_Connection

    def process(data):
        """Process function in base module"""
        return f"base_process: {data} (overrides lambda)"
    _cribo_module.process = process

    def validate(data):
        """Validate function that uses imported validate"""
        base_check = f"base_validate: {data}"
        util_check = util_validate(data)
        return f"{base_check} + {util_check}"
    _cribo_module.validate = validate

    class Logger:
        """Base logger class"""

        def __init__(self, prefix="BASE"):
            self.prefix = prefix

        def get_message(self):
            return f"base_logger_{self.prefix}"
    Logger.__module__ = 'models.base'
    _cribo_module.Logger = Logger

    def initialize():
        """Initialize base module"""
        global _cribo_models_base_Connection
        _cribo_models_base_Connection = type("Connection", (), {"type": "base_connection"})
        _cribo_module.Connection = _cribo_models_base_Connection
        return "base_initialized"
    _cribo_module.initialize = initialize
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_293a98_models():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'models'
    Logger = lambda x: f"models_logger_{x}"
    _cribo_module.Logger = Logger
    process = "models_process"
    _cribo_module.process = process
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_1f9e6c_models_user():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'models.user'
    """User models module - imports from core and base, no circular dependencies"""
    _cribo_module.util_process = process_7
    util_process = process_7
    _cribo_module.UtilLogger = Logger_6
    UtilLogger = Logger_6
    models.base = _cribo_init___cribo_0a162a_models_base()
    BaseLogger = models.base.Logger
    _cribo_module.BaseLogger = BaseLogger
    process = "process_string"
    _cribo_module.process = process
    validate = {"action": "validate"}
    _cribo_module.validate = validate
    User = None
    _cribo_module.User = User
    Connection = type("Connection", (), {"source": "models.user"})
    _cribo_module.Connection = Connection

    def process(data):
        """Process function in user module"""
        return f"user_process: {data}"
    _cribo_module.process = process

    def process_user(user_data):
        """Process user-specific data"""
        util_result = util_process(user_data)
        return f"process_user: {user_data} -> {util_result}"
    _cribo_module.process_user = process_user

    def validate(data):
        """Validate function in user module"""
        return f"user_validate: {data}"
    _cribo_module.validate = validate

    class User:
        """User model class"""

        def __init__(self, name):
            self.name = name
            self.logger = Logger("user")

        def process(self):
            return f"User.process: {self.name}"
    User.__module__ = 'models.user'
    _cribo_module.User = User

    class Logger:
        """User module logger - different from utils and base Logger"""

        def __init__(self, context):
            self.context = context
            self.base_logger = BaseLogger(context)
            self.util_logger = UtilLogger(context)

        def get_message(self):
            return f"user_logger_{self.context}"

        def log_all(self):
            return [self.get_message(), self.base_logger.get_message(), self.util_logger.get_message()]
    Logger.__module__ = 'models.user'
    _cribo_module.Logger = Logger

    class UserValidator:
        """Non-conflicting class name"""

        def __init__(self):
            self.rules = []

        def add_rule(self, rule):
            self.rules.append(rule)
    UserValidator.__module__ = 'models.user'
    _cribo_module.UserValidator = UserValidator
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_84bf42_services_auth():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'services.auth'
    Connection = lambda: "auth_package_connection"
    _cribo_module.Connection = Connection
    Logger = 42
    _cribo_module.Logger = Logger
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_b2dda7_services():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'services'
    process = lambda x, y: f"services_process: {x}, {y}"
    _cribo_module.process = process
    validate = "services_validate"
    _cribo_module.validate = validate
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_0ecebd_services_auth_manager():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'services.auth.manager'
    """Authentication manager - imports from core and models only, no circular dependencies"""
    core.database.connection = _cribo_init___cribo_df9c8d_core_database_connection()
    DBConnection = core.database.connection.Connection
    _cribo_module.DBConnection = DBConnection
    _cribo_module.sanitize = sanitize
    models.base = _cribo_init___cribo_0a162a_models_base()
    base_init = models.base.initialize
    _cribo_module.base_init = base_init
    process = [1, 2, 3]
    _cribo_module.process = process
    validate = None
    _cribo_module.validate = validate
    User = "auth_user_string"
    _cribo_module.User = User
    Logger = set()
    _cribo_module.Logger = Logger
    Connection = {"auth": True}
    _cribo_module.Connection = Connection

    def process(data):
        """Process function in auth module"""
        sanitized = sanitize(data)
        return f"auth_process: {sanitized}"
    _cribo_module.process = process

    def validate(data):
        """Validate function in auth module"""
        if not isinstance(data, str):
            return f"auth_validate_failed: {data}"
        return f"auth_validate: {data}"
    _cribo_module.validate = validate

    class User:
        """Auth user class"""

        def __init__(self, username):
            self.username = username
            self.connection = Connection

        def authenticate(self):
            return f"auth_user_{self.username}"
    User.__module__ = 'services.auth.manager'
    _cribo_module.User = User

    class Connection:
        """Auth connection - overrides the global dict"""

        def __init__(self):
            self.db_conn = DBConnection("auth_db")
            self.status = "auth_connection"

        def connect(self):
            db_result = self.db_conn.connect()
            return f"auth_wrapped_{db_result}"
    Connection.__module__ = 'services.auth.manager'
    _cribo_module.Connection = Connection

    class AuthManager:
        """Non-conflicting class name"""

        def __init__(self):
            self.users = {}
            self.base_initialized = base_init()

        def add_user(self, user):
            self.users[user.username] = user

        def process_auth(self, username, data):
            return process(f"{username}:{data}")
    AuthManager.__module__ = 'services.auth.manager'
    _cribo_module.AuthManager = AuthManager
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_df9c8d_core_database_connection():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'core.database.connection'
    """Database connection module - imports only from core.utils to avoid circular dependencies"""
    process = None
    _cribo_module.process = process
    validate = lambda x: f"db_validate: {x}"
    _cribo_module.validate = validate
    User = {"type": "database_user"}
    _cribo_module.User = User

    def process(data):
        """Process function in database module"""
        _cribo_module.sanitize = sanitize
        _cribo_module.format_result = format_result
        clean_data = sanitize(data)
        return f"db_process: {clean_data}"
    _cribo_module.process = process

    def validate(data):
        """Validate function in database module"""
        _cribo_module.sanitize = sanitize
        _cribo_module.format_result = format_result
        return f"db_validate: {data} (overrides lambda)"
    _cribo_module.validate = validate

    class Connection:
        """Database connection class"""

        def __init__(self, db_name="default"):
            self.db_name = db_name
            self.connected = False

        def connect(self):
            self.connected = True
            return f"db_connection_to_{self.db_name}"

        def execute(self, query):
            if not self.connected:
                raise RuntimeError("Not connected")
            return format_result(f"Query: {query}")
    Connection.__module__ = 'core.database.connection'
    _cribo_module.Connection = Connection

    class Logger:
        """Database logger - different from utils Logger"""

        def __init__(self, context):
            self.context = context

        def log(self, message):
            return f"DB_LOG[{self.context}]: {message}"
    Logger.__module__ = 'core.database.connection'
    _cribo_module.Logger = Logger

    def create_connection(db_name):
        """Factory function"""
        _cribo_module.sanitize = sanitize
        _cribo_module.format_result = format_result
        conn = Connection(db_name)
        conn.connect()
        return conn
    _cribo_module.create_connection = create_connection
    return _cribo_module
core.database.connection = _cribo_init___cribo_df9c8d_core_database_connection()
models.user = _cribo_init___cribo_1f9e6c_models_user()
__cribo_init_result = _cribo_init___cribo_84bf42_services_auth()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(services.auth, attr, getattr(__cribo_init_result, attr))
__cribo_init_result = _cribo_init___cribo_293a98_models()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(models, attr, getattr(__cribo_init_result, attr))
__cribo_init_result = _cribo_init___cribo_b2dda7_services()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(services, attr, getattr(__cribo_init_result, attr))
core_utils_helpers.process_count = process_count
core_utils_helpers.validate_cache = validate_cache
core_utils_helpers.Logger = Logger_6
core_utils_helpers.Connection = Connection_6
core_utils_helpers.process = process_7
core_utils_helpers.validate = validate_6
core_utils_helpers.sanitize = sanitize
core_utils_helpers.format_result = format_result
"""\nComprehensive AST rewriter test fixture - Main entry point\nThis module demonstrates complex naming conflicts and import scenarios\nWITHOUT circular dependencies\n"""
db_process = core.database.connection.process
UtilLogger = Logger_6
services.auth.manager = _cribo_init___cribo_0ecebd_services_auth_manager()
auth_process = services.auth.manager.process
auth_validate = services.auth.manager.validate
UserModel = models.user.User
process_user = models.user.process_user
Logger = models.user.Logger
models.base = _cribo_init___cribo_0a162a_models_base()
__cribo_init_result = _cribo_init___cribo_293a98_models()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(models, attr, getattr(__cribo_init_result, attr))
base = models.base
result = 42
connection = None
def validate_1(data):
    """This validate function conflicts with imported validate functions"""
    return f"main_validate: {data}"
validate = validate_1
def process_1(data):
    """This process function conflicts with multiple imported process functions"""
    return f"main_process: {data}"
process = process_1
class User_1:
    """This User class conflicts with imported User classes"""

    def __init__(self, name):
        self.name = name
        self.result = self._process_name(name)

    def _process_name(self, name):
        return f"main_user: {name}"
User = User_1
class Connection_1:
    """Connection class that conflicts with database connection"""

    def __init__(self):
        self.status = "disconnected"

    def connect(self):
        global connection
        connection = self
        return "main_connection_established"
Connection = Connection_1
def main():
    """Main function demonstrating all the conflicts in action"""
    db_result = db_process("database_data")
    util_result = process("utility_data")
    auth_result = auth_process("auth_data")
    util_logger = UtilLogger("util")
    model_logger = Logger("model")
    auth_user = User("auth_type")
    model_user = UserModel("model_type")
    service_user = User("service_type")
    local_validate_result = validate("local_data")
    auth_validate_result = auth_validate("auth_data")
    util_validate_result = validate("util_data")
    result = db_result + util_result + auth_result
    base_result = base.initialize()
    final_result = {"process_results": [db_result, util_result, auth_result], "validation_results": [local_validate_result, auth_validate_result, util_validate_result], "user_types": [auth_user.name, model_user.name, service_user.name], "logger_messages": [util_logger.get_message(), model_logger.get_message()], "base_init": base_result, "total": result + str(globals()["result"])}
    return final_result
if __name__ == "__main__":
    connection = Connection_1()
    connection.connect()
    results = main()
    print("Comprehensive AST rewriter test completed")
    print(f"Final results: {results}")
