---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/module_setattr_with_circular_deps/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
pkg = _cribo.types.SimpleNamespace(__name__='pkg')
pkg__client = _cribo.types.SimpleNamespace(__name__='pkg._client')
pkg._client = pkg__client
pkg__main = _cribo.types.SimpleNamespace(__name__='pkg._main')
pkg._main = pkg__main
pkg__models = _cribo.types.SimpleNamespace(__name__='pkg._models')
pkg._models = pkg__models
pkg__types = _cribo.types.SimpleNamespace(__name__='pkg._types')
pkg._types = pkg__types
class Request:
    """Request model."""

    def __init__(self):
        self.stream = pkg.SyncStream()
class Response:
    """Response model."""

    def __init__(self):
        self.stream = pkg.AsyncStream()
class Client:
    """Client that uses streams."""

    def __init__(self):
        self.async_stream = pkg.AsyncStream()
        self.sync_stream = pkg.SyncStream()

    def make_request(self):
        req = Request()
        return Response()
class AsyncStream:
    """Async stream implementation."""

    def read(self):
        return "async data"
class SyncStream:
    """Sync stream implementation."""

    def read(self):
        return "sync data"
def main():
    """Main function using Client."""
    client = Client()
    return client.make_request()
"""Main module that imports client which imports back to parent."""
"""Models module that also imports from parent."""
Request.__module__ = 'pkg._models'
Response.__module__ = 'pkg._models'
Client.__module__ = 'pkg._client'
"""Client module with circular import and other dependencies."""
"""Types module with stream classes."""
AsyncStream.__module__ = 'pkg._types'
SyncStream.__module__ = 'pkg._types'
@_cribo.functools.cache
def _cribo_init___cribo_1fb248_pkg():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'pkg'
    global AsyncStream, SyncStream
    _cribo_module.AsyncStream = AsyncStream
    _cribo_module.SyncStream = SyncStream
    """Package that sets __module__ on all exported items, like httpx does."""
    _cribo_module.Client = Client
    _cribo_module.Request = Request
    _cribo_module.Response = Response
    _cribo_module.main = main
    __all__ = ["AsyncStream", "SyncStream", "Client", "Request", "Response", "main"]
    __locals = vars(_cribo_module)
    _cribo_module.__locals = __locals
    for __name in __all__:
        if not __name.startswith("__"):
            setattr(_cribo_module.__locals[__name], "__module__", "pkg")
    _cribo_module._main = pkg__main
    _cribo_module._models = pkg__models
    _cribo_module._client = pkg__client
    _cribo_module._types = pkg__types
    return _cribo_module
pkg = _cribo_init___cribo_1fb248_pkg()
pkg__main.main = main
pkg__models.Request = Request
pkg__models.Response = Response
pkg__client.Client = Client
pkg__types.AsyncStream = AsyncStream
pkg__types.SyncStream = SyncStream
"""Test module attribute setting on wildcard imports with circular dependencies."""
pkg = _cribo_init___cribo_1fb248_pkg()
stream_a = pkg.AsyncStream()
stream_s = pkg.SyncStream()
print(f"AsyncStream: {stream_a.read()}")
print(f"SyncStream: {stream_s.read()}")
print("Success!")
