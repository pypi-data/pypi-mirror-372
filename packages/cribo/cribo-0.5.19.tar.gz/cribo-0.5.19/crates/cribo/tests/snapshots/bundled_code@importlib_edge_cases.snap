---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/importlib_edge_cases/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
@_cribo.functools.cache
def _cribo_init___cribo_332fbf_my_module():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'my-module'
    value = 42
    _cribo_module.value = value

    def get_value():
        return _cribo_module.value
    _cribo_module.get_value = get_value
    return _cribo_module
mod = _cribo_init___cribo_332fbf_my_module()
print(f"Value: {mod.value}")
print(f"Function result: {mod.get_value()}")
assert mod.value == 42
print("SUCCESS: Importlib works with invalid identifiers!")
