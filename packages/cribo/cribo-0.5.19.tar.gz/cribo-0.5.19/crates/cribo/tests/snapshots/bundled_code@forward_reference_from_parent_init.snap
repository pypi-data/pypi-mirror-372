---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/forward_reference_from_parent_init/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
class SubpkgClass:
    """A class from subpackage."""

    def __init__(self):
        self.subpkg_value = "subpkg"
class MyClass:
    """A simple class to test forward references."""

    def __init__(self):
        self.value = 42

    def __repr__(self):
        return f"MyClass(value={self.value})"
class AnotherClass:
    """Another class."""

    def __init__(self):
        self.another_value = "another"
class BaseClass:
    """A base class."""

    def __init__(self):
        self.base_value = "base"
"""Parent module that re-exports child module symbols."""
"""Subpackage with wildcard export."""
"""Submodule in subpackage."""
SubpkgClass.__module__ = 'parent.subpkg.submodule'
"""Child module that defines the actual symbols."""
MyClass.__module__ = 'parent.child'
"""Another module."""
AnotherClass.__module__ = 'parent.another'
"""Base module defining base classes."""
BaseClass.__module__ = 'parent.base'
parent = _cribo.types.SimpleNamespace(__name__='parent')
parent_subpkg = _cribo.types.SimpleNamespace(__name__='parent.subpkg')
parent.subpkg = parent_subpkg
parent_subpkg_submodule = _cribo.types.SimpleNamespace(__name__='parent.subpkg.submodule')
parent_subpkg.submodule = parent_subpkg_submodule
parent_child = _cribo.types.SimpleNamespace(__name__='parent.child')
parent.child = parent_child
parent_another = _cribo.types.SimpleNamespace(__name__='parent.another')
parent.another = parent_another
parent_base = _cribo.types.SimpleNamespace(__name__='parent.base')
parent.base = parent_base
parent_subpkg.SubpkgClass = SubpkgClass
parent_subpkg_submodule.SubpkgClass = SubpkgClass
parent_child.MyClass = MyClass
parent_another.AnotherClass = AnotherClass
parent_base.BaseClass = BaseClass
"""Test case for forward reference from parent __init__ to child module symbols."""
parent.BaseClass = BaseClass
parent.AnotherClass = AnotherClass
parent.MyClass = MyClass
parent.SubpkgClass = SubpkgClass
print(f"BaseClass: {parent.BaseClass}")
print(f"AnotherClass: {parent.AnotherClass}")
print(f"MyClass: {parent.MyClass}")
print(f"SubpkgClass: {parent.SubpkgClass}")
base = parent.BaseClass()
another = parent.AnotherClass()
my = parent.MyClass()
subpkg = parent.SubpkgClass()
print(f"Base value: {base.base_value}")
print(f"Another value: {another.another_value}")
print(f"My value: {my.value}")
print(f"Subpkg value: {subpkg.subpkg_value}")
print("SUCCESS: Forward reference from parent init handled correctly")
