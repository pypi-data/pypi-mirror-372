---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/collections_abc_wrapper/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
@_cribo.functools.cache
def _cribo_init___cribo_f0aa89_compat():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'compat'
    """compat.py - Compatibility module with side effects."""
    print("Loading compat module...")
    MutableMapping = _cribo.collections.abc.MutableMapping
    _cribo_module.MutableMapping = MutableMapping
    Mapping = _cribo.collections.abc.Mapping
    _cribo_module.Mapping = Mapping
    _cribo_module.MutableMapping = _cribo.collections.abc.MutableMapping
    _cribo_module.Mapping = _cribo.collections.abc.Mapping
    return _cribo_module
compat = _cribo_init___cribo_f0aa89_compat()
class CaseInsensitiveDict(compat.MutableMapping):
    """A case-insensitive dict-like object."""

    def __init__(self):
        self._store = {}

    def __setitem__(self, key, value):
        self._store[key.lower()] = value

    def __getitem__(self, key):
        return self._store[key.lower()]

    def __delitem__(self, key):
        del self._store[key.lower()]

    def __iter__(self):
        return iter(self._store)

    def __len__(self):
        return len(self._store)
"""structures.py - Contains data structures."""
CaseInsensitiveDict.__module__ = 'structures'
compat = _cribo_init___cribo_f0aa89_compat()
"""Test case for collections.abc imports in wrapper modules."""
d = CaseInsensitiveDict()
d["Accept"] = "application/json"
print(f"Accept header: {d['accept']}")
print("Success!")
