---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/conditional_imports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import sys as _sys
import importlib as _importlib
class _CriboModule():

    def __init__(self, m, p):
        self._m, self._p = m, p

    def __getattr__(self, n):
        f = self._p + '.' + n
        try:
            return _CriboModule(_importlib.import_module(f), f)
        except ImportError:
            return getattr(self._m, n)

    def __getattribute__(self, n):
        return object.__getattribute__(self, n) if n in ('_m', '_p', '__getattr__', '__class__', '__dict__', '__dir__', '__module__', '__qualname__') else getattr(object.__getattribute__(self, '_m'), n)
class _Cribo():

    def __getattr__(self, n):
        m = _sys.modules.get(n) or _importlib.import_module(n)
        return _CriboModule(m, n)
_cribo = _Cribo()
@_cribo.functools.cache
def _cribo_init___cribo_17f1ec_try_except_module():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'try_except_module'
    """Module with imports inside try/except blocks."""
    etree = None
    _cribo_module.etree = etree
    ETREE_VERSION = None
    _cribo_module.ETREE_VERSION = ETREE_VERSION
    try:
        from lxml import etree
        _cribo_module.etree = etree
        ETREE_VERSION = "lxml"
        _cribo_module.ETREE_VERSION = ETREE_VERSION
    except ImportError:
        try:
            etree = _cribo.xml.etree.ElementTree
            _cribo_module.etree = etree
            ETREE_VERSION = "stdlib"
            _cribo_module.ETREE_VERSION = ETREE_VERSION
        except ImportError:
            _cribo.xml.etree.ElementTree = None
            ETREE_VERSION = None
            _cribo_module.ETREE_VERSION = ETREE_VERSION
    parser_backend = None
    _cribo_module.parser_backend = parser_backend
    try:
        import cElementTree as ET
        _cribo_module.ET = ET
        parser_backend = "cElementTree"
        _cribo_module.parser_backend = parser_backend
    except ImportError:
        try:
            ET = _cribo.xml.etree.ElementTree
            _cribo_module.ET = ET
            parser_backend = "ElementTree"
            _cribo_module.parser_backend = parser_backend
        except ImportError:
            _cribo.xml.etree.ElementTree = None
            parser_backend = None
            _cribo_module.parser_backend = parser_backend

    def parse_xml(xml_string):
        """Parse XML using available parser."""
        if _cribo.xml.etree.ElementTree is not None:
            return _cribo.xml.etree.ElementTree.fromstring(xml_string)
        elif _cribo.xml.etree.ElementTree is not None:
            return _cribo.xml.etree.ElementTree.fromstring(xml_string)
        else:
            raise ImportError("No XML parser available")
    _cribo_module.parse_xml = parse_xml
    return _cribo_module
@_cribo.functools.cache
def _cribo_init___cribo_e43fad_conditional_module():
    _cribo_module = _cribo.types.SimpleNamespace()
    _cribo_module.__name__ = 'conditional_module'
    """Module with conditional imports inside if/else blocks."""
    has_simplejson = False
    _cribo_module.has_simplejson = has_simplejson
    try:
        import simplejson as json
        _cribo_module.json = json
        has_simplejson = True
        _cribo_module.has_simplejson = has_simplejson
    except ImportError:
        json = _cribo.json
        _cribo_module.json = json
    if has_simplejson:
        from simplejson import JSONDecodeError
        _cribo_module.JSONDecodeError = JSONDecodeError
    else:
        JSONDecodeError = _cribo.json.JSONDecodeError
        _cribo_module.JSONDecodeError = JSONDecodeError
    sys = _cribo.sys
    _cribo_module.sys = sys
    if _cribo.sys.version_info[0] >= 3:
        builtin_str = str
        _cribo_module.builtin_str = builtin_str
        my_str = str
        _cribo_module.my_str = my_str
    else:
        builtin_str = str
        _cribo_module.builtin_str = builtin_str
        my_str = unicode
        _cribo_module.my_str = my_str
    basestring = str, bytes
    _cribo_module.basestring = basestring
    if has_simplejson:
        if hasattr(_cribo.json, "JSONDecodeError"):
            pass
        else:
            _cribo.json.JSONDecodeError = ValueError
    else:
        pass

    def decode_json(text):
        """Decode JSON using the conditionally imported decoder."""
        try:
            return _cribo.json.loads(text)
        except JSONDecodeError as e:
            return None
    _cribo_module.decode_json = decode_json
    return _cribo_module
"""Test conditional imports in if/else and try/except blocks."""
conditional_module = _cribo_init___cribo_e43fad_conditional_module()
try_except_module = _cribo_init___cribo_17f1ec_try_except_module()
print("If/else import - JSONDecodeError:", hasattr(conditional_module, "JSONDecodeError"))
print("If/else import - json:", hasattr(conditional_module, "json"))
print("If/else import - builtin_str:", hasattr(conditional_module, "builtin_str"))
try:
    raise conditional_module.JSONDecodeError("test", "doc", 0)
except conditional_module.JSONDecodeError as e:
    print("Successfully caught JSONDecodeError from conditional import")
print("Try/except import - etree:", hasattr(try_except_module, "etree"))
print("Try/except import - ETREE_VERSION:", hasattr(try_except_module, "ETREE_VERSION"))
if try_except_module.etree is not None:
    print("Successfully imported etree module")
else:
    print("etree module is None (not available)")
expected_attrs = ["JSONDecodeError", "json", "builtin_str", "basestring", "has_simplejson"]
for attr in expected_attrs:
    if hasattr(conditional_module, attr):
        print(f"✓ {attr} is accessible")
    else:
        print(f"✗ {attr} is NOT accessible")
