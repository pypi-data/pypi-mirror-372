# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetQStashScheduleResult',
    'AwaitableGetQStashScheduleResult',
    'get_q_stash_schedule',
    'get_q_stash_schedule_output',
]

@pulumi.output_type
class GetQStashScheduleResult:
    """
    A collection of values returned by getQStashSchedule.
    """
    def __init__(__self__, body=None, created_at=None, cron=None, destination=None, forward_headers=None, id=None, not_before=None, retries=None, schedule_id=None):
        if body and not isinstance(body, str):
            raise TypeError("Expected argument 'body' to be a str")
        pulumi.set(__self__, "body", body)
        if created_at and not isinstance(created_at, int):
            raise TypeError("Expected argument 'created_at' to be a int")
        pulumi.set(__self__, "created_at", created_at)
        if cron and not isinstance(cron, str):
            raise TypeError("Expected argument 'cron' to be a str")
        pulumi.set(__self__, "cron", cron)
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if forward_headers and not isinstance(forward_headers, dict):
            raise TypeError("Expected argument 'forward_headers' to be a dict")
        pulumi.set(__self__, "forward_headers", forward_headers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if not_before and not isinstance(not_before, int):
            raise TypeError("Expected argument 'not_before' to be a int")
        pulumi.set(__self__, "not_before", not_before)
        if retries and not isinstance(retries, int):
            raise TypeError("Expected argument 'retries' to be a int")
        pulumi.set(__self__, "retries", retries)
        if schedule_id and not isinstance(schedule_id, str):
            raise TypeError("Expected argument 'schedule_id' to be a str")
        pulumi.set(__self__, "schedule_id", schedule_id)

    @_builtins.property
    @pulumi.getter
    def body(self) -> _builtins.str:
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.int:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def cron(self) -> _builtins.str:
        return pulumi.get(self, "cron")

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter(name="forwardHeaders")
    def forward_headers(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "forward_headers")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> _builtins.int:
        return pulumi.get(self, "not_before")

    @_builtins.property
    @pulumi.getter
    def retries(self) -> _builtins.int:
        return pulumi.get(self, "retries")

    @_builtins.property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> _builtins.str:
        return pulumi.get(self, "schedule_id")


class AwaitableGetQStashScheduleResult(GetQStashScheduleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQStashScheduleResult(
            body=self.body,
            created_at=self.created_at,
            cron=self.cron,
            destination=self.destination,
            forward_headers=self.forward_headers,
            id=self.id,
            not_before=self.not_before,
            retries=self.retries,
            schedule_id=self.schedule_id)


def get_q_stash_schedule(schedule_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQStashScheduleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['scheduleId'] = schedule_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('upstash:index/getQStashSchedule:getQStashSchedule', __args__, opts=opts, typ=GetQStashScheduleResult).value

    return AwaitableGetQStashScheduleResult(
        body=pulumi.get(__ret__, 'body'),
        created_at=pulumi.get(__ret__, 'created_at'),
        cron=pulumi.get(__ret__, 'cron'),
        destination=pulumi.get(__ret__, 'destination'),
        forward_headers=pulumi.get(__ret__, 'forward_headers'),
        id=pulumi.get(__ret__, 'id'),
        not_before=pulumi.get(__ret__, 'not_before'),
        retries=pulumi.get(__ret__, 'retries'),
        schedule_id=pulumi.get(__ret__, 'schedule_id'))
def get_q_stash_schedule_output(schedule_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQStashScheduleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['scheduleId'] = schedule_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('upstash:index/getQStashSchedule:getQStashSchedule', __args__, opts=opts, typ=GetQStashScheduleResult)
    return __ret__.apply(lambda __response__: GetQStashScheduleResult(
        body=pulumi.get(__response__, 'body'),
        created_at=pulumi.get(__response__, 'created_at'),
        cron=pulumi.get(__response__, 'cron'),
        destination=pulumi.get(__response__, 'destination'),
        forward_headers=pulumi.get(__response__, 'forward_headers'),
        id=pulumi.get(__response__, 'id'),
        not_before=pulumi.get(__response__, 'not_before'),
        retries=pulumi.get(__response__, 'retries'),
        schedule_id=pulumi.get(__response__, 'schedule_id')))
