# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetQStashTopicResult',
    'AwaitableGetQStashTopicResult',
    'get_q_stash_topic',
    'get_q_stash_topic_output',
]

@pulumi.output_type
class GetQStashTopicResult:
    """
    A collection of values returned by getQStashTopic.
    """
    def __init__(__self__, endpoints=None, id=None, name=None, topic_id=None):
        if endpoints and not isinstance(endpoints, list):
            raise TypeError("Expected argument 'endpoints' to be a list")
        pulumi.set(__self__, "endpoints", endpoints)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if topic_id and not isinstance(topic_id, str):
            raise TypeError("Expected argument 'topic_id' to be a str")
        pulumi.set(__self__, "topic_id", topic_id)

    @_builtins.property
    @pulumi.getter
    def endpoints(self) -> Sequence[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "endpoints")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> _builtins.str:
        return pulumi.get(self, "topic_id")


class AwaitableGetQStashTopicResult(GetQStashTopicResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQStashTopicResult(
            endpoints=self.endpoints,
            id=self.id,
            name=self.name,
            topic_id=self.topic_id)


def get_q_stash_topic(topic_id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQStashTopicResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['topicId'] = topic_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('upstash:index/getQStashTopic:getQStashTopic', __args__, opts=opts, typ=GetQStashTopicResult).value

    return AwaitableGetQStashTopicResult(
        endpoints=pulumi.get(__ret__, 'endpoints'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        topic_id=pulumi.get(__ret__, 'topic_id'))
def get_q_stash_topic_output(topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQStashTopicResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['topicId'] = topic_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('upstash:index/getQStashTopic:getQStashTopic', __args__, opts=opts, typ=GetQStashTopicResult)
    return __ret__.apply(lambda __response__: GetQStashTopicResult(
        endpoints=pulumi.get(__response__, 'endpoints'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        topic_id=pulumi.get(__response__, 'topic_id')))
