# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetRedisDatabaseResult',
    'AwaitableGetRedisDatabaseResult',
    'get_redis_database',
    'get_redis_database_output',
]

@pulumi.output_type
class GetRedisDatabaseResult:
    """
    A collection of values returned by getRedisDatabase.
    """
    def __init__(__self__, auto_scale=None, budget=None, consistent=None, creation_time=None, database_id=None, database_name=None, database_type=None, db_daily_bandwidth_limit=None, db_disk_threshold=None, db_max_clients=None, db_max_commands_per_second=None, db_max_entry_size=None, db_max_request_size=None, db_memory_threshold=None, endpoint=None, eviction=None, id=None, ip_allowlists=None, multizone=None, password=None, port=None, primary_region=None, prod_pack=None, read_only_rest_token=None, read_regions=None, region=None, rest_token=None, state=None, tls=None, user_email=None):
        if auto_scale and not isinstance(auto_scale, bool):
            raise TypeError("Expected argument 'auto_scale' to be a bool")
        pulumi.set(__self__, "auto_scale", auto_scale)
        if budget and not isinstance(budget, int):
            raise TypeError("Expected argument 'budget' to be a int")
        pulumi.set(__self__, "budget", budget)
        if consistent and not isinstance(consistent, bool):
            raise TypeError("Expected argument 'consistent' to be a bool")
        pulumi.set(__self__, "consistent", consistent)
        if creation_time and not isinstance(creation_time, int):
            raise TypeError("Expected argument 'creation_time' to be a int")
        pulumi.set(__self__, "creation_time", creation_time)
        if database_id and not isinstance(database_id, str):
            raise TypeError("Expected argument 'database_id' to be a str")
        pulumi.set(__self__, "database_id", database_id)
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if database_type and not isinstance(database_type, str):
            raise TypeError("Expected argument 'database_type' to be a str")
        pulumi.set(__self__, "database_type", database_type)
        if db_daily_bandwidth_limit and not isinstance(db_daily_bandwidth_limit, int):
            raise TypeError("Expected argument 'db_daily_bandwidth_limit' to be a int")
        pulumi.set(__self__, "db_daily_bandwidth_limit", db_daily_bandwidth_limit)
        if db_disk_threshold and not isinstance(db_disk_threshold, int):
            raise TypeError("Expected argument 'db_disk_threshold' to be a int")
        pulumi.set(__self__, "db_disk_threshold", db_disk_threshold)
        if db_max_clients and not isinstance(db_max_clients, int):
            raise TypeError("Expected argument 'db_max_clients' to be a int")
        pulumi.set(__self__, "db_max_clients", db_max_clients)
        if db_max_commands_per_second and not isinstance(db_max_commands_per_second, int):
            raise TypeError("Expected argument 'db_max_commands_per_second' to be a int")
        pulumi.set(__self__, "db_max_commands_per_second", db_max_commands_per_second)
        if db_max_entry_size and not isinstance(db_max_entry_size, int):
            raise TypeError("Expected argument 'db_max_entry_size' to be a int")
        pulumi.set(__self__, "db_max_entry_size", db_max_entry_size)
        if db_max_request_size and not isinstance(db_max_request_size, int):
            raise TypeError("Expected argument 'db_max_request_size' to be a int")
        pulumi.set(__self__, "db_max_request_size", db_max_request_size)
        if db_memory_threshold and not isinstance(db_memory_threshold, int):
            raise TypeError("Expected argument 'db_memory_threshold' to be a int")
        pulumi.set(__self__, "db_memory_threshold", db_memory_threshold)
        if endpoint and not isinstance(endpoint, str):
            raise TypeError("Expected argument 'endpoint' to be a str")
        pulumi.set(__self__, "endpoint", endpoint)
        if eviction and not isinstance(eviction, bool):
            raise TypeError("Expected argument 'eviction' to be a bool")
        pulumi.set(__self__, "eviction", eviction)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_allowlists and not isinstance(ip_allowlists, list):
            raise TypeError("Expected argument 'ip_allowlists' to be a list")
        pulumi.set(__self__, "ip_allowlists", ip_allowlists)
        if multizone and not isinstance(multizone, bool):
            raise TypeError("Expected argument 'multizone' to be a bool")
        pulumi.set(__self__, "multizone", multizone)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if primary_region and not isinstance(primary_region, str):
            raise TypeError("Expected argument 'primary_region' to be a str")
        pulumi.set(__self__, "primary_region", primary_region)
        if prod_pack and not isinstance(prod_pack, bool):
            raise TypeError("Expected argument 'prod_pack' to be a bool")
        pulumi.set(__self__, "prod_pack", prod_pack)
        if read_only_rest_token and not isinstance(read_only_rest_token, str):
            raise TypeError("Expected argument 'read_only_rest_token' to be a str")
        pulumi.set(__self__, "read_only_rest_token", read_only_rest_token)
        if read_regions and not isinstance(read_regions, list):
            raise TypeError("Expected argument 'read_regions' to be a list")
        pulumi.set(__self__, "read_regions", read_regions)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rest_token and not isinstance(rest_token, str):
            raise TypeError("Expected argument 'rest_token' to be a str")
        pulumi.set(__self__, "rest_token", rest_token)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tls and not isinstance(tls, bool):
            raise TypeError("Expected argument 'tls' to be a bool")
        pulumi.set(__self__, "tls", tls)
        if user_email and not isinstance(user_email, str):
            raise TypeError("Expected argument 'user_email' to be a str")
        pulumi.set(__self__, "user_email", user_email)

    @_builtins.property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> _builtins.bool:
        return pulumi.get(self, "auto_scale")

    @_builtins.property
    @pulumi.getter
    def budget(self) -> _builtins.int:
        return pulumi.get(self, "budget")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Consistent option is deprecated.""")
    def consistent(self) -> _builtins.bool:
        return pulumi.get(self, "consistent")

    @_builtins.property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> _builtins.int:
        return pulumi.get(self, "creation_time")

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> _builtins.str:
        return pulumi.get(self, "database_id")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbDailyBandwidthLimit")
    def db_daily_bandwidth_limit(self) -> _builtins.int:
        return pulumi.get(self, "db_daily_bandwidth_limit")

    @_builtins.property
    @pulumi.getter(name="dbDiskThreshold")
    def db_disk_threshold(self) -> _builtins.int:
        return pulumi.get(self, "db_disk_threshold")

    @_builtins.property
    @pulumi.getter(name="dbMaxClients")
    def db_max_clients(self) -> _builtins.int:
        return pulumi.get(self, "db_max_clients")

    @_builtins.property
    @pulumi.getter(name="dbMaxCommandsPerSecond")
    def db_max_commands_per_second(self) -> _builtins.int:
        return pulumi.get(self, "db_max_commands_per_second")

    @_builtins.property
    @pulumi.getter(name="dbMaxEntrySize")
    def db_max_entry_size(self) -> _builtins.int:
        return pulumi.get(self, "db_max_entry_size")

    @_builtins.property
    @pulumi.getter(name="dbMaxRequestSize")
    def db_max_request_size(self) -> _builtins.int:
        return pulumi.get(self, "db_max_request_size")

    @_builtins.property
    @pulumi.getter(name="dbMemoryThreshold")
    def db_memory_threshold(self) -> _builtins.int:
        return pulumi.get(self, "db_memory_threshold")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def eviction(self) -> _builtins.bool:
        return pulumi.get(self, "eviction")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAllowlists")
    def ip_allowlists(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ip_allowlists")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""Multizone option is deprecated. It is enabled by default for paid databases.""")
    def multizone(self) -> _builtins.bool:
        return pulumi.get(self, "multizone")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="primaryRegion")
    def primary_region(self) -> _builtins.str:
        return pulumi.get(self, "primary_region")

    @_builtins.property
    @pulumi.getter(name="prodPack")
    def prod_pack(self) -> _builtins.bool:
        return pulumi.get(self, "prod_pack")

    @_builtins.property
    @pulumi.getter(name="readOnlyRestToken")
    def read_only_rest_token(self) -> _builtins.str:
        return pulumi.get(self, "read_only_rest_token")

    @_builtins.property
    @pulumi.getter(name="readRegions")
    def read_regions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "read_regions")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="restToken")
    def rest_token(self) -> _builtins.str:
        return pulumi.get(self, "rest_token")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""TLS option is deprecated. It's enabled by default for all databases.""")
    def tls(self) -> _builtins.bool:
        return pulumi.get(self, "tls")

    @_builtins.property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> _builtins.str:
        return pulumi.get(self, "user_email")


class AwaitableGetRedisDatabaseResult(GetRedisDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRedisDatabaseResult(
            auto_scale=self.auto_scale,
            budget=self.budget,
            consistent=self.consistent,
            creation_time=self.creation_time,
            database_id=self.database_id,
            database_name=self.database_name,
            database_type=self.database_type,
            db_daily_bandwidth_limit=self.db_daily_bandwidth_limit,
            db_disk_threshold=self.db_disk_threshold,
            db_max_clients=self.db_max_clients,
            db_max_commands_per_second=self.db_max_commands_per_second,
            db_max_entry_size=self.db_max_entry_size,
            db_max_request_size=self.db_max_request_size,
            db_memory_threshold=self.db_memory_threshold,
            endpoint=self.endpoint,
            eviction=self.eviction,
            id=self.id,
            ip_allowlists=self.ip_allowlists,
            multizone=self.multizone,
            password=self.password,
            port=self.port,
            primary_region=self.primary_region,
            prod_pack=self.prod_pack,
            read_only_rest_token=self.read_only_rest_token,
            read_regions=self.read_regions,
            region=self.region,
            rest_token=self.rest_token,
            state=self.state,
            tls=self.tls,
            user_email=self.user_email)


def get_redis_database(database_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRedisDatabaseResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['databaseId'] = database_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('upstash:index/getRedisDatabase:getRedisDatabase', __args__, opts=opts, typ=GetRedisDatabaseResult).value

    return AwaitableGetRedisDatabaseResult(
        auto_scale=pulumi.get(__ret__, 'auto_scale'),
        budget=pulumi.get(__ret__, 'budget'),
        consistent=pulumi.get(__ret__, 'consistent'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        database_id=pulumi.get(__ret__, 'database_id'),
        database_name=pulumi.get(__ret__, 'database_name'),
        database_type=pulumi.get(__ret__, 'database_type'),
        db_daily_bandwidth_limit=pulumi.get(__ret__, 'db_daily_bandwidth_limit'),
        db_disk_threshold=pulumi.get(__ret__, 'db_disk_threshold'),
        db_max_clients=pulumi.get(__ret__, 'db_max_clients'),
        db_max_commands_per_second=pulumi.get(__ret__, 'db_max_commands_per_second'),
        db_max_entry_size=pulumi.get(__ret__, 'db_max_entry_size'),
        db_max_request_size=pulumi.get(__ret__, 'db_max_request_size'),
        db_memory_threshold=pulumi.get(__ret__, 'db_memory_threshold'),
        endpoint=pulumi.get(__ret__, 'endpoint'),
        eviction=pulumi.get(__ret__, 'eviction'),
        id=pulumi.get(__ret__, 'id'),
        ip_allowlists=pulumi.get(__ret__, 'ip_allowlists'),
        multizone=pulumi.get(__ret__, 'multizone'),
        password=pulumi.get(__ret__, 'password'),
        port=pulumi.get(__ret__, 'port'),
        primary_region=pulumi.get(__ret__, 'primary_region'),
        prod_pack=pulumi.get(__ret__, 'prod_pack'),
        read_only_rest_token=pulumi.get(__ret__, 'read_only_rest_token'),
        read_regions=pulumi.get(__ret__, 'read_regions'),
        region=pulumi.get(__ret__, 'region'),
        rest_token=pulumi.get(__ret__, 'rest_token'),
        state=pulumi.get(__ret__, 'state'),
        tls=pulumi.get(__ret__, 'tls'),
        user_email=pulumi.get(__ret__, 'user_email'))
def get_redis_database_output(database_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRedisDatabaseResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['databaseId'] = database_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('upstash:index/getRedisDatabase:getRedisDatabase', __args__, opts=opts, typ=GetRedisDatabaseResult)
    return __ret__.apply(lambda __response__: GetRedisDatabaseResult(
        auto_scale=pulumi.get(__response__, 'auto_scale'),
        budget=pulumi.get(__response__, 'budget'),
        consistent=pulumi.get(__response__, 'consistent'),
        creation_time=pulumi.get(__response__, 'creation_time'),
        database_id=pulumi.get(__response__, 'database_id'),
        database_name=pulumi.get(__response__, 'database_name'),
        database_type=pulumi.get(__response__, 'database_type'),
        db_daily_bandwidth_limit=pulumi.get(__response__, 'db_daily_bandwidth_limit'),
        db_disk_threshold=pulumi.get(__response__, 'db_disk_threshold'),
        db_max_clients=pulumi.get(__response__, 'db_max_clients'),
        db_max_commands_per_second=pulumi.get(__response__, 'db_max_commands_per_second'),
        db_max_entry_size=pulumi.get(__response__, 'db_max_entry_size'),
        db_max_request_size=pulumi.get(__response__, 'db_max_request_size'),
        db_memory_threshold=pulumi.get(__response__, 'db_memory_threshold'),
        endpoint=pulumi.get(__response__, 'endpoint'),
        eviction=pulumi.get(__response__, 'eviction'),
        id=pulumi.get(__response__, 'id'),
        ip_allowlists=pulumi.get(__response__, 'ip_allowlists'),
        multizone=pulumi.get(__response__, 'multizone'),
        password=pulumi.get(__response__, 'password'),
        port=pulumi.get(__response__, 'port'),
        primary_region=pulumi.get(__response__, 'primary_region'),
        prod_pack=pulumi.get(__response__, 'prod_pack'),
        read_only_rest_token=pulumi.get(__response__, 'read_only_rest_token'),
        read_regions=pulumi.get(__response__, 'read_regions'),
        region=pulumi.get(__response__, 'region'),
        rest_token=pulumi.get(__response__, 'rest_token'),
        state=pulumi.get(__response__, 'state'),
        tls=pulumi.get(__response__, 'tls'),
        user_email=pulumi.get(__response__, 'user_email')))
