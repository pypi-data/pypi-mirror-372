# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SearchArgs', 'Search']

@pulumi.input_type
class SearchArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_price: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a Search resource.
        :param pulumi.Input[_builtins.str] region: The region where your search is deployed.
        :param pulumi.Input[_builtins.str] type: Associated plan of the search. `payg` can be used
        :param pulumi.Input[_builtins.str] name: Name of the search.
        :param pulumi.Input[_builtins.float] reserved_price: Monthly pricing of your search. Only available for fixed and pro plans.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reserved_price is not None:
            pulumi.set(__self__, "reserved_price", reserved_price)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        The region where your search is deployed.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Associated plan of the search. `payg` can be used
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the search.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="reservedPrice")
    def reserved_price(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Monthly pricing of your search. Only available for fixed and pro plans.
        """
        return pulumi.get(self, "reserved_price")

    @reserved_price.setter
    def reserved_price(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "reserved_price", value)


@pulumi.input_type
class _SearchState:
    def __init__(__self__, *,
                 creation_time: Optional[pulumi.Input[_builtins.int]] = None,
                 customer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 endpoint: Optional[pulumi.Input[_builtins.str]] = None,
                 max_daily_queries: Optional[pulumi.Input[_builtins.int]] = None,
                 max_daily_updates: Optional[pulumi.Input[_builtins.int]] = None,
                 max_monthly_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
                 max_query_per_second: Optional[pulumi.Input[_builtins.int]] = None,
                 max_reads_per_request: Optional[pulumi.Input[_builtins.int]] = None,
                 max_total_metadata_size: Optional[pulumi.Input[_builtins.int]] = None,
                 max_vector_count: Optional[pulumi.Input[_builtins.int]] = None,
                 max_writes_per_request: Optional[pulumi.Input[_builtins.int]] = None,
                 max_writes_per_second: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 read_only_token: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_price: Optional[pulumi.Input[_builtins.float]] = None,
                 token: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Search resources.
        :param pulumi.Input[_builtins.int] creation_time: The creation time of the search in UTC as unix timestamp.
        :param pulumi.Input[_builtins.str] customer_id: The unique ID associated to the owner of this search.
        :param pulumi.Input[_builtins.str] endpoint: Associated endpoint of your search.
        :param pulumi.Input[_builtins.int] max_daily_queries: The number of maximum query operations you can perform in a day. Only query operations are included in query count.
        :param pulumi.Input[_builtins.int] max_daily_updates: The number of maximum update operations you can perform in a day. Only upsert operations are included in update count.
        :param pulumi.Input[_builtins.int] max_monthly_bandwidth: The maximum amount of monthly bandwidth for the search. Unit is bytes. `-1` if the limit is unlimited.
        :param pulumi.Input[_builtins.int] max_query_per_second: The number of maximum query operations you can perform per second. Only query operations are included in query count.
        :param pulumi.Input[_builtins.int] max_reads_per_request: The number of maximum vectors in a read operation. Query and fetch operations are included in read operations.
        :param pulumi.Input[_builtins.int] max_total_metadata_size: The amount of maximum size for the total metadata sizes in your search.
        :param pulumi.Input[_builtins.int] max_vector_count: The number of maximum that your search can contain.
        :param pulumi.Input[_builtins.int] max_writes_per_request: The number of maximum vectors in a write operation. Only upsert operations are included in write operations.
        :param pulumi.Input[_builtins.int] max_writes_per_second: The number of maximum write operations you can perform per second. Only upsert operations are included in write count.
        :param pulumi.Input[_builtins.str] name: Name of the search.
        :param pulumi.Input[_builtins.str] read_only_token: Readonly REST token to send request to the related search. You can't perform update operation with this token.
        :param pulumi.Input[_builtins.str] region: The region where your search is deployed.
        :param pulumi.Input[_builtins.float] reserved_price: Monthly pricing of your search. Only available for fixed and pro plans.
        :param pulumi.Input[_builtins.str] token: REST token to send request to the related search.
        :param pulumi.Input[_builtins.str] type: Associated plan of the search. `payg` can be used
        """
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if customer_id is not None:
            pulumi.set(__self__, "customer_id", customer_id)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if max_daily_queries is not None:
            pulumi.set(__self__, "max_daily_queries", max_daily_queries)
        if max_daily_updates is not None:
            pulumi.set(__self__, "max_daily_updates", max_daily_updates)
        if max_monthly_bandwidth is not None:
            pulumi.set(__self__, "max_monthly_bandwidth", max_monthly_bandwidth)
        if max_query_per_second is not None:
            pulumi.set(__self__, "max_query_per_second", max_query_per_second)
        if max_reads_per_request is not None:
            pulumi.set(__self__, "max_reads_per_request", max_reads_per_request)
        if max_total_metadata_size is not None:
            pulumi.set(__self__, "max_total_metadata_size", max_total_metadata_size)
        if max_vector_count is not None:
            pulumi.set(__self__, "max_vector_count", max_vector_count)
        if max_writes_per_request is not None:
            pulumi.set(__self__, "max_writes_per_request", max_writes_per_request)
        if max_writes_per_second is not None:
            pulumi.set(__self__, "max_writes_per_second", max_writes_per_second)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if read_only_token is not None:
            pulumi.set(__self__, "read_only_token", read_only_token)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reserved_price is not None:
            pulumi.set(__self__, "reserved_price", reserved_price)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The creation time of the search in UTC as unix timestamp.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "creation_time", value)

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The unique ID associated to the owner of this search.
        """
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "customer_id", value)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated endpoint of your search.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint", value)

    @_builtins.property
    @pulumi.getter(name="maxDailyQueries")
    def max_daily_queries(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of maximum query operations you can perform in a day. Only query operations are included in query count.
        """
        return pulumi.get(self, "max_daily_queries")

    @max_daily_queries.setter
    def max_daily_queries(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_daily_queries", value)

    @_builtins.property
    @pulumi.getter(name="maxDailyUpdates")
    def max_daily_updates(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of maximum update operations you can perform in a day. Only upsert operations are included in update count.
        """
        return pulumi.get(self, "max_daily_updates")

    @max_daily_updates.setter
    def max_daily_updates(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_daily_updates", value)

    @_builtins.property
    @pulumi.getter(name="maxMonthlyBandwidth")
    def max_monthly_bandwidth(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum amount of monthly bandwidth for the search. Unit is bytes. `-1` if the limit is unlimited.
        """
        return pulumi.get(self, "max_monthly_bandwidth")

    @max_monthly_bandwidth.setter
    def max_monthly_bandwidth(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_monthly_bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="maxQueryPerSecond")
    def max_query_per_second(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of maximum query operations you can perform per second. Only query operations are included in query count.
        """
        return pulumi.get(self, "max_query_per_second")

    @max_query_per_second.setter
    def max_query_per_second(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_query_per_second", value)

    @_builtins.property
    @pulumi.getter(name="maxReadsPerRequest")
    def max_reads_per_request(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of maximum vectors in a read operation. Query and fetch operations are included in read operations.
        """
        return pulumi.get(self, "max_reads_per_request")

    @max_reads_per_request.setter
    def max_reads_per_request(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_reads_per_request", value)

    @_builtins.property
    @pulumi.getter(name="maxTotalMetadataSize")
    def max_total_metadata_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The amount of maximum size for the total metadata sizes in your search.
        """
        return pulumi.get(self, "max_total_metadata_size")

    @max_total_metadata_size.setter
    def max_total_metadata_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_total_metadata_size", value)

    @_builtins.property
    @pulumi.getter(name="maxVectorCount")
    def max_vector_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of maximum that your search can contain.
        """
        return pulumi.get(self, "max_vector_count")

    @max_vector_count.setter
    def max_vector_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_vector_count", value)

    @_builtins.property
    @pulumi.getter(name="maxWritesPerRequest")
    def max_writes_per_request(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of maximum vectors in a write operation. Only upsert operations are included in write operations.
        """
        return pulumi.get(self, "max_writes_per_request")

    @max_writes_per_request.setter
    def max_writes_per_request(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_writes_per_request", value)

    @_builtins.property
    @pulumi.getter(name="maxWritesPerSecond")
    def max_writes_per_second(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of maximum write operations you can perform per second. Only upsert operations are included in write count.
        """
        return pulumi.get(self, "max_writes_per_second")

    @max_writes_per_second.setter
    def max_writes_per_second(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_writes_per_second", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the search.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="readOnlyToken")
    def read_only_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Readonly REST token to send request to the related search. You can't perform update operation with this token.
        """
        return pulumi.get(self, "read_only_token")

    @read_only_token.setter
    def read_only_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "read_only_token", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where your search is deployed.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="reservedPrice")
    def reserved_price(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Monthly pricing of your search. Only available for fixed and pro plans.
        """
        return pulumi.get(self, "reserved_price")

    @reserved_price.setter
    def reserved_price(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "reserved_price", value)

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        REST token to send request to the related search.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "token", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Associated plan of the search. `payg` can be used
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("upstash:index/search:Search")
class Search(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_price: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Search resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Name of the search.
        :param pulumi.Input[_builtins.str] region: The region where your search is deployed.
        :param pulumi.Input[_builtins.float] reserved_price: Monthly pricing of your search. Only available for fixed and pro plans.
        :param pulumi.Input[_builtins.str] type: Associated plan of the search. `payg` can be used
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SearchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Search resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SearchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SearchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 reserved_price: Optional[pulumi.Input[_builtins.float]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SearchArgs.__new__(SearchArgs)

            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["reserved_price"] = reserved_price
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["customer_id"] = None
            __props__.__dict__["endpoint"] = None
            __props__.__dict__["max_daily_queries"] = None
            __props__.__dict__["max_daily_updates"] = None
            __props__.__dict__["max_monthly_bandwidth"] = None
            __props__.__dict__["max_query_per_second"] = None
            __props__.__dict__["max_reads_per_request"] = None
            __props__.__dict__["max_total_metadata_size"] = None
            __props__.__dict__["max_vector_count"] = None
            __props__.__dict__["max_writes_per_request"] = None
            __props__.__dict__["max_writes_per_second"] = None
            __props__.__dict__["read_only_token"] = None
            __props__.__dict__["token"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["readOnlyToken", "token"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Search, __self__).__init__(
            'upstash:index/search:Search',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_time: Optional[pulumi.Input[_builtins.int]] = None,
            customer_id: Optional[pulumi.Input[_builtins.str]] = None,
            endpoint: Optional[pulumi.Input[_builtins.str]] = None,
            max_daily_queries: Optional[pulumi.Input[_builtins.int]] = None,
            max_daily_updates: Optional[pulumi.Input[_builtins.int]] = None,
            max_monthly_bandwidth: Optional[pulumi.Input[_builtins.int]] = None,
            max_query_per_second: Optional[pulumi.Input[_builtins.int]] = None,
            max_reads_per_request: Optional[pulumi.Input[_builtins.int]] = None,
            max_total_metadata_size: Optional[pulumi.Input[_builtins.int]] = None,
            max_vector_count: Optional[pulumi.Input[_builtins.int]] = None,
            max_writes_per_request: Optional[pulumi.Input[_builtins.int]] = None,
            max_writes_per_second: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            read_only_token: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            reserved_price: Optional[pulumi.Input[_builtins.float]] = None,
            token: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Search':
        """
        Get an existing Search resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] creation_time: The creation time of the search in UTC as unix timestamp.
        :param pulumi.Input[_builtins.str] customer_id: The unique ID associated to the owner of this search.
        :param pulumi.Input[_builtins.str] endpoint: Associated endpoint of your search.
        :param pulumi.Input[_builtins.int] max_daily_queries: The number of maximum query operations you can perform in a day. Only query operations are included in query count.
        :param pulumi.Input[_builtins.int] max_daily_updates: The number of maximum update operations you can perform in a day. Only upsert operations are included in update count.
        :param pulumi.Input[_builtins.int] max_monthly_bandwidth: The maximum amount of monthly bandwidth for the search. Unit is bytes. `-1` if the limit is unlimited.
        :param pulumi.Input[_builtins.int] max_query_per_second: The number of maximum query operations you can perform per second. Only query operations are included in query count.
        :param pulumi.Input[_builtins.int] max_reads_per_request: The number of maximum vectors in a read operation. Query and fetch operations are included in read operations.
        :param pulumi.Input[_builtins.int] max_total_metadata_size: The amount of maximum size for the total metadata sizes in your search.
        :param pulumi.Input[_builtins.int] max_vector_count: The number of maximum that your search can contain.
        :param pulumi.Input[_builtins.int] max_writes_per_request: The number of maximum vectors in a write operation. Only upsert operations are included in write operations.
        :param pulumi.Input[_builtins.int] max_writes_per_second: The number of maximum write operations you can perform per second. Only upsert operations are included in write count.
        :param pulumi.Input[_builtins.str] name: Name of the search.
        :param pulumi.Input[_builtins.str] read_only_token: Readonly REST token to send request to the related search. You can't perform update operation with this token.
        :param pulumi.Input[_builtins.str] region: The region where your search is deployed.
        :param pulumi.Input[_builtins.float] reserved_price: Monthly pricing of your search. Only available for fixed and pro plans.
        :param pulumi.Input[_builtins.str] token: REST token to send request to the related search.
        :param pulumi.Input[_builtins.str] type: Associated plan of the search. `payg` can be used
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SearchState.__new__(_SearchState)

        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["customer_id"] = customer_id
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["max_daily_queries"] = max_daily_queries
        __props__.__dict__["max_daily_updates"] = max_daily_updates
        __props__.__dict__["max_monthly_bandwidth"] = max_monthly_bandwidth
        __props__.__dict__["max_query_per_second"] = max_query_per_second
        __props__.__dict__["max_reads_per_request"] = max_reads_per_request
        __props__.__dict__["max_total_metadata_size"] = max_total_metadata_size
        __props__.__dict__["max_vector_count"] = max_vector_count
        __props__.__dict__["max_writes_per_request"] = max_writes_per_request
        __props__.__dict__["max_writes_per_second"] = max_writes_per_second
        __props__.__dict__["name"] = name
        __props__.__dict__["read_only_token"] = read_only_token
        __props__.__dict__["region"] = region
        __props__.__dict__["reserved_price"] = reserved_price
        __props__.__dict__["token"] = token
        __props__.__dict__["type"] = type
        return Search(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[_builtins.int]:
        """
        The creation time of the search in UTC as unix timestamp.
        """
        return pulumi.get(self, "creation_time")

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique ID associated to the owner of this search.
        """
        return pulumi.get(self, "customer_id")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[_builtins.str]:
        """
        Associated endpoint of your search.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter(name="maxDailyQueries")
    def max_daily_queries(self) -> pulumi.Output[_builtins.int]:
        """
        The number of maximum query operations you can perform in a day. Only query operations are included in query count.
        """
        return pulumi.get(self, "max_daily_queries")

    @_builtins.property
    @pulumi.getter(name="maxDailyUpdates")
    def max_daily_updates(self) -> pulumi.Output[_builtins.int]:
        """
        The number of maximum update operations you can perform in a day. Only upsert operations are included in update count.
        """
        return pulumi.get(self, "max_daily_updates")

    @_builtins.property
    @pulumi.getter(name="maxMonthlyBandwidth")
    def max_monthly_bandwidth(self) -> pulumi.Output[_builtins.int]:
        """
        The maximum amount of monthly bandwidth for the search. Unit is bytes. `-1` if the limit is unlimited.
        """
        return pulumi.get(self, "max_monthly_bandwidth")

    @_builtins.property
    @pulumi.getter(name="maxQueryPerSecond")
    def max_query_per_second(self) -> pulumi.Output[_builtins.int]:
        """
        The number of maximum query operations you can perform per second. Only query operations are included in query count.
        """
        return pulumi.get(self, "max_query_per_second")

    @_builtins.property
    @pulumi.getter(name="maxReadsPerRequest")
    def max_reads_per_request(self) -> pulumi.Output[_builtins.int]:
        """
        The number of maximum vectors in a read operation. Query and fetch operations are included in read operations.
        """
        return pulumi.get(self, "max_reads_per_request")

    @_builtins.property
    @pulumi.getter(name="maxTotalMetadataSize")
    def max_total_metadata_size(self) -> pulumi.Output[_builtins.int]:
        """
        The amount of maximum size for the total metadata sizes in your search.
        """
        return pulumi.get(self, "max_total_metadata_size")

    @_builtins.property
    @pulumi.getter(name="maxVectorCount")
    def max_vector_count(self) -> pulumi.Output[_builtins.int]:
        """
        The number of maximum that your search can contain.
        """
        return pulumi.get(self, "max_vector_count")

    @_builtins.property
    @pulumi.getter(name="maxWritesPerRequest")
    def max_writes_per_request(self) -> pulumi.Output[_builtins.int]:
        """
        The number of maximum vectors in a write operation. Only upsert operations are included in write operations.
        """
        return pulumi.get(self, "max_writes_per_request")

    @_builtins.property
    @pulumi.getter(name="maxWritesPerSecond")
    def max_writes_per_second(self) -> pulumi.Output[_builtins.int]:
        """
        The number of maximum write operations you can perform per second. Only upsert operations are included in write count.
        """
        return pulumi.get(self, "max_writes_per_second")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the search.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="readOnlyToken")
    def read_only_token(self) -> pulumi.Output[_builtins.str]:
        """
        Readonly REST token to send request to the related search. You can't perform update operation with this token.
        """
        return pulumi.get(self, "read_only_token")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region where your search is deployed.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reservedPrice")
    def reserved_price(self) -> pulumi.Output[_builtins.float]:
        """
        Monthly pricing of your search. Only available for fixed and pro plans.
        """
        return pulumi.get(self, "reserved_price")

    @_builtins.property
    @pulumi.getter
    def token(self) -> pulumi.Output[_builtins.str]:
        """
        REST token to send request to the related search.
        """
        return pulumi.get(self, "token")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Associated plan of the search. `payg` can be used
        """
        return pulumi.get(self, "type")

