# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetQStashEndpointResult',
    'AwaitableGetQStashEndpointResult',
    'get_q_stash_endpoint',
    'get_q_stash_endpoint_output',
]

@pulumi.output_type
class GetQStashEndpointResult:
    """
    A collection of values returned by getQStashEndpoint.
    """
    def __init__(__self__, endpoint_id=None, id=None, topic_id=None, url=None):
        if endpoint_id and not isinstance(endpoint_id, str):
            raise TypeError("Expected argument 'endpoint_id' to be a str")
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if topic_id and not isinstance(topic_id, str):
            raise TypeError("Expected argument 'topic_id' to be a str")
        pulumi.set(__self__, "topic_id", topic_id)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> _builtins.str:
        return pulumi.get(self, "endpoint_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> _builtins.str:
        return pulumi.get(self, "topic_id")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        return pulumi.get(self, "url")


class AwaitableGetQStashEndpointResult(GetQStashEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQStashEndpointResult(
            endpoint_id=self.endpoint_id,
            id=self.id,
            topic_id=self.topic_id,
            url=self.url)


def get_q_stash_endpoint(topic_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQStashEndpointResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['topicId'] = topic_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('upstash:index/getQStashEndpoint:getQStashEndpoint', __args__, opts=opts, typ=GetQStashEndpointResult).value

    return AwaitableGetQStashEndpointResult(
        endpoint_id=pulumi.get(__ret__, 'endpoint_id'),
        id=pulumi.get(__ret__, 'id'),
        topic_id=pulumi.get(__ret__, 'topic_id'),
        url=pulumi.get(__ret__, 'url'))
def get_q_stash_endpoint_output(topic_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQStashEndpointResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['topicId'] = topic_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('upstash:index/getQStashEndpoint:getQStashEndpoint', __args__, opts=opts, typ=GetQStashEndpointResult)
    return __ret__.apply(lambda __response__: GetQStashEndpointResult(
        endpoint_id=pulumi.get(__response__, 'endpoint_id'),
        id=pulumi.get(__response__, 'id'),
        topic_id=pulumi.get(__response__, 'topic_id'),
        url=pulumi.get(__response__, 'url')))
