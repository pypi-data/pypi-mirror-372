# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPostgresflexInstanceResult',
    'AwaitableGetPostgresflexInstanceResult',
    'get_postgresflex_instance',
    'get_postgresflex_instance_output',
]

@pulumi.output_type
class GetPostgresflexInstanceResult:
    """
    A collection of values returned by getPostgresflexInstance.
    """
    def __init__(__self__, acls=None, backup_schedule=None, flavor=None, id=None, instance_id=None, name=None, project_id=None, region=None, replicas=None, storage=None, version=None):
        if acls and not isinstance(acls, list):
            raise TypeError("Expected argument 'acls' to be a list")
        pulumi.set(__self__, "acls", acls)
        if backup_schedule and not isinstance(backup_schedule, str):
            raise TypeError("Expected argument 'backup_schedule' to be a str")
        pulumi.set(__self__, "backup_schedule", backup_schedule)
        if flavor and not isinstance(flavor, dict):
            raise TypeError("Expected argument 'flavor' to be a dict")
        pulumi.set(__self__, "flavor", flavor)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if replicas and not isinstance(replicas, int):
            raise TypeError("Expected argument 'replicas' to be a int")
        pulumi.set(__self__, "replicas", replicas)
        if storage and not isinstance(storage, dict):
            raise TypeError("Expected argument 'storage' to be a dict")
        pulumi.set(__self__, "storage", storage)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def acls(self) -> Sequence[_builtins.str]:
        """
        The Access Control List (ACL) for the PostgresFlex instance.
        """
        return pulumi.get(self, "acls")

    @_builtins.property
    @pulumi.getter(name="backupSchedule")
    def backup_schedule(self) -> _builtins.str:
        return pulumi.get(self, "backup_schedule")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> 'outputs.GetPostgresflexInstanceFlavorResult':
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        ID of the PostgresFlex instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        STACKIT project ID to which the instance is associated.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        The resource region. If not defined, the provider region is used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def replicas(self) -> _builtins.int:
        return pulumi.get(self, "replicas")

    @_builtins.property
    @pulumi.getter
    def storage(self) -> 'outputs.GetPostgresflexInstanceStorageResult':
        return pulumi.get(self, "storage")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")


class AwaitableGetPostgresflexInstanceResult(GetPostgresflexInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPostgresflexInstanceResult(
            acls=self.acls,
            backup_schedule=self.backup_schedule,
            flavor=self.flavor,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            project_id=self.project_id,
            region=self.region,
            replicas=self.replicas,
            storage=self.storage,
            version=self.version)


def get_postgresflex_instance(instance_id: Optional[_builtins.str] = None,
                              project_id: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPostgresflexInstanceResult:
    """
    Postgres Flex instance data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: ID of the PostgresFlex instance.
    :param _builtins.str project_id: STACKIT project ID to which the instance is associated.
    :param _builtins.str region: The resource region. If not defined, the provider region is used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getPostgresflexInstance:getPostgresflexInstance', __args__, opts=opts, typ=GetPostgresflexInstanceResult).value

    return AwaitableGetPostgresflexInstanceResult(
        acls=pulumi.get(__ret__, 'acls'),
        backup_schedule=pulumi.get(__ret__, 'backup_schedule'),
        flavor=pulumi.get(__ret__, 'flavor'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        replicas=pulumi.get(__ret__, 'replicas'),
        storage=pulumi.get(__ret__, 'storage'),
        version=pulumi.get(__ret__, 'version'))
def get_postgresflex_instance_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPostgresflexInstanceResult]:
    """
    Postgres Flex instance data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: ID of the PostgresFlex instance.
    :param _builtins.str project_id: STACKIT project ID to which the instance is associated.
    :param _builtins.str region: The resource region. If not defined, the provider region is used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getPostgresflexInstance:getPostgresflexInstance', __args__, opts=opts, typ=GetPostgresflexInstanceResult)
    return __ret__.apply(lambda __response__: GetPostgresflexInstanceResult(
        acls=pulumi.get(__response__, 'acls'),
        backup_schedule=pulumi.get(__response__, 'backup_schedule'),
        flavor=pulumi.get(__response__, 'flavor'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        replicas=pulumi.get(__response__, 'replicas'),
        storage=pulumi.get(__response__, 'storage'),
        version=pulumi.get(__response__, 'version')))
