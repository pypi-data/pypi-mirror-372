# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAffinityGroupResult',
    'AwaitableGetAffinityGroupResult',
    'get_affinity_group',
    'get_affinity_group_output',
]

@pulumi.output_type
class GetAffinityGroupResult:
    """
    A collection of values returned by getAffinityGroup.
    """
    def __init__(__self__, affinity_group_id=None, id=None, members=None, name=None, policy=None, project_id=None):
        if affinity_group_id and not isinstance(affinity_group_id, str):
            raise TypeError("Expected argument 'affinity_group_id' to be a str")
        pulumi.set(__self__, "affinity_group_id", affinity_group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy and not isinstance(policy, str):
            raise TypeError("Expected argument 'policy' to be a str")
        pulumi.set(__self__, "policy", policy)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)

    @_builtins.property
    @pulumi.getter(name="affinityGroupId")
    def affinity_group_id(self) -> _builtins.str:
        """
        The affinity group ID.
        """
        return pulumi.get(self, "affinity_group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence[_builtins.str]:
        """
        Affinity Group schema. Must have a `region` specified in the provider configuration.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the affinity group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> _builtins.str:
        """
        The policy of the affinity group.
        """
        return pulumi.get(self, "policy")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        STACKIT Project ID to which the affinity group is associated.
        """
        return pulumi.get(self, "project_id")


class AwaitableGetAffinityGroupResult(GetAffinityGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAffinityGroupResult(
            affinity_group_id=self.affinity_group_id,
            id=self.id,
            members=self.members,
            name=self.name,
            policy=self.policy,
            project_id=self.project_id)


def get_affinity_group(affinity_group_id: Optional[_builtins.str] = None,
                       project_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAffinityGroupResult:
    """
    Affinity Group schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str affinity_group_id: The affinity group ID.
    :param _builtins.str project_id: STACKIT Project ID to which the affinity group is associated.
    """
    __args__ = dict()
    __args__['affinityGroupId'] = affinity_group_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getAffinityGroup:getAffinityGroup', __args__, opts=opts, typ=GetAffinityGroupResult).value

    return AwaitableGetAffinityGroupResult(
        affinity_group_id=pulumi.get(__ret__, 'affinity_group_id'),
        id=pulumi.get(__ret__, 'id'),
        members=pulumi.get(__ret__, 'members'),
        name=pulumi.get(__ret__, 'name'),
        policy=pulumi.get(__ret__, 'policy'),
        project_id=pulumi.get(__ret__, 'project_id'))
def get_affinity_group_output(affinity_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                              project_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAffinityGroupResult]:
    """
    Affinity Group schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str affinity_group_id: The affinity group ID.
    :param _builtins.str project_id: STACKIT Project ID to which the affinity group is associated.
    """
    __args__ = dict()
    __args__['affinityGroupId'] = affinity_group_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getAffinityGroup:getAffinityGroup', __args__, opts=opts, typ=GetAffinityGroupResult)
    return __ret__.apply(lambda __response__: GetAffinityGroupResult(
        affinity_group_id=pulumi.get(__response__, 'affinity_group_id'),
        id=pulumi.get(__response__, 'id'),
        members=pulumi.get(__response__, 'members'),
        name=pulumi.get(__response__, 'name'),
        policy=pulumi.get(__response__, 'policy'),
        project_id=pulumi.get(__response__, 'project_id')))
