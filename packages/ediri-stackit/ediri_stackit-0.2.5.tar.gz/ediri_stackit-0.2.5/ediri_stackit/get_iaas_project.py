# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetIaasProjectResult',
    'AwaitableGetIaasProjectResult',
    'get_iaas_project',
    'get_iaas_project_output',
]

@pulumi.output_type
class GetIaasProjectResult:
    """
    A collection of values returned by getIaasProject.
    """
    def __init__(__self__, area_id=None, created_at=None, id=None, internet_access=None, project_id=None, state=None, updated_at=None):
        if area_id and not isinstance(area_id, str):
            raise TypeError("Expected argument 'area_id' to be a str")
        pulumi.set(__self__, "area_id", area_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internet_access and not isinstance(internet_access, bool):
            raise TypeError("Expected argument 'internet_access' to be a bool")
        pulumi.set(__self__, "internet_access", internet_access)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="areaId")
    def area_id(self) -> _builtins.str:
        """
        The area ID to which the project belongs to.
        """
        return pulumi.get(self, "area_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Date-time when the project was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> _builtins.bool:
        """
        Specifies if the project has internet_access
        """
        return pulumi.get(self, "internet_access")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        STACKIT project ID.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the state of the project.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Date-time when the project was last updated.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetIaasProjectResult(GetIaasProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIaasProjectResult(
            area_id=self.area_id,
            created_at=self.created_at,
            id=self.id,
            internet_access=self.internet_access,
            project_id=self.project_id,
            state=self.state,
            updated_at=self.updated_at)


def get_iaas_project(project_id: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIaasProjectResult:
    """
    Project details. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str project_id: STACKIT project ID.
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getIaasProject:getIaasProject', __args__, opts=opts, typ=GetIaasProjectResult).value

    return AwaitableGetIaasProjectResult(
        area_id=pulumi.get(__ret__, 'area_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        internet_access=pulumi.get(__ret__, 'internet_access'),
        project_id=pulumi.get(__ret__, 'project_id'),
        state=pulumi.get(__ret__, 'state'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_iaas_project_output(project_id: Optional[pulumi.Input[_builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIaasProjectResult]:
    """
    Project details. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str project_id: STACKIT project ID.
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getIaasProject:getIaasProject', __args__, opts=opts, typ=GetIaasProjectResult)
    return __ret__.apply(lambda __response__: GetIaasProjectResult(
        area_id=pulumi.get(__response__, 'area_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        id=pulumi.get(__response__, 'id'),
        internet_access=pulumi.get(__response__, 'internet_access'),
        project_id=pulumi.get(__response__, 'project_id'),
        state=pulumi.get(__response__, 'state'),
        updated_at=pulumi.get(__response__, 'updated_at')))
