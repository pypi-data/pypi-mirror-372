# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetObservabilityScrapeconfigResult',
    'AwaitableGetObservabilityScrapeconfigResult',
    'get_observability_scrapeconfig',
    'get_observability_scrapeconfig_output',
]

@pulumi.output_type
class GetObservabilityScrapeconfigResult:
    """
    A collection of values returned by getObservabilityScrapeconfig.
    """
    def __init__(__self__, basic_auth=None, id=None, instance_id=None, metrics_path=None, name=None, project_id=None, saml2=None, sample_limit=None, scheme=None, scrape_interval=None, scrape_timeout=None, targets=None):
        if basic_auth and not isinstance(basic_auth, dict):
            raise TypeError("Expected argument 'basic_auth' to be a dict")
        pulumi.set(__self__, "basic_auth", basic_auth)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if metrics_path and not isinstance(metrics_path, str):
            raise TypeError("Expected argument 'metrics_path' to be a str")
        pulumi.set(__self__, "metrics_path", metrics_path)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if saml2 and not isinstance(saml2, dict):
            raise TypeError("Expected argument 'saml2' to be a dict")
        pulumi.set(__self__, "saml2", saml2)
        if sample_limit and not isinstance(sample_limit, int):
            raise TypeError("Expected argument 'sample_limit' to be a int")
        pulumi.set(__self__, "sample_limit", sample_limit)
        if scheme and not isinstance(scheme, str):
            raise TypeError("Expected argument 'scheme' to be a str")
        pulumi.set(__self__, "scheme", scheme)
        if scrape_interval and not isinstance(scrape_interval, str):
            raise TypeError("Expected argument 'scrape_interval' to be a str")
        pulumi.set(__self__, "scrape_interval", scrape_interval)
        if scrape_timeout and not isinstance(scrape_timeout, str):
            raise TypeError("Expected argument 'scrape_timeout' to be a str")
        pulumi.set(__self__, "scrape_timeout", scrape_timeout)
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        pulumi.set(__self__, "targets", targets)

    @_builtins.property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> 'outputs.GetObservabilityScrapeconfigBasicAuthResult':
        """
        A basic authentication block.
        """
        return pulumi.get(self, "basic_auth")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Observability instance ID to which the scraping job is associated.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="metricsPath")
    def metrics_path(self) -> _builtins.str:
        """
        Specifies the job scraping url path.
        """
        return pulumi.get(self, "metrics_path")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the scraping job
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        STACKIT project ID to which the scraping job is associated.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def saml2(self) -> 'outputs.GetObservabilityScrapeconfigSaml2Result':
        """
        A SAML2 configuration block.
        """
        return pulumi.get(self, "saml2")

    @_builtins.property
    @pulumi.getter(name="sampleLimit")
    def sample_limit(self) -> _builtins.int:
        """
        Specifies the scrape sample limit.
        """
        return pulumi.get(self, "sample_limit")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> _builtins.str:
        """
        Specifies the http scheme.
        """
        return pulumi.get(self, "scheme")

    @_builtins.property
    @pulumi.getter(name="scrapeInterval")
    def scrape_interval(self) -> _builtins.str:
        """
        Specifies the scrape interval as duration string.
        """
        return pulumi.get(self, "scrape_interval")

    @_builtins.property
    @pulumi.getter(name="scrapeTimeout")
    def scrape_timeout(self) -> _builtins.str:
        """
        Specifies the scrape timeout as duration string.
        """
        return pulumi.get(self, "scrape_timeout")

    @_builtins.property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetObservabilityScrapeconfigTargetResult']:
        """
        The targets list (specified by the static config).
        """
        return pulumi.get(self, "targets")


class AwaitableGetObservabilityScrapeconfigResult(GetObservabilityScrapeconfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetObservabilityScrapeconfigResult(
            basic_auth=self.basic_auth,
            id=self.id,
            instance_id=self.instance_id,
            metrics_path=self.metrics_path,
            name=self.name,
            project_id=self.project_id,
            saml2=self.saml2,
            sample_limit=self.sample_limit,
            scheme=self.scheme,
            scrape_interval=self.scrape_interval,
            scrape_timeout=self.scrape_timeout,
            targets=self.targets)


def get_observability_scrapeconfig(instance_id: Optional[_builtins.str] = None,
                                   name: Optional[_builtins.str] = None,
                                   project_id: Optional[_builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetObservabilityScrapeconfigResult:
    """
    Observability scrape config data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: Observability instance ID to which the scraping job is associated.
    :param _builtins.str name: Specifies the name of the scraping job
    :param _builtins.str project_id: STACKIT project ID to which the scraping job is associated.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getObservabilityScrapeconfig:getObservabilityScrapeconfig', __args__, opts=opts, typ=GetObservabilityScrapeconfigResult).value

    return AwaitableGetObservabilityScrapeconfigResult(
        basic_auth=pulumi.get(__ret__, 'basic_auth'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        metrics_path=pulumi.get(__ret__, 'metrics_path'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        saml2=pulumi.get(__ret__, 'saml2'),
        sample_limit=pulumi.get(__ret__, 'sample_limit'),
        scheme=pulumi.get(__ret__, 'scheme'),
        scrape_interval=pulumi.get(__ret__, 'scrape_interval'),
        scrape_timeout=pulumi.get(__ret__, 'scrape_timeout'),
        targets=pulumi.get(__ret__, 'targets'))
def get_observability_scrapeconfig_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          name: Optional[pulumi.Input[_builtins.str]] = None,
                                          project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetObservabilityScrapeconfigResult]:
    """
    Observability scrape config data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: Observability instance ID to which the scraping job is associated.
    :param _builtins.str name: Specifies the name of the scraping job
    :param _builtins.str project_id: STACKIT project ID to which the scraping job is associated.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getObservabilityScrapeconfig:getObservabilityScrapeconfig', __args__, opts=opts, typ=GetObservabilityScrapeconfigResult)
    return __ret__.apply(lambda __response__: GetObservabilityScrapeconfigResult(
        basic_auth=pulumi.get(__response__, 'basic_auth'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        metrics_path=pulumi.get(__response__, 'metrics_path'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        saml2=pulumi.get(__response__, 'saml2'),
        sample_limit=pulumi.get(__response__, 'sample_limit'),
        scheme=pulumi.get(__response__, 'scheme'),
        scrape_interval=pulumi.get(__response__, 'scrape_interval'),
        scrape_timeout=pulumi.get(__response__, 'scrape_timeout'),
        targets=pulumi.get(__response__, 'targets')))
