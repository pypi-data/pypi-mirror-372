# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetMariadbInstanceResult',
    'AwaitableGetMariadbInstanceResult',
    'get_mariadb_instance',
    'get_mariadb_instance_output',
]

@pulumi.output_type
class GetMariadbInstanceResult:
    """
    A collection of values returned by getMariadbInstance.
    """
    def __init__(__self__, cf_guid=None, cf_organization_guid=None, cf_space_guid=None, dashboard_url=None, id=None, image_url=None, instance_id=None, name=None, parameters=None, plan_id=None, plan_name=None, project_id=None, version=None):
        if cf_guid and not isinstance(cf_guid, str):
            raise TypeError("Expected argument 'cf_guid' to be a str")
        pulumi.set(__self__, "cf_guid", cf_guid)
        if cf_organization_guid and not isinstance(cf_organization_guid, str):
            raise TypeError("Expected argument 'cf_organization_guid' to be a str")
        pulumi.set(__self__, "cf_organization_guid", cf_organization_guid)
        if cf_space_guid and not isinstance(cf_space_guid, str):
            raise TypeError("Expected argument 'cf_space_guid' to be a str")
        pulumi.set(__self__, "cf_space_guid", cf_space_guid)
        if dashboard_url and not isinstance(dashboard_url, str):
            raise TypeError("Expected argument 'dashboard_url' to be a str")
        pulumi.set(__self__, "dashboard_url", dashboard_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_url and not isinstance(image_url, str):
            raise TypeError("Expected argument 'image_url' to be a str")
        pulumi.set(__self__, "image_url", image_url)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parameters and not isinstance(parameters, dict):
            raise TypeError("Expected argument 'parameters' to be a dict")
        pulumi.set(__self__, "parameters", parameters)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)
        if plan_name and not isinstance(plan_name, str):
            raise TypeError("Expected argument 'plan_name' to be a str")
        pulumi.set(__self__, "plan_name", plan_name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="cfGuid")
    def cf_guid(self) -> _builtins.str:
        return pulumi.get(self, "cf_guid")

    @_builtins.property
    @pulumi.getter(name="cfOrganizationGuid")
    def cf_organization_guid(self) -> _builtins.str:
        return pulumi.get(self, "cf_organization_guid")

    @_builtins.property
    @pulumi.getter(name="cfSpaceGuid")
    def cf_space_guid(self) -> _builtins.str:
        return pulumi.get(self, "cf_space_guid")

    @_builtins.property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> _builtins.str:
        return pulumi.get(self, "dashboard_url")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> _builtins.str:
        return pulumi.get(self, "image_url")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        ID of the MariaDB instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def parameters(self) -> 'outputs.GetMariadbInstanceParametersResult':
        return pulumi.get(self, "parameters")

    @_builtins.property
    @pulumi.getter(name="planId")
    def plan_id(self) -> _builtins.str:
        """
        The selected plan ID.
        """
        return pulumi.get(self, "plan_id")

    @_builtins.property
    @pulumi.getter(name="planName")
    def plan_name(self) -> _builtins.str:
        """
        The selected plan name.
        """
        return pulumi.get(self, "plan_name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        STACKIT Project ID to which the instance is associated.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The service version.
        """
        return pulumi.get(self, "version")


class AwaitableGetMariadbInstanceResult(GetMariadbInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMariadbInstanceResult(
            cf_guid=self.cf_guid,
            cf_organization_guid=self.cf_organization_guid,
            cf_space_guid=self.cf_space_guid,
            dashboard_url=self.dashboard_url,
            id=self.id,
            image_url=self.image_url,
            instance_id=self.instance_id,
            name=self.name,
            parameters=self.parameters,
            plan_id=self.plan_id,
            plan_name=self.plan_name,
            project_id=self.project_id,
            version=self.version)


def get_mariadb_instance(instance_id: Optional[_builtins.str] = None,
                         project_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMariadbInstanceResult:
    """
    MariaDB instance data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: ID of the MariaDB instance.
    :param _builtins.str project_id: STACKIT Project ID to which the instance is associated.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getMariadbInstance:getMariadbInstance', __args__, opts=opts, typ=GetMariadbInstanceResult).value

    return AwaitableGetMariadbInstanceResult(
        cf_guid=pulumi.get(__ret__, 'cf_guid'),
        cf_organization_guid=pulumi.get(__ret__, 'cf_organization_guid'),
        cf_space_guid=pulumi.get(__ret__, 'cf_space_guid'),
        dashboard_url=pulumi.get(__ret__, 'dashboard_url'),
        id=pulumi.get(__ret__, 'id'),
        image_url=pulumi.get(__ret__, 'image_url'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        parameters=pulumi.get(__ret__, 'parameters'),
        plan_id=pulumi.get(__ret__, 'plan_id'),
        plan_name=pulumi.get(__ret__, 'plan_name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        version=pulumi.get(__ret__, 'version'))
def get_mariadb_instance_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMariadbInstanceResult]:
    """
    MariaDB instance data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: ID of the MariaDB instance.
    :param _builtins.str project_id: STACKIT Project ID to which the instance is associated.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getMariadbInstance:getMariadbInstance', __args__, opts=opts, typ=GetMariadbInstanceResult)
    return __ret__.apply(lambda __response__: GetMariadbInstanceResult(
        cf_guid=pulumi.get(__response__, 'cf_guid'),
        cf_organization_guid=pulumi.get(__response__, 'cf_organization_guid'),
        cf_space_guid=pulumi.get(__response__, 'cf_space_guid'),
        dashboard_url=pulumi.get(__response__, 'dashboard_url'),
        id=pulumi.get(__response__, 'id'),
        image_url=pulumi.get(__response__, 'image_url'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        parameters=pulumi.get(__response__, 'parameters'),
        plan_id=pulumi.get(__response__, 'plan_id'),
        plan_name=pulumi.get(__response__, 'plan_name'),
        project_id=pulumi.get(__response__, 'project_id'),
        version=pulumi.get(__response__, 'version')))
