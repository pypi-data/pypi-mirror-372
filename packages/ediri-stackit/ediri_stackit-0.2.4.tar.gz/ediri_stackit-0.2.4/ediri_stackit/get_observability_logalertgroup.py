# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetObservabilityLogalertgroupResult',
    'AwaitableGetObservabilityLogalertgroupResult',
    'get_observability_logalertgroup',
    'get_observability_logalertgroup_output',
]

@pulumi.output_type
class GetObservabilityLogalertgroupResult:
    """
    A collection of values returned by getObservabilityLogalertgroup.
    """
    def __init__(__self__, id=None, instance_id=None, interval=None, name=None, project_id=None, rules=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if interval and not isinstance(interval, str):
            raise TypeError("Expected argument 'interval' to be a str")
        pulumi.set(__self__, "interval", interval)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        Observability instance ID to which the log alert group is associated.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.str:
        """
        Specifies the frequency at which rules within the group are evaluated. The interval must be at least 60 seconds and defaults to 60 seconds if not set. Supported formats include hours, minutes, and seconds, either singly or in combination. Examples of valid formats are: '5h30m40s', '5h', '5h30m', '60m', and '60s'.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the log alert group. Is the identifier and must be unique in the group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        STACKIT project ID to which the log alert group is associated.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetObservabilityLogalertgroupRuleResult']:
        return pulumi.get(self, "rules")


class AwaitableGetObservabilityLogalertgroupResult(GetObservabilityLogalertgroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetObservabilityLogalertgroupResult(
            id=self.id,
            instance_id=self.instance_id,
            interval=self.interval,
            name=self.name,
            project_id=self.project_id,
            rules=self.rules)


def get_observability_logalertgroup(instance_id: Optional[_builtins.str] = None,
                                    name: Optional[_builtins.str] = None,
                                    project_id: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetObservabilityLogalertgroupResult:
    """
    Observability log alert group datasource schema. Used to create alerts based on logs (Loki). Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: Observability instance ID to which the log alert group is associated.
    :param _builtins.str name: The name of the log alert group. Is the identifier and must be unique in the group.
    :param _builtins.str project_id: STACKIT project ID to which the log alert group is associated.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getObservabilityLogalertgroup:getObservabilityLogalertgroup', __args__, opts=opts, typ=GetObservabilityLogalertgroupResult).value

    return AwaitableGetObservabilityLogalertgroupResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        interval=pulumi.get(__ret__, 'interval'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        rules=pulumi.get(__ret__, 'rules'))
def get_observability_logalertgroup_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           name: Optional[pulumi.Input[_builtins.str]] = None,
                                           project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetObservabilityLogalertgroupResult]:
    """
    Observability log alert group datasource schema. Used to create alerts based on logs (Loki). Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: Observability instance ID to which the log alert group is associated.
    :param _builtins.str name: The name of the log alert group. Is the identifier and must be unique in the group.
    :param _builtins.str project_id: STACKIT project ID to which the log alert group is associated.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getObservabilityLogalertgroup:getObservabilityLogalertgroup', __args__, opts=opts, typ=GetObservabilityLogalertgroupResult)
    return __ret__.apply(lambda __response__: GetObservabilityLogalertgroupResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        interval=pulumi.get(__response__, 'interval'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        rules=pulumi.get(__response__, 'rules')))
