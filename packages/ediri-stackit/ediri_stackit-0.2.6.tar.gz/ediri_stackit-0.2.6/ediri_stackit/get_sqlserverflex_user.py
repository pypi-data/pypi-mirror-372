# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSqlserverflexUserResult',
    'AwaitableGetSqlserverflexUserResult',
    'get_sqlserverflex_user',
    'get_sqlserverflex_user_output',
]

@pulumi.output_type
class GetSqlserverflexUserResult:
    """
    A collection of values returned by getSqlserverflexUser.
    """
    def __init__(__self__, host=None, id=None, instance_id=None, port=None, project_id=None, region=None, roles=None, user_id=None, username=None):
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        ID of the SQLServer Flex instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        STACKIT project ID to which the instance is associated.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        """
        The resource region. If not defined, the provider region is used.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.str]:
        """
        Database access levels for the user.
        """
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        """
        Username of the SQLServer Flex instance.
        """
        return pulumi.get(self, "username")


class AwaitableGetSqlserverflexUserResult(GetSqlserverflexUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlserverflexUserResult(
            host=self.host,
            id=self.id,
            instance_id=self.instance_id,
            port=self.port,
            project_id=self.project_id,
            region=self.region,
            roles=self.roles,
            user_id=self.user_id,
            username=self.username)


def get_sqlserverflex_user(instance_id: Optional[_builtins.str] = None,
                           project_id: Optional[_builtins.str] = None,
                           region: Optional[_builtins.str] = None,
                           user_id: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlserverflexUserResult:
    """
    SQLServer Flex user data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: ID of the SQLServer Flex instance.
    :param _builtins.str project_id: STACKIT project ID to which the instance is associated.
    :param _builtins.str region: The resource region. If not defined, the provider region is used.
    :param _builtins.str user_id: User ID.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getSqlserverflexUser:getSqlserverflexUser', __args__, opts=opts, typ=GetSqlserverflexUserResult).value

    return AwaitableGetSqlserverflexUserResult(
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        port=pulumi.get(__ret__, 'port'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        roles=pulumi.get(__ret__, 'roles'),
        user_id=pulumi.get(__ret__, 'user_id'),
        username=pulumi.get(__ret__, 'username'))
def get_sqlserverflex_user_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  user_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSqlserverflexUserResult]:
    """
    SQLServer Flex user data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str instance_id: ID of the SQLServer Flex instance.
    :param _builtins.str project_id: STACKIT project ID to which the instance is associated.
    :param _builtins.str region: The resource region. If not defined, the provider region is used.
    :param _builtins.str user_id: User ID.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['userId'] = user_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getSqlserverflexUser:getSqlserverflexUser', __args__, opts=opts, typ=GetSqlserverflexUserResult)
    return __ret__.apply(lambda __response__: GetSqlserverflexUserResult(
        host=pulumi.get(__response__, 'host'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        port=pulumi.get(__response__, 'port'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        roles=pulumi.get(__response__, 'roles'),
        user_id=pulumi.get(__response__, 'user_id'),
        username=pulumi.get(__response__, 'username')))
