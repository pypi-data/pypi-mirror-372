# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

import types

__config__ = pulumi.Config('stackit')


class _ExportableConfig(types.ModuleType):
    @_builtins.property
    def authorization_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Membership service
        """
        return __config__.get('authorizationCustomEndpoint')

    @_builtins.property
    def cdn_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the CDN service
        """
        return __config__.get('cdnCustomEndpoint')

    @_builtins.property
    def credentials_path(self) -> Optional[str]:
        """
        Path of JSON from where the credentials are read. Takes precedence over the env var `STACKIT_CREDENTIALS_PATH`. Default
        value is `~/.stackit/credentials.json`.
        """
        return __config__.get('credentialsPath')

    @_builtins.property
    def default_region(self) -> Optional[str]:
        """
        Region will be used as the default location for regional services. Not all services require a region, some are global
        """
        return __config__.get('defaultRegion')

    @_builtins.property
    def dns_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the DNS service
        """
        return __config__.get('dnsCustomEndpoint')

    @_builtins.property
    def enable_beta_resources(self) -> Optional[bool]:
        """
        Enable beta resources. Default is false.
        """
        return __config__.get_bool('enableBetaResources')

    @_builtins.property
    def experiments(self) -> Optional[str]:
        """
        Enables experiments. These are unstable features without official support. More information can be found in the README.
        Available Experiments: iam, routing-tables, network
        """
        return __config__.get('experiments')

    @_builtins.property
    def git_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Git service
        """
        return __config__.get('gitCustomEndpoint')

    @_builtins.property
    def iaas_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the IaaS service
        """
        return __config__.get('iaasCustomEndpoint')

    @_builtins.property
    def loadbalancer_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Load Balancer service
        """
        return __config__.get('loadbalancerCustomEndpoint')

    @_builtins.property
    def logme_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the LogMe service
        """
        return __config__.get('logmeCustomEndpoint')

    @_builtins.property
    def mariadb_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the MariaDB service
        """
        return __config__.get('mariadbCustomEndpoint')

    @_builtins.property
    def modelserving_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the AI Model Serving service
        """
        return __config__.get('modelservingCustomEndpoint')

    @_builtins.property
    def mongodbflex_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the MongoDB Flex service
        """
        return __config__.get('mongodbflexCustomEndpoint')

    @_builtins.property
    def objectstorage_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Object Storage service
        """
        return __config__.get('objectstorageCustomEndpoint')

    @_builtins.property
    def observability_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Observability service
        """
        return __config__.get('observabilityCustomEndpoint')

    @_builtins.property
    def opensearch_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the OpenSearch service
        """
        return __config__.get('opensearchCustomEndpoint')

    @_builtins.property
    def postgresflex_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the PostgresFlex service
        """
        return __config__.get('postgresflexCustomEndpoint')

    @_builtins.property
    def private_key(self) -> Optional[str]:
        """
        Private RSA key used for authentication, relevant for the key flow. It takes precedence over the private key that is
        included in the service account key.
        """
        return __config__.get('privateKey')

    @_builtins.property
    def private_key_path(self) -> Optional[str]:
        """
        Path for the private RSA key used for authentication, relevant for the key flow. It takes precedence over the private
        key that is included in the service account key.
        """
        return __config__.get('privateKeyPath')

    @_builtins.property
    def rabbitmq_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the RabbitMQ service
        """
        return __config__.get('rabbitmqCustomEndpoint')

    @_builtins.property
    def redis_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Redis service
        """
        return __config__.get('redisCustomEndpoint')

    @_builtins.property
    def region(self) -> Optional[str]:
        """
        Region will be used as the default location for regional services. Not all services require a region, some are global
        """
        return __config__.get('region')

    @_builtins.property
    def resourcemanager_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Resource Manager service
        """
        return __config__.get('resourcemanagerCustomEndpoint')

    @_builtins.property
    def secretsmanager_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Secrets Manager service
        """
        return __config__.get('secretsmanagerCustomEndpoint')

    @_builtins.property
    def server_backup_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Server Backup service
        """
        return __config__.get('serverBackupCustomEndpoint')

    @_builtins.property
    def server_update_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Server Update service
        """
        return __config__.get('serverUpdateCustomEndpoint')

    @_builtins.property
    def service_account_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Service Account service
        """
        return __config__.get('serviceAccountCustomEndpoint')

    @_builtins.property
    def service_account_email(self) -> Optional[str]:
        """
        Service account email. It can also be set using the environment variable STACKIT_SERVICE_ACCOUNT_EMAIL. It is required
        if you want to use the resource manager project resource.
        """
        return __config__.get('serviceAccountEmail')

    @_builtins.property
    def service_account_key(self) -> Optional[str]:
        """
        Service account key used for authentication. If set, the key flow will be used to authenticate all operations.
        """
        return __config__.get('serviceAccountKey')

    @_builtins.property
    def service_account_key_path(self) -> Optional[str]:
        """
        Path for the service account key used for authentication. If set, the key flow will be used to authenticate all
        operations.
        """
        return __config__.get('serviceAccountKeyPath')

    @_builtins.property
    def service_account_token(self) -> Optional[str]:
        """
        Token used for authentication. If set, the token flow will be used to authenticate all operations.
        """
        return __config__.get('serviceAccountToken')

    @_builtins.property
    def service_enablement_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Service Enablement API
        """
        return __config__.get('serviceEnablementCustomEndpoint')

    @_builtins.property
    def ske_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the Kubernetes Engine (SKE) service
        """
        return __config__.get('skeCustomEndpoint')

    @_builtins.property
    def sqlserverflex_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the SQL Server Flex service
        """
        return __config__.get('sqlserverflexCustomEndpoint')

    @_builtins.property
    def token_custom_endpoint(self) -> Optional[str]:
        """
        Custom endpoint for the token API, which is used to request access tokens when using the key flow
        """
        return __config__.get('tokenCustomEndpoint')

