# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetRabbitmqCredentialResult',
    'AwaitableGetRabbitmqCredentialResult',
    'get_rabbitmq_credential',
    'get_rabbitmq_credential_output',
]

@pulumi.output_type
class GetRabbitmqCredentialResult:
    """
    A collection of values returned by getRabbitmqCredential.
    """
    def __init__(__self__, credential_id=None, host=None, hosts=None, http_api_uri=None, http_api_uris=None, id=None, instance_id=None, management=None, password=None, port=None, project_id=None, uri=None, uris=None, username=None):
        if credential_id and not isinstance(credential_id, str):
            raise TypeError("Expected argument 'credential_id' to be a str")
        pulumi.set(__self__, "credential_id", credential_id)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if http_api_uri and not isinstance(http_api_uri, str):
            raise TypeError("Expected argument 'http_api_uri' to be a str")
        pulumi.set(__self__, "http_api_uri", http_api_uri)
        if http_api_uris and not isinstance(http_api_uris, list):
            raise TypeError("Expected argument 'http_api_uris' to be a list")
        pulumi.set(__self__, "http_api_uris", http_api_uris)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if management and not isinstance(management, str):
            raise TypeError("Expected argument 'management' to be a str")
        pulumi.set(__self__, "management", management)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if uri and not isinstance(uri, str):
            raise TypeError("Expected argument 'uri' to be a str")
        pulumi.set(__self__, "uri", uri)
        if uris and not isinstance(uris, list):
            raise TypeError("Expected argument 'uris' to be a list")
        pulumi.set(__self__, "uris", uris)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter(name="credentialId")
    def credential_id(self) -> _builtins.str:
        """
        The credential's ID.
        """
        return pulumi.get(self, "credential_id")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def hosts(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "hosts")

    @_builtins.property
    @pulumi.getter(name="httpApiUri")
    def http_api_uri(self) -> _builtins.str:
        return pulumi.get(self, "http_api_uri")

    @_builtins.property
    @pulumi.getter(name="httpApiUris")
    def http_api_uris(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "http_api_uris")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        ID of the RabbitMQ instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def management(self) -> _builtins.str:
        return pulumi.get(self, "management")

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> _builtins.str:
        """
        STACKIT project ID to which the instance is associated.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def uri(self) -> _builtins.str:
        return pulumi.get(self, "uri")

    @_builtins.property
    @pulumi.getter
    def uris(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "uris")

    @_builtins.property
    @pulumi.getter
    def username(self) -> _builtins.str:
        return pulumi.get(self, "username")


class AwaitableGetRabbitmqCredentialResult(GetRabbitmqCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRabbitmqCredentialResult(
            credential_id=self.credential_id,
            host=self.host,
            hosts=self.hosts,
            http_api_uri=self.http_api_uri,
            http_api_uris=self.http_api_uris,
            id=self.id,
            instance_id=self.instance_id,
            management=self.management,
            password=self.password,
            port=self.port,
            project_id=self.project_id,
            uri=self.uri,
            uris=self.uris,
            username=self.username)


def get_rabbitmq_credential(credential_id: Optional[_builtins.str] = None,
                            instance_id: Optional[_builtins.str] = None,
                            project_id: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRabbitmqCredentialResult:
    """
    RabbitMQ credential data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str credential_id: The credential's ID.
    :param _builtins.str instance_id: ID of the RabbitMQ instance.
    :param _builtins.str project_id: STACKIT project ID to which the instance is associated.
    """
    __args__ = dict()
    __args__['credentialId'] = credential_id
    __args__['instanceId'] = instance_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('stackit:index/getRabbitmqCredential:getRabbitmqCredential', __args__, opts=opts, typ=GetRabbitmqCredentialResult).value

    return AwaitableGetRabbitmqCredentialResult(
        credential_id=pulumi.get(__ret__, 'credential_id'),
        host=pulumi.get(__ret__, 'host'),
        hosts=pulumi.get(__ret__, 'hosts'),
        http_api_uri=pulumi.get(__ret__, 'http_api_uri'),
        http_api_uris=pulumi.get(__ret__, 'http_api_uris'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        management=pulumi.get(__ret__, 'management'),
        password=pulumi.get(__ret__, 'password'),
        port=pulumi.get(__ret__, 'port'),
        project_id=pulumi.get(__ret__, 'project_id'),
        uri=pulumi.get(__ret__, 'uri'),
        uris=pulumi.get(__ret__, 'uris'),
        username=pulumi.get(__ret__, 'username'))
def get_rabbitmq_credential_output(credential_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   project_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRabbitmqCredentialResult]:
    """
    RabbitMQ credential data source schema. Must have a `region` specified in the provider configuration.

    ## Example Usage


    :param _builtins.str credential_id: The credential's ID.
    :param _builtins.str instance_id: ID of the RabbitMQ instance.
    :param _builtins.str project_id: STACKIT project ID to which the instance is associated.
    """
    __args__ = dict()
    __args__['credentialId'] = credential_id
    __args__['instanceId'] = instance_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('stackit:index/getRabbitmqCredential:getRabbitmqCredential', __args__, opts=opts, typ=GetRabbitmqCredentialResult)
    return __ret__.apply(lambda __response__: GetRabbitmqCredentialResult(
        credential_id=pulumi.get(__response__, 'credential_id'),
        host=pulumi.get(__response__, 'host'),
        hosts=pulumi.get(__response__, 'hosts'),
        http_api_uri=pulumi.get(__response__, 'http_api_uri'),
        http_api_uris=pulumi.get(__response__, 'http_api_uris'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        management=pulumi.get(__response__, 'management'),
        password=pulumi.get(__response__, 'password'),
        port=pulumi.get(__response__, 'port'),
        project_id=pulumi.get(__response__, 'project_id'),
        uri=pulumi.get(__response__, 'uri'),
        uris=pulumi.get(__response__, 'uris'),
        username=pulumi.get(__response__, 'username')))
