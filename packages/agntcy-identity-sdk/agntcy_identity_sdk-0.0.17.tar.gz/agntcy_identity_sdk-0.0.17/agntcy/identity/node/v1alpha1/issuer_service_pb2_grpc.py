# Copyright 2025 Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from agntcy.identity.node.v1alpha1 import issuer_service_pb2 as agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2


class IssuerServiceStub(object):
    """IssuerService is the service that provides ISSUER node operations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/agntcy.identity.node.v1alpha1.IssuerService/Register',
                request_serializer=agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.RegisterIssuerRequest.SerializeToString,
                response_deserializer=agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.RegisterIssuerResponse.FromString,
                _registered_method=True)
        self.GetWellKnown = channel.unary_unary(
                '/agntcy.identity.node.v1alpha1.IssuerService/GetWellKnown',
                request_serializer=agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.GetIssuerWellKnownRequest.SerializeToString,
                response_deserializer=agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.GetIssuerWellKnownResponse.FromString,
                _registered_method=True)


class IssuerServiceServicer(object):
    """IssuerService is the service that provides ISSUER node operations.
    """

    def Register(self, request, context):
        """Register an issuer by providing the issuer details
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWellKnown(self, request, context):
        """Returns the well-known document content for an issuer in
        Json Web Key Set (JWKS) format
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IssuerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.RegisterIssuerRequest.FromString,
                    response_serializer=agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.RegisterIssuerResponse.SerializeToString,
            ),
            'GetWellKnown': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWellKnown,
                    request_deserializer=agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.GetIssuerWellKnownRequest.FromString,
                    response_serializer=agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.GetIssuerWellKnownResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agntcy.identity.node.v1alpha1.IssuerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agntcy.identity.node.v1alpha1.IssuerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IssuerService(object):
    """IssuerService is the service that provides ISSUER node operations.
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agntcy.identity.node.v1alpha1.IssuerService/Register',
            agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.RegisterIssuerRequest.SerializeToString,
            agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.RegisterIssuerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWellKnown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agntcy.identity.node.v1alpha1.IssuerService/GetWellKnown',
            agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.GetIssuerWellKnownRequest.SerializeToString,
            agntcy_dot_identity_dot_node_dot_v1alpha1_dot_issuer__service__pb2.GetIssuerWellKnownResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
