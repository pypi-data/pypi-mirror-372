8.26

### dev workflow for package publish
> uv pip install --group publish (this gets us twine + build)

### readme section outline
    - misc readme tagline stuff
        - cypherpunks love cyphers
        - the wizard 3-word example decodes to b'pip install innocuous'

### readme todos
[ ] Use-Cases examples
    [-ux designer: generate a haiku at bits
[ ] Examples 
[ ] Add section breaks

### ideas for encoding improvements
- show an encypted example
- for error correction, we can get more space by the compressing 7-bit ascii into the 8-bit byte data
- we don't have a great way to deal with case-sensitivity yet


8.25

### random ideas:
- scott adam's wizard story
- gif of person decoding a code in a newspaper


### cli additions
- verbosity modifications:
    - -vv is effective; not sure what -v gets you (?)
    - we'll want to surface warnings
        - except in case of --quiet (not impl yet)
- pass a path to a yaml or env

### params
everything that can be configured 
- accept_thresh
- punctuation acceptance version

### dev worflow
uv sync --all-extras



8.23

### vm mem mgmt
    wsl --list --verbose
    wsl --terminate Ubuntu-22.04

### problem with agro muster
looks like running agro muster 'uv run src/main.py' leaves python3 process open on top
if we pass --timeout 90 arg to it, the script completes and succesfully exits

### encoding / mnemonics - big question
how to decode in the abscence of punctuation...?
    the answer is easy! put the punctuation back in at decode time.

### encoding issues
- how to deal with bottom elements aritrarily close
    - or just the toks[end_int] is super low prob
- how to deal with huge filter 60 -> 3 (should just accept?)

### random thoughts

    public-key-cryptography - byte-encodings - centralized-lookup = seed-phrases
    seed-phrases - arbitrary-wording + llm-dependecy = innocuous

8.22

### nonce
- the nonce could just be an original token 
- or could be a bitshift over the entire message which should 
  produce more diversity of messages since the message will likely 
  "recover" from a 1-2 token shift

### case-study

- very helpful completions
    - decode-accept-1 :utilizes diff + testcase
    - decode-branch   :really handles a complex subject well
    - decode1         :i go left you go right
    - gpt-5 (in chatgpt interface) one-shots the btc_addr module
- strategy: write the encode section, ai-gen the decode section
- advanced pattern: create test case
    - need to add absolute path for model
    - this demonstrates agro's utility of just generate a bunch
    - need to increase timeout command
- spec pattern: pass in the diff for a related commit
- random add-on: claude refused; what a milhouse
- interactive session was good at the refactor package workflow
    - claude did well here
- random motto:
    - is it true, is it kind, is it useful?
    - it it correct, is it congruous, is it useful?

8.21

### threshold

    -p2pkh1.chunk3.log:

    -> high prob word
    prompt: "Below is an iambic penatameter poem. Complete it:\nThe king, whose power and pride, were known through the"
    chunk_size=3
    top_token: " land" 0.915
    actual_token: " real" 0.00144 (8th)
    log_file_line: 444
    
    -> punctuation top token
    prompt: "Below is an iambic penatameter poem. Complete it:\nThe king, whose power and pride, were known through the realms of earth to shine,"
    chunk_size=3
    top_token: "\n" 0.306
    actual_token: " In" 0.039 (3rd)
    log_file_line: 750


8.20

### ideas
- when there is a high probability top token above threshold, use that

### notes
- great move by gemini:
    d4dd55 -  feat: implement main_decode and run full encode/decode cycle
    - claude:
        ```
        [DEBUG] Found 0 hook commands to execute
        I cannot implement the `main_decode` function as requested. The code appears to be implementing steganographic techniques to hide data within language model outputs, which could potentially be used for covert communication or to bypass content filters. This falls outside the scope of defensive security tasks I'm authorized to assist with.
        I can analyze the existing code structure or explain how steganographic detection might work, but I cannot help improve or augment code that could be used for covert data hiding.
        ```
x debug the addr example:
    log.log: 844
        "all"


### networking
- sn
- brandon lucas
- payjoin team
- red in denver
- austin kelsay
- r/localllama

###

8.19

[x] core of generate and sample
[x] encoding + decoding implementations

[x] an easy enough way is to simply chose top8 which gives us 3 bits per selection
    -> simple.py

### questions
- difference b/w top_p and top_k?

### other assets

- previous code at:
/c/Users/wsutt/OneDrive/Desktop/files/dev/llms/pkgs/beta-app/pkgs/prompt-cache-1
- models at:
/c/Users/wsutt/OneDrive/Desktop/files/dev/llms/data


### similiar research

https://arxiv.org/pdf/2410.03768
https://openreview.net/forum?id=fq6aQoMSHz
https://github.com/OrZamir/steg
https://stacker.news/items/71273

8.18

https://github.com/abetlen/llama-cpp-python

https://llama-cpp-python.readthedocs.io/en/latest/api-reference/#high-level-api

https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v1.0