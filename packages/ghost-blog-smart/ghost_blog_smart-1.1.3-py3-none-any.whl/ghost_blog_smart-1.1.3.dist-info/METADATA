Metadata-Version: 2.1
Name: ghost-blog-smart
Version: 1.1.3
Summary: A powerful Python library and REST API for creating Ghost CMS blog posts with AI-powered features including Flask API and Docker deployment
Home-page: https://github.com/preangelleo/ghost-blog-smart
Author: leowang.net
Author-email: me@leowang.net
Project-URL: Bug Reports, https://github.com/preangelleo/ghost-blog-smart/issues
Project-URL: Source, https://github.com/preangelleo/ghost-blog-smart
Project-URL: Documentation, https://github.com/preangelleo/ghost-blog-smart#readme
Keywords: ghost cms blog ai gemini imagen markdown jwt api content-management
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content :: Content Management System
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: pypinyin>=0.50.0
Requires-Dist: google-generativeai>=0.8.0
Requires-Dist: markdownify>=0.11.6
Requires-Dist: markdown-it-py>=3.0.0
Requires-Dist: markdown>=3.5.0
Requires-Dist: requests>=2.31.0
Requires-Dist: PyJWT>=2.8.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: google-genai>=1.0.0
Requires-Dist: Pillow>=10.0.0
Requires-Dist: replicate>=1.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: flake8>=4.0; extra == "dev"
Requires-Dist: twine>=4.0; extra == "dev"
Requires-Dist: wheel>=0.37; extra == "dev"
Requires-Dist: setuptools>=65.0; extra == "dev"

# Ghost Blog Smart

üöÄ **A comprehensive solution for Ghost CMS blog management with AI-powered features**

Available as both a **Python Package** and **REST API** with multiple deployment options including Docker, local installation, and PyPI package.

[![PyPI version](https://badge.fury.io/py/ghost-blog-smart.svg)](https://badge.fury.io/py/ghost-blog-smart)
[![Docker Hub](https://img.shields.io/docker/pulls/betashow/ghost-blog-smart-api.svg)](https://hub.docker.com/r/betashow/ghost-blog-smart-api)
[![GitHub Actions](https://github.com/preangelleo/ghost-blog-smart/workflows/Build%20and%20Deploy%20Ghost%20Blog%20Smart%20API/badge.svg)](https://github.com/preangelleo/ghost-blog-smart/actions)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python 3.9+](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/downloads/)

## üéØ **Choose Your Setup Method**

| Method | Best For | Example Files | Documentation Section |
|--------|----------|---------------|----------------------|
| **üê≥ Docker API** | Production deployment, quick testing | `example_usage_API.js` | [Docker Deployment](#-docker-deployment) |
| **üêç Python Package** | Python developers, scripting | `example_usage.py` | [Python Package](#-python-package-usage) |
| **üåê Local API** | Development, customization | `example_usage_API.js` | [Local API Setup](#-local-api-development) |
| **üì¶ PyPI Install** | Simple Python integration | `example_usage.py` | [PyPI Installation](#-pypi-installation) |

## üìñ **Table of Contents**

### üöÄ **Getting Started**
- [üéØ Choose Your Setup Method](#-choose-your-setup-method)
- [üê≥ Docker Deployment](#-docker-deployment)
- [üêç Python Package Usage](#-python-package-usage)
- [üì¶ PyPI Installation](#-pypi-installation)
- [üåê Local API Development](#-local-api-development)

### üìö **Usage Examples**
- [üíª Python Examples (example_usage.py)](#-python-examples-example_usagepy)
- [üåê Node.js API Examples (example_usage_API.js)](#-nodejs-api-examples-example_usage_apijs)

### üìñ **Documentation**
- [‚ú® Features](#-features)
- [üîß REST API Reference](#-rest-api-reference)
- [‚è±Ô∏è Performance & Timeout Guidelines](#Ô∏è-performance--timeout-guidelines)
- [üß™ Testing](#-testing)

---

## üê≥ **Docker Deployment**

> **Recommended for:** Production environments, quick testing, isolation
> 
> **Example File:** `example_usage_API.js` (Node.js client for REST API)

### Quick Start
```bash
# Pull and run the pre-built Docker image
docker pull betashow/ghost-blog-smart-api:latest

# Run with your credentials
docker run -d \
  -p 5000:5000 \
  -e GHOST_ADMIN_API_KEY="your_key_id:your_secret_key" \
  -e GHOST_API_URL="https://your-ghost-site.com" \
  -e GEMINI_API_KEY="your_gemini_key" \
  -e REPLICATE_API_TOKEN="r8_your_replicate_token" \
  -e FLASK_API_KEY="your_secure_api_key" \
  --name ghost-blog-api \
  betashow/ghost-blog-smart-api:latest

# Test the API
curl http://localhost:5000/health
```

### Docker Compose
```yaml
version: '3.8'
services:
  ghost-blog-smart-api:
    image: betashow/ghost-blog-smart-api:latest
    ports:
      - "5000:5000"
    environment:
      - GHOST_ADMIN_API_KEY=your_key_id:your_secret_key
      - GHOST_API_URL=https://your-ghost-site.com
      - GEMINI_API_KEY=your_gemini_key
      - REPLICATE_API_TOKEN=r8_your_replicate_token
      - FLASK_API_KEY=your_secure_api_key
```

**Next Steps:**
- Use `example_usage_API.js` for Node.js integration
- Follow [Node.js API Examples](#-nodejs-api-examples-example_usage_apijs) section

---

## üêç **Python Package Usage**

> **Recommended for:** Python developers, scripting, direct integration
>
> **Example File:** `example_usage.py` (Pure Python usage)

### Installation
```bash
pip install ghost-blog-smart
```

### Basic Usage
```python
from ghost_blog_smart import smart_blog_gateway

# Smart Gateway Method (Recommended)
result = smart_blog_gateway(
    "AI healthcare benefits: faster diagnosis, better accuracy, cost reduction",
    status="published"
)

if result['success']:
    print(f"Post created: {result['url']}")
```

**Next Steps:**
- Follow examples in `example_usage.py`
- See [Python Examples](#-python-examples-example_usagepy) section

---

## üì¶ **PyPI Installation**

> **Recommended for:** Simple Python projects, minimal setup

```bash
# Install from PyPI
pip install ghost-blog-smart

# Use directly in your Python code
from ghost_blog_smart import create_ghost_blog_post, smart_blog_gateway
```

Create `.env` file with your credentials:
```env
GHOST_ADMIN_API_KEY=your_admin_api_key_id:your_secret_key_here
GHOST_API_URL=https://your-ghost-site.com
GEMINI_API_KEY=your_gemini_api_key_here
REPLICATE_API_TOKEN=r8_your_replicate_api_token_here
```

---

## üåê **Local API Development**

> **Recommended for:** Development, customization, testing
>
> **Example Files:** `example_usage_API.js` (Node.js client) + Local Flask API

### Setup
```bash
# Clone the repository
git clone https://github.com/preangelleo/ghost_blog_smart.git
cd ghost_blog_smart

# Install dependencies
pip install -r requirements.txt
pip install -r requirements-api.txt
pip install -e .

# Set up environment variables
cp .env.example .env
# Edit .env with your credentials

# Run the Flask API
python app.py
```

**API runs on:** `http://localhost:5000`

**Next Steps:**
- Use `example_usage_API.js` to test your local API
- Follow [Node.js API Examples](#-nodejs-api-examples-example_usage_apijs) section

---

## üíª **Python Examples (example_usage.py)**

**For:** Python Package usage, PyPI installation, direct Python integration

### Key Examples from `example_usage.py`:

#### Smart Gateway (AI-Enhanced Creation)
```python
from ghost_blog_smart import smart_blog_gateway

result = smart_blog_gateway(
    "Write about AI benefits in healthcare: faster diagnosis, better accuracy",
    status="published",
    preferred_language="English"
)
```

#### Traditional Method
```python
from ghost_blog_smart import create_ghost_blog_post

result = create_ghost_blog_post(
    title="My Blog Post",
    content="Post content in **Markdown**",
    excerpt="Brief summary",
    tags=["Tutorial", "AI"],
    status="published",
    use_generated_feature_image=True,
    prefer_flux=True
)
```

#### Blog Management
```python
from ghost_blog_smart import get_ghost_posts, update_ghost_post, delete_ghost_post

# Get posts
posts = get_ghost_posts(limit=5, status='published')

# Update post
update_ghost_post(post_id="abc123", featured=True)

# Delete post
delete_ghost_post(post_id="abc123")
```

**üìÅ Complete examples available in:** [`example_usage.py`](./example_usage.py)

---

## üåê **Node.js API Examples (example_usage_API.js)**

**For:** Docker deployment, local API server, REST API integration

### Prerequisites
```bash
npm install axios  # HTTP client for API calls
```

### Key Examples from `example_usage_API.js`:

#### Configuration
```javascript
const CONFIG = {
    baseUrl: 'http://localhost:5000',
    apiKey: 'your_secure_api_key',
    timeout: 300000, // 5 minutes for image generation
    imageTimeout: 300000, // Extended timeout for image endpoints
    standardTimeout: 30000, // Standard timeout for other endpoints
};
```

#### Create Blog Post via API
```javascript
const postData = {
    title: "My API Blog Post",
    content: "Post content in **Markdown**",
    excerpt: "Brief summary",
    tags: ["API", "Node.js"],
    status: "published",
    use_generated_feature_image: true,
    prefer_flux: true,
    image_aspect_ratio: "16:9"
};

const response = await api.post('/api/posts', postData);
```

#### Smart Create via API
```javascript
const smartData = {
    user_input: "Write about JavaScript testing frameworks: Jest vs Mocha vs Cypress",
    status: "draft",
    preferred_language: "English"
};

const response = await api.post('/api/smart-create', smartData);
```

#### Running Tests
```bash
# Run all endpoint tests
node example_usage_API.js

# Run specific test
node example_usage_API.js health

# Run with custom timeout (5 minutes for image generation)
node example_usage_API.js --timeout 300000

# Production mode (creates real posts)
node example_usage_API.js --production
```

**üìÅ Complete examples available in:** [`example_usage_API.js`](./example_usage_API.js)

---

## ‚ú® **Features**

### ü§ñ **Smart AI Gateway**
- **Intelligent Routing** - Automatically determines if content needs rewriting
- **Structured Output** - Uses Gemini's structured output for consistent formatting
- **Function Calling** - Leverages Gemini function calling for smart decision making
- **Auto Enhancement** - Transforms scattered ideas into complete blog posts
- **Missing Component Detection** - Automatically generates titles, excerpts, and tags

### üé® **Dual AI Image Generation**
- **üî• Replicate Flux-dev**: Ultra-fast generation (3-7 seconds), photorealistic images, WebP format
- **üèîÔ∏è Google Imagen-4**: Professional quality, advanced prompt understanding, PNG format
- **Automatic Fallback System**: Intelligent provider switching for maximum reliability
- **Provider Selection**: Choose your preferred provider or let the system decide
- **Multiple Aspect Ratios**: 16:9, 1:1, 9:16, 4:3, 3:2 support

### üìù **Content Management**
- **Smart Content Formatting** - Auto-format plain text to beautiful Markdown with Gemini AI
- **YouTube-Style Slugs** - Generate 11-character slugs like YouTube video IDs
- **Multi-language Support** - Chinese to Pinyin conversion for slugs
- **Language Translation** - Auto-translate content to any target language
- **Flexible Image Handling** - Support for URLs, local files, base64 data

### üìä **Blog Management**
- **Advanced Listing** - Get posts with powerful filtering options
- **Search & Query** - Full-text search across all posts
- **Date Range Filtering** - Find posts by publication/creation date
- **Update & Delete** - Modify or remove posts with comprehensive options
- **Batch Operations** - Process multiple posts efficiently
- **Detailed Analytics** - Get complete post details and summaries

---

## üîß **REST API Reference**

### **Base URL Structure**
```
http://localhost:5000/          # API information
http://localhost:5000/health    # Health check
http://localhost:5000/api/      # All blog endpoints
```

### **Authentication**
All API endpoints (except `/` and `/health`) require authentication:

```bash
curl -H "X-API-Key: your_api_key" http://localhost:5000/api/posts
```

### **Standard Response Format**
```json
{
  "success": true,
  "timestamp": "2024-01-01T00:00:00.000000Z",
  "data": {
    // Response data here
  }
}
```

### **‚ö†Ô∏è TIMEOUT CONFIGURATION NOTICE**
- **Image Generation Endpoints**: `/api/posts` (with `use_generated_feature_image: true`) and `/api/posts/{id}/image` require extended timeouts
- **Recommended Client Timeout**: **5 minutes (300 seconds)** minimum
- **Typical Response Times**: 60-300 seconds for image generation
- **Without Images**: Standard 30-second timeout is sufficient

### **üìù Core Endpoints**

#### Create Blog Post ‚ö†Ô∏è **Extended Timeout for Images**
```bash
POST /api/posts
Content-Type: application/json
X-API-Key: your_api_key

{
  "title": "My Blog Post",
  "content": "Post content in **Markdown**",
  "excerpt": "Brief summary",
  "tags": ["Tag1", "Tag2"],
  "status": "published",
  "use_generated_feature_image": true,
  "prefer_flux": true,
  "image_aspect_ratio": "16:9"
}
```

**‚è±Ô∏è Important:** When `use_generated_feature_image: true` is used, generation can take 60-300 seconds. Set client timeout to at least **5 minutes (300 seconds)**.

#### Smart Create (AI-Enhanced)
```bash
POST /api/smart-create
Content-Type: application/json
X-API-Key: your_api_key

{
  "user_input": "Write about AI benefits in healthcare",
  "status": "draft",
  "preferred_language": "English"
}
```

#### Get Posts
```bash
GET /api/posts?limit=5&status=published&featured=true
X-API-Key: your_api_key
```

#### Update Post Image ‚ö†Ô∏è **High Timeout Required**
```bash
PUT /api/posts/{post_id}/image
Content-Type: application/json
X-API-Key: your_api_key

{
  "use_generated_feature_image": true,
  "prefer_imagen": true,
  "image_aspect_ratio": "16:9"
}
```

**‚è±Ô∏è Important:** Image generation endpoints can take 60-300 seconds to complete. Set client timeout to at least **5 minutes (300 seconds)** for reliable operation.

### **üìã Complete Endpoint List**

| Endpoint | Method | Description | Auth Required | Timeout |
|----------|--------|-------------|---------------|---------|
| `/` | GET | API information | ‚ùå | Standard |
| `/health` | GET | Health check | ‚ùå | Standard |
| `/api/posts` | POST | Create blog post | ‚úÖ | **Extended*** |
| `/api/smart-create` | POST | AI-enhanced creation | ‚úÖ | Standard |
| `/api/posts` | GET | List posts | ‚úÖ | Standard |
| `/api/posts/advanced` | GET | Advanced search | ‚úÖ | Standard |
| `/api/posts/{id}` | GET | Get post details | ‚úÖ | Standard |
| `/api/posts/{id}` | PUT/PATCH | Update post | ‚úÖ | Standard |
| `/api/posts/{id}` | DELETE | Delete post | ‚úÖ | Standard |
| `/api/posts/{id}/image` | PUT | Update post image | ‚úÖ | **Extended*** |
| `/api/posts/summary` | GET | Posts summary | ‚úÖ | Standard |
| `/api/posts/batch-details` | POST | Batch get details | ‚úÖ | Standard |
| `/api/posts/search/by-date-pattern` | GET | Date search | ‚úÖ | Standard |

**\*Extended = 5 minutes (300 seconds) for image generation**

---

## ‚è±Ô∏è **Performance & Timeout Guidelines**

### **Image Generation Performance**
- **Replicate Flux**: 3-7 seconds (ultra-fast)
- **Google Imagen**: 10-15 seconds (professional quality)
- **Upload & Processing**: Additional 45-60 seconds
- **Total Time**: 60-300 seconds for complete image generation

### **Recommended Client Timeouts**
```javascript
// For endpoints WITH image generation
const imageApiTimeout = 300000; // 5 minutes

// For endpoints WITHOUT image generation  
const standardTimeout = 30000; // 30 seconds
```

### **Production Testing Results**
‚úÖ **All endpoints functional**  
‚ö†Ô∏è **Image generation requires extended timeout**  
üí° **Recommendation**: Always set 5-minute timeout for image endpoints

---

## üß™ **Testing**

### **Python Package Testing**
```bash
# Set test mode to avoid actual posting
python example_usage.py  # Uses is_test=True by default
```

### **API Testing (Docker/Local)**
```bash
# Comprehensive test suite
node example_usage_API.js

# Individual endpoint tests
node example_usage_API.js health
node example_usage_API.js create
node example_usage_API.js smart

# Production mode (creates real posts)
node example_usage_API.js --production

# Extended timeout for image generation
node example_usage_API.js --timeout 300000
```

### **Docker Testing Guide**
See [`TESTING_GUIDE.md`](./TESTING_GUIDE.md) for comprehensive Docker testing instructions.

---

## üìÅ **Project Structure**

```
ghost-blog-smart/
‚îú‚îÄ‚îÄ ghost_blog_smart/             # Main Python package
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py              # Package exports
‚îÇ   ‚îú‚îÄ‚îÄ main_functions.py        # Core API functions
‚îÇ   ‚îú‚îÄ‚îÄ smart_gateway.py         # AI-powered routing
‚îÇ   ‚îú‚îÄ‚îÄ post_management.py       # Advanced management
‚îÇ   ‚îî‚îÄ‚îÄ *.py                    # Other modules
‚îú‚îÄ‚îÄ example_usage.py             # üêç Python package examples
‚îú‚îÄ‚îÄ example_usage_API.js         # üåê Node.js API client examples  
‚îú‚îÄ‚îÄ app.py                       # üöÄ Flask REST API server
‚îú‚îÄ‚îÄ Dockerfile                   # üê≥ Docker configuration
‚îú‚îÄ‚îÄ docker-compose.yml          # üê≥ Docker Compose setup
‚îú‚îÄ‚îÄ requirements.txt             # Python dependencies
‚îú‚îÄ‚îÄ setup.py                    # PyPI package setup
‚îú‚îÄ‚îÄ TESTING_GUIDE.md            # üß™ Docker testing instructions
‚îî‚îÄ‚îÄ README.md                   # üìñ This documentation
```

---

## üé® **Image Generation Comparison**

| Feature | Replicate Flux-dev | Google Imagen-4 |
|---------|-------------------|-----------------| 
| **Speed** | ‚ö° Ultra-fast (3-7s) | üê¢ Moderate (10-15s) |
| **Quality** | üî• Photorealistic | üèîÔ∏è Professional |
| **Format** | üìÅ WebP (smaller) | üìÅ PNG (lossless) |
| **Cost** | üí∞ Pay-per-use | üí∞ API quota based |
| **Best For** | Realistic scenes, portraits | Abstract concepts, artistic |

**Supported Aspect Ratios:**
- `16:9` - Widescreen (1920x1080) - **Default**
- `1:1` - Square (1024x1024) - Great for social media
- `9:16` - Portrait (1080x1920) - Mobile-optimized
- `4:3` - Traditional (1024x768) - Classic photo ratio
- `3:2` - DSLR (1536x1024) - Professional photography

---

## üìã **Prerequisites**

- Python 3.8+
- Ghost CMS instance with Admin API access
- **Image Generation** (choose one or both):
  - Google Gemini API key (for Imagen-4 generation)
  - Replicate API token (for Flux-dev generation)

---

## ü§ù **Contributing**

Contributions are welcome! Please feel free to submit a Pull Request.

---

## üìÑ **License**

MIT License - see LICENSE file for details

---

## üôè **Acknowledgments**

- Ghost CMS for the excellent blogging platform
- Google Gemini & Imagen for AI capabilities  
- Replicate for ultra-fast Flux generation
- The open-source community

---

## üìû **Support**

For issues or questions, please open an issue on GitHub.

---

**Made with ‚ù§Ô∏è for the Ghost CMS community**

‚ú® **Available as both Python Package and REST API with comprehensive Docker support!**
<!-- Docker Hub sync: Wed Aug 27 17:55:51 JST 2025 -->
