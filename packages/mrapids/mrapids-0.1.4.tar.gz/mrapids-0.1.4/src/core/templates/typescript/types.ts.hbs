/**
 * {{info.title}} API Types
 * Version: {{info.version}}
 * 
 * Generated by MicroRapid - https://github.com/deepwissen/api-runtime
 */

{{#if includeAuth}}
/**
 * Authentication configuration
 */
export interface AuthConfig {
    /** Bearer token authentication */
    bearer?: string;
    
    /** API Key authentication */
    apiKey?: {
        name: string;
        value: string;
        in: 'header' | 'query';
    };
    
    {{#each auth.schemes}}
    {{#if (eq scheme_type "oauth2")}}
    /** OAuth2 authentication */
    oauth?: {
        clientId: string;
        clientSecret?: string;
        accessToken?: string;
        refreshToken?: string;
    };
    {{/if}}
    {{/each}}
}
{{/if}}

{{#if includePagination}}
/**
 * Pagination options
 */
export interface PaginationOptions {
    /** Number of items per page */
    limit?: number;
    
    /** Page offset or cursor */
    offset?: number | string;
    
    /** Auto-paginate all results */
    autoPage?: boolean;
}
{{/if}}

{{#if includeResilience}}
/**
 * Resilience configuration
 */
export interface ResilienceConfig {
    /** Maximum number of retry attempts */
    maxRetries?: number;
    
    /** Base delay between retries in milliseconds */
    retryDelay?: number;
    
    /** Request timeout in milliseconds */
    timeout?: number;
}
{{/if}}

/**
 * Main API configuration
 */
export interface ApiConfig {
    /** Base URL for the API */
    baseUrl?: string;
    
    {{#if includeAuth}}
    /** Authentication configuration */
    auth?: AuthConfig;
    {{/if}}
    
    {{#if includeResilience}}
    /** Resilience configuration */
    maxRetries?: number;
    retryDelay?: number;
    timeout?: number;
    {{/if}}
    
    /** Additional headers to include with all requests */
    defaultHeaders?: Record<string, string>;
}

/**
 * API Error class
 */
export class ApiError extends Error {
    constructor(
        message: string,
        public status: number,
        public responseBody?: string
    ) {
        super(message);
        this.name = 'ApiError';
    }
}

/**
 * Specific error classes
 */
export class NotFoundError extends ApiError {
    constructor(message: string, responseBody?: string) {
        super(message, 404, responseBody);
        this.name = 'NotFoundError';
    }
}

export class ValidationError extends ApiError {
    constructor(message: string, responseBody?: string) {
        super(message, 400, responseBody);
        this.name = 'ValidationError';
    }
}

export class UnauthorizedError extends ApiError {
    constructor(message: string, responseBody?: string) {
        super(message, 401, responseBody);
        this.name = 'UnauthorizedError';
    }
}

export class ForbiddenError extends ApiError {
    constructor(message: string, responseBody?: string) {
        super(message, 403, responseBody);
        this.name = 'ForbiddenError';
    }
}

export class ServerError extends ApiError {
    constructor(message: string, status: number, responseBody?: string) {
        super(message, status, responseBody);
        this.name = 'ServerError';
    }
}