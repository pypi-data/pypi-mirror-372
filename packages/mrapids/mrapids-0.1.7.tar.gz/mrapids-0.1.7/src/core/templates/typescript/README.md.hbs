# {{title}} TypeScript SDK

{{#if description}}
{{description}}
{{/if}}

**Version:** {{version}}  
**Generated by:** [MicroRapid](https://github.com/deepwissen/api-runtime)

## Installation

```bash
npm install {{packageName}}
```

## Quick Start

```typescript
import { ApiClient } from '{{packageName}}';

const api = new ApiClient({
  baseUrl: '{{baseUrl}}',
  {{#if auth.schemes}}
  auth: {
    {{#each auth.schemes}}
    {{#if (eq scheme_type "bearer")}}
    bearer: 'your-jwt-token'
    {{else if (eq scheme_type "apiKey")}}
    apiKey: {
      name: '{{name}}',
      value: 'your-api-key',
      in: '{{#if in_location}}{{in_location}}{{else}}header{{/if}}'
    }
    {{/if}}
    {{/each}}
  }
  {{/if}}
});

// Example usage
{{#each operations}}
{{#if @first}}
try {
  const result = await api.{{operation_id}}({{#if parameters}}{
    {{#each parameters}}
    {{#if @first}}
    {{name}}: '{{#if (eq type_info.base_type "string")}}example-value{{else if (eq type_info.base_type "integer")}}123{{else if (eq type_info.base_type "boolean")}}true{{else}}null{{/if}}'{{#unless @last}},{{/unless}}
    {{/if}}
    {{/each}}
  }{{/if}});
  console.log(result);
} catch (error) {
  console.error('API error:', error);
}
{{/if}}
{{/each}}
```

## API Reference

### Authentication

{{#each auth.schemes}}
#### {{pascalCase scheme_type}} Authentication

```typescript
const api = new ApiClient({
  auth: {
    {{#if (eq scheme_type "bearer")}}
    bearer: 'your-jwt-token'
    {{else if (eq scheme_type "apiKey")}}
    apiKey: {
      name: '{{name}}',
      value: 'your-api-key',
      in: '{{#if in_location}}{{in_location}}{{else}}header{{/if}}'
    }
    {{/if}}
  }
});
```

{{/each}}

### Available Methods

{{#each operations}}
#### `{{operation_id}}({{#if parameters}}params{{/if}}{{#if request_body}}{{#if parameters}}, {{/if}}body{{/if}})`

{{#if summary}}{{summary}}{{/if}}
{{#if description}}

{{description}}
{{/if}}

- **Method:** {{method}}
- **Path:** {{path}}

{{#if parameters}}
**Parameters:**
{{#each parameters}}
- `{{name}}`{{#unless required}} (optional){{/unless}}: {{type_info.base_type}} - {{#if description}}{{description}}{{else}}No description{{/if}}
{{/each}}
{{/if}}

{{#if request_body}}
**Request Body:** {{request_body.content_type}}
{{/if}}

---

{{/each}}

## Error Handling

The SDK provides specific error classes for different HTTP status codes:

```typescript
import { ApiError, NotFoundError, ValidationError } from '{{packageName}}';

try {
  await api.someMethod();
} catch (error) {
  if (error instanceof NotFoundError) {
    console.log('Resource not found');
  } else if (error instanceof ValidationError) {
    console.log('Invalid request data');
  } else if (error instanceof ApiError) {
    console.log(`API error: ${error.status} - ${error.message}`);
  }
}
```

## Configuration Options

```typescript
const api = new ApiClient({
  baseUrl: '{{baseUrl}}', // API base URL
  {{#if auth.schemes}}
  auth: { /* Authentication config */ },
  {{/if}}
  maxRetries: 3, // Number of retry attempts
  retryDelay: 1000, // Delay between retries (ms)
  timeout: 30000, // Request timeout (ms)
  defaultHeaders: {
    'User-Agent': 'MyApp/1.0.0'
  }
});
```

## TypeScript Support

This SDK is written in TypeScript and provides full type definitions for all API operations and data models.

## License

MIT