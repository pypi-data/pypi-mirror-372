name: Publish Packages

on:
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      target:
        description: 'Publish target'
        required: true
        type: choice
        options:
          - crates.io
          - docker
          - github-packages
          - all
      dry_run:
        description: 'Dry run (no actual publish)'
        required: false
        type: boolean
        default: true

  # Automatic on release
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Publish to crates.io (Rust package manager)
  publish-crates-io:
    name: Publish to crates.io
    runs-on: self-hosted
    if: |
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.target == 'crates.io' || github.event.inputs.target == 'all'))
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Check crates.io version
        id: version_check
        run: |
          # Get local version
          LOCAL_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          echo "Local version: $LOCAL_VERSION"
          
          # Check if version exists on crates.io
          if cargo search mrapids --limit 1 | grep -q "^mrapids = \"$LOCAL_VERSION\""; then
            echo "Version $LOCAL_VERSION already exists on crates.io"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Version $LOCAL_VERSION is new"
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "version=$LOCAL_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        if: steps.version_check.outputs.skip != 'true'
        run: cargo test --all-features

      - name: Publish to crates.io (Dry Run)
        if: |
          steps.version_check.outputs.skip != 'true' &&
          (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true')
        run: |
          echo "🔍 Dry run - checking if package is ready to publish"
          cargo publish --dry-run

      - name: Publish to crates.io
        if: |
          steps.version_check.outputs.skip != 'true' &&
          (github.event_name == 'release' || 
           (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false'))
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "📦 Publishing version ${{ steps.version_check.outputs.version }} to crates.io"
          cargo publish --token $CARGO_REGISTRY_TOKEN

  # Publish Docker image to registries
  publish-docker:
    name: Publish Docker Images
    runs-on: self-hosted
    if: |
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.target == 'docker' || github.event.inputs.target == 'all'))
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name == 'release' || github.event.inputs.dry_run == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            microrapids/api-runtime
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'release' || github.event.inputs.dry_run == 'false' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT=${{ github.sha }}

  # Publish to GitHub Packages (as a binary release)
  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: self-hosted
    if: |
      github.event_name == 'release' || 
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.target == 'github-packages' || github.event.inputs.target == 'all'))
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: mrapids-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: mrapids-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: mrapids-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: mrapids-darwin-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --all-features
          
      - name: Package binary
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.artifact }}.zip mrapids.exe
          else
            tar -czf ../../../${{ matrix.artifact }}.tar.gz mrapids
          fi
          cd ../../../

      - name: Upload to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.artifact }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: ${{ matrix.artifact }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: application/octet-stream

      - name: Upload as artifact (for testing)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ./${{ matrix.artifact }}.*

  # Create package summary
  publish-summary:
    name: Publication Summary
    runs-on: self-hosted
    needs: [publish-crates-io, publish-docker, publish-github-packages]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "# 📦 Package Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| crates.io | ${{ needs.publish-crates-io.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Hub | ${{ needs.publish-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Packages | ${{ needs.publish-github-packages.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "## 🎉 Release Published!" >> $GITHUB_STEP_SUMMARY
            echo "Version: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🧪 Test Publication" >> $GITHUB_STEP_SUMMARY
            echo "Dry run: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          fi