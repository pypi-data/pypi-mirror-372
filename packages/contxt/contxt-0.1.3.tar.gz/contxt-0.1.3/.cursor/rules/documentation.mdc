---
description: Docstring or Module string generation with in-code documentation best practices and guidelines for generating README files.
globs: *.tsx, *.ts, *.py
---
# Documentation Policy

## General Guidelines

1. **License Header Requirement:**  
   All code files must include a license header:
   ```python
   # SPDX-License-Identifier: Apache-2.0
   graphcap.module.path
   ```

2. **Documentation Characteristics:**
   - **Short and Concise:** Keep documentation brief.
   - **Easily Readable:** Use clear, plain language.
   - **Behavior-Focused:** Explain what the code does rather than how it does it.
   - **Complete Sentences:** Write in full sentences.
   - **Up-to-Date:** Update documentation in sync with code changes.

## Python Documentation

### Module Docstrings

Every Python module should have a docstring that includes:

1. License header  
2. A brief description of the module's purpose  
3. A list of key functionalities  
4. A list of classes/functions (if applicable)  
5. Usage examples (for complex modules)

Example:
```python
"""
# SPDX-License-Identifier: Apache-2.0
Module Name

Brief description of what this module does.

Key features:
- Feature 1
- Feature 2

Classes:
    ClassName: Brief description
"""
```

### Class Docstrings

Classes should include:

1. A brief description (1–3 lines)  
2. A detailed description of behavior  
3. A list of public attributes with types and descriptions  
4. A list of methods with brief descriptions (optional)

Example:
```python
class MyClass:
    """
    Brief description of the class.

    Detailed description of the class behavior and usage.
    Multiple lines are allowed.

    Attributes:
        attr_name (type): Description of attribute
        other_attr (type): Description of other attribute
    """
```

### Method/Function Docstrings

Methods and functions should include:

1. A brief description  
2. Arguments with types and descriptions  
3. Return values with type and description  
4. Raised exceptions with types and conditions  
5. Notes or examples if needed

Example:
```python
def my_function(arg1: str, arg2: int) -> bool:
    """
    Brief description of what the function does.

    Args:
        arg1: Description of first argument
        arg2: Description of second argument

    Returns:
        Description of return value

    Raises:
        ValueError: When a specific error condition is met
        TypeError: When argument types are incorrect

    Note:
        Any additional usage information
    """
```

**Warning:** Do not claim capabilities that do not exist. Only document current functionality.

## JavaScript Documentation

### Module Documentation

JavaScript modules should include:

1. A license header  
2. A brief description of the module’s purpose  
3. A list of exports  
4. Usage examples

Example:
```javascript
/**
 * @license Apache-2.0
 * 
 * Brief description of module purpose
 * 
 * @module ModuleName
 * 
 * @exports {Class} ClassName
 * @exports {function} functionName
 */
```

### Class Documentation

JavaScript classes should include:

1. A brief description  
2. Constructor parameters  
3. Properties  
4. Methods

Example:
```javascript
/**
 * Brief description of the class
 * 
 * @class
 * @property {type} propertyName - Description
 */
class ClassName {
    /**
     * Create an instance
     * @param {type} param - Parameter description
     */
    constructor(param) {
        // ...
    }
}
```

### Function Documentation

Functions should include:

1. A brief description  
2. Parameters with types  
3. The return value  
4. Thrown errors

Example:
```javascript
/**
 * Brief description of function
 * 
 * @param {type} paramName - Parameter description
 * @returns {type} Description of return value
 * @throws {ErrorType} Description of error condition
 */
function functionName(paramName) {
    // ...
}
```

## Additional Insights on In-Code Documentation

Effective in-code documentation not only supports automated documentation generation but also helps developers understand the rationale behind code decisions. Incorporate these practices:

- **Commenting Strategy:**
  - **Explain the "Why":** Comments should clarify why certain decisions are made rather than describing what the code does.  
    - *Example:*  
      ```python
      # Instead of: now we check if temperature is below -50
      # Use: We regard temperatures below -50 degrees as measurement errors
      if temperature < -50:
          logger.error("ERROR: temperature is too low")
      ```
  - **Avoid Redundant Comments:** If the code is self-explanatory through clear naming and structure, additional comments may be unnecessary.

- **Version Control Over Comments:**
  - **No Zombie Code:** Do not leave commented-out code in place "just in case." Rely on version control systems (like Git) to track historical changes.
    - *Ineffective Example:*
      ```python
      # do not run this code!
      # if temperature > 0:
      #     print("It is warm")
      ```
  - **Avoid Change Logs in Code:** Instead of embedding change logs (e.g., “John Doe: threshold changed...”) in comments, use Git’s history tools (like `git log`, `git annotate`) to review changes.

- **Docstrings as a Dual-Purpose Tool:**
  - **Internal Help & External Documentation:** Docstrings serve not only as in-code documentation but also as a source for generating help texts and documentation pages automatically.
  - **Comprehensive Details:** They should clearly state what a function does, detail its inputs (with types), describe its outputs, and mention any exceptions raised.

- **Naming as Documentation:**  
  Use explicit and descriptive names for functions, classes, and variables. This approach minimizes the need for overly verbose comments, especially in simple functions.

## README Files

README files (commonly named `README.md` or `README.rst`) are often the first point of contact for users and collaborators visiting your repository. They serve as a central source of information about your project, offering everything from an overview to detailed usage instructions.

- **Purpose and Overview:**
  - Clearly communicate the project's purpose, features, and usage instructions.
  - Provide essential information such as installation steps, usage examples, and contribution guidelines.
  - For many small or mid-size projects, a well-written README can serve as the primary form of documentation.

- **Advanced README Features:**
  - **Admonitions:**  
    Enhance readability by using special blocks that highlight key information:
    - `[!NOTE]` – Highlights important points for users to consider.
    - `[!IMPORTANT]` – Marks critical information necessary for success.
    - `[!WARNING]` – Draws attention to critical content or potential risks.
  - **Expandable Details:**  
    Use HTML `<details>` and `<summary>` tags to include optional, detailed information without cluttering the main document:
    ```markdown
    <details>
    <summary>Short summary</summary>

    Detailed explanation goes here. This section can include extended information, instructions, or troubleshooting tips.

    </details>
    ```
  - **Badges:**  
    Incorporate badges to visually communicate status or link to related resources:
    - **Badge with link:**
      ```markdown
      @![please replace with alt text](https://example.org)
      ```
    - **Badge without link:**
      ```markdown
      !@please replace with alt text
      ```

- **Improvement Exercises:**
  - **Experimentation:**  
    Try different README features to see what enhances clarity and engagement.
  - **Review and Refine:**  
    Regularly review your README using checklists to ensure it addresses what users or potential contributors need to know.
  - **External Tools:**  
    Consider using tools like @Hemingway App to analyze and improve the readability of your README.

- **Table of Contents (TOC):**
  - **GitHub:**  
    GitHub automatically generates a TOC for `README.md` files when headers are used.
  - **GitLab:**  
    You can manually add a TOC in Markdown using:
    ```markdown
    [[_TOC_]]
    ```
  - **reStructuredText (RST):**  
    Automatically include a TOC with:
    ```rst
    .. contents:: Table of Contents
    ```

## Best Practices

1. **Focus on Behavior:**  
   Keep docstrings and comments centered on what the code does and why, not on how it is implemented.

2. **Document Public APIs:**  
   Ensure all public functions, classes, and modules are documented.

3. **Include Examples:**  
   Add usage examples for complex functionalities to aid understanding.

4. **Consistent Formatting:**  
   Use type hints (in Python) or JSDoc types (in JavaScript) consistently across the project.

5. **Update Regularly:**  
   Update all documentation to reflect any changes in the code to avoid discrepancies.

## Tools

- **Python:**  
  Use tools like `pydocstyle` for validation and Sphinx for generating documentation pages.

- **JavaScript:**  
  Use ESLint with JSDoc rules and JSDoc for documentation generation.
