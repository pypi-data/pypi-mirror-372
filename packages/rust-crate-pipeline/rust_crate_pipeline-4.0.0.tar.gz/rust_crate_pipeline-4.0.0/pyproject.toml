[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rust-crate-pipeline"
version = "4.0.0"
description = "A comprehensive system for gathering, enriching, and analyzing metadata for Rust crates using AI-powered insights, advanced caching, machine learning predictions, and microservices architecture."
readme = "README.md"

authors = [
    {name = "SuperUser666-Sigil", email = "miragemodularframework@gmail.com"}
]
maintainers = [
    {name = "SuperUser666-Sigil", email = "miragemodularframework@gmail.com"}
]
keywords = ["rust", "crate", "analysis", "ai", "llm", "pipeline", "caching", "ml", "microservices"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.12"
dependencies = [
    # Core dependencies
    "requests>=2.31.0,<3.0.0",
    "aiohttp>=3.9.0,<4.0.0",
    "asyncio-mqtt>=0.16.0,<1.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "click>=8.1.0,<9.0.0",
    "rich>=13.7.0,<14.0.0",
    "tqdm>=4.66.0,<5.0.0",
    
    # Caching & Performance
    "cachetools>=5.3.0,<6.0.0",
    "aiofiles>=24.1.0,<25.0.0",
    "redis>=5.0.0,<6.0.0",
    
    # Machine Learning
    "scikit-learn>=1.3.0,<2.0.0",
    "numpy>=1.24.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0",
    
    # Microservices & API
    "PyJWT>=2.8.0,<3.0.0",
    "prometheus-client>=0.17.0,<1.0.0",
    
    # LLM and AI
    "openai>=1.3.0,<2.0.0",
    "anthropic>=0.7.0,<1.0.0",
    "litellm>=1.0.0,<2.0.0",
    "llama-cpp-python>=0.2.0,<1.0.0",
    
    # Web scraping
    "crawl4ai>=0.3.0,<0.4.0",
    "playwright>=1.40.0,<2.0.0",
    "beautifulsoup4>=4.12.0,<5.0.0",
    "lxml>=5.3.0,<6.0.0",
    
    # Data processing
    "pyyaml>=6.0.0,<7.0.0",
    "jsonschema>=4.20.0,<5.0.0",
    
    # Security and analysis
    "presidio-analyzer>=2.2.0,<3.0.0",
    "presidio-anonymizer>=2.2.0,<3.0.0",
    "bandit>=1.7.0,<2.0.0",
    "safety>=2.3.0,<2.4.0",
    
    # Utilities
    "psutil>=5.9.0,<6.0.0",
    "humanize>=4.8.0,<5.0.0",
    "colorama>=0.4.6,<1.0.0",
    "termcolor>=2.3.0,<3.0.0",
    "tabulate>=0.9.0,<1.0.0",
    
    # Async and concurrency
    "asyncio-throttle>=1.0.0,<2.0.0",
    "tenacity>=8.2.0,<9.0.0",
    
    # Logging and monitoring
    "structlog>=23.2.0,<24.0.0",
    
    # Configuration and validation
    "marshmallow>=3.20.0,<4.0.0",
    "cerberus>=1.3.0,<2.0.0",
    
    # File handling
    "pathspec>=0.11.0,<1.0.0",
    "watchdog>=3.0.0,<4.0.0",
    
    # Network and HTTP
    "httpx>=0.25.0,<1.0.0",
    "urllib3>=2.0.0,<3.0.0",
    
    # Serialization
    "orjson>=3.9.0,<4.0.0",
    "ujson>=5.8.0,<6.0.0",
    
    # Date and time
    "python-dateutil>=2.8.0,<3.0.0",
    "pytz>=2023.3,<2024.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    "black>=23.7.0,<24.0.0",
    "flake8>=6.0.0,<7.0.0",
    "mypy>=1.5.0,<2.0.0",
    "isort>=5.12.0,<6.0.0",
    "pre-commit>=3.3.0,<4.0.0",
    "sphinx>=7.1.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
    "myst-parser>=2.0.0,<3.0.0",
    "types-toml>=0.10.8",
    "types-tqdm>=4.67.0",
    "pandas-stubs>=2.3.0",
    "types-aiofiles>=24.1.0",
    "types-cachetools>=6.1.0",
]
test = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
]
docs = [
    "sphinx>=7.1.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0,<2.0.0",
    "myst-parser>=2.0.0,<3.0.0",
]

[project.urls]
Homepage = "https://github.com/Superuser666-Sigil/SigilDERG-Data_Production"
Documentation = "https://github.com/Superuser666-Sigil/SigilDERG-Data_Production/wiki"
Repository = "https://github.com/Superuser666-Sigil/SigilDERG-Data_Production"
"Bug Tracker" = "https://github.com/Superuser666-Sigil/SigilDERG-Data_Production/issues"
"Release Notes" = "https://github.com/Superuser666-Sigil/SigilDERG-Data_Production/releases"

[project.scripts]
rust-crate-pipeline = "rust_crate_pipeline.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["rust_crate_pipeline*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"rust_crate_pipeline" = ["*.json", "*.yaml", "*.yml", "*.toml", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | vcpkg
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["rust_crate_pipeline"]
skip = ["vcpkg", ".venv", "build", "dist"]

[tool.flake8]
max-line-length = 120
extend-ignore = ["E501", "E203", "W503"]
exclude = [
    "vcpkg",
    ".venv",
    "build",
    "dist",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "crawl4ai.*",
    "playwright.*",
    "openai.*",
    "anthropic.*",
    "litellm.*",
    "llama_cpp.*",
    "presidio_analyzer.*",
    "presidio_anonymizer.*",
    "bandit.*",
    "safety.*",
    "redis.*",
    "prometheus_client.*",
    "sklearn.*",
    "numpy.*",
    "pandas.*",
    "PyJWT.*",
    "opentelemetry.*",
]
ignore_missing_imports = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["rust_crate_pipeline"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/.env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    'class .*\\bProtocol\):',
    '@(abc\.)?abstractmethod',
]

