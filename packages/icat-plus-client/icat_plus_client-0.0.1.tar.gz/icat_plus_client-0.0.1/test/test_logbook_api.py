# coding: utf-8

"""
    ICAT+ API

    ICAT+ RESTful API with Swagger  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: demariaa@esrf.fr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.icat_plus_client.api.logbook_api import LogbookApi  # noqa: E501
from swagger_client.rest import ApiException


class TestLogbookApi(unittest.TestCase):
    """LogbookApi unit test stubs"""

    def setUp(self):
        self.api = LogbookApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_logbook_api_key_investigation_name_investigation_name_instrument_name_instrument_name_event_createfrombase64_post(self):
        """Test case for logbook_api_key_investigation_name_investigation_name_instrument_name_instrument_name_event_createfrombase64_post

        Create an event given a base64 string. It requires the API token. This is used on the spec beamlines from the metadata manager  # noqa: E501
        """
        pass

    def test_logbook_api_key_investigation_name_investigation_name_instrument_name_instrument_name_event_post(self):
        """Test case for logbook_api_key_investigation_name_investigation_name_instrument_name_instrument_name_event_post

        This is used on the spec beamlines from the metadata manager  # noqa: E501
        """
        pass

    def test_logbook_session_id_event_count_get(self):
        """Test case for logbook_session_id_event_count_get

        Count events  # noqa: E501
        """
        pass

    def test_logbook_session_id_event_createfrombase64_post(self):
        """Test case for logbook_session_id_event_createfrombase64_post

        Create an event given a base64 string  # noqa: E501
        """
        pass

    def test_logbook_session_id_event_dates_get(self):
        """Test case for logbook_session_id_event_dates_get

        Lists events dates  # noqa: E501
        """
        pass

    def test_logbook_session_id_event_get(self):
        """Test case for logbook_session_id_event_get

        Lists events  # noqa: E501
        """
        pass

    def test_logbook_session_id_event_page_get(self):
        """Test case for logbook_session_id_event_page_get

        Gets the number of page where the event is  # noqa: E501
        """
        pass

    def test_logbook_session_id_event_post(self):
        """Test case for logbook_session_id_event_post

        Creates an event  # noqa: E501
        """
        pass

    def test_logbook_session_id_event_put(self):
        """Test case for logbook_session_id_event_put

        Updates an event  # noqa: E501
        """
        pass

    def test_logbook_session_id_event_remove_put(self):
        """Test case for logbook_session_id_event_remove_put

        Flag events as removed  # noqa: E501
        """
        pass

    def test_logbook_session_id_event_restore_put(self):
        """Test case for logbook_session_id_event_restore_put

        Flag events as restored by setting removed = false for each event. InvestigationId is mandatory  # noqa: E501
        """
        pass

    def test_logbook_session_id_events_patch(self):
        """Test case for logbook_session_id_events_patch

        Updates the tags of a list of events  # noqa: E501
        """
        pass

    def test_logbook_session_id_stats_count_get(self):
        """Test case for logbook_session_id_stats_count_get

        Counts number of event for date range  # noqa: E501
        """
        pass

    def test_logbook_session_id_stats_investigation_get(self):
        """Test case for logbook_session_id_stats_investigation_get

        Lists statistics on events for each investigation that are allocated in the date range  # noqa: E501
        """
        pass

    def test_logbook_session_id_tag_get(self):
        """Test case for logbook_session_id_tag_get

        GET all tags available, (ie used in the investigation or not) for a given logbook including global, beamline specific and investigation specific tags. Tags available but not used are also retrieved.  # noqa: E501
        """
        pass

    def test_logbook_session_id_tag_post(self):
        """Test case for logbook_session_id_tag_post

        Create an investigation tag for a given investigationId  # noqa: E501
        """
        pass

    def test_logbook_session_id_tag_put(self):
        """Test case for logbook_session_id_tag_put

        Update an investigation tag  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
