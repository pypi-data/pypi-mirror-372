[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "leap-bundle"
version = "0.3.0"
description = "Command line tool to create model bundles for Liquid Edge AI Platform (LEAP)"
readme = "README.md"
license = {text = "LFM Open License v1.0"}
authors = [
    {name = "Liquid AI", email = "leap@liquid.ai"},
]
maintainers = [
    {name = "Liren Tu", email = "liren@liquid.ai"},
]
keywords = ["ai", "machine-learning", "edge-model", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Software Distribution",
]
requires-python = ">=3.8"
dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pyyaml>=6.0.0",
    "requests>=2.31.0",
    "pydantic>=2.10.6",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
leap-bundle = "leap_bundle.main:app"

[project.urls]
Homepage = "https://leap.liquid.ai"
Documentation = "https://leap.liquid.ai/docs/leap-bundle/quick-start"
# "Bug Tracker" = "https://github.com/liquid-ai/leap-public/issues"
License = "https://www.liquid.ai/lfm-license"

[tool.hatch.build.targets.wheel]
packages = ["src/leap_bundle"]

[tool.hatch.build.targets.sdist]
include = [
    "/src/leap_bundle",
    "/README.md",
    "/pyproject.toml",
]
exclude = [
    "/tests",
    "/package.json",
    "/uv.lock",
    "*.pyc",
    "__pycache__",
    ".pytest_cache",
]

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
exclude = ["build/", "dist/", ".venv/"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=leap_bundle --cov-report=term-missing --cov-report=html"

[dependency-groups]
dev = [
    "bump-my-version>=1.2.1",
    "mypy>=1.14.1",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "ruff>=0.12.3",
    "types-pyyaml>=6.0.12.20241230",
    "types-requests>=2.32.0.20241016",
]
