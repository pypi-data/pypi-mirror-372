{
    "lfa": {
        "name": "LSEG Financial Analytics",
        "title": "LSEG Analytics Code Samples",
        "subtitle": "Here you can find code samples to get you started with key LSEG Analytics functionality",
        "categories": [
            {
                "name": "Calendars",
                "samples": [
                    {
                        "name": "Calendars Fundamentals",
                        "notebookFile": "lfa/calendars/cal0_calendars-fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "Generate public holidays using an LSEG-defined calendar",
                        "notebookFile": "lfa/calendars/workflows/1_generating_public_holidays_using_an_LSEG-defined_calendar.ipynb",
                        "pythonFile": "lfa/calendars/workflows/1_generating_public_holidays_using_an_LSEG-defined_calendar.py"
                    },
                    {
                        "name": "Adding periods to a date, taking holidays into account",
                        "notebookFile": "lfa/calendars/workflows/2_adding_a_period_to_a_date_taking_holidays_into_account.ipynb",
                        "pythonFile": "lfa/calendars/workflows/2_adding_a_period_to_a_date_taking_holidays_into_account.py"
                    },
                    {
                        "name": "Counting days and periods between two dates, taking holidays into account",
                        "notebookFile": "lfa/calendars/workflows/3_counting_days_and_periods_between_two_dates_taking_holidays_into_account.ipynb",
                        "pythonFile": "lfa/calendars/workflows/3_counting_days_and_periods_between_two_dates_taking_holidays_into_account.py"
                    },
                    {
                        "name": "Generate a date schedule, taking holidays into account",
                        "notebookFile": "lfa/calendars/workflows/4_generating_a_date_schedule_taking_holidays_into_account.ipynb",
                        "pythonFile": "lfa/calendars/workflows/4_generating_a_date_schedule_taking_holidays_into_account.py"
                    },
                    {
                        "name": "Manipulate user-defined calendars",
                        "notebookFile": "lfa/calendars/workflows/5_manipulate_user-defined_calendars.ipynb",
                        "pythonFile": "lfa/calendars/workflows/5_manipulate_user-defined_calendars.py"
                    }
                ]
            },
            {
                "name": "Cap Floor",
                "samples": [
                    {
                        "name": "Cap & Floor SDK Templates - Fundamentals",
                        "notebookFile": "lfa/cap-floors/1_CapFloor_SDK_Fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "Cap & Floor - Sensitivities Analysis",
                        "notebookFile": "lfa/cap-floors/workflows/2_CapFloor_SDK_Sensitivities.ipynb",
                        "pythonFile": "lfa/cap-floors/workflows/2_CapFloor_SDK_Sensitivities.py"
                    },
                    {
                        "name": "Cap & Floor SDK - Cashflows Analysis",
                        "notebookFile": "lfa/cap-floors/workflows/3_CapFloor_SDK_Cashflows.ipynb",
                        "pythonFile": "lfa/cap-floors/workflows/3_CapFloor_SDK_Cashflows.py"
                    }
                ]
            },
            {
                "name": "Equity Volatility",
                "samples": [
                    {
                        "name": "ETI Volatility Surfaces - Fundamentals",
                        "notebookFile": "lfa/eq-volatilities/1_ETI_Volatility_Surfaces_Fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "ETI Volatility Surfaces: Parametrizing & Filtering",
                        "notebookFile": "lfa/eq-volatilities/workflows/2_ETI_Volatility_Surfaces_Parametrisation.ipynb",
                        "pythonFile": "lfa/eq-volatilities/workflows/2_ETI_Volatility_Surfaces_Parametrisation.py"
                    },
                    {
                        "name": "ETI Volatility Surfaces: Layouts",
                        "notebookFile": "lfa/eq-volatilities/workflows/3_ETI_Volatility_Surfaces_Layouts.ipynb",
                        "pythonFile": "lfa/eq-volatilities/workflows/3_ETI_Volatility_Surfaces_Layouts.py"
                    },
                    {
                        "name": "ETI Volatility Surfaces: Model Comparison",
                        "notebookFile": "lfa/eq-volatilities/workflows/4_ETI_Volatility_Surfaces_Model_Comparison.ipynb",
                        "pythonFile": "lfa/eq-volatilities/workflows/4_ETI_Volatility_Surfaces_Model_Comparison.py"
                    }
                ]
            },
            {
                "name": "FX Forward Curves",
                "samples": [
                    {
                        "name": "FX Forward Curves Fundamentals",
                        "notebookFile": "lfa/fx-forward-curves/fx1_fx-forward-fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "Calculate an FX Forward curve defined by LSEG",
                        "notebookFile": "lfa/fx-forward-curves/workflows/1_calculate_an_FX_forward_curve_defined_by_LSEG.ipynb",
                        "pythonFile": "lfa/fx-forward-curves/workflows/1_calculate_an_FX_forward_curve_defined_by_LSEG.py"
                    },
                    {
                        "name": "Create an FX Forward curve using FX Forward constituents",
                        "notebookFile": "lfa/fx-forward-curves/workflows/2_create_an_FX_forward_curve_from_FX_forward_constituents.ipynb",
                        "pythonFile": "lfa/fx-forward-curves/workflows/2_create_an_FX_forward_curve_from_FX_forward_constituents.py"
                    },
                    {
                        "name": "Create and save an FX Forward curve from deposit constituents",
                        "notebookFile": "lfa/fx-forward-curves/workflows/3_create_an_FX_forward_curve_from_deposit_constituents.ipynb",
                        "pythonFile": "lfa/fx-forward-curves/workflows/3_create_an_FX_forward_curve_from_deposit_constituents.py"
                    },
                    {
                        "name": "Create and save an FX Forward curve from sources",
                        "notebookFile": "lfa/fx-forward-curves/workflows/4_create_an_FX_forward_curve_from_sources.ipynb",
                        "pythonFile": "lfa/fx-forward-curves/workflows/4_create_an_FX_forward_curve_from_sources.py"
                    }
                ]
            },
            {
                "name": "FX Forwards",
                "samples": [
                    {
                        "name": "FX Forwards Fundamentals",
                        "notebookFile": "lfa/fx-forwards/Fx_Forwards_Fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "Price an FX Forward on broken dates or non standard tenors",
                        "notebookFile": "lfa/fx-forwards/workflows/1_price_an_FX_forward_on_broken_dates.ipynb",
                        "pythonFile": "lfa/fx-forwards/workflows/1_price_an_FX_forward_on_broken_dates.py"
                    },
                    {
                        "name": "Price an FX Forward using an LSEG-defined curve",
                        "notebookFile": "lfa/fx-forwards/workflows/2_price_an_FX_forward_using_an_LSEG-defined_curve.ipynb",
                        "pythonFile": "lfa/fx-forwards/workflows/2_price_an_FX_forward_using_an_LSEG-defined_curve.py"
                    },
                    {
                        "name": "Value an FX Forward using an LSEG-defined curve",
                        "notebookFile": "lfa/fx-forwards/workflows/3_value_an_FX_forward_using_an_LSEG-defined_curve.ipynb",
                        "pythonFile": "lfa/fx-forwards/workflows/3_value_an_FX_forward_using_an_LSEG-defined_curve.py"
                    }
                ]
            },
            {
                "name": "FX Volatility",
                "samples": [
                    {
                        "name": "FX Volatility Surfaces - Fundamentals",
                        "notebookFile": "lfa/fx-volatilities/FX_Volatility_Surfaces_Fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "FX Volatility Surfaces - Layouts",
                        "notebookFile": "lfa/fx-volatilities/workflows/Fx_Volatilitty_Surfaces_Layouts.ipynb",
                        "pythonFile": "lfa/fx-volatilities/workflows/Fx_Volatilitty_Surfaces_Layouts.py"
                    },
                    {
                        "name": "FX Volatility Surfaces - Model Comparison",
                        "notebookFile": "lfa/fx-volatilities/workflows/Fx_Volatilitty_Surfaces_Model_Comparison.ipynb",
                        "pythonFile": "lfa/fx-volatilities/workflows/Fx_Volatilitty_Surfaces_Model_Comparison.py"
                    },
                    {
                        "name": "FX Volatility Parametrisation and plots",
                        "notebookFile": "lfa/fx-volatilities/workflows/Fx_Volatilitty_Surfaces_Parametrization.ipynb",
                        "pythonFile": "lfa/fx-volatilities/workflows/Fx_Volatilitty_Surfaces_Parametrization.py"
                    }
                ]
            },
            {
                "name": "Inflation Curves",
                "samples": [
                    {
                        "name": "Inflation Curves - Fundamentals",
                        "notebookFile": "lfa/inflation-curves/Inflation_Curves_Fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "Inflation Curves - Seasonality Adjustment",
                        "notebookFile": "lfa/inflation-curves/workflows/1_Inflation_Curves_Seasonality.ipynb",
                        "pythonFile": "lfa/inflation-curves/workflows/1_Inflation_Curves_Seasonality.py"
                    },
                    {
                        "name": "Inflation Curves - Override CPIs & Parametrization",
                        "notebookFile": "lfa/inflation-curves/workflows/2_Inflation_Curves_Override_CPIs_Parametrization.ipynb",
                        "pythonFile": "lfa/inflation-curves/workflows/2_Inflation_Curves_Override_CPIs_Parametrization.py"
                    }
                ]
            },
            {
                "name": "Interest Rate Swaps",
                "samples": [
                    {
                        "name": "Interest Rate Swaps Fundamentals",
                        "notebookFile": "lfa/ir-swaps/IR_Swaps_Fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "Interest Rate Swaps Templates",
                        "notebookFile": "lfa/ir-swaps/workflows/1_interest_rate_swaps_templates.ipynb",
                        "pythonFile": "lfa/ir-swaps/workflows/1_interest_rate_swaps_templates.py"
                    },
                    {
                        "name": "Interest Rate Indices",
                        "notebookFile": "lfa/ir-swaps/workflows/2_interest_rate_indices.ipynb",
                        "pythonFile": "lfa/ir-swaps/workflows/2_interest_rate_indices.py"
                    },
                    {
                        "name": "Valuing Interest Rate Swaps",
                        "notebookFile": "lfa/ir-swaps/workflows/3_interest_rate_swaps_valuation.ipynb",
                        "pythonFile": "lfa/ir-swaps/workflows/3_interest_rate_swaps_valuation.py"
                    },
                    {
                        "name": "Valuing Cross Currency Basis Swaps",
                        "notebookFile": "lfa/ir-swaps/workflows/4_cross_currency_basis_swap_valuation.ipynb",
                        "pythonFile": "lfa/ir-swaps/workflows/4_cross_currency_basis_swap_valuation.py"
                    },
                    {
                        "name": "Valuing Cross Currency Basis Swaps (fixed to float)",
                        "notebookFile": "lfa/ir-swaps/workflows/5_cross_currency_swap_valuation.ipynb",
                        "pythonFile": "lfa/ir-swaps/workflows/5_cross_currency_swap_valuation.py"
                    }
                ]
            },
            {
                "name": "Term Deposit",
                "samples": [
                    {
                        "name": "Term Deposits - Fundamentals",
                        "notebookFile": "lfa/term-deposits/Term_Deposit_Fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "Term Deposits - CashFlows",
                        "notebookFile": "lfa/term-deposits/workflows/1_term_deposit_cash_flows.ipynb",
                        "pythonFile": "lfa/term-deposits/workflows/1_term_deposit_cash_flows.py"
                    }
                ]
            },
            {
                "name": "Yield Book",
                "samples": [
                    {
                        "name": "Yield Book Fundamentals",
                        "notebookFile": "lfa/yieldbook-rest/YieldBook-Rest-Fundamentals.ipynb",
                        "pythonFile": ""
                    },
                    {
                        "name": "Complex Cash Flow",
                        "notebookFile": "lfa/yieldbook-rest/workflows/Complex_Cash_Flow.ipynb",
                        "pythonFile": "lfa/yieldbook-rest/workflows/Complex_Cash_Flow.py"
                    },
                    {
                        "name": "Complex Price Yield",
                        "notebookFile": "lfa/yieldbook-rest/workflows/Complex_Price_Yield.ipynb",
                        "pythonFile": "lfa/yieldbook-rest/workflows/Complex_Price_Yield.py"
                    },
                    {
                        "name": "Complex Scenario Analysis",
                        "notebookFile": "lfa/yieldbook-rest/workflows/Complex_Scenario_Analysis.ipynb",
                        "pythonFile": "lfa/yieldbook-rest/workflows/Complex_Scenario_Analysis.py"
                    },
                    {
                        "name": "Multiple Instrument Reference Data",
                        "notebookFile": "lfa/yieldbook-rest/workflows/Multiple_Instruments_fetch.ipynb",
                        "pythonFile": "lfa/yieldbook-rest/workflows/Multiple_Instruments_fetch.py"
                    },
                    {
                        "name": "Simple Cash Flow",
                        "notebookFile": "lfa/yieldbook-rest/workflows/Simple_Cash_Flow.ipynb",
                        "pythonFile": "lfa/yieldbook-rest/workflows/Simple_Cash_Flow.py"
                    },
                    {
                        "name": "Simple Price Yield",
                        "notebookFile": "lfa/yieldbook-rest/workflows/Simple_Price_Yield.ipynb",
                        "pythonFile": "lfa/yieldbook-rest/workflows/Simple_Price_Yield.py"
                    },
                    {
                        "name": "Simple Scenario Analysis",
                        "notebookFile": "lfa/yieldbook-rest/workflows/Simple_Scenario_Analysis.ipynb",
                        "pythonFile": "lfa/yieldbook-rest/workflows/Simple_Scenario_Analysis.py"
                    },
                    {
                        "name": "Single Instrument Reference Data",
                        "notebookFile": "lfa/yieldbook-rest/workflows/Single_Instrument_fetch.ipynb",
                        "pythonFile": "lfa/yieldbook-rest/workflows/Single_Instrument_fetch.py"
                    }
                ]
            }
        ]
    },
    "lfa_ai_assistant": {
        "name": "lfa_ai_assistant",
        "title": "LSEG AI Assistant Prompt Examples",
        "subtitle": "Here you can find prompt examples to get you started with the AI Assistant feature exploring some of the key LSEG Analytics functionality. Select a workflow, open it as .py file and try out the AI Assistant feature by invoking AI Assistant on the comment line. To invoke AI Assistant, look for the \"Trigger Inline Suggestion\" command in the Search bar and wait a couple of seconds to get back the code suggestion in the editor. You can observe the AI Assistant status on the Status bar in the bottom of the editor.",
        "categories": [
            {
                "name": "Calendars",
                "samples": [
                    {
                        "name": "Adding periods to a date, taking holidays into account",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/calendars/Adding_periods_to_a_date__taking_holidays_into_account.py"
                    },
                    {
                        "name": "Counting days and periods between two dates, taking holidays into account",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/calendars/Counting_days_and_periods_between_two_dates__taking_holidays_into_account.py"
                    },
                    {
                        "name": "Generate a date schedule, taking holidays into account",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/calendars/Generate_a_date_schedule__taking_holidays_into_account.py"
                    },
                    {
                        "name": "Generate public holidays using an LSEG-defined calendar",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/calendars/Generate_public_holidays_using_an_LSEG-defined_calendar.py"
                    },
                    {
                        "name": "Manipulate user-defined calendars",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/calendars/Manipulate_user-defined_calendars.py"
                    }
                ]
            },
            {
                "name": "FX Forward Curves",
                "samples": [
                    {
                        "name": "Calculate an FX Forward curve defined by LSEG",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/fx-forward-curves/Calculate_an_FX_Forward_curve_defined_by_LSEG.py"
                    },
                    {
                        "name": "Chart the Swap points of an FxForward curve",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/fx-forward-curves/Chart_the_Swap_points_of_an_FxForward_curve.py"
                    },
                    {
                        "name": "Chart the curve points of a curve",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/fx-forward-curves/Chart_the_curve_points_of_a_curve.py"
                    },
                    {
                        "name": "Chart the time series of bid points from an FxForward curve",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/fx-forward-curves/Chart_the_time_series_of_bid_points_from_an_FxForward_curve.py"
                    },
                    {
                        "name": "Create and save an FX Forward curve",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/fx-forward-curves/Create_and_save_an_FX_Forward_curve.py"
                    },
                    {
                        "name": "List all the available FX curves",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/fx-forward-curves/List_all_the_available_FX_curves.py"
                    },
                    {
                        "name": "Price an FX Forward using an LSEG-defined curve",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/fx-forward-curves/Price_an_FX_Forward_using_an_LSEG-defined_curve.py"
                    },
                    {
                        "name": "Value an FX Forward using an LSEG-defined curve",
                        "notebookFile": "",
                        "pythonFile": "lfa_ai_assistant/fx-forward-curves/Value_an_FX_Forward_using_an_LSEG-defined_curve.py"
                    }
                ]
            }
        ]
    }
}