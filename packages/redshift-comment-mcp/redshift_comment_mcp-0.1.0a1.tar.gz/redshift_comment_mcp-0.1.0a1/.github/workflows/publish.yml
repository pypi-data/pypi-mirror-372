name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:  # 允許手動觸發

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests
      run: |
        pytest tests/ -v

  publish:
    needs: test
    if: github.event.release.prerelease == false
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Get package version
      id: get_version
      run: |
        pip install setuptools-scm
        VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📋 Package version: $VERSION"

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "🚀 Publishing to PyPI..."
        twine upload dist/* --verbose
        echo "✅ Published to PyPI successfully!"
    
    - name: Verify PyPI publication
      run: |
        echo "🔍 Verifying publication on PyPI..."
        PACKAGE_NAME="redshift-comment-mcp"
        VERSION="${{ steps.get_version.outputs.version }}"
        
        # 等待 PyPI 更新
        sleep 30
        
        # 檢查套件是否存在於 PyPI
        for i in {1..5};
        do
          echo "⏳ Attempt $i/5: Checking PyPI availability..."
          if curl -f -s "https://pypi.org/pypi/$PACKAGE_NAME/$VERSION/json" > /dev/null;
          then
            echo "✅ Package $PACKAGE_NAME version $VERSION is available on PyPI!"
            echo "🔗 PyPI URL: https://pypi.org/project/$PACKAGE_NAME/$VERSION/"
            break
          else
            echo "⏳ Not yet available, waiting 30 seconds..."
            sleep 30
          fi
          
          if [ $i -eq 5 ];
          then
            echo "❌ Package not found on PyPI after 5 attempts"
            exit 1
          fi
        done

    - name: Create Release Report
      if: always()
      run: |
        echo "## 🎉 PyPI Release Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Name**: redshift-comment-mcp" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI URL**: https://pypi.org/project/redshift-comment-mcp/${{ steps.get_version.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Installation Command" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install redshift-comment-mcp==${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Upgrade Command" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install --upgrade redshift-comment-mcp" >> $GITHUB_STEP_SUMMARY
        echo '```'

    - name: Add comment to release
      if: github.event_name == 'release' && success()
      uses: actions/github-script@v6
      with:
        script: |
          const version = '${{ steps.get_version.outputs.version }}';
          const pypiUrl = `https://pypi.org/project/redshift-comment-mcp/${version}/`;
          const installCmd = `pip install redshift-comment-mcp==${version}`;
          const upgradeCmd = `pip install --upgrade redshift-comment-mcp`;
          
          const body = '## 🚀 PyPI 發布成功！\n\n' +
            '**版本**: ' + version + '\n' +
            '**PyPI 頁面**: ' + pypiUrl + '\n\n' +
            '### 📥 安裝指令\n' +
            '```bash\n' +
            installCmd + '\n' +
            '```\n\n' +
            '### 🔄 升級指令\n' +
            '```bash\n' +
            upgradeCmd + '\n' +
            '```\n\n' +
            '### 📚 使用指南\n' +
            '查看 [README.md](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '#readme) 了解詳細的使用方式。\n\n' +
            '---\n' +
            '🤖 *此訊息由 GitHub Actions 自動生成*';

          if (context.payload.release.discussion) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.release.discussion.number,
              body: body
            });
          } else {
            console.log("No associated discussion found for this release. Skipping comment.");
          }
