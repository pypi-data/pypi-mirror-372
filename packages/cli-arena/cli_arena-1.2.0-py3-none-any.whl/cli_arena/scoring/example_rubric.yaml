# Example custom scoring rubric for CLI Arena
name: "web_development_rubric"
description: "Scoring rubric optimized for web development tasks"

components:
  - name: "functionality"
    type: "binary"
    field: "verify_ok"
    weight: 4.0
    max_value: 1.0
    description: "Core functionality works as verified by tests"
  
  - name: "code_completion"
    type: "binary" 
    field: "agent_ok"
    weight: 2.0
    max_value: 1.0
    description: "Agent completed the task without errors"
  
  - name: "performance"
    type: "numeric"
    field: "time_s"
    weight: 1.0
    max_value: 1.0
    thresholds: [30, 60, 120, 300]  # Excellent, good, fair, poor time thresholds
    description: "Execution time performance"
  
  - name: "completeness"
    type: "file_exists"
    files: 
      - "package.json"
      - "README.md"
      - "test/"
      - ".env.example"
    weight: 1.0
    max_value: 1.0
    description: "Presence of expected project files"
  
  - name: "best_practices"
    type: "file_exists"
    files:
      - ".gitignore"
      - "eslint.config.js"
      - "prettier.config.js"
      - "docker-compose.yml"
    weight: 0.5
    max_value: 1.0
    description: "Development best practices files"

# Optional: task-specific overrides
task_overrides:
  "api-authentication":
    components:
      - name: "security"
        type: "file_exists"
        files:
          - "middleware/auth.js"
          - ".env.example"
          - "config/security.js"
        weight: 2.0
        max_value: 1.0
        description: "Security-related files for auth task"
  
  "database-integration":
    components:
      - name: "database_files"
        type: "file_exists"
        files:
          - "migrations/"
          - "models/"
          - "config/database.js"
        weight: 2.0
        max_value: 1.0
        description: "Database-related files"