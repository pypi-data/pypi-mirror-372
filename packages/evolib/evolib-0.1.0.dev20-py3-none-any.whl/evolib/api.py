# Auto-generated by gen_api_module.py

from evolib.config.base_component_config import CrossoverConfig, MutationConfig
from evolib.config.component_registry import get_component_config_class
from evolib.config.evonet_component_config import EvoNetComponentConfig
from evolib.config.schema import (
    EvolutionConfig,
    FullConfig,
    ReplacementConfig,
    SelectionConfig,
)
from evolib.config.vector_component_config import VectorComponentConfig
from evolib.core.individual import Indiv
from evolib.core.population import Pop, compute_fitness_diversity
from evolib.globals.numeric import DEFAULT_FLOAT_DTYPE, EPSILON, MAX_FLOAT, MIN_FLOAT
from evolib.initializers.evonet_initializers import initializer_normal_evonet
from evolib.initializers.net_initializers import initializer_normal_net
from evolib.initializers.registry import (
    INITIALIZER_REGISTRY,
    InitializerFunction,
    build_composite_initializer,
    get_initializer,
)
from evolib.initializers.vector_initializers import (
    initializer_adaptive_vector,
    initializer_fixed_vector,
    initializer_normal_vector,
    initializer_random_vector,
    initializer_zero_vector,
)
from evolib.interfaces.enums import (
    CrossoverOperator,
    CrossoverStrategy,
    DiversityMethod,
    EvolutionStrategy,
    MutationStrategy,
    Origin,
    ReplacementStrategy,
    RepresentationType,
    SelectionStrategy,
)
from evolib.interfaces.structs import MutationParams
from evolib.interfaces.types import (
    CrossoverFunction,
    EvolutionStrategyFunction,
    FitnessFunction,
    ModuleConfig,
    MutationFunction,
    ParaInitFunction,
    ParaInitializer,
    ReplaceFunction,
    SelectionFunction,
    TauUpdateFunction,
)
from evolib.operators.crossover import (
    crossover_arithmetic,
    crossover_blend_alpha,
    crossover_intermediate,
    crossover_offspring,
    crossover_simulated_binary,
)
from evolib.operators.mutation import (
    adapt_crossover_probability,
    adapt_crossover_probability_by_diversity,
    adapt_mutation_probability,
    adapt_mutation_probability_by_diversity,
    adapt_mutation_strength,
    adapt_mutation_strength_by_diversity,
    adapt_mutation_strengths,
    adapt_value_by_diversity,
    adapted_tau,
    exponential_crossover_probability,
    exponential_decay,
    exponential_mutation_probability,
    exponential_mutation_strength,
    mutate_offspring,
)
from evolib.operators.replacement import (
    replace_generational,
    replace_mu_lambda,
    replace_random,
    replace_steady_state,
    replace_truncation,
    replace_weighted_stochastic,
)
from evolib.operators.reproduction import generate_cloned_offspring
from evolib.operators.selection import (
    selection_boltzmann,
    selection_random,
    selection_rank_based,
    selection_roulette,
    selection_sus,
    selection_tournament,
    selection_truncation,
)
from evolib.operators.strategy import (
    evolve_flexible,
    evolve_mu_comma_lambda,
    evolve_mu_plus_lambda,
    evolve_steady_state,
)
from evolib.registry.replacement_registry import build_replacement_registry
from evolib.registry.selection_registry import build_selection_registry
from evolib.registry.strategy_registry import strategy_registry
from evolib.representation._apply_config_mapping import (
    apply_crossover_config,
    apply_mutation_config,
)
from evolib.representation.base import ParaBase
from evolib.representation.composite import ParaComposite
from evolib.representation.evo_params import EvoControlParams
from evolib.representation.evonet import ParaEvoNet
from evolib.representation.netvector import ACTIVATIONS, NetVector
from evolib.representation.vector import ParaVector
from evolib.utils.benchmarks import (
    ackley,
    ackley_2d,
    ackley_3d,
    griewank,
    griewank_2d,
    griewank_3d,
    rastrigin,
    rastrigin_2d,
    rastrigin_3d,
    rosenbrock,
    rosenbrock_2d,
    rosenbrock_3d,
    schwefel,
    schwefel_2d,
    schwefel_3d,
    simple_quadratic,
    sphere,
    sphere_2d,
    sphere_3d,
)
from evolib.utils.config_loader import T, get_enum, load_config
from evolib.utils.copy_indiv import copy_indiv
from evolib.utils.fitness import sort_by_fitness
from evolib.utils.history_logger import HistoryLogger
from evolib.utils.loss_functions import (
    bce_loss,
    cce_loss,
    huber_loss,
    mae_loss,
    mse_loss,
)
from evolib.utils.math_utils import clip, clip_mutation_strength, scaled_mutation_factor
from evolib.utils.plotting import (
    plot_diversity,
    plot_fitness,
    plot_fitness_comparison,
    plot_history,
    plot_mutation_trends,
    save_combined_net_plot,
    save_current_plot,
)
from evolib.utils.registry import (
    ERR_INVALID_NAME,
    ERR_NO_GET_STRATEGY,
    ERR_UNKNOWN_CATEGORY,
    MODULE_MAP,
    load_strategy,
)

__all__ = [
    "ACTIVATIONS",
    "CrossoverConfig",
    "CrossoverFunction",
    "CrossoverOperator",
    "CrossoverStrategy",
    "DEFAULT_FLOAT_DTYPE",
    "DiversityMethod",
    "EPSILON",
    "ERR_INVALID_NAME",
    "ERR_NO_GET_STRATEGY",
    "ERR_UNKNOWN_CATEGORY",
    "EvoControlParams",
    "EvoNetComponentConfig",
    "EvolutionConfig",
    "EvolutionStrategy",
    "EvolutionStrategyFunction",
    "FitnessFunction",
    "FullConfig",
    "HistoryLogger",
    "INITIALIZER_REGISTRY",
    "Indiv",
    "InitializerFunction",
    "MAX_FLOAT",
    "MIN_FLOAT",
    "MODULE_MAP",
    "ModuleConfig",
    "MutationConfig",
    "MutationFunction",
    "MutationParams",
    "MutationStrategy",
    "NetVector",
    "Origin",
    "ParaBase",
    "ParaComposite",
    "ParaEvoNet",
    "ParaInitFunction",
    "ParaInitializer",
    "ParaVector",
    "Pop",
    "ReplaceFunction",
    "ReplacementConfig",
    "ReplacementStrategy",
    "RepresentationType",
    "SelectionConfig",
    "SelectionFunction",
    "SelectionStrategy",
    "T",
    "TauUpdateFunction",
    "VectorComponentConfig",
    "ackley",
    "ackley_2d",
    "ackley_3d",
    "adapt_crossover_probability",
    "adapt_crossover_probability_by_diversity",
    "adapt_mutation_probability",
    "adapt_mutation_probability_by_diversity",
    "adapt_mutation_strength",
    "adapt_mutation_strength_by_diversity",
    "adapt_mutation_strengths",
    "adapt_value_by_diversity",
    "adapted_tau",
    "apply_crossover_config",
    "apply_mutation_config",
    "bce_loss",
    "build_composite_initializer",
    "build_replacement_registry",
    "build_selection_registry",
    "cce_loss",
    "clip",
    "clip_mutation_strength",
    "compute_fitness_diversity",
    "copy_indiv",
    "crossover_arithmetic",
    "crossover_blend_alpha",
    "crossover_intermediate",
    "crossover_offspring",
    "crossover_simulated_binary",
    "evolve_flexible",
    "evolve_mu_comma_lambda",
    "evolve_mu_plus_lambda",
    "evolve_steady_state",
    "exponential_crossover_probability",
    "exponential_decay",
    "exponential_mutation_probability",
    "exponential_mutation_strength",
    "generate_cloned_offspring",
    "get_component_config_class",
    "get_enum",
    "get_initializer",
    "griewank",
    "griewank_2d",
    "griewank_3d",
    "huber_loss",
    "initializer_adaptive_vector",
    "initializer_fixed_vector",
    "initializer_normal_evonet",
    "initializer_normal_net",
    "initializer_normal_vector",
    "initializer_random_vector",
    "initializer_zero_vector",
    "load_config",
    "load_strategy",
    "mae_loss",
    "mse_loss",
    "mutate_offspring",
    "plot_diversity",
    "plot_fitness",
    "plot_fitness_comparison",
    "plot_history",
    "plot_mutation_trends",
    "rastrigin",
    "rastrigin_2d",
    "rastrigin_3d",
    "replace_generational",
    "replace_mu_lambda",
    "replace_random",
    "replace_steady_state",
    "replace_truncation",
    "replace_weighted_stochastic",
    "rosenbrock",
    "rosenbrock_2d",
    "rosenbrock_3d",
    "save_combined_net_plot",
    "save_current_plot",
    "scaled_mutation_factor",
    "schwefel",
    "schwefel_2d",
    "schwefel_3d",
    "selection_boltzmann",
    "selection_random",
    "selection_rank_based",
    "selection_roulette",
    "selection_sus",
    "selection_tournament",
    "selection_truncation",
    "simple_quadratic",
    "sort_by_fitness",
    "sphere",
    "sphere_2d",
    "sphere_3d",
    "strategy_registry",
]
