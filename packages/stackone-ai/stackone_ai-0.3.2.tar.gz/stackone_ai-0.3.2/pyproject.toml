[project]
name = "stackone-ai"
version = "0.3.2"
description = "agents performing actions on your SaaS"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    { name = "StackOne", email = "support@stackone.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.10.6",
    "requests>=2.32.3",
    "langchain-core>=0.1.0",
    "bm25s>=0.2.2",
    "numpy>=1.24.0",
    "typing-extensions>=4.0.0",
    "eval-type-backport; python_version<'3.10'",  # TODO: Remove when Python 3.9 support is dropped
]

[project.scripts]
stackmcp = "stackone_ai.server:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["stackone_ai"]

[tool.hatch.build.targets.wheel.force-include]
"stackone_ai/py.typed" = "stackone_ai/py.typed"

[tool.hatch.build.targets.wheel.shared-data]
"py.typed" = "py.typed"

[project.optional-dependencies]
# TODO: Remove python_version conditions when Python 3.9 support is dropped
mcp = [
    "mcp[cli]>=1.3.0; python_version>='3.10'",
]
examples = [
    "crewai>=0.102.0; python_version>='3.10'",
    "langchain-openai>=0.3.6",
    "openai>=1.63.2",
    "python-dotenv>=1.0.1",
]
docs = [
    "mkdocs-terminal>=4.7.0",
    "pygments>=2.12",
    "pymdown-extensions"
] 

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "pre-commit>=4.1.0",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.3",
    "pytest-cov>=6.0.0",
    "pytest-snapshot>=0.9.0",
    "responses>=0.25.8",
    "ruff>=0.9.6",
    "stackone-ai",
    "types-requests>=2.31.0.20240311",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "asyncio: mark test as async",
]

[tool.ruff.lint.per-file-ignores]
"bin/**.py" = ["T201", "T203"]
"scripts/**.py" = ["T201", "T203"]
"tests/**.py" = ["T201", "T203"]
"examples/**.py" = ["T201", "T203", "E501", "F841", "E402"]

[tool.ruff]
line-length = 110
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

[tool.mypy]
python_version = "3.9"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "bm25s"
ignore_missing_imports = true
