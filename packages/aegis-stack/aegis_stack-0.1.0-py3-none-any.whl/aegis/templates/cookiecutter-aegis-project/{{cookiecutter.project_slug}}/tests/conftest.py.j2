"""
Pytest configuration and fixtures for test suite.

Provides common fixtures and configuration for all tests.
"""

import os
import sys
from pathlib import Path
from typing import Generator

import pytest

# Add project root to Python path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

{% if cookiecutter.include_database == "yes" %}
from sqlalchemy import create_engine, event
from sqlalchemy.engine.base import Engine
from sqlalchemy.orm import sessionmaker
from sqlmodel import Session, SQLModel


@pytest.fixture(scope="session")
def engine() -> Engine:
    """
    Create in-memory SQLite database engine for tests.

    Uses :memory: database that exists only in RAM for maximum speed
    and perfect test isolation. Each test session gets a fresh database.

    Returns:
        SQLAlchemy Engine connected to in-memory SQLite database
    """
    engine = create_engine(
        "sqlite:///:memory:",
        echo=False,  # Set to True for SQL debugging
        connect_args={"check_same_thread": False}  # Allow multi-threaded access
    )
    
    # Critical: Enable foreign key constraints in SQLite
    # SQLite has foreign keys disabled by default for backwards compatibility
    @event.listens_for(engine, "connect")
    def set_sqlite_pragma(dbapi_connection, connection_record):
        cursor = dbapi_connection.cursor()
        cursor.execute("PRAGMA foreign_keys=ON")
        cursor.close()
    
    # Create all tables once per test session
    SQLModel.metadata.create_all(engine)
    
    return engine


@pytest.fixture(scope="function")
def db_session(engine: Engine) -> Generator[Session, None, None]:
    """
    Provide transactional database session with automatic rollback.

    Each test gets a fresh transaction that's rolled back after the test,
    ensuring perfect isolation between tests. Uses the same transaction
    pattern as PostgreSQL for consistency.

    Args:
        engine: Database engine from session-scoped fixture

    Yields:
        SQLModel Session for database operations
    """
    connection = engine.connect()
    transaction = connection.begin()
    session_local = sessionmaker(bind=connection)
    session = session_local()
    
    yield session
    
    # Clean up: rollback transaction and close connection
    session.close()
    transaction.rollback()
    connection.close()
{% endif %}