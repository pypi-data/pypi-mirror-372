"""
Component health registration startup hook.

Automatically detects available components and registers their health checks
with the system health service using Python's import system.
"""

from app.core.log import logger
from app.services.system.health import register_health_check
from app.services.system.models import ComponentStatus, ComponentStatusType


async def _backend_component_health() -> ComponentStatus:
    """
    FastAPI backend health check.

    In test environment, reports as healthy since the app is loaded.
    In production, uses internal check to avoid circular dependency.
    """
    import os

    # Check if we're in test environment
    if os.getenv("PYTEST_CURRENT_TEST") or "pytest" in os.getenv("_", ""):
        return ComponentStatus(
            name="backend",
            status=ComponentStatusType.HEALTHY,
            message="FastAPI backend available (test mode)",
            response_time_ms=None,
            metadata={
                "type": "component_check",
                "environment": "test",
                "note": "Backend component loaded successfully",
            },
        )

    # In production, assume backend is healthy if we can execute this code
    # (since this code IS the backend). Avoid self-HTTP-check circular dependency.
    try:
        # Simple internal health check - if we can import and run this, backend is up
        from app.integrations.main import create_integrated_app
        
        return ComponentStatus(
            name="backend",
            status=ComponentStatusType.HEALTHY,
            message="FastAPI backend active (internal check)",
            response_time_ms=None,
            metadata={
                "type": "internal_component_check",
                "note": "Backend is running since this health check executed",
                "check_method": "internal_execution",
            },
        )
    except Exception as e:
        return ComponentStatus(
            name="backend",
            status=ComponentStatusType.UNHEALTHY,
            message=f"Backend component check failed: {str(e)}",
            response_time_ms=None,
            metadata={
                "type": "internal_component_check",
                "error": "import_or_execution_error",
                "error_details": str(e),
            },
        )


async def _frontend_component_health() -> ComponentStatus:
    """
    Flet frontend health check.

    Since the frontend runs in the same process as the backend,
    we check if the frontend component is properly initialized.
    """
    try:
        # Check if frontend component is available
        from app.components.frontend.main import create_frontend_app

        # Verify the frontend app factory function works
        create_frontend_app()

        return ComponentStatus(
            name="frontend",
            status=ComponentStatusType.HEALTHY,
            message="Flet frontend component available",
            response_time_ms=None,
            metadata={
                "type": "component_check",
                "framework": "flet",
                "note": "Frontend integrated with FastAPI",
            },
        )

    except ImportError as e:
        return ComponentStatus(
            name="frontend",
            status=ComponentStatusType.UNHEALTHY,
            message="Frontend component not found",
            response_time_ms=None,
            metadata={
                "type": "component_check",
                "error": "import_error",
                "error_details": str(e),
            },
        )
    except Exception as e:
        return ComponentStatus(
            name="frontend",
            status=ComponentStatusType.UNHEALTHY,
            message=f"Frontend component error: {str(e)}",
            response_time_ms=None,
            metadata={
                "type": "component_check",
                "error": "unexpected_error",
                "error_details": str(e),
            },
        )

{%- if cookiecutter.include_scheduler == "yes" %}


async def _scheduler_enabled_status() -> ComponentStatus:
    """
    Shows scheduler as an enabled/activated component.

    This indicates the scheduler component is configured in the project
    and running in its own container, but we can't health check it
    without cross-container communication.
    """
    return ComponentStatus(
        name="scheduler",
        status=ComponentStatusType.HEALTHY,
        message="Scheduler component activated",
        response_time_ms=None,
        metadata={
            "type": "component_status",
            "deployment": "separate_container",
            "status": "activated",
            "note": (
                "Runs independently - health monitoring requires database "
                "component"
            ),
        },
    )
{%- endif %}


async def startup_hook() -> None:
    """
    Auto-detect available components and register their health checks.

    Always registers core components (backend, frontend) and detects
    optional components using Python's import system.
    """
    logger.info("Registering component health checks...")

    # Always register core components
    register_health_check("backend", _backend_component_health)
    logger.info("Backend component health check registered")

    register_health_check("frontend", _frontend_component_health)
    logger.info("️Frontend component health check registered")

    {%- if cookiecutter.include_scheduler == "yes" %}
    # Register scheduler as enabled component (shows user it's activated)
    register_health_check("scheduler", _scheduler_enabled_status)
    logger.info("Scheduler component enabled (shows as activated)")
    {%- endif %}

    {%- if cookiecutter.include_worker == "yes" %}
    # Register worker health check (shows queue status and job metrics)
    from app.services.system.health import check_worker_health
    register_health_check("worker", check_worker_health)
    logger.info("Worker component health check registered")
    {%- endif %}

    {%- if cookiecutter.include_redis == "yes" %}
    # Register cache health check (Redis connectivity and operations)
    from app.services.system.health import check_cache_health
    register_health_check("cache", check_cache_health)
    logger.info("Cache component health check registered")
    {%- endif %}

    {%- if cookiecutter.include_database == "yes" %}
    # Register database health check (SQLite connectivity and basic operations)
    from app.services.system.health import check_database_health
    register_health_check("database", check_database_health)
    logger.info("Database component health check registered")
    {%- endif %}

    logger.info("✅ Component health detection complete")