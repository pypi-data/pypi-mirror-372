[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[tool.testbench2robotframework.console-logging]
logLevel = "DEBUG"

[project]
name = "testbench2robotframework"
authors = [
    {name = "imbus AG", email = "support@imbus.de"},
]
description = "Robot Framework Code Generator from Keyword-Driven Tests in imbus TestBench 3.0 and newer"
requires-python = ">= 3.10"
readme = "README.md"
license = {text = "Apache 2.0 License"}
dynamic = ["version"]
dependencies = [
  "click >= 8.0",
  "robotframework >= 5.0",
  "tomli; python_version < '3.11'",
]

[project.optional-dependencies]
dev = [
  "build",
  "check-manifest",
  "flit",
  "invoke",
  "mypy",
  "pylint",
  "pytest",
  "pytest-cov",
  "pytest-spec",
  "robotframework-tidy",
  "ruff",
  "twine",
]

[project.scripts]
tb2robot = "testbench2robotframework.cli:testbench2robotframework_cli"
testbench2robotframework = "testbench2robotframework.cli:testbench2robotframework_cli"

[project.urls]
Repository = "https://github.com/imbus/testbench2robotframework"

[tool.check-manifest]
ignore = [
  "config.json",
  "*.bat",
  "*.sh",
  "*.zip",
  "tests/**"
]


[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
no_implicit_optional = true
strict_optional = true
warn_return_any = true
warn_no_return = true
warn_unreachable = true
pretty = true


[tool.ruff]
target-version = "py39"
line-length = 100
lint.select = [
  "A",
  "B",
  "C",
  "DTZ",
  "E",
  "F",
  "I",
  "ICN",
  "INP",
  "ISC",
  "N",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "T20",
  "UP",
  "W"
]

lint.ignore = [
  "ISC001"
]

exclude = [
  "__pycache__",
  "config.py",
  "model.py",
  "tests"
]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --spec"
testpaths = [
    "tests",
]
spec_header_format = "{test_case}"


[tool.pylint.MASTER]
ignore = "tests"

[tool.pylint.BASIC]
argument-naming-style = 'snake_case'
attr-naming-style = 'snake_case'
class-naming-style = 'PascalCase'
const-naming-style = 'UPPER_CASE'
function-naming-style = 'snake_case'
method-naming-style = 'snake_case'
module-naming-style = 'snake_case'
variable-naming-style = 'snake_case'

[tool.pylint.DESIGN]
max-statements = 50

[tool.pylint."MESSAGES CONTROL"]
disable = '''
    logging-fstring-interpolation,
    fixme,
    import-error,
    missing-module-docstring,
    missing-class-docstring,
    missing-function-docstring,
    too-many-instance-attributes,
    too-few-public-methods,
'''

[tool.pylint.REFACTORING]
max-nested-blocks = 3


[tool.robotidy]
transform = [
"InlineIf",
"ReplaceBreakContinue",
"ReplaceReturns",
"SplitTooLongLine",
"ReplaceRunKeywordIf",
"NormalizeSettingName",
"NormalizeSectionHeaderName",
"NormalizeNewLines",
"AlignVariablesSection",
"AlignSettingsSection",
"OrderSettingsSection",
"OrderSettings",
"NormalizeAssignments",
"RemoveEmptySettings",
"MergeAndOrderSections",
"DiscardEmptySections",
"NormalizeSeparators",
"AddMissingEnd",
"AlignTemplatedTestCases",
"RenameTestCases",
"RenameKeywords"
]
configure = [
"RenameTestCases:enabled=True:capitalize_each_word=True",
"AlignKeywordsSection:enabled=True:alignment_type=auto"
]