[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "aiida-fireball"
authors = [
    {name = "ValkScripter", email = "valkscripter@example.com"},
    {name = "mohamedmamlouk", email = "mohamedmamlouk@example.com"},
]
description = "AiiDA plugin for the Fireball semi-empirical DFT code with advanced transport calculations"
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AiiDA",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Materials Science",
    "Topic :: Scientific/Engineering :: Physics",
]
keywords = [
    "aiida",
    "plugin",
    "fireball",
    "dft",
    "semi-empirical", 
    "transport",
    "quantum",
    "materials",
    "workflows"
]
requires-python = ">=3.8"
dependencies = [
    "aiida-core>=2.0.0,<3.0.0",
    "numpy>=1.21.0",
    "packaging",
    "click>=7.0",
    "voluptuous",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/yourusername/aiida-fireball"
Documentation = "https://aiida-fireball.readthedocs.io"
Repository = "https://github.com/yourusername/aiida-fireball.git"
Issues = "https://github.com/yourusername/aiida-fireball/issues"
Changelog = "https://github.com/yourusername/aiida-fireball/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=3.0.0",
    "pytest-regressions>=2.0.0",
    "pre-commit>=2.17.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.900",
    "pylint>=2.12.0",
    "pgtest>=1.3.1,<2.0.0",
]
docs = [
    "sphinx>=4.0.0,<8.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=0.18.0,<3.0.0",
    "sphinx-copybutton>=0.5.0",
    "sphinxcontrib-details-directive",
    "linkify-it-py",
]
testing = [
    "pytest>=6.0",
    "pytest-cov>=3.0.0",
    "pytest-regressions>=2.0.0",
    "pgtest>=1.3.1,<2.0.0",
]

[project.entry-points."aiida.calculations"]
fireball = "aiida_fireball.calculations.fireball:FireballCalculation"

[project.entry-points."aiida.parsers"]
fireball = "aiida_fireball.parsers.fireball:FireballParser"
"fireball.raw" = "aiida_fireball.parsers.raw:RawParser"

[project.entry-points."aiida.workflows"]
"fireball.birch_murnaghan" = "aiida_fireball.workflows.birch_murnaghan_relax:BirchMurnaghanWorkflow"

[project.entry-points."aiida.data"]
# Add any custom data types here if needed
# "fireball.xyz" = "aiida_fireball.data.xyz:XyzData"

[tool.setuptools.packages.find]
where = ["src"]
include = ["aiida_fireball*"]

[tool.setuptools_scm]
write_to = "src/aiida_fireball/_version.py"

# Testing configuration
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "requires_fireball: marks tests that require the Fireball executable",
]
filterwarnings = [
    "ignore::DeprecationWarning:aiida:",
    "ignore::PendingDeprecationWarning:aiida:",
]

# Coverage configuration
[tool.coverage.run]
source = ["aiida_fireball"]
omit = [
    "*/tests/*",
    "*/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Code formatting with black
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

# Import sorting with isort
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_aiida = ["aiida"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "AIIDA", "FIRSTPARTY", "LOCALFOLDER"]

# Type checking with mypy
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "aiida.*",
    "numpy.*",
    "matplotlib.*",
    "scipy.*",
    "ase.*",
]
ignore_missing_imports = true

# Linting with pylint
[tool.pylint.messages_control]
disable = [
    "too-many-arguments",
    "too-many-locals",
    "too-many-instance-attributes",
    "too-few-public-methods",
    "duplicate-code",
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-parents = 10
max-attributes = 15
max-public-methods = 25

# Pre-commit configuration is typically in .pre-commit-config.yaml
# but we can define some tool-specific settings here

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".tox",
    ".eggs",
    "*.egg",
]
per-file-ignores = [
    "__init__.py:F401",
    "test_*.py:F401,F811",
]
