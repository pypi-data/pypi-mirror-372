{"$schema": "https://json-schema.org/draft/2020-12/schema", "$id": "https://responses_validator.pages.dev/schemas/schema_v0.2.2.json", "title": "Response Validator Schema", "description": "A schema for describing HTTP response validation rules.", "type": "object", "properties": {"status_code": {"description": "The expected HTTP status code. Can be a single code, or multiple codes separated by '|' (supports '*' wildcards).", "anyOf": [{"type": "integer", "minimum": 100, "maximum": 599}, {"type": "string"}], "examples": [200, "404", "20*", "200|201"]}, "headers": {"description": "Assertions for the response headers. Each key is a header name.", "type": "object", "additionalProperties": {"$ref": "#/$defs/textFieldAssertion"}, "examples": [{"Content-Type": "application/json", "Server": "nginx/*"}]}, "cookies": {"description": "Assertions for the response cookies. Each key is a cookie name.", "type": "object", "additionalProperties": {"$ref": "#/$defs/textFieldAssertion"}, "examples": [{"session_id": "abc-*-xyz"}]}, "text": {"description": "Assertions for the response body (Text) content.", "anyOf": [{"type": "string", "description": "A simple string value, which is matched using the 'glob' mode by default."}, {"type": "integer", "description": "A simple integer value, which will be converted to a string for matching."}, {"$ref": "#/$defs/textFieldDict", "description": "A dictionary for more detailed assertion configuration."}], "examples": ["Welcome, *", {"value": "error \\d+", "mode": "re"}]}, "json": {"description": "Assertions for the response body (JSON) content.", "anyOf": [{"$ref": "#/$defs/jsonFieldDict"}, {"type": ["object", "array", "string", "number", "boolean", "null"], "description": "Any valid JSON value, which will be recursively matched using the default mode ('glob')."}], "examples": [{"user": {"id": 1, "name": "John Doe", "active": true}}, {"value": {"$.user.id": 1, "$.user.name": "John*"}, "mode": "jsonpath"}]}, "function": {"description": "An importable Python function path (e.g., 'module.custom_func') or a lambda expression string. The function should accept the response object and return a boolean.", "type": "string", "pattern": "^(lambda\\s*.*?:.+|[a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)+)$", "examples": ["my_validators.custom_checks.check_user_permission", "lambda resp: resp.status_code == 200"]}}, "$defs": {"textFieldAssertion": {"description": "An assertion for a text field. It can be a simple string, an integer, or a detailed configuration object.", "anyOf": [{"type": "string", "description": "A simple string value, which is matched using the 'glob' mode by default."}, {"type": "integer", "description": "Numbers are automatically converted to strings for assertion."}, {"$ref": "#/$defs/textFieldDict"}]}, "textFieldDict": {"description": "A detailed configuration object for text field assertions.", "type": "object", "properties": {"value": {"description": "The expected value to match. For 'function' mode, this should be a module path or a lambda expression string.", "type": ["string", "integer"]}, "mode": {"description": "The matching mode to use for validation.", "type": "string", "enum": ["same", "glob", "re", "function"], "default": "glob"}, "msg": {"description": "A custom error message to display on validation failure.", "type": "string"}}, "required": ["value"]}, "jsonFieldDict": {"description": "A detailed configuration object for JSON content assertions.", "type": "object", "required": ["value"], "properties": {"value": {"description": "The expected value. This can be a JSON object/array, a map of expressions for 'jsonpath' mode, or a module/lambda string for 'function' mode."}, "mode": {"description": "The matching mode to use for validation.", "type": "string", "enum": ["same", "glob", "schema", "jsonpath", "keypath", "function"], "default": "glob"}, "msg": {"description": "A custom error message to display on validation failure.", "type": "string"}}, "if": {"properties": {"mode": {"const": "keypath"}}, "then": {"properties": {"value": {"description": "A mapping of a keypath to an expected value. Each value can be a simple type or a TextField assertion\u3002", "type": "object", "additionalProperties": {"$ref": "#/$defs/textFieldAssertion"}}}}}}}}