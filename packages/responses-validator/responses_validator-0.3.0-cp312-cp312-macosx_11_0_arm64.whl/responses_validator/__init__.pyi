from .types import DetailedJSONLike as DetailedJSONLike, DetailedKVLike as DetailedKVLike, DetailedStrLike as DetailedStrLike, ResponseLike, SimpleJSONLike as SimpleJSONLike, SimpleKVLike as SimpleKVLike, SimpleStrLike as SimpleStrLike
from _typeshed import Incomplete
from dataclasses import dataclass
from typing import overload

logger: Incomplete
schema: Incomplete

@dataclass
class ResponseValidator:
    status_code: int | str = ...
    headers: DetailedKVLike = ...
    cookies: DetailedKVLike = ...
    text: DetailedStrLike = ...
    json: DetailedJSONLike = ...
    function: str = ...
    def __post_init__(self) -> None: ...
    def is_valid(self, resp, raise_exception: bool = True): ...
    def validate_status_code(self, resp_status_code): ...
    def validate_headers(self, resp_headers): ...
    def validate_cookies(self, resp_cookies): ...
    def validate_text(self, resp_text): ...
    def validate_json(self, resp_json_func): ...
    def validate_function(self, resp): ...
    @property
    def errors(self) -> dict[str, str]: ...

class ResponseAssertionError(AssertionError): ...

@overload
def validator(resp: ResponseLike, status_code: str | int = '*', headers: SimpleKVLike | DetailedKVLike = None, cookies: SimpleKVLike | DetailedKVLike = None, text: SimpleStrLike | DetailedStrLike = None, json: SimpleJSONLike | DetailedJSONLike = None, function: str = '', raise_exception: bool = True) -> dict[str, str]: ...
