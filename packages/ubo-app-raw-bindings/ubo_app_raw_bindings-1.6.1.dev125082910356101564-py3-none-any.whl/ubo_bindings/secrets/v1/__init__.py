# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: secrets/v1/secrets.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto
import grpclib
import grpclib.server
from betterproto.grpc.grpclib_server import ServiceBase

if TYPE_CHECKING:
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class QuerySecretRequest(betterproto.Message):
    key: str = betterproto.string_field(1)
    covered: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class QuerySecretResponse(betterproto.Message):
    value: 'str | None' = betterproto.string_field(1, optional=True)
    error: 'str | None' = betterproto.string_field(2, optional=True)


class SecretsServiceStub(betterproto.ServiceStub):
    async def query_secret(
        self,
        query_secret_request: 'QuerySecretRequest',
        *,
        timeout: 'float | None' = None,
        deadline: 'Deadline | None' = None,
        metadata: 'MetadataLike | None' = None,
    ) -> 'QuerySecretResponse':
        return await self._unary_unary(
            '/secrets.v1.SecretsService/QuerySecret',
            query_secret_request,
            QuerySecretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SecretsServiceBase(ServiceBase):

    async def query_secret(
        self, query_secret_request: 'QuerySecretRequest',
    ) -> 'QuerySecretResponse':
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_query_secret(
        self, stream: 'grpclib.server.Stream[QuerySecretRequest, QuerySecretResponse]',
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_secret(request)
        await stream.send_message(response)

    def __mapping__(self) -> 'dict[str, grpclib.const.Handler]':
        return {
            '/secrets.v1.SecretsService/QuerySecret': grpclib.const.Handler(
                self.__rpc_query_secret,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySecretRequest,
                QuerySecretResponse,
            ),
        }
