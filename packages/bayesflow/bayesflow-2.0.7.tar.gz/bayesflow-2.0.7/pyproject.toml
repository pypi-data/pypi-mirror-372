[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "bayesflow"
version = "2.0.7"
authors = [{ name = "The BayesFlow Team" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
description = "Amortizing Bayesian Inference With Neural Networks"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }

requires-python = ">= 3.10, < 3.13"
dependencies = [
    "keras >= 3.9",
    "matplotlib",
    "numpy >= 1.24, <2.0",
    "pandas",
    "scipy",
    "seaborn",
    "tqdm",
]
[project.optional-dependencies]
all = [
    # dev
    "ipython",
    "ipykernel",
    "jupyter",
    "jupyterlab",
    "line-profiler",
    "nbconvert",
    "pre-commit",
    "ruff",
    "tox",
    # docs
    "myst-nb ~= 1.2",
    "numpydoc ~= 1.8",
    "pydata-sphinx-theme ~= 0.16",
    "sphinx ~= 8.1.3",
    "sphinx-polyversion == 1.1",
    "sphinx_design ~= 0.6",
    "sphinxcontrib-bibtex ~= 2.6",
    "snowballstemmer ~= 2.2.0",
    # test
    "pytest",
    "pytest-cov",
    "pytest-rerunfailures",
    "pytest-xdist",
]
dev = [
    "jupyter",
    "jupyterlab",
    "line-profiler",
    "pre-commit",
    "ruff",
    "tox",
]
docs = [
    "myst-nb ~= 1.2",
    "numpydoc ~= 1.8",
    "pydata-sphinx-theme ~= 0.16",
    "sphinx ~= 8.1.3",
    "sphinx-polyversion == 1.1",
    "sphinx_design ~= 0.6",
    "sphinxcontrib-bibtex ~= 2.6",
    "snowballstemmer ~= 2.2.0",
]
test = [
    "nbconvert",
    "ipython",
    "ipykernel",
    "pytest",
    "pytest-cov",
    "pytest-rerunfailures",
    "pytest-xdist",
]
[tool.ruff]
# We use ruff to lint and auto-format code

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "*.ipynb",  # ignore jupyter notebooks completely for now
]

# more lenient line width than Black
line-length = 120
indent-width = 4

# minimum target python version
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]

"__init__.py" = [
    "F401",  # unused imports
]

"tests/**/__init__.py" = [
    "F403",  # * imports
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.setuptools.packages]
find = {}
