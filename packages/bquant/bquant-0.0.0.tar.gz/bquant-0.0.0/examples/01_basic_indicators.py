#!/usr/bin/env python3
"""
BQuant - –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ó–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
2. –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (SMA, RSI, MACD, Bollinger Bands)
3. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –±–∞–∑–æ–≤—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π BQuant –ø–∞–∫–µ—Ç: pip install -e .
- –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OHLCV
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ BQuant –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from bquant.indicators import (
    calculate_indicator, calculate_macd, calculate_rsi, 
    calculate_bollinger_bands, calculate_moving_averages,
    get_available_indicators
)
from bquant.core.config import get_indicator_params
from bquant.data.loader import create_sample_data


def create_sample_ohlcv_data(rows: int = 100, symbol: str = "XAUUSD") -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ OHLCV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
    
    Args:
        rows: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        symbol: –°–∏–º–≤–æ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
    Returns:
        DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
    """
    print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
    dates = pd.date_range(start='2024-01-01', periods=rows, freq='1H')
    np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    base_price = 2000.0
    prices = [base_price]
    
    for i in range(1, rows):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        trend = 0.0001 * np.sin(i / 20)  # –°–ª–∞–±—ã–π —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
        volatility = np.random.normal(0, 0.01)  # 1% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        
        change = trend + volatility
        new_price = prices[-1] * (1 + change)
        prices.append(max(new_price, 100.0))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    
    # –°–æ–∑–¥–∞–µ–º OHLCV —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    data = []
    for i, close_price in enumerate(prices):
        if i == 0:
            open_price = close_price
        else:
            open_price = prices[i-1]
        
        # –°–ª—É—á–∞–π–Ω—ã–µ high/low –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ open/close
        high = max(open_price, close_price) * (1 + abs(np.random.normal(0, 0.005)))
        low = min(open_price, close_price) * (1 - abs(np.random.normal(0, 0.005)))
        volume = np.random.randint(1000, 10000)
        
        data.append({
            'open': open_price,
            'high': high,
            'low': low,
            'close': close_price,
            'volume': volume
        })
    
    df = pd.DataFrame(data, index=dates)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {df.index[0]} - {df.index[-1]}")
    return df


def demonstrate_basic_indicators():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    
    print("üöÄ BQuant - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("=" * 60)
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = create_sample_ohlcv_data(200, "XAUUSD")
    print(f"\nüìà –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –ü–µ—Ä–∏–æ–¥: {data.index[0]} - {data.index[-1]}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤: {len(data)}")
    print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${data['close'].iloc[0]:.2f}")
    print(f"   –ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞: ${data['close'].iloc[-1]:.2f}")
    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {((data['close'].iloc[-1] / data['close'].iloc[0]) - 1) * 100:.2f}%")
    
    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    print(f"\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
    available_indicators = get_available_indicators()
    for indicator in available_indicators:
        print(f"   ‚úì {indicator}")
    
    # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
    print(f"\nüìä –†–∞—Å—á–µ—Ç —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö:")
    try:
        ma_data = calculate_moving_averages(data, periods=[10, 20, 50])
        print(f"   ‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã SMA: {[col for col in ma_data.columns if col.startswith('sma')]}")
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        latest_values = ma_data[['close', 'sma_10', 'sma_20', 'sma_50']].iloc[-1]
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        for col, val in latest_values.items():
            print(f"     {col}: ${val:.2f}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ SMA: {e}")
    
    # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
    print(f"\nüìà –†–∞—Å—á–µ—Ç RSI:")
    try:
        rsi_params = get_indicator_params('rsi')
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã RSI: {rsi_params}")
        
        rsi_data = calculate_rsi(data, period=rsi_params.get('period', 14))
        current_rsi = rsi_data['rsi'].iloc[-1]
        print(f"   ‚úÖ –¢–µ–∫—É—â–∏–π RSI: {current_rsi:.2f}")
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è RSI
        if current_rsi > 70:
            interpretation = "–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å"
        elif current_rsi < 30:
            interpretation = "–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å"
        else:
            interpretation = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞"
        print(f"   üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {interpretation}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
    
    # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
    print(f"\nüìâ –†–∞—Å—á–µ—Ç MACD:")
    try:
        macd_params = get_indicator_params('macd')
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã MACD: {macd_params}")
        
        macd_data = calculate_macd(
            data, 
            fast=macd_params['fast'], 
            slow=macd_params['slow'], 
            signal=macd_params['signal']
        )
        
        latest_macd = macd_data.iloc[-1]
        print(f"   ‚úÖ MACD: {latest_macd['macd']:.4f}")
        print(f"   ‚úÖ Signal: {latest_macd['macd_signal']:.4f}")
        print(f"   ‚úÖ Histogram: {latest_macd['macd_hist']:.4f}")
        
        # –°–∏–≥–Ω–∞–ª—ã MACD
        if latest_macd['macd'] > latest_macd['macd_signal']:
            macd_signal = "–ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª" if latest_macd['macd_hist'] > 0 else "–°–ª–∞–±—ã–π –±—ã—á–∏–π"
        else:
            macd_signal = "–ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª" if latest_macd['macd_hist'] < 0 else "–°–ª–∞–±—ã–π –º–µ–¥–≤–µ–∂–∏–π"
        print(f"   üìä –°–∏–≥–Ω–∞–ª: {macd_signal}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ MACD: {e}")
    
    # 6. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Bollinger Bands
    print(f"\nüìä –†–∞—Å—á–µ—Ç Bollinger Bands:")
    try:
        bb_data = calculate_bollinger_bands(data, period=20, std_dev=2)
        latest_bb = bb_data.iloc[-1]
        
        print(f"   ‚úÖ Upper Band: ${latest_bb['bb_upper']:.2f}")
        print(f"   ‚úÖ Middle Band (SMA): ${latest_bb['bb_middle']:.2f}")
        print(f"   ‚úÖ Lower Band: ${latest_bb['bb_lower']:.2f}")
        print(f"   ‚úÖ Bandwidth: {latest_bb['bb_width']:.4f}")
        print(f"   ‚úÖ %B: {latest_bb['bb_percent']:.2f}")
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Ü–µ–Ω—ã
        price = data['close'].iloc[-1]
        if price > latest_bb['bb_upper']:
            bb_interpretation = "–¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã (–≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è)"
        elif price < latest_bb['bb_lower']:
            bb_interpretation = "–¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã (–≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫)"
        else:
            bb_interpretation = "–¶–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª–æ—Å (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)"
        print(f"   üìä –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {bb_interpretation}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Bollinger Bands: {e}")
    
    # 7. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print(f"\nüéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:")
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        combined_data = data.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        ma_result = calculate_moving_averages(data, periods=[20])
        combined_data['sma_20'] = ma_result['sma_20']
        
        rsi_result = calculate_rsi(data)
        combined_data['rsi'] = rsi_result['rsi']
        
        macd_result = calculate_macd(data)
        for col in ['macd', 'macd_signal', 'macd_hist']:
            combined_data[col] = macd_result[col]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        latest = combined_data.iloc[-1]
        signals = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ (—Ü–µ–Ω–∞ vs SMA)
        if latest['close'] > latest['sma_20']:
            signals.append("–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (—Ü–µ–Ω–∞ > SMA20)")
        else:
            signals.append("–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (—Ü–µ–Ω–∞ < SMA20)")
        
        # –ê–Ω–∞–ª–∏–∑ –∏–º–ø—É–ª—å—Å–∞ (RSI)
        if latest['rsi'] > 70:
            signals.append("RSI: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
        elif latest['rsi'] < 30:
            signals.append("RSI: –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å")
        else:
            signals.append("RSI: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞")
        
        # –ê–Ω–∞–ª–∏–∑ MACD
        if latest['macd'] > latest['macd_signal']:
            signals.append("MACD: –ë—ã—á–∏–π –∏–º–ø—É–ª—å—Å")
        else:
            signals.append("MACD: –ú–µ–¥–≤–µ–∂–∏–π –∏–º–ø—É–ª—å—Å")
        
        print("   üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã:")
        for i, signal in enumerate(signals, 1):
            print(f"     {i}. {signal}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π score
        bullish_signals = sum(1 for s in signals if '–≤–æ—Å—Ö–æ–¥—è—â–∏–π' in s.lower() or '–±—ã—á–∏–π' in s.lower())
        bearish_signals = sum(1 for s in signals if '–Ω–∏—Å—Ö–æ–¥—è—â–∏–π' in s.lower() or '–º–µ–¥–≤–µ–∂–∏–π' in s.lower())
        
        if bullish_signals > bearish_signals:
            overall_sentiment = "–£–º–µ—Ä–µ–Ω–Ω–æ –±—ã—á–∏–π"
        elif bearish_signals > bullish_signals:
            overall_sentiment = "–£–º–µ—Ä–µ–Ω–Ω–æ –º–µ–¥–≤–µ–∂–∏–π"
        else:
            overall_sentiment = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        
        print(f"   üéØ –û–±—â–∏–π —Å–∏–≥–Ω–∞–ª: {overall_sentiment}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # 8. –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\nüìã –°–≤–æ–¥–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤:")
    print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(available_indicators)}")
    print(f"   ‚úÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {len(data)} –±–∞—Ä–æ–≤")
    print(f"   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {data.index[-1] - data.index[0]}")
    
    return combined_data


def save_results_to_csv(data: pd.DataFrame, filename: str = "indicator_results.csv"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Ñ–∞–π–ª."""
    try:
        filepath = os.path.join("examples", filename)
        data.to_csv(filepath)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filepath}")
        print(f"   üìä –ö–æ–ª–æ–Ω–∫–∏: {', '.join(data.columns.tolist())}")
        print(f"   üìà –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        results = demonstrate_basic_indicators()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results is not None:
            save_results_to_csv(results)
        
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"\nüí° –î–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤, —Å–º. —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ examples/")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
