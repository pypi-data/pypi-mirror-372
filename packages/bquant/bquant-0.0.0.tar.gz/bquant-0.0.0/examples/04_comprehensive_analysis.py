#!/usr/bin/env python3
"""
BQuant - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ BQuant:
1. –ó–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
2. –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
3. MACD –∞–Ω–∞–ª–∏–∑ –∑–æ–Ω —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
5. –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
6. –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π BQuant –ø–∞–∫–µ—Ç: pip install -e .
- –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ BQuant –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from bquant.data import (
    create_sample_data, calculate_derived_indicators,
    validate_ohlcv_data, clean_data, normalize_data
)
from bquant.indicators import (
    calculate_moving_averages, calculate_macd, calculate_rsi,
    calculate_bollinger_bands, get_available_indicators
)
from bquant.indicators.macd import (
    MACDZoneAnalyzer, analyze_macd_zones
)
from bquant.core.config import get_indicator_params


class ComprehensiveTradingAnalyzer:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º.
    
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç:
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    - MACD –∞–Ω–∞–ª–∏–∑ –∑–æ–Ω
    - –ü—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    - –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    
    def __init__(self, symbol: str = "XAUUSD", timeframe: str = "1h"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
        self.symbol = symbol
        self.timeframe = timeframe
        self.data = None
        self.indicators_data = None
        self.macd_analysis = None
        self.signals = None
        self.trades = []
        self.performance_stats = {}
        
        print(f"üöÄ Comprehensive Trading Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üìä –°–∏–º–≤–æ–ª: {symbol}")
        print(f"   ‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
    
    def load_and_prepare_data(self, start_date: str, end_date: str, 
                             rows: Optional[int] = None) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
        
        print(f"\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if rows:
            self.data = self._create_realistic_market_data(rows)
        else:
            self.data = create_sample_data(
                symbol=self.symbol,
                start_date=start_date,
                end_date=end_date,
                timeframe=self.timeframe
            )
        
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.data)} –±–∞—Ä–æ–≤")
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {self.data.index[0]} - {self.data.index[-1]}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        validation_result = validate_ohlcv_data(self.data)
        if isinstance(validation_result, dict) and validation_result.get('is_valid', False):
            print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        else:
            print(f"   ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ—á–∏—Å—Ç–∫–∏")
            self.data = clean_data(self.data)
            print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: {len(self.data)} –±–∞—Ä–æ–≤")
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        price_change = ((self.data['close'].iloc[-1] / self.data['close'].iloc[0]) - 1) * 100
        volatility = self.data['close'].pct_change().std() * np.sqrt(252) * 100  # –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        
        print(f"   üìà –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change:.2f}%")
        print(f"   üìä –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2f}%")
        
        return self.data
    
    def _create_realistic_market_data(self, rows: int) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏."""
        
        dates = pd.date_range(start='2024-01-01', periods=rows, freq='1H')
        np.random.seed(42)
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        price_map = {
            'XAUUSD': 2000, 'EURUSD': 1.1000, 'GBPUSD': 1.2500,
            'USDJPY': 145.0, 'BTCUSD': 45000, 'AUDCAD': 0.9200
        }
        base_price = price_map.get(self.symbol, 2000)
        
        prices = [base_price]
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã
        for i in range(1, rows):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä—ã–Ω–∫–∞
            cycle_position = i / rows
            
            if cycle_position < 0.3:
                # –ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
                trend = -0.0008
                volatility = 0.008
            elif cycle_position < 0.4:
                # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
                trend = 0
                volatility = 0.004
            elif cycle_position < 0.7:
                # –ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥
                trend = 0.0012
                volatility = 0.006
            elif cycle_position < 0.8:
                # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è
                trend = -0.0006
                volatility = 0.010
            else:
                # –ë–æ–∫–æ–≤–∏–∫
                trend = 0.0002 * np.sin(i / 20)
                volatility = 0.005
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —à–æ–∫–∏
            if i % 100 == 0:
                shock = np.random.choice([-0.015, 0.015], p=[0.5, 0.5])
            else:
                shock = 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            noise = np.random.normal(0, volatility)
            total_change = trend + noise + shock
            
            new_price = prices[-1] * (1 + total_change)
            prices.append(max(new_price, base_price * 0.1))
        
        # –°–æ–∑–¥–∞–µ–º OHLCV —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        data = []
        for i, close_price in enumerate(prices):
            open_price = prices[i-1] if i > 0 else close_price
            
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ high/low —Å —É—á–µ—Ç–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            price_range = abs(close_price - open_price) * np.random.uniform(1.5, 3.0)
            high = max(open_price, close_price) + price_range * np.random.uniform(0, 0.7)
            low = min(open_price, close_price) - price_range * np.random.uniform(0, 0.7)
            
            # –û–±—ä–µ–º –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
            price_change = abs((close_price - open_price) / open_price)
            base_volume = 100000
            volume_multiplier = 1 + price_change * 10
            volume = int(base_volume * volume_multiplier * np.random.uniform(0.5, 2.0))
            
            data.append({
                'open': open_price,
                'high': high,
                'low': low,
                'close': close_price,
                'volume': volume
            })
        
        return pd.DataFrame(data, index=dates)
    
    def calculate_all_indicators(self) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""
        
        print(f"\nüîß –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
        
        if self.data is None:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ load_and_prepare_data() —Å–Ω–∞—á–∞–ª–∞.")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.indicators_data = self.data.copy()
        
        # 1. –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        print(f"   üìà –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ...")
        ma_data = calculate_moving_averages(self.data, periods=[10, 20, 50, 200])
        for col in ma_data.columns:
            if col.startswith('sma_'):
                self.indicators_data[col] = ma_data[col]
        
        # 2. RSI
        print(f"   üìä RSI...")
        rsi_data = calculate_rsi(self.data, period=14)
        self.indicators_data['rsi'] = rsi_data['rsi']
        
        # 3. MACD
        print(f"   üìâ MACD...")
        macd_data = calculate_macd(self.data)
        for col in ['macd', 'macd_signal', 'macd_hist']:
            self.indicators_data[col] = macd_data[col]
        
        # 4. Bollinger Bands
        print(f"   üìä Bollinger Bands...")
        bb_data = calculate_bollinger_bands(self.data, period=20, std_dev=2)
        for col in bb_data.columns:
            if col.startswith('bb_'):
                self.indicators_data[col] = bb_data[col]
        
        # 5. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        print(f"   üîÑ –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...")
        derived_data = calculate_derived_indicators(self.indicators_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        for col in derived_data.columns:
            if col not in self.indicators_data.columns:
                self.indicators_data[col] = derived_data[col]
        
        print(f"   ‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(self.indicators_data.columns) - len(self.data.columns)}")
        print(f"   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(self.indicators_data.columns)}")
        
        return self.indicators_data
    
    def perform_macd_zone_analysis(self) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ MACD –∞–Ω–∞–ª–∏–∑–∞ –∑–æ–Ω."""
        
        print(f"\nüéØ MACD –∞–Ω–∞–ª–∏–∑ –∑–æ–Ω:")
        
        if self.indicators_data is None:
            raise ValueError("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ calculate_all_indicators() —Å–Ω–∞—á–∞–ª–∞.")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∑–æ–Ω MACD
        self.macd_analysis = analyze_macd_zones(
            self.indicators_data,
            perform_clustering=True,
            n_clusters=3
        )
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–æ–Ω: {len(self.macd_analysis.zones)}")
        
        if self.macd_analysis.zones:
            bull_zones = [z for z in self.macd_analysis.zones if z.type == 'bull']
            bear_zones = [z for z in self.macd_analysis.zones if z.type == 'bear']
            
            print(f"   üêÇ –ë—ã—á—å–∏—Ö –∑–æ–Ω: {len(bull_zones)}")
            print(f"   üêª –ú–µ–¥–≤–µ–∂—å–∏—Ö –∑–æ–Ω: {len(bear_zones)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–æ–Ω
            if self.macd_analysis.statistics:
                stats = self.macd_analysis.statistics
                print(f"   üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—ã—á—å–∏—Ö –∑–æ–Ω: {stats.get('bull_duration_mean', 0):.1f} –±–∞—Ä–æ–≤")
                print(f"   üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–¥–≤–µ–∂—å–∏—Ö –∑–æ–Ω: {stats.get('bear_duration_mean', 0):.1f} –±–∞—Ä–æ–≤")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–∏–ø–æ—Ç–µ–∑
            if self.macd_analysis.hypothesis_tests:
                significant_tests = [name for name, result in self.macd_analysis.hypothesis_tests.items() 
                                   if result.get('significant', False)]
                print(f"   üß™ –ó–Ω–∞—á–∏–º—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤: {len(significant_tests)}")
                
            # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
            if self.macd_analysis.clustering:
                n_clusters = self.macd_analysis.clustering['n_clusters']
                print(f"   üéØ –ó–æ–Ω—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ {n_clusters} –∫–ª–∞—Å—Ç–µ—Ä–∞")
    
    def generate_trading_signals(self) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
        
        print(f"\nüì° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:")
        
        if self.indicators_data is None:
            raise ValueError("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã.")
        
        signals_data = self.indicators_data.copy()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_data['signal'] = 0  # 0 = hold, 1 = buy, -1 = sell
        signals_data['signal_strength'] = 0  # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ 0-1
        signals_data['signal_reason'] = ''
        
        # 1. –°–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        print(f"   üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # SMA –∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã
        sma_10_20_cross = np.where(
            (signals_data['sma_10'] > signals_data['sma_20']) & 
            (signals_data['sma_10'].shift(1) <= signals_data['sma_20'].shift(1)), 1, 0
        )
        sma_20_50_cross = np.where(
            (signals_data['sma_20'] > signals_data['sma_50']) & 
            (signals_data['sma_20'].shift(1) <= signals_data['sma_50'].shift(1)), 1, 0
        )
        
        # 2. –°–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–ø—É–ª—å—Å–∞
        print(f"   ‚ö° –ê–Ω–∞–ª–∏–∑ –∏–º–ø—É–ª—å—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # RSI —Å–∏–≥–Ω–∞–ª—ã
        rsi_oversold = signals_data['rsi'] < 30
        rsi_overbought = signals_data['rsi'] > 70
        
        # MACD —Å–∏–≥–Ω–∞–ª—ã
        macd_bullish = (signals_data['macd'] > signals_data['macd_signal']) & \
                       (signals_data['macd'].shift(1) <= signals_data['macd_signal'].shift(1))
        macd_bearish = (signals_data['macd'] < signals_data['macd_signal']) & \
                       (signals_data['macd'].shift(1) >= signals_data['macd_signal'].shift(1))
        
        # 3. –°–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        print(f"   üåä –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # Bollinger Bands —Å–∏–≥–Ω–∞–ª—ã
        bb_oversold = signals_data['close'] < signals_data['bb_lower']
        bb_overbought = signals_data['close'] > signals_data['bb_upper']
        
        # 4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        print(f"   üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        for i in range(len(signals_data)):
            signal_score = 0
            reasons = []
            
            # –ë—ã—á—å–∏ —Å–∏–≥–Ω–∞–ª—ã
            if sma_10_20_cross[i]:
                signal_score += 0.3
                reasons.append("SMA10>SMA20")
            
            if sma_20_50_cross[i]:
                signal_score += 0.2
                reasons.append("SMA20>SMA50")
            
            if macd_bullish[i]:
                signal_score += 0.3
                reasons.append("MACD_bullish")
            
            if rsi_oversold[i]:
                signal_score += 0.2
                reasons.append("RSI_oversold")
            
            if bb_oversold[i]:
                signal_score += 0.2
                reasons.append("BB_oversold")
            
            # –ú–µ–¥–≤–µ–∂—å–∏ —Å–∏–≥–Ω–∞–ª—ã
            if macd_bearish[i]:
                signal_score -= 0.3
                reasons.append("MACD_bearish")
            
            if rsi_overbought[i]:
                signal_score -= 0.2
                reasons.append("RSI_overbought")
            
            if bb_overbought[i]:
                signal_score -= 0.2
                reasons.append("BB_overbought")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            if signal_score >= 0.5:
                signals_data.loc[signals_data.index[i], 'signal'] = 1
                signals_data.loc[signals_data.index[i], 'signal_strength'] = min(signal_score, 1.0)
            elif signal_score <= -0.5:
                signals_data.loc[signals_data.index[i], 'signal'] = -1
                signals_data.loc[signals_data.index[i], 'signal_strength'] = min(abs(signal_score), 1.0)
            
            signals_data.loc[signals_data.index[i], 'signal_reason'] = '; '.join(reasons)
        
        self.signals = signals_data
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        buy_signals = (signals_data['signal'] == 1).sum()
        sell_signals = (signals_data['signal'] == -1).sum()
        
        print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        print(f"      üìà Buy: {buy_signals}")
        print(f"      üìâ Sell: {sell_signals}")
        print(f"      üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {((buy_signals + sell_signals) / len(signals_data) * 100):.1f}%")
        
        return signals_data
    
    def backtest_strategy(self, initial_capital: float = 10000, 
                         commission: float = 0.001) -> Dict[str, Any]:
        """–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
        
        print(f"\nüìä –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        print(f"   üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${initial_capital:,.2f}")
        print(f"   üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission:.3%}")
        
        if self.signals is None:
            raise ValueError("–°–∏–≥–Ω–∞–ª—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ generate_trading_signals() —Å–Ω–∞—á–∞–ª–∞.")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        capital = initial_capital
        position = 0  # 0 = –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, 1 = long, -1 = short
        position_size = 0
        entry_price = 0
        trades = []
        equity_curve = [initial_capital]
        
        for i, (timestamp, row) in enumerate(self.signals.iterrows()):
            current_price = row['close']
            signal = row['signal']
            signal_strength = row['signal_strength']
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            if position != 0:
                # –£—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                should_close = False
                close_reason = ""
                
                # –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                if (position == 1 and signal == -1) or (position == -1 and signal == 1):
                    should_close = True
                    close_reason = "opposite_signal"
                
                # –°—Ç–æ–ø-–ª–æ—Å—Å/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                if position == 1:  # Long –ø–æ–∑–∏—Ü–∏—è
                    pnl_pct = (current_price - entry_price) / entry_price
                    if pnl_pct <= -0.02:  # 2% —Å—Ç–æ–ø-–ª–æ—Å—Å
                        should_close = True
                        close_reason = "stop_loss"
                    elif pnl_pct >= 0.04:  # 4% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                        should_close = True
                        close_reason = "take_profit"
                
                elif position == -1:  # Short –ø–æ–∑–∏—Ü–∏—è
                    pnl_pct = (entry_price - current_price) / entry_price
                    if pnl_pct <= -0.02:  # 2% —Å—Ç–æ–ø-–ª–æ—Å—Å
                        should_close = True
                        close_reason = "stop_loss"
                    elif pnl_pct >= 0.04:  # 4% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
                        should_close = True
                        close_reason = "take_profit"
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                if should_close:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                    if position == 1:  # –ó–∞–∫—Ä—ã—Ç–∏–µ long
                        pnl = position_size * (current_price - entry_price)
                    else:  # –ó–∞–∫—Ä—ã—Ç–∏–µ short
                        pnl = position_size * (entry_price - current_price)
                    
                    commission_cost = position_size * current_price * commission
                    net_pnl = pnl - commission_cost
                    capital += net_pnl
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                    trades.append({
                        'entry_time': entry_time,
                        'exit_time': timestamp,
                        'position_type': 'long' if position == 1 else 'short',
                        'entry_price': entry_price,
                        'exit_price': current_price,
                        'size': position_size,
                        'pnl': pnl,
                        'commission': commission_cost,
                        'net_pnl': net_pnl,
                        'close_reason': close_reason
                    })
                    
                    position = 0
                    position_size = 0
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            if position == 0 and signal != 0 and signal_strength >= 0.6:
                position = signal
                entry_price = current_price
                entry_time = timestamp
                
                # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
                risk_per_trade = 0.02  # 2% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
                position_value = capital * risk_per_trade * signal_strength
                position_size = position_value / current_price
                
                commission_cost = position_size * current_price * commission
                capital -= commission_cost
            
            # –û–±–Ω–æ–≤–ª—è–µ–º equity curve
            current_equity = capital
            if position != 0:
                if position == 1:
                    unrealized_pnl = position_size * (current_price - entry_price)
                else:
                    unrealized_pnl = position_size * (entry_price - current_price)
                current_equity += unrealized_pnl
            
            equity_curve.append(current_equity)
        
        self.trades = trades
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if trades:
            total_trades = len(trades)
            winning_trades = [t for t in trades if t['net_pnl'] > 0]
            losing_trades = [t for t in trades if t['net_pnl'] < 0]
            
            win_rate = len(winning_trades) / total_trades
            total_pnl = sum(t['net_pnl'] for t in trades)
            avg_win = np.mean([t['net_pnl'] for t in winning_trades]) if winning_trades else 0
            avg_loss = np.mean([t['net_pnl'] for t in losing_trades]) if losing_trades else 0
            
            max_equity = max(equity_curve)
            min_equity_after_max = min(equity_curve[equity_curve.index(max_equity):])
            max_drawdown = (max_equity - min_equity_after_max) / max_equity
            
            final_capital = equity_curve[-1]
            total_return = (final_capital - initial_capital) / initial_capital
            
            self.performance_stats = {
                'initial_capital': initial_capital,
                'final_capital': final_capital,
                'total_return': total_return,
                'total_pnl': total_pnl,
                'total_trades': total_trades,
                'winning_trades': len(winning_trades),
                'losing_trades': len(losing_trades),
                'win_rate': win_rate,
                'avg_win': avg_win,
                'avg_loss': avg_loss,
                'profit_factor': abs(avg_win / avg_loss) if avg_loss != 0 else 0,
                'max_drawdown': max_drawdown,
                'equity_curve': equity_curve
            }
            
            print(f"   ‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"      üìà –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${final_capital:,.2f}")
            print(f"      üìä –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2%}")
            print(f"      üéØ –°–¥–µ–ª–æ–∫: {total_trades}")
            print(f"      ‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {win_rate:.1%}")
            print(f"      üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2%}")
            
        else:
            print(f"   ‚ö†Ô∏è –°–¥–µ–ª–æ–∫ –Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–æ")
            self.performance_stats = {'total_trades': 0}
        
        return self.performance_stats
    
    def generate_comprehensive_report(self, save_to_file: bool = True) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É."""
        
        print(f"\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:")
        
        report = {
            'analysis_info': {
                'symbol': self.symbol,
                'timeframe': self.timeframe,
                'analysis_timestamp': datetime.now().isoformat(),
                'data_period': {
                    'start': self.data.index[0].isoformat() if hasattr(self.data.index[0], 'isoformat') else str(self.data.index[0]),
                    'end': self.data.index[-1].isoformat() if hasattr(self.data.index[-1], 'isoformat') else str(self.data.index[-1]),
                    'total_bars': len(self.data)
                }
            },
            'data_statistics': {
                'price_change': float(((self.data['close'].iloc[-1] / self.data['close'].iloc[0]) - 1) * 100),
                'volatility': float(self.data['close'].pct_change().std() * np.sqrt(252) * 100),
                'max_price': float(self.data['high'].max()),
                'min_price': float(self.data['low'].min()),
                'avg_volume': float(self.data['volume'].mean())
            },
            'indicators_summary': {
                'total_indicators': len(self.indicators_data.columns) - len(self.data.columns),
                'current_values': {
                    'sma_20': float(self.indicators_data['sma_20'].iloc[-1]) if 'sma_20' in self.indicators_data.columns else None,
                    'rsi': float(self.indicators_data['rsi'].iloc[-1]) if 'rsi' in self.indicators_data.columns else None,
                    'macd': float(self.indicators_data['macd'].iloc[-1]) if 'macd' in self.indicators_data.columns else None,
                }
            },
            'macd_zone_analysis': {},
            'trading_signals': {},
            'backtest_results': self.performance_stats
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º MACD –∞–Ω–∞–ª–∏–∑
        if self.macd_analysis:
            report['macd_zone_analysis'] = {
                'total_zones': len(self.macd_analysis.zones),
                'bull_zones': len([z for z in self.macd_analysis.zones if z.type == 'bull']),
                'bear_zones': len([z for z in self.macd_analysis.zones if z.type == 'bear']),
                'statistics': self.macd_analysis.statistics,
                'hypothesis_tests': self.macd_analysis.hypothesis_tests,
                'clustering_performed': self.macd_analysis.clustering is not None
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
        if self.signals is not None:
            buy_signals = (self.signals['signal'] == 1).sum()
            sell_signals = (self.signals['signal'] == -1).sum()
            
            report['trading_signals'] = {
                'total_buy_signals': int(buy_signals),
                'total_sell_signals': int(sell_signals),
                'signal_frequency': float((buy_signals + sell_signals) / len(self.signals) * 100)
            }
        
        print(f"   ‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        print(f"   üìä –†–∞–∑–¥–µ–ª–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ: {len(report)}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        if save_to_file:
            report_file = f"examples/comprehensive_analysis_report_{self.symbol}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            try:
                with open(report_file, 'w', encoding='utf-8') as f:
                    json.dump(report, f, indent=2, ensure_ascii=False)
                print(f"   üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        return report


def run_comprehensive_analysis():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    
    print("üöÄ BQuant - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ComprehensiveTradingAnalyzer("XAUUSD", "1h")
    
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = analyzer.load_and_prepare_data(
            start_date="2024-01-01", 
            end_date="2024-03-01",
            rows=1000  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        )
        
        # 2. –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = analyzer.calculate_all_indicators()
        
        # 3. MACD –∞–Ω–∞–ª–∏–∑ –∑–æ–Ω
        analyzer.perform_macd_zone_analysis()
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = analyzer.generate_trading_signals()
        
        # 5. –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
        performance = analyzer.backtest_strategy(
            initial_capital=10000,
            commission=0.001
        )
        
        # 6. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = analyzer.generate_comprehensive_report()
        
        # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
        data.to_csv("examples/comprehensive_market_data.csv")
        indicators.to_csv("examples/comprehensive_indicators.csv")
        signals.to_csv("examples/comprehensive_signals.csv")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫–∏
        if analyzer.trades:
            trades_df = pd.DataFrame(analyzer.trades)
            trades_df.to_csv("examples/comprehensive_trades.csv", index=False)
            print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(analyzer.trades)}")
        
        print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ examples/")
        
        return analyzer, report
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return None, None


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analyzer, report = run_comprehensive_analysis()
        
        if analyzer and report:
            print(f"\nüéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"\nüìä –ö—Ä–∞—Ç–∫–∏–µ –∏—Ç–æ–≥–∏:")
            
            if report['backtest_results'].get('total_trades', 0) > 0:
                stats = report['backtest_results']
                print(f"   üí∞ –ò—Ç–æ–≥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['total_return']:.2%}")
                print(f"   üéØ –°–¥–µ–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['total_trades']}")
                print(f"   ‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: {stats['win_rate']:.1%}")
                print(f"   üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {stats['max_drawdown']:.2%}")
            
            if 'macd_zone_analysis' in report:
                macd_stats = report['macd_zone_analysis']
                print(f"   üéØ MACD –∑–æ–Ω –Ω–∞–π–¥–µ–Ω–æ: {macd_stats['total_zones']}")
                print(f"   üêÇ –ë—ã—á—å–∏—Ö –∑–æ–Ω: {macd_stats['bull_zones']}")
                print(f"   üêª –ú–µ–¥–≤–µ–∂—å–∏—Ö –∑–æ–Ω: {macd_stats['bear_zones']}")
            
            print(f"\nüí° –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
            print(f"   ‚úì –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            print(f"   ‚úì –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            print(f"   ‚úì –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π MACD –∞–Ω–∞–ª–∏–∑ –∑–æ–Ω")
            print(f"   ‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            print(f"   ‚úì –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥")
            print(f"   ‚úì –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å")
            print(f"   ‚úì –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
