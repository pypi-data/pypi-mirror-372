
#############################
# Ruff Linting & Formatting #
#############################

# Assume Python 3.12
target-version = "py312"

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

extend-include = [".ruff.toml"]

line-length = 120

indent-width = 4

# Enable Preview Rules
preview = true

[per-file-target-version]
"examples/**.py" = "py312"
"scripts/**.py" = "py313"

###############################
# Linting & Code Auto-Fix     #
###############################

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
  # PyCodeStyle - https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes
  "E1",   # pycodestyle indentation
  "E2",   # pycodestyle whitespace
  "E3",   # pycodestyle blank lines
  "E4",   # pycodestyle imports
  "E7",   # pycodestyle statements
  "E9",   # pycodestyle runtime (Python Interpreter Exceptions/Errors)
  "W191", # No tabs allowed
  "W291", # trailing whitespace
  "W292", # Missing end of file newline
  # others
  "ASYNC", # Flake8-Async
  "D",     # pydocstyle
  "F",     # PyFlakes
  "I",     # isort
  "RUF",   # Ruff specific rules
  "CPY",   # Copyright
  "N",     # pep8-naming
  "UP",    # pyupgrade
]
ignore = [
  "D1",   # undocumented packages/modules/classes/methods/functions/etc
  "D200", # unnecessary-multiline-docstring
  "D212", # multi-line-summary-first-line
  "D415", # missing-terminal-punctuation
  "N818", # error-suffix-on-exception-name (it's too late to fix this...)qq
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.pydocstyle]
convention = "google"

[lint.per-file-ignores]
"__init__.py" = [
  "E401",   # Unused import
  "CPY001", # Missing copyright notice at top of file
]
"__version__.py" = [
  "CPY001", # Missing copyright notice at top of file
]
"_version.py" = [
  "CPY001", # Missing copyright notice at top of file
]

".ci/scripts/*" = [
  "CPY", # no copyright notice required on these utilities
]

"examples/**" = [
  "CPY", # no copyright notice required on examples
]

"examples/model_context_protocol/*" = [
  "UP036",
  "UP045",
]

"test*.py" = [
  "UP045"
]

########################
# ruff Auto-Formatting #
########################

[format]

# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is enabled.
docstring-code-line-length = "dynamic"
