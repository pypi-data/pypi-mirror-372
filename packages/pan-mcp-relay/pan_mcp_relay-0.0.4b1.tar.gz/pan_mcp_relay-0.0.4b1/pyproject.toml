#:schema https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/pyproject.json
####################
# Project Metadata #
####################
[project]
name = "pan-mcp-relay"
dynamic = ["version"]
description = "Palo Alto Networks AI Security MCP Relay"
requires-python = ">= 3.12"
License-Expression = "LicenseRef-PolyForm-Internal-Use-License-1.0.0"
License-File = ["LICENSE"]
readme = "README.md"
keywords = [
  "PaloAltoNetworks",
  "Palo Alto Networks",
  "AI Security",
  "AI Runtime Security",
  "Model Context Protocol",
  "MCP Security",
  "MCP Relay",
  "Prompt Injection",
]
dependencies = [
  "anyio>=4.10.0",
  "backports-strenum>=1.3.1,<2.0 ; python_full_version < '3.11'",
  "click>=8.2.1",
  "httpx[http2]>=0.28.1",
  "mcp[cli,rich,ws]>=1.12.1",
  "pan-aisecurity>=0.4.0.5.post2",
  "pydantic>=2.11.7",
  "pydantic-settings[yaml]>=2.10.1",
  "python-dotenv>=1.1.1",
  "rich>=14.0",
  "tenacity>=9.1.2",
  "truststore>=0.10.4",
]

[dependency-groups]
dev = [
  "coverage-enable-subprocess>=1.0",
  "coverage[toml]",
  "mypy>=1.5",
  "packaging>=25.0",
  "pyright[nodejs]>=1.1.401",
  "pytest-asyncio>=1.0.0",
  "pytest-cov>=6.0",
  "pytest-mock>=3.14.1",
  "pytest-xdist[psutil]>=3.7.0",
  "pytest>=8.3.5",
  "readme-renderer[md]>=44.0",
  "truststore>=0.10.1",
  "types-python-dateutil>=2.8",
  "unittest2pytest>=0.5",
  "versioningit>=3.1",
]
ci = [
  "httpx[http2]>=0.28",
  "google-auth",
  "requests",
]

[project.urls]
Homepage = "https://www.paloaltonetworks.com/prisma/prisma-ai-runtime-security"
Documentation = "https://pan.dev/prisma-airs/scan/api/"
Docs = "https://docs.paloaltonetworks.com/ai-runtime-security"
Repository = "https://github.com/paloaltonetworks/aisecurity-mcp-relay.git"
Issues = "https://github.com/paloaltonetworks/aisecurity-mcp-relay/issues"
# Changelog = "https://github.com/paloaltonetworks/aisecurity-mcp-relay/blob/main/CHANGELOG.md"

[project.scripts]
pan-mcp-relay = "pan_mcp_relay.main:entrypoint"

###########################
# Build System: Hatchling #
###########################
[build-system]
requires = [
  "hatchling",
  "versioningit",
]
build-backend = "hatchling.build"

# Define sdist package includes/excludes
[tool.hatch.build.targets.sdist]
#ignore-vcs = true
include = [
  "config",
  "src",
  "tests",
  ".ruff.toml",
]
artifacts = [
  "src/pan_mcp_relay/_version.py"
]
#only-include = [
#  "src/pan_mcp_relay/",
#  "README.md",
#  "CHANGELOG.md",
#]
#exclude = [
#  "__pycache__",
#  ".ruff_cache",
#  ".mypy_cache",
#  ".pytest_cache",
#  ".coverage*",
#  "*.pyc",
#  "*.log",
#  "*.tmp",
#]

# Define wheel package includes/excludes
[tool.hatch.build.targets.wheel]
sources = ["src"]

# Hatch/versioningit dynamically reads build version from git tags
[tool.hatch.version]
source = "versioningit"

#
# Automatic Versioning using Git Tags
# https://versioningit.readthedocs.io/en/stable/index.html
#
[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.0"

[tool.versioningit.next-version]
method = "smallest-release"

[tool.versioningit.format]
# Examples use base (current) version 1.2.3
distance = "{next_version}.dev{distance}+{rev}"
# Example formatted version: 1.2.4.dev42+ge174a1f

dirty = "{base_version}+d{build_date:%Y%m%d}"
# Example formatted version: 1.2.3+d20230922

distance-dirty = "{next_version}.dev{distance}+{rev}.d{build_date:%Y%m%d}"
# Example formatted version: 1.2.4.dev42+ge174a1f.d20230922

[tool.versioningit.write]
file = "src/pan_mcp_relay/_version.py"

[tool.hatch.build.hooks.versioningit-onbuild]
source-file = "src/pan_mcp_relay/_version.py"
build-file = "pan_mcp_relay/_version.py"
require-match = false
append-line = "__version__ = \"{version}\""

##########################
# Hatch - Matrix Testing #
##########################
# Use UV with Hatch for dependency management (instead of virtualenv/pip) in all environments
[tool.hatch.envs.default]
installer = "uv"
# Use optional dependencies in test environments
features = []

[tool.hatch.envs.hatch-test]
extra-dependencies = [
  "pytest-asyncio",
  "pytest-mock",
]

[tool.hatch.envs.hatch-test.scripts]
run = "pytest{env:HATCH_TEST_ARGS:} --numprocesses=auto {args}"
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} --numprocesses=auto {args}"
cov-combine = "coverage combine"
cov-report = "coverage report"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.13", "3.12", "3.11", "3.10"]

##########################
# PyTest - Code Coverage #
##########################
[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "-ra -q --tb=short --import-mode=prepend -p asyncio -p anyio -p pytest_mock"
testpaths = [
  "tests",
  "examples",
]

##################################
# pyright - static type checking #
##################################

[tool.pyright]
venvPath = "."
venv = ".venv"
include = [
  "src",
]
exclude = [
  "__pycache__",
  "venv",
  ".venv",
  "dist",
]

#############################
# Bandit - Security Linting #
#############################
[tool.bandit]
exclude_dirs = [
  ".cache",
  ".venv",
  "bin",
  "dist",
  "reports",
  "tests",
  "venv",
]
skips = [
  "B104",
]

#############################
# UV - Package Management   #
#############################

[tool.uv]
required-version = ">=v0.8.2"
default-groups = [
  "dev",
  "ci",
]

[[tool.uv.index]]
url = "https://pypi.org/simple/"
default = true
