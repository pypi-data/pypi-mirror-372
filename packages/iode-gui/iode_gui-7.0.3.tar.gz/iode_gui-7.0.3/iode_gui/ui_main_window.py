# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'main_window.ui'
##
## Created by: Qt User Interface Compiler version 6.7.3
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractItemView, QApplication, QDockWidget, QGridLayout,
    QHeaderView, QLabel, QMainWindow, QMenu,
    QMenuBar, QPushButton, QSizePolicy, QSpacerItem,
    QStatusBar, QTabWidget, QTextEdit, QVBoxLayout,
    QWidget)

from iode_gui.main_widgets.file_explorer.file_explorer import IodeFileExplorer
from iode_gui.main_widgets.iode_command import IodeCommandLine
from iode_gui.main_widgets.tab_widget.tab_widget import IodeTabWidget
import iode_gui.iode_resource_rc

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1000, 700)
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QSize(800, 640))
        icon = QIcon()
        icon.addFile(u":/images/iode_icon.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setIconSize(QSize(24, 24))
        MainWindow.setDockOptions(QMainWindow.AllowTabbedDocks|QMainWindow.AnimatedDocks)
        self.actionImport_Comments = QAction(MainWindow)
        self.actionImport_Comments.setObjectName(u"actionImport_Comments")
        self.actionExport = QAction(MainWindow)
        self.actionExport.setObjectName(u"actionExport")
        self.actionSettings = QAction(MainWindow)
        self.actionSettings.setObjectName(u"actionSettings")
        self.actionExit = QAction(MainWindow)
        self.actionExit.setObjectName(u"actionExit")
        self.actionClear_Work_Space = QAction(MainWindow)
        self.actionClear_Work_Space.setObjectName(u"actionClear_Work_Space")
        self.actionCopy_into_Work_Space = QAction(MainWindow)
        self.actionCopy_into_Work_Space.setObjectName(u"actionCopy_into_Work_Space")
        self.actionMerge_into_Work_Space = QAction(MainWindow)
        self.actionMerge_into_Work_Space.setObjectName(u"actionMerge_into_Work_Space")
        self.actionDescribe_Work_Space = QAction(MainWindow)
        self.actionDescribe_Work_Space.setObjectName(u"actionDescribe_Work_Space")
        self.actionSet_Variables_Sample = QAction(MainWindow)
        self.actionSet_Variables_Sample.setObjectName(u"actionSet_Variables_Sample")
        self.actionExtrapolate_Variables = QAction(MainWindow)
        self.actionExtrapolate_Variables.setObjectName(u"actionExtrapolate_Variables")
        self.actionHigh_to_Low = QAction(MainWindow)
        self.actionHigh_to_Low.setObjectName(u"actionHigh_to_Low")
        self.actionLow_to_High = QAction(MainWindow)
        self.actionLow_to_High.setObjectName(u"actionLow_to_High")
        self.actionSeasonal_Adjustment = QAction(MainWindow)
        self.actionSeasonal_Adjustment.setObjectName(u"actionSeasonal_Adjustment")
        self.actionTrend_correction = QAction(MainWindow)
        self.actionTrend_correction.setObjectName(u"actionTrend_correction")
        self.actionSort_and_Expand = QAction(MainWindow)
        self.actionSort_and_Expand.setObjectName(u"actionSort_and_Expand")
        self.actionList_Calculus = QAction(MainWindow)
        self.actionList_Calculus.setObjectName(u"actionList_Calculus")
        self.actionFile_Contents = QAction(MainWindow)
        self.actionFile_Contents.setObjectName(u"actionFile_Contents")
        self.actionFile_Compare = QAction(MainWindow)
        self.actionFile_Compare.setObjectName(u"actionFile_Compare")
        self.actionSearch_Text = QAction(MainWindow)
        self.actionSearch_Text.setObjectName(u"actionSearch_Text")
        self.actionScan_Objects = QAction(MainWindow)
        self.actionScan_Objects.setObjectName(u"actionScan_Objects")
        self.actionEdit_Tables_Variables = QAction(MainWindow)
        self.actionEdit_Tables_Variables.setObjectName(u"actionEdit_Tables_Variables")
        self.actionDuplicate_objects = QAction(MainWindow)
        self.actionDuplicate_objects.setObjectName(u"actionDuplicate_objects")
        self.actionMODELS = QAction(MainWindow)
        self.actionMODELS.setObjectName(u"actionMODELS")
        self.actionMODELS.setEnabled(False)
        self.actionSimulation_Goal_Seeking = QAction(MainWindow)
        self.actionSimulation_Goal_Seeking.setObjectName(u"actionSimulation_Goal_Seeking")
        self.actionCompile_Model = QAction(MainWindow)
        self.actionCompile_Model.setObjectName(u"actionCompile_Model")
        self.actionSCC_Decomposition = QAction(MainWindow)
        self.actionSCC_Decomposition.setObjectName(u"actionSCC_Decomposition")
        self.actionSCC_Simulation = QAction(MainWindow)
        self.actionSCC_Simulation.setObjectName(u"actionSCC_Simulation")
        self.actionIDENTITIES = QAction(MainWindow)
        self.actionIDENTITIES.setObjectName(u"actionIDENTITIES")
        self.actionIDENTITIES.setEnabled(False)
        self.actionExecute_Identities = QAction(MainWindow)
        self.actionExecute_Identities.setObjectName(u"actionExecute_Identities")
        self.actionPRINT = QAction(MainWindow)
        self.actionPRINT.setObjectName(u"actionPRINT")
        self.actionPRINT.setEnabled(False)
        self.actionPrint_View_Tables = QAction(MainWindow)
        self.actionPrint_View_Tables.setObjectName(u"actionPrint_View_Tables")
        self.actionPrint_View_Variables = QAction(MainWindow)
        self.actionPrint_View_Variables.setObjectName(u"actionPrint_View_Variables")
        self.actionObject_Definitions = QAction(MainWindow)
        self.actionObject_Definitions.setObjectName(u"actionObject_Definitions")
        self.actionGRAPHICS = QAction(MainWindow)
        self.actionGRAPHICS.setObjectName(u"actionGRAPHICS")
        self.actionGRAPHICS.setEnabled(False)
        self.actionGraphs_from_Tables = QAction(MainWindow)
        self.actionGraphs_from_Tables.setObjectName(u"actionGraphs_from_Tables")
        self.actionGraphs_from_Variables = QAction(MainWindow)
        self.actionGraphs_from_Variables.setObjectName(u"actionGraphs_from_Variables")
        self.actionIode_Manual = QAction(MainWindow)
        self.actionIode_Manual.setObjectName(u"actionIode_Manual")
        self.actionIode_Home = QAction(MainWindow)
        self.actionIode_Home.setObjectName(u"actionIode_Home")
        self.actionIode_Readme = QAction(MainWindow)
        self.actionIode_Readme.setObjectName(u"actionIode_Readme")
        self.actionAbout_Iode = QAction(MainWindow)
        self.actionAbout_Iode.setObjectName(u"actionAbout_Iode")
        self.actionImport_Variables = QAction(MainWindow)
        self.actionImport_Variables.setObjectName(u"actionImport_Variables")
        self.actionOpen_Project = QAction(MainWindow)
        self.actionOpen_Project.setObjectName(u"actionOpen_Project")
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        self.actionSave_All = QAction(MainWindow)
        self.actionSave_All.setObjectName(u"actionSave_All")
        self.actionNew_Project = QAction(MainWindow)
        self.actionNew_Project.setObjectName(u"actionNew_Project")
        self.actionKeyboard_Shortcuts = QAction(MainWindow)
        self.actionKeyboard_Shortcuts.setObjectName(u"actionKeyboard_Shortcuts")
        self.actionIode_Python_API = QAction(MainWindow)
        self.actionIode_Python_API.setObjectName(u"actionIode_Python_API")
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.tabWidget_IODE_objs = IodeTabWidget(self.centralwidget)
        self.tabWidget_IODE_objs.setObjectName(u"tabWidget_IODE_objs")
        self.tabWidget_IODE_objs.setTabsClosable(True)
        self.tabWidget_IODE_objs.setMovable(True)

        self.verticalLayout.addWidget(self.tabWidget_IODE_objs)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1000, 22))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuFile.setToolTipsVisible(True)
        self.menuRecent_Projects = QMenu(self.menuFile)
        self.menuRecent_Projects.setObjectName(u"menuRecent_Projects")
        self.menuWorkspace = QMenu(self.menubar)
        self.menuWorkspace.setObjectName(u"menuWorkspace")
        self.menuWorkspace.setToolTipsVisible(True)
        self.menuData = QMenu(self.menubar)
        self.menuData.setObjectName(u"menuData")
        self.menuData.setToolTipsVisible(True)
        self.menuRun = QMenu(self.menubar)
        self.menuRun.setObjectName(u"menuRun")
        self.menuRun.setToolTipsVisible(True)
        self.menuPrint_Graph = QMenu(self.menubar)
        self.menuPrint_Graph.setObjectName(u"menuPrint_Graph")
        self.menuPrint_Graph.setToolTipsVisible(True)
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        self.menuHelp.setToolTipsVisible(True)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dockWidget_file_explorer = QDockWidget(MainWindow)
        self.dockWidget_file_explorer.setObjectName(u"dockWidget_file_explorer")
        sizePolicy1 = QSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Expanding)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.dockWidget_file_explorer.sizePolicy().hasHeightForWidth())
        self.dockWidget_file_explorer.setSizePolicy(sizePolicy1)
        self.dockWidget_file_explorer.setMinimumSize(QSize(178, 113))
        self.dockWidget_file_explorer.setFloating(False)
        self.dockWidget_file_explorer.setFeatures(QDockWidget.DockWidgetFloatable|QDockWidget.DockWidgetMovable)
        self.dockWidget_file_explorer.setAllowedAreas(Qt.LeftDockWidgetArea|Qt.RightDockWidgetArea)
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName(u"dockWidgetContents")
        self.verticalLayout_2 = QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.treeView_file_explorer = IodeFileExplorer(self.dockWidgetContents)
        self.treeView_file_explorer.setObjectName(u"treeView_file_explorer")
        self.treeView_file_explorer.setMinimumSize(QSize(160, 0))
        self.treeView_file_explorer.setAcceptDrops(True)
        self.treeView_file_explorer.setEditTriggers(QAbstractItemView.EditKeyPressed)
        self.treeView_file_explorer.setDragEnabled(True)
        self.treeView_file_explorer.setDragDropOverwriteMode(True)
        self.treeView_file_explorer.setDragDropMode(QAbstractItemView.InternalMove)
        self.treeView_file_explorer.setDefaultDropAction(Qt.MoveAction)
        self.treeView_file_explorer.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.treeView_file_explorer.header().setVisible(False)

        self.verticalLayout_2.addWidget(self.treeView_file_explorer)

        self.dockWidget_file_explorer.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.dockWidget_file_explorer)
        self.dockWidget_tools = QDockWidget(MainWindow)
        self.dockWidget_tools.setObjectName(u"dockWidget_tools")
        self.dockWidget_tools.setMinimumSize(QSize(303, 195))
        self.dockWidget_tools.setLayoutDirection(Qt.LeftToRight)
        self.dockWidget_tools.setFloating(False)
        self.dockWidget_tools.setFeatures(QDockWidget.DockWidgetFloatable)
        self.dockWidget_tools.setAllowedAreas(Qt.BottomDockWidgetArea)
        self.dockWidgetContents_3 = QWidget()
        self.dockWidgetContents_3.setObjectName(u"dockWidgetContents_3")
        self.gridLayout_2 = QGridLayout(self.dockWidgetContents_3)
        self.gridLayout_2.setObjectName(u"gridLayout_2")
        self.tabWidget_tools = QTabWidget(self.dockWidgetContents_3)
        self.tabWidget_tools.setObjectName(u"tabWidget_tools")
        self.tab_iode_commands = QWidget()
        self.tab_iode_commands.setObjectName(u"tab_iode_commands")
        self.gridLayout = QGridLayout(self.tab_iode_commands)
        self.gridLayout.setObjectName(u"gridLayout")
        self.label_iode_command = QLabel(self.tab_iode_commands)
        self.label_iode_command.setObjectName(u"label_iode_command")

        self.gridLayout.addWidget(self.label_iode_command, 0, 0, 1, 1)

        self.lineEdit_iode_command = IodeCommandLine(self.tab_iode_commands)
        self.lineEdit_iode_command.setObjectName(u"lineEdit_iode_command")

        self.gridLayout.addWidget(self.lineEdit_iode_command, 0, 1, 1, 1)

        self.pushButton_run_iode_command = QPushButton(self.tab_iode_commands)
        self.pushButton_run_iode_command.setObjectName(u"pushButton_run_iode_command")
        self.pushButton_run_iode_command.setAutoDefault(False)
        self.pushButton_run_iode_command.setFlat(False)

        self.gridLayout.addWidget(self.pushButton_run_iode_command, 0, 2, 1, 1)

        self.label_output = QLabel(self.tab_iode_commands)
        self.label_output.setObjectName(u"label_output")

        self.gridLayout.addWidget(self.label_output, 1, 0, 1, 1)

        self.textEdit_output = QTextEdit(self.tab_iode_commands)
        self.textEdit_output.setObjectName(u"textEdit_output")
        self.textEdit_output.setReadOnly(True)

        self.gridLayout.addWidget(self.textEdit_output, 1, 1, 2, 1)

        self.verticalSpacer = QSpacerItem(20, 73, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding)

        self.gridLayout.addItem(self.verticalSpacer, 1, 2, 2, 1)

        self.verticalSpacer_2 = QSpacerItem(20, 51, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding)

        self.gridLayout.addItem(self.verticalSpacer_2, 2, 0, 1, 1)

        self.tabWidget_tools.addTab(self.tab_iode_commands, "")
        self.tab_python_console = QWidget()
        self.tab_python_console.setObjectName(u"tab_python_console")
        self.tabWidget_tools.addTab(self.tab_python_console, "")

        self.gridLayout_2.addWidget(self.tabWidget_tools, 0, 0, 1, 1)

        self.dockWidget_tools.setWidget(self.dockWidgetContents_3)
        MainWindow.addDockWidget(Qt.DockWidgetArea.BottomDockWidgetArea, self.dockWidget_tools)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuWorkspace.menuAction())
        self.menubar.addAction(self.menuData.menuAction())
        self.menubar.addAction(self.menuRun.menuAction())
        self.menubar.addAction(self.menuPrint_Graph.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionNew_Project)
        self.menuFile.addAction(self.actionOpen_Project)
        self.menuFile.addAction(self.menuRecent_Projects.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_All)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionImport_Comments)
        self.menuFile.addAction(self.actionImport_Variables)
        self.menuFile.addAction(self.actionExport)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSettings)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuWorkspace.addAction(self.actionClear_Work_Space)
        self.menuWorkspace.addSeparator()
        self.menuWorkspace.addAction(self.actionCopy_into_Work_Space)
        self.menuWorkspace.addAction(self.actionMerge_into_Work_Space)
        self.menuWorkspace.addAction(self.actionDescribe_Work_Space)
        self.menuWorkspace.addAction(self.actionSet_Variables_Sample)
        self.menuWorkspace.addAction(self.actionExtrapolate_Variables)
        self.menuWorkspace.addSeparator()
        self.menuWorkspace.addAction(self.actionHigh_to_Low)
        self.menuWorkspace.addAction(self.actionLow_to_High)
        self.menuWorkspace.addAction(self.actionSeasonal_Adjustment)
        self.menuWorkspace.addAction(self.actionTrend_correction)
        self.menuData.addAction(self.actionSort_and_Expand)
        self.menuData.addAction(self.actionList_Calculus)
        self.menuData.addSeparator()
        self.menuData.addAction(self.actionFile_Contents)
        self.menuData.addAction(self.actionFile_Compare)
        self.menuData.addSeparator()
        self.menuData.addAction(self.actionSearch_Text)
        self.menuData.addAction(self.actionScan_Objects)
        self.menuData.addSeparator()
        self.menuData.addAction(self.actionEdit_Tables_Variables)
        self.menuData.addSeparator()
        self.menuData.addAction(self.actionDuplicate_objects)
        self.menuRun.addAction(self.actionMODELS)
        self.menuRun.addSeparator()
        self.menuRun.addAction(self.actionSimulation_Goal_Seeking)
        self.menuRun.addAction(self.actionCompile_Model)
        self.menuRun.addSeparator()
        self.menuRun.addAction(self.actionSCC_Decomposition)
        self.menuRun.addAction(self.actionSCC_Simulation)
        self.menuRun.addSeparator()
        self.menuRun.addAction(self.actionIDENTITIES)
        self.menuRun.addSeparator()
        self.menuRun.addAction(self.actionExecute_Identities)
        self.menuPrint_Graph.addAction(self.actionPRINT)
        self.menuPrint_Graph.addSeparator()
        self.menuPrint_Graph.addAction(self.actionPrint_View_Tables)
        self.menuPrint_Graph.addAction(self.actionPrint_View_Variables)
        self.menuPrint_Graph.addSeparator()
        self.menuPrint_Graph.addAction(self.actionGRAPHICS)
        self.menuPrint_Graph.addSeparator()
        self.menuPrint_Graph.addAction(self.actionGraphs_from_Tables)
        self.menuPrint_Graph.addAction(self.actionGraphs_from_Variables)
        self.menuHelp.addAction(self.actionIode_Manual)
        self.menuHelp.addAction(self.actionIode_Home)
        self.menuHelp.addAction(self.actionIode_Python_API)
        self.menuHelp.addAction(self.actionIode_Readme)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionKeyboard_Shortcuts)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout_Iode)

        self.retranslateUi(MainWindow)
        self.actionExit.triggered.connect(MainWindow.close)
        self.actionAbout_Iode.triggered.connect(MainWindow.about)
        self.actionExport.triggered.connect(MainWindow.open_export_dialog)
        self.actionImport_Comments.triggered.connect(MainWindow.open_import_comments_dialog)
        self.actionClear_Work_Space.triggered.connect(MainWindow.clear_workspace)
        self.actionCopy_into_Work_Space.triggered.connect(MainWindow.open_copy_into_workspace_dialog)
        self.actionMerge_into_Work_Space.triggered.connect(MainWindow.open_merge_into_workspace_dialog)
        self.actionDescribe_Work_Space.triggered.connect(MainWindow.open_change_workspace_descriptions_dialog)
        self.actionSet_Variables_Sample.triggered.connect(MainWindow.open_change_variables_sample_dialog)
        self.actionExtrapolate_Variables.triggered.connect(MainWindow.open_extrapolate_variables_dialog)
        self.actionHigh_to_Low.triggered.connect(MainWindow.open_high_to_low_dialog)
        self.actionLow_to_High.triggered.connect(MainWindow.open_low_to_high_dialog)
        self.actionSeasonal_Adjustment.triggered.connect(MainWindow.open_seasonal_adjustment_dialog)
        self.actionTrend_correction.triggered.connect(MainWindow.open_trend_correction_dialog)
        self.actionDuplicate_objects.triggered.connect(MainWindow.open_duplicate_objects_dialog)
        self.actionSimulation_Goal_Seeking.triggered.connect(MainWindow.open_compute_simulation_dialog)
        self.actionCompile_Model.triggered.connect(MainWindow.open_compute_model_dialog)
        self.actionSCC_Decomposition.triggered.connect(MainWindow.open_compute_scc_decomposition_dialog)
        self.actionSCC_Simulation.triggered.connect(MainWindow.open_compute_scc_simulation_dialog)
        self.actionExecute_Identities.triggered.connect(MainWindow.open_compute_identities_dialog)
        self.actionPrint_View_Tables.triggered.connect(MainWindow.open_print_tables_dialog)
        self.actionPrint_View_Variables.triggered.connect(MainWindow.open_print_variables_dialog)
        self.actionGraphs_from_Tables.triggered.connect(MainWindow.open_graphs_tables_dialog)
        self.actionGraphs_from_Variables.triggered.connect(MainWindow.open_graphs_variables_dialog)
        self.actionIode_Readme.triggered.connect(MainWindow.open_release_notes)
        self.actionIode_Home.triggered.connect(MainWindow.open_iode_home)
        self.actionIode_Manual.triggered.connect(MainWindow.open_iode_manual)
        self.actionImport_Variables.triggered.connect(MainWindow.open_import_variables_dialog)
        self.actionOpen_Project.triggered.connect(MainWindow.open_project)
        self.actionSave.triggered.connect(MainWindow.save_current_tab)
        self.actionSave_All.triggered.connect(MainWindow.save_all_tabs)
        self.actionNew_Project.triggered.connect(MainWindow.create_new_project)
        self.lineEdit_iode_command.returnPressed.connect(MainWindow.update_tab_and_completer)
        self.pushButton_run_iode_command.clicked.connect(self.lineEdit_iode_command.run_command)
        self.actionKeyboard_Shortcuts.triggered.connect(MainWindow.display_keyboard_shortcuts)
        self.actionList_Calculus.triggered.connect(MainWindow.open_list_calculus_dialog)
        self.actionSort_and_Expand.triggered.connect(MainWindow.open_sort_and_calculus_dialog)
        self.actionFile_Contents.triggered.connect(MainWindow.open_file_contents_dialog)
        self.actionFile_Compare.triggered.connect(MainWindow.open_file_compare_dialog)
        self.actionSearch_Text.triggered.connect(MainWindow.open_search_text_dialog)
        self.actionScan_Objects.triggered.connect(MainWindow.open_scan_objects_dialog)
        self.actionEdit_Tables_Variables.triggered.connect(MainWindow.open_edit_tables_variables_dialog)
        self.actionSettings.triggered.connect(MainWindow.open_settings)
        self.actionIode_Python_API.triggered.connect(MainWindow.open_python_api)

        self.tabWidget_IODE_objs.setCurrentIndex(-1)
        self.tabWidget_tools.setCurrentIndex(0)
        self.pushButton_run_iode_command.setDefault(False)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"IODE", None))
#if QT_CONFIG(statustip)
        MainWindow.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.actionImport_Comments.setText(QCoreApplication.translate("MainWindow", u"Import Comments", None))
#if QT_CONFIG(tooltip)
        self.actionImport_Comments.setToolTip(QCoreApplication.translate("MainWindow", u"Import files respecting certain rules to IODE", None))
#endif // QT_CONFIG(tooltip)
        self.actionExport.setText(QCoreApplication.translate("MainWindow", u"Export", None))
#if QT_CONFIG(tooltip)
        self.actionExport.setToolTip(QCoreApplication.translate("MainWindow", u"Export files respecting certain rules to IODE", None))
#endif // QT_CONFIG(tooltip)
        self.actionSettings.setText(QCoreApplication.translate("MainWindow", u"Settings", None))
#if QT_CONFIG(tooltip)
        self.actionSettings.setToolTip(QCoreApplication.translate("MainWindow", u"Change Print Setup", None))
#endif // QT_CONFIG(tooltip)
        self.actionExit.setText(QCoreApplication.translate("MainWindow", u"Exit", None))
#if QT_CONFIG(tooltip)
        self.actionExit.setToolTip(QCoreApplication.translate("MainWindow", u"Leave I.O.D.E application", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionExit.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionClear_Work_Space.setText(QCoreApplication.translate("MainWindow", u"Clear All WorkSpaces", None))
#if QT_CONFIG(tooltip)
        self.actionClear_Work_Space.setToolTip(QCoreApplication.translate("MainWindow", u"Clear current work space(s)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionClear_Work_Space.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy_into_Work_Space.setText(QCoreApplication.translate("MainWindow", u"Copy into Work Space", None))
#if QT_CONFIG(tooltip)
        self.actionCopy_into_Work_Space.setToolTip(QCoreApplication.translate("MainWindow", u"Copy object list from disk into the work space", None))
#endif // QT_CONFIG(tooltip)
        self.actionMerge_into_Work_Space.setText(QCoreApplication.translate("MainWindow", u"Merge into Work Space", None))
#if QT_CONFIG(tooltip)
        self.actionMerge_into_Work_Space.setToolTip(QCoreApplication.translate("MainWindow", u"Merge file from disk into the work space", None))
#endif // QT_CONFIG(tooltip)
        self.actionDescribe_Work_Space.setText(QCoreApplication.translate("MainWindow", u"Describe Work Space", None))
#if QT_CONFIG(tooltip)
        self.actionDescribe_Work_Space.setToolTip(QCoreApplication.translate("MainWindow", u"Change work spaces descriptions", None))
#endif // QT_CONFIG(tooltip)
        self.actionSet_Variables_Sample.setText(QCoreApplication.translate("MainWindow", u"Set Variables Sample", None))
#if QT_CONFIG(tooltip)
        self.actionSet_Variables_Sample.setToolTip(QCoreApplication.translate("MainWindow", u"Change current variables definition sample", None))
#endif // QT_CONFIG(tooltip)
        self.actionExtrapolate_Variables.setText(QCoreApplication.translate("MainWindow", u"Extrapolate Variables", None))
#if QT_CONFIG(tooltip)
        self.actionExtrapolate_Variables.setToolTip(QCoreApplication.translate("MainWindow", u"Extrapolate variables from WS", None))
#endif // QT_CONFIG(tooltip)
        self.actionHigh_to_Low.setText(QCoreApplication.translate("MainWindow", u"High to Low", None))
#if QT_CONFIG(tooltip)
        self.actionHigh_to_Low.setToolTip(QCoreApplication.translate("MainWindow", u"Copy file with higher frequency into the work space", None))
#endif // QT_CONFIG(tooltip)
        self.actionLow_to_High.setText(QCoreApplication.translate("MainWindow", u"Low to High", None))
#if QT_CONFIG(tooltip)
        self.actionLow_to_High.setToolTip(QCoreApplication.translate("MainWindow", u"Copy file with lower frequency into the work space", None))
#endif // QT_CONFIG(tooltip)
        self.actionSeasonal_Adjustment.setText(QCoreApplication.translate("MainWindow", u"Seasonal Adjustment", None))
#if QT_CONFIG(tooltip)
        self.actionSeasonal_Adjustment.setToolTip(QCoreApplication.translate("MainWindow", u"Census II-method for Seasonal Adjustment", None))
#endif // QT_CONFIG(tooltip)
        self.actionTrend_correction.setText(QCoreApplication.translate("MainWindow", u"Trend correction", None))
#if QT_CONFIG(tooltip)
        self.actionTrend_correction.setToolTip(QCoreApplication.translate("MainWindow", u"Hodrick-Prescott filter for trend correction", None))
#endif // QT_CONFIG(tooltip)
        self.actionSort_and_Expand.setText(QCoreApplication.translate("MainWindow", u"Sort and Expand", None))
#if QT_CONFIG(tooltip)
        self.actionSort_and_Expand.setToolTip(QCoreApplication.translate("MainWindow", u"Expand and sort lists", None))
#endif // QT_CONFIG(tooltip)
        self.actionList_Calculus.setText(QCoreApplication.translate("MainWindow", u"List Calculus", None))
#if QT_CONFIG(tooltip)
        self.actionList_Calculus.setToolTip(QCoreApplication.translate("MainWindow", u"Execute various logical operations on lists", None))
#endif // QT_CONFIG(tooltip)
        self.actionFile_Contents.setText(QCoreApplication.translate("MainWindow", u"File Contents", None))
#if QT_CONFIG(tooltip)
        self.actionFile_Contents.setToolTip(QCoreApplication.translate("MainWindow", u"Gives the contents of a file", None))
#endif // QT_CONFIG(tooltip)
        self.actionFile_Compare.setText(QCoreApplication.translate("MainWindow", u"File Compare", None))
#if QT_CONFIG(tooltip)
        self.actionFile_Compare.setToolTip(QCoreApplication.translate("MainWindow", u"Compares the contents of the WS and that of a file", None))
#endif // QT_CONFIG(tooltip)
        self.actionSearch_Text.setText(QCoreApplication.translate("MainWindow", u"Search Text", None))
#if QT_CONFIG(tooltip)
        self.actionSearch_Text.setToolTip(QCoreApplication.translate("MainWindow", u"Search for a text in object definitions", None))
#endif // QT_CONFIG(tooltip)
        self.actionScan_Objects.setText(QCoreApplication.translate("MainWindow", u"Scan Objects", None))
#if QT_CONFIG(tooltip)
        self.actionScan_Objects.setToolTip(QCoreApplication.translate("MainWindow", u"Scan for variables and scalars in object definitions", None))
#endif // QT_CONFIG(tooltip)
        self.actionEdit_Tables_Variables.setText(QCoreApplication.translate("MainWindow", u"Edit Tables", None))
        self.actionDuplicate_objects.setText(QCoreApplication.translate("MainWindow", u"Duplicate objects", None))
#if QT_CONFIG(tooltip)
        self.actionDuplicate_objects.setToolTip(QCoreApplication.translate("MainWindow", u"Duplicate objects in the current work space", None))
#endif // QT_CONFIG(tooltip)
        self.actionMODELS.setText(QCoreApplication.translate("MainWindow", u"MODELS", None))
        self.actionSimulation_Goal_Seeking.setText(QCoreApplication.translate("MainWindow", u"Simulation - Goal Seeking", None))
#if QT_CONFIG(tooltip)
        self.actionSimulation_Goal_Seeking.setToolTip(QCoreApplication.translate("MainWindow", u"Simulate a model", None))
#endif // QT_CONFIG(tooltip)
        self.actionCompile_Model.setText(QCoreApplication.translate("MainWindow", u"Compile Model", None))
#if QT_CONFIG(tooltip)
        self.actionCompile_Model.setToolTip(QCoreApplication.translate("MainWindow", u"Compile a set of equations", None))
#endif // QT_CONFIG(tooltip)
        self.actionSCC_Decomposition.setText(QCoreApplication.translate("MainWindow", u"SCC Decomposition", None))
#if QT_CONFIG(tooltip)
        self.actionSCC_Decomposition.setToolTip(QCoreApplication.translate("MainWindow", u"SCC Decomposition and reordering", None))
#endif // QT_CONFIG(tooltip)
        self.actionSCC_Simulation.setText(QCoreApplication.translate("MainWindow", u"SCC Simulation", None))
#if QT_CONFIG(tooltip)
        self.actionSCC_Simulation.setToolTip(QCoreApplication.translate("MainWindow", u"Simulate a pre-ordered model", None))
#endif // QT_CONFIG(tooltip)
        self.actionIDENTITIES.setText(QCoreApplication.translate("MainWindow", u"IDENTITIES", None))
        self.actionExecute_Identities.setText(QCoreApplication.translate("MainWindow", u"Execute Identities", None))
#if QT_CONFIG(tooltip)
        self.actionExecute_Identities.setToolTip(QCoreApplication.translate("MainWindow", u"Execute a set of identities and update current variables WorkSpace", None))
#endif // QT_CONFIG(tooltip)
        self.actionPRINT.setText(QCoreApplication.translate("MainWindow", u"PRINT", None))
        self.actionPrint_View_Tables.setText(QCoreApplication.translate("MainWindow", u"Print/View Tables", None))
#if QT_CONFIG(tooltip)
        self.actionPrint_View_Tables.setToolTip(QCoreApplication.translate("MainWindow", u"Compute tables and Display or Print results", None))
#endif // QT_CONFIG(tooltip)
        self.actionPrint_View_Variables.setText(QCoreApplication.translate("MainWindow", u"Print/View Variables", None))
#if QT_CONFIG(tooltip)
        self.actionPrint_View_Variables.setToolTip(QCoreApplication.translate("MainWindow", u"Compare, Display or Print variables", None))
#endif // QT_CONFIG(tooltip)
        self.actionObject_Definitions.setText(QCoreApplication.translate("MainWindow", u"Object Definitions", None))
#if QT_CONFIG(tooltip)
        self.actionObject_Definitions.setToolTip(QCoreApplication.translate("MainWindow", u"Print object definitions", None))
#endif // QT_CONFIG(tooltip)
        self.actionGRAPHICS.setText(QCoreApplication.translate("MainWindow", u"GRAPHICS", None))
        self.actionGraphs_from_Tables.setText(QCoreApplication.translate("MainWindow", u"Graphs from Tables", None))
#if QT_CONFIG(tooltip)
        self.actionGraphs_from_Tables.setToolTip(QCoreApplication.translate("MainWindow", u"Compute tables and Display or Print", None))
#endif // QT_CONFIG(tooltip)
        self.actionGraphs_from_Variables.setText(QCoreApplication.translate("MainWindow", u"Graphs from Variables", None))
#if QT_CONFIG(tooltip)
        self.actionGraphs_from_Variables.setToolTip(QCoreApplication.translate("MainWindow", u"Display or Print series values", None))
#endif // QT_CONFIG(tooltip)
        self.actionIode_Manual.setText(QCoreApplication.translate("MainWindow", u"Iode Manual", None))
#if QT_CONFIG(tooltip)
        self.actionIode_Manual.setToolTip(QCoreApplication.translate("MainWindow", u"Change Help system to HtmlHelp format", None))
#endif // QT_CONFIG(tooltip)
        self.actionIode_Home.setText(QCoreApplication.translate("MainWindow", u"Iode Home", None))
#if QT_CONFIG(tooltip)
        self.actionIode_Home.setToolTip(QCoreApplication.translate("MainWindow", u"Go to IODE Web Site", None))
#endif // QT_CONFIG(tooltip)
        self.actionIode_Readme.setText(QCoreApplication.translate("MainWindow", u"Iode Changelog", None))
#if QT_CONFIG(tooltip)
        self.actionIode_Readme.setToolTip(QCoreApplication.translate("MainWindow", u"Last changes in IODE", None))
#endif // QT_CONFIG(tooltip)
        self.actionAbout_Iode.setText(QCoreApplication.translate("MainWindow", u"About Iode", None))
#if QT_CONFIG(tooltip)
        self.actionAbout_Iode.setToolTip(QCoreApplication.translate("MainWindow", u"Display introduction screen", None))
#endif // QT_CONFIG(tooltip)
        self.actionImport_Variables.setText(QCoreApplication.translate("MainWindow", u"Import Variables", None))
        self.actionOpen_Project.setText(QCoreApplication.translate("MainWindow", u"Open Project", None))
#if QT_CONFIG(shortcut)
        self.actionOpen_Project.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
#if QT_CONFIG(tooltip)
        self.actionSave.setToolTip(QCoreApplication.translate("MainWindow", u"Save current tab content", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_All.setText(QCoreApplication.translate("MainWindow", u"Save All Tabs", None))
#if QT_CONFIG(tooltip)
        self.actionSave_All.setToolTip(QCoreApplication.translate("MainWindow", u"Save all tabs content", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionSave_All.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionNew_Project.setText(QCoreApplication.translate("MainWindow", u"New Project", None))
#if QT_CONFIG(shortcut)
        self.actionNew_Project.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Alt+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionKeyboard_Shortcuts.setText(QCoreApplication.translate("MainWindow", u"Keyboard Shortcuts", None))
        self.actionIode_Python_API.setText(QCoreApplication.translate("MainWindow", u"Iode Python API", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"&File", None))
        self.menuRecent_Projects.setTitle(QCoreApplication.translate("MainWindow", u"Recent Projects", None))
        self.menuWorkspace.setTitle(QCoreApplication.translate("MainWindow", u"&Workspace", None))
        self.menuData.setTitle(QCoreApplication.translate("MainWindow", u"&Data", None))
        self.menuRun.setTitle(QCoreApplication.translate("MainWindow", u"&Run", None))
        self.menuPrint_Graph.setTitle(QCoreApplication.translate("MainWindow", u"&Print/Graph", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"&Help", None))
        self.dockWidget_file_explorer.setWindowTitle(QCoreApplication.translate("MainWindow", u"File Explorer", None))
        self.dockWidget_tools.setWindowTitle(QCoreApplication.translate("MainWindow", u"Tools", None))
        self.label_iode_command.setText(QCoreApplication.translate("MainWindow", u"Report Command", None))
        self.pushButton_run_iode_command.setText(QCoreApplication.translate("MainWindow", u"Run", None))
        self.label_output.setText(QCoreApplication.translate("MainWindow", u"Output", None))
        self.tabWidget_tools.setTabText(self.tabWidget_tools.indexOf(self.tab_iode_commands), QCoreApplication.translate("MainWindow", u"IODE commands", None))
        self.tabWidget_tools.setTabText(self.tabWidget_tools.indexOf(self.tab_python_console), QCoreApplication.translate("MainWindow", u"Python console", None))
    # retranslateUi

