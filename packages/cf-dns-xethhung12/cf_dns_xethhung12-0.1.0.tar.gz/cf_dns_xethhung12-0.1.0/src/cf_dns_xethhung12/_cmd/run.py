import argparse
import json
import os

from docutils.nodes import description
from j_vault_http_client_xethhung12 import client

import cf_dns_xethhung12 as project


def main():
    client.load_to_env()
    parser = argparse.ArgumentParser(
        prog="py-cf_dns_xethhung12",
        description="A simple cloudflare dns record lister and converter for terraform / opentofu importing",
    )

    resource_sub_parser = parser.add_subparsers(dest="resource")
    dns_parser = resource_sub_parser.add_parser("dns", description="Cloudflare DNS")

    action_sub_parser = dns_parser.add_subparsers(dest="action")
    action_sub_parser.add_parser("list", description="List DNS records")
    raw_page_parser = action_sub_parser.add_parser("raw-page", description="get raw page data")
    raw_page_parser.add_argument(
        "-p", "--page", type=int, default=1, help="Page number", required=False
    )
    action_sub_parser.add_parser("as-tf", description="generate tf")

    import_tf_parser = action_sub_parser.add_parser("import-tf", description="import cloudflare dns into tf state")
    import_tf_parser.add_argument("-f", "--file", required=True, help="the tf file generated by py-cf-dns-xethhung12")

    zone_parser = resource_sub_parser.add_parser("zone", description="Cloudflare Zone")
    action_sub_parser=zone_parser.add_subparsers(dest="action")
    zone_list_parser = action_sub_parser.add_parser("list", description="list all zone")

    parsed = parser.parse_args()

    if os.getenv("ENV"):
        print(parsed)

    token = os.getenv("py_cf_dns_token")
    if token is None:
        raise Exception("py_cf_dns_token environment variable not set")


    if parsed.resource == "dns":
        zone = os.getenv("py_cf_dns_zone")
        if zone is None:
            raise Exception("py_cf_dns_zone environment variable not set")
        dns_lister = project.Utils(token, zone)

        if parsed.action == "list":
            records = dns_lister.load_full_page()
            print(json.dumps(records, indent=2))

        elif parsed.action == "raw-page":
            page_no = parsed.page
            if page_no == 1:
                res = dns_lister.load_page()
            else:
                total_page = dns_lister.meta()['total_page']
                if page_no > total_page:
                    raise Exception(f"Page number {page_no} is out of range [{total_page}]")
                res = dns_lister.load_page(page_no, total_page)
            print(json.dumps(res, indent=2))

        elif parsed.action == "as-tf":
            fp = dns_lister.load_full_page()
            recs = []
            for index, item in enumerate(fp):
                recs.append(project.Utils.load_from_cf(item, zone, index))
            print("".join([rec.as_tf_resource() for rec in recs]))
        elif parsed.action == "import-tf":
            f = parsed.file
            print("\n".join([r for r in project.Utils.tf_file_to_import_script(f)]))
        else:
            raise Exception("Unexpected parameters")
    elif parsed.resource == "zone":
        if parsed.action == 'list':
            import requests
            import json
            session = project.Session(token)
            resp = requests.get(
                "https://api.cloudflare.com/client/v4/zones",
                headers=session.headers()
            )
            print(json.dumps(resp.json(), indent=2))
        else:
            raise Exception("Unexpected parameters")


