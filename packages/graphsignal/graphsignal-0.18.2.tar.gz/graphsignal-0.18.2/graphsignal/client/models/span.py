# coding: utf-8

"""
    Graphsignal API

    API for uploading and querying spans, errors, metrics, and logs.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from graphsignal.client.models.counter import Counter
from graphsignal.client.models.param import Param
from graphsignal.client.models.profile import Profile
from graphsignal.client.models.tag import Tag
from typing import Optional, Set
from typing_extensions import Self

class Span(BaseModel):
    """
    Span
    """ # noqa: E501
    span_id: StrictStr = Field(description="Unique identifier for the span.")
    trace_id: StrictStr = Field(description="Identifier of the trace.")
    parent_span_id: Optional[StrictStr] = Field(default=None, description="Identifier of the parent span, if this is a nested span.")
    linked_span_ids: Optional[List[StrictStr]] = Field(default=None, description="List of linked span identifiers.")
    start_ns: StrictInt = Field(description="Start time of the span in nanoseconds.")
    end_ns: StrictInt = Field(description="End time of the span in nanoseconds.")
    name: StrictStr = Field(description="The name of the span.")
    tags: Optional[List[Tag]] = Field(default=None, description="List of tags associated with the span.")
    params: Optional[List[Param]] = Field(default=None, description="List of parameters associated with the span.")
    counters: Optional[List[Counter]] = Field(default=None, description="Counters associated with the span.")
    profiles: Optional[List[Profile]] = Field(default=None, description="List of profiles related to the span.")
    __properties: ClassVar[List[str]] = ["span_id", "trace_id", "parent_span_id", "linked_span_ids", "start_ns", "end_ns", "name", "tags", "params", "counters", "profiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Span from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in params (list)
        _items = []
        if self.params:
            for _item_params in self.params:
                if _item_params:
                    _items.append(_item_params.to_dict())
            _dict['params'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in counters (list)
        _items = []
        if self.counters:
            for _item_counters in self.counters:
                if _item_counters:
                    _items.append(_item_counters.to_dict())
            _dict['counters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in profiles (list)
        _items = []
        if self.profiles:
            for _item_profiles in self.profiles:
                if _item_profiles:
                    _items.append(_item_profiles.to_dict())
            _dict['profiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Span from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "span_id": obj.get("span_id"),
            "trace_id": obj.get("trace_id"),
            "parent_span_id": obj.get("parent_span_id"),
            "linked_span_ids": obj.get("linked_span_ids"),
            "start_ns": obj.get("start_ns"),
            "end_ns": obj.get("end_ns"),
            "name": obj.get("name"),
            "tags": [Tag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "params": [Param.from_dict(_item) for _item in obj["params"]] if obj.get("params") is not None else None,
            "counters": [Counter.from_dict(_item) for _item in obj["counters"]] if obj.get("counters") is not None else None,
            "profiles": [Profile.from_dict(_item) for _item in obj["profiles"]] if obj.get("profiles") is not None else None
        })
        return _obj


