[tool.poetry]
name = "fa-common"
version = "4.3.0.dev0"
description = "CSIRO Geoanalytics FastAPI Common Framework. Standardises Data access, authentication, task execution and provides a number of utilities and helper classes."
authors = [
    "Sam Bradley <sam.bradley@csiro.au>",
    "Ben Motevalli <Benyamin.Motevalli@data61.csiro.au>",
]
license = "CSIRO Open Source Software License"
classifiers = [
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    "Development Status :: 4 - Beta",
    # Indicate who your project is intended for
    "Intended Audience :: Science/Research",
    # Pick your license as you wish (should match "license" above)
    "License :: OSI Approved :: MIT License",
    # Specify the Python versions you support here. In particular, ensure
    # that you indicate whether you support Python 2, Python 3 or both.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
include = ["fa_common/workflow/*.yml"]

[tool.poe.tasks]
lint = { cmd = "pre-commit run -a", help = "Run pre-commit hooks" }
install = { cmd = "poetry install --all-extras", help = "Install all dependencies" }
update = { cmd = "poetry update", help = "Update all dependencies" }
lint-ruff = { cmd = "ruff check fa_common --fix", help = "Run Ruff linter and apply fixes" }
lint-ruff-test = { cmd = "ruff check fa_common", help = "Run Ruff linter and don't apply fixes" }
format-ruff = { cmd = "ruff format fa_common", help = "Run Ruff linter and apply fixes" }
format-docs = { cmd = "pydocstringformatter  fa_common", help = "Run docs formatter and apply fixes" }
format = { sequence = [
    "format-docs",
    "format-ruff",
    "lint-ruff"
], help = "Run all formatters" }
test-deps-up = { cmd = "docker compose -f tests/docker-compose.yml up  -d" }
test-deps-down = { cmd = "docker compose -f tests/docker-compose.yml down " }
test = { sequence = [
    { script = "project_utils:check_env" },
    { ref="test-deps-up"},
    { script = "project_utils:sleep" },
    { cmd = "pytest --cov-report term-missing --cov=fa_common", help = "Run unit tests, won't work if docker is not up" },
    { ref="test-deps-down"},
], ignore_fail = "return_non_zero", help = "Run all tests" }

[tool.poetry.dependencies]
python = ">=3.11,<4"
PyJWT = "^2.8.0"
python-jose = "^3.4.0"
python-dotenv = "^1.0.0"
loguru = "^0.7.3"
python-multipart = "^0.0.20"
email-validator = "^2.2.0"
six = "^1.16.0"
fastapi = { version = "^0.115.6"}
aiohttp = "^3.8.5"
ujson = "^5.8.0"
secure = { version = "=0.3.0", optional = true }
miniopy-async = { version = "~1.19", optional = true } # Bug in 1.20
win32-setctime = { version = "^1.1.0", optional = true }
oyaml = { version = "^1.0", optional = true }
argo-workflows = { version = "^6.4.11", optional = true }
pytz = "^2023.3"
python-dateutil = "^2.8.2"
orjson = "^3.9.4"
rollbar = { version = "^1.0.0", optional = true }
httpx = { version = ">=0.24.1", optional = true }
beanie = "^1.29.0"
pydantic = "^2.10.0"
pydantic-settings = "^2.0.2"
aiosqlite = "^0.20.0"
uuid7 = "^0.1.0"
aiofiles = "^23.2.1"
aioshutil = "^1.3"
prefect = {version="^2.19.8", optional=true}
pytzdata = {version="^2020.1", optional=true}
chardet = "^5.2.0"
openpyxl = "^3.1.5"
regex = "^2024.11.6"
pyarrow = ">18.0.0"


[tool.poetry.group.dev.dependencies]
jupyterlab = { version = "^4.2.4" }
ipykernel = { version = "^6.29.5" }
requests = "^2.31.0"
mypy = "^1.5.1"
pytest = "^7.4.0"
pytest-asyncio = "~0.21.1"
pytest-cov = "^5.0.0"
lxml = "^4.9.3"
pandas = "^2.0.3"
pre-commit = "^3.7.1"
poethepoet = "^0.27.0"
ruff = "^0.5.4"
asgi-lifespan = "^2.1.0"

[tool.poetry.extras]
secure = ["secure"]
rollbar = ["rollbar", "httpx"]
minio = ["miniopy-async"]
windows = ["win32-setctime"]
argo = ["argo-workflows"]
local_flows = ["prefect", "pytzdata"]
# jupyter = ["jupyterlab", "ipykernel"]


[tool.pydocstringformatter]
write = true
max-line-length = 120
strip-whitespaces = true
split-summary-body = false
numpydoc-section-hyphen-length = false
linewrap-full-docstring = true

[tool.ruff]
line-length = 140

[tool.ruff.lint]
ignore = [
    # zip=strict only valid for py3.10+
    "N803",
    "PD901",
    "B905",
    "B008",
    "D",
    "N812",
    "B006",   # Initalise mutable types as function defaults
    "RUF012", # Initialising mutable types without the typing def
    "A003",   # Use of var names that shadow python built ins
    "N806",
]
select = [
    "B",
    "D",
    "E",
    "F",
    "Q",
    "W",
    "I",
    "N",
    #"S",
    "A",
    "C4",
    "DTZ",
    "PIE",
    "PT",
    # "RET",
    "SIM",
    #"ARG", # We make use of 'unused' cache parameters
    # "PTH", # ENforce usage of pathlib
    "PD",
    "PLE",
    #"PLR",
    "NPY",
    "RUF",
]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"fa_common/auth/models.py" = ["N805"]
"fa_common/storage/models.py" = ["N805"]
"fa_common/db/models.py" = ["N805"]
"fa_common/workflow/argo_utils.py" = ["E501"]
"fa_common/workflow/base_models.py" = ["E501"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
