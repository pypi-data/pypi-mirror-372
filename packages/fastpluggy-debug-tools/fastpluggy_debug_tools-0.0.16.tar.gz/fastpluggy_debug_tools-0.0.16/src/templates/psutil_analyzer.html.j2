 <style>
        .memory-bar { height: 6px; background: var(--tblr-border-color); border-radius: 3px; overflow: hidden; }
        .memory-bar-fill { height: 100%; background: linear-gradient(90deg, var(--tblr-primary), var(--tblr-purple)); transition: width 0.3s ease; }
        .memory-item { transition: all 0.3s ease; border-left: 3px solid var(--tblr-primary); }
        .memory-item:hover { background-color: var(--tblr-bg-surface-secondary); transform: translateX(2px); }
        .connection-item { font-family: var(--tblr-font-monospace); font-size: 0.875rem; border-left: 3px solid var(--tblr-success); }
        .thread-item { border-left: 3px solid var(--tblr-warning); }
        .env-var { font-family: var(--tblr-font-monospace); font-size: 0.8rem; word-break: break-all; }
        .metric-large { font-size: 2rem; font-weight: 700; line-height: 1; }
        .tab-content-active { display: block; }
        .tab-content-inactive { display: none; }
        .card-hover:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(0,0,0,0.15); transition: all 0.3s ease; }
    </style>

<div class="page">
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col">
                    <div class="page-pretitle">Memory Analysis</div>
                    <h2 class="page-title"><i class="ti ti-activity me-2"></i> PSUtil Dashboard</h2>
                </div>
            </div>
        </div>
    </div>

    <div class="page-body">
        <div class="container-xl">
            <div class="row row-deck row-cards mb-4" id="summaryCards"></div>
            <div class="card">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs" id="mainTabs">
                        <li class="nav-item"><a class="nav-link active" href="#memory" onclick="showTab('memory')"><i class="ti ti-cpu me-1"></i>Memory Analysis</a></li>
                        <li class="nav-item"><a class="nav-link" href="#connections" onclick="showTab('connections')"><i class="ti ti-network me-1"></i>Network Connections</a></li>
                        <li class="nav-item"><a class="nav-link" href="#threads" onclick="showTab('threads')"><i class="ti ti-brand-threading me-1"></i>Threads</a></li>
                        <li class="nav-item"><a class="nav-link" href="#environment" onclick="showTab('environment')"><i class="ti ti-settings me-1"></i>Environment</a></li>
                        <li class="nav-item"><a class="nav-link" href="#process" onclick="showTab('process')"><i class="ti ti-info-circle me-1"></i>Process Info</a></li>
                    </ul>
                </div>
                <div class="card-body">
                    <!-- Memory Tab -->
                    <div id="memory" class="tab-content-active">
                        <div class="row mb-3">
                            <div class="col-md-4"><input id="memoryFilter" class="form-control" placeholder="Filter memory maps..."></div>
                            <div class="col-md-8"><div class="btn-group"><button class="btn btn-primary" onclick="sortMemoryMaps('size')"><i class="ti ti-sort-descending me-1"></i>Sort by Size</button><button class="btn btn-outline-primary" onclick="sortMemoryMaps('rss')"><i class="ti ti-sort-descending me-1"></i>Sort by RSS</button></div></div>
                        </div>
                        <div id="memoryMaps"></div>
                    </div>
                    <!-- Connections Tab -->
                    <div id="connections" class="tab-content-inactive"><div class="row mb-3"><div class="col-md-4"><input id="connectionFilter" class="form-control" placeholder="Filter connections..."></div></div><div id="networkConnections"></div></div>
                    <!-- Threads Tab -->
                    <div id="threads" class="tab-content-inactive"><div id="threadInfo"></div></div>
                    <!-- Environment Tab -->
                    <div id="environment" class="tab-content-inactive"><div class="row mb-3"><div class="col-md-4"><input id="envFilter" class="form-control" placeholder="Filter environment variables..."></div></div><div id="environmentVars"></div></div>
                    <!-- Process Tab -->
                    <div id="process" class="tab-content-inactive"><div class="row" id="processInfo"></div></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Jinja-injected process data
    const psutilData = {{ widget.process_dict|tojson }};

    // Format bytes to human-readable
    function formatBytes(bytes) {
        if (!bytes) return '0 B';
        const k = 1024, sizes = ['B','KB','MB','GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return (bytes / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];
    }

    // Parse arrays from psutil
    function parseMemoryInfo(arr) {
        return { rss: arr[0], vms: arr[1], shared: arr[2] };
    }
    function parseMemoryFullInfo(arr) {
        return {
            rss: arr[0], vms: arr[1], shared: arr[2], text: arr[3], lib: arr[4],
            data: arr[5], dirty: arr[6], uss: arr[7], pss: arr[8], swap: arr[9]
        };
    }

    // Generate summary cards
    function createSummaryCards() {
        const mem = parseMemoryInfo(psutilData.memory_info);
        const full = parseMemoryFullInfo(psutilData.memory_full_info);
        const cards = [
            { title: 'RSS Memory', metric: formatBytes(mem.rss), sub: `${(psutilData.memory_percent*100).toFixed(2)}% of system`, color: mem.rss>500e6?'red':mem.rss>200e6?'yellow':'green', icon:'ti-cpu' },
            { title: 'Virtual Memory', metric: formatBytes(mem.vms), sub: `Data: ${formatBytes(full.data)}`, color:'blue', icon:'ti-refresh' },
            { title: 'Threads', metric: psutilData.num_threads, sub: `${psutilData.threads.length} active`, color: psutilData.num_threads>50?'yellow':'green', icon:'ti-brand-threading' },
            { title: 'Connections', metric: psutilData.net_connections.length, sub: `${psutilData.num_fds} file descriptors`, color: psutilData.net_connections.length>20?'yellow':'green', icon:'ti-network' },
            { title: 'CPU Usage', metric: `${psutilData.cpu_percent}%`, sub: `${psutilData.cpu_num} cores`, color: psutilData.cpu_percent>80?'red':psutilData.cpu_percent>50?'yellow':'green', icon:'ti-activity' },
            { title: 'Unique Memory (USS)', metric: formatBytes(full.uss), sub: `PSS: ${formatBytes(full.pss)}`, color: full.uss>300e6?'red':full.uss>150e6?'yellow':'green', icon:'ti-lock' }
        ];
        const container = document.getElementById('summaryCards');
        container.innerHTML = cards.map(c=>`
            <div class="col-sm-6 col-lg-4"><div class="card card-hover"><div class="card-body">
                <div class="d-flex align-items-center"><div class="subheader">${c.title}</div><div class="ms-auto text-${c.color}"><i class="ti ${c.icon}"></i></div></div>
                <div class="h1 mb-3 metric-large text-${c.color}">${c.metric}</div>
                <div class="text-muted">${c.sub}</div>
            </div></div></div>
        `).join('');
    }

    // Memory maps
    let currentMaps = [];
    let sortDir = 'desc';
    function createMemoryMaps() {
        currentMaps = psutilData.memory_maps.map(arr=>({ path: arr[0], size: arr[1], rss: arr[2] }));
        currentMaps.sort((a,b)=>b.rss-a.rss);
        renderMemoryMaps();
    }
    function renderMemoryMaps() {
        const max = Math.max(...currentMaps.map(m=>m.rss));
        const container = document.getElementById('memoryMaps');
        container.innerHTML = currentMaps.map(m=>{
            const pct = (m.rss/max)*100;
            const disp = m.path.length>80? '...'+m.path.slice(-77):m.path;
            return `
                <div class="card mb-2 memory-item"><div class="card-body py-2">
                <div class="row align-items-center">
                  <div class="col"><div class="fw-bold text-truncate" title="${m.path}">${disp}</div>
                    <div class="memory-bar"><div class="memory-bar-fill" style="width:${pct}%"></div></div>
                  </div>
                  <div class="col-auto text-end"><div class="text-primary fw-bold">${formatBytes(m.rss)}</div><div class="text-muted small">Size: ${formatBytes(m.size)}</div></div>
                </div></div></div>
            `;
        }).join('');
    }
    function sortMemoryMaps(crit) {
        currentMaps.sort((a,b)=> sortDir==='desc'?(b[crit]-a[crit]):(a[crit]-b[crit]));
        sortDir = sortDir==='desc'?'asc':'desc'; renderMemoryMaps();
    }

    // Network connections
    function createNetworkConnections() {
        const container = document.getElementById('networkConnections');
        const items = psutilData.net_connections.map(c=>({ fd:c[0], local:c[3], remote:c[4], status:c[5] }));
        container.innerHTML = items.map(c=>`
            <div class="card mb-2 connection-item"><div class="card-body py-2">
              <div class="row align-items-center">
                <div class="col-md-2"><span class="badge bg-blue">FD ${c.fd}</span></div>
                <div class="col-md-3"><div class="text-muted small">Local</div>${c.local[0]}:${c.local[1]}</div>
                <div class="col-md-3"><div class="text-muted small">Remote</div>${c.remote.length?c.remote[0]+':'+c.remote[1]:'N/A'}</div>
                <div class="col-md-2"><span class="badge ${c.status==='ESTABLISHED'?'bg-green':c.status==='LISTEN'?'bg-blue':'bg-yellow'}">${c.status}</span></div>
                <div class="col-md-2 text-end">
                  ${c.remote[1]==5432?'<span class="badge bg-purple">PostgreSQL</span>':''}
                </div>
              </div></div></div>
        `).join('');
    }

    // Threads
    function createThreadInfo() {
        const container = document.getElementById('threadInfo');
        const arr = psutilData.threads.map(t=>({ id:t[0], user:t[1], sys:t[2] }));
        const totalUser = arr.reduce((sum,t)=>sum+t.user,0);
        const totalSys  = arr.reduce((sum,t)=>sum+t.sys,0);
        const cards = arr.sort((a,b)=> (b.user+b.sys)-(a.user+a.sys)).map(t=>{
            const tot = t.user+t.sys;
            const pct = totalUser? (t.user/totalUser)*100 : 0;
            return `<div class="card mb-2 thread-item"><div class="card-body py-2">
            <div class="row align-items-center">
              <div class="col-md-2"><span class="badge bg-yellow">TID ${t.id}</span></div>
              <div class="col-md-3"><div class="text-muted small">User Time</div><div class="fw-bold">${t.user.toFixed(2)}s</div></div>
              <div class="col-md-3"><div class="text-muted small">System Time</div><div class="fw-bold">${t.sys.toFixed(2)}s</div></div>
              <div class="col-md-2"><div class="text-muted small">Total</div><div class="fw-bold">${tot.toFixed(2)}s</div></div>
              <div class="col-md-2"><div class="progress"><div class="progress-bar" style="width:${pct}%"></div></div></div>
            </div></div></div>`;
        }).join('');
        container.innerHTML = `
          <div class="row mb-3">
            <div class="col-md-4"><div class="card"><div class="card-body text-center"><div class="text-muted">Total User Time</div><div class="h2 text-primary">${totalUser.toFixed(2)}s</div></div></div></div>
            <div class="col-md-4"><div class="card"><div class="card-body text-center"><div class="text-muted">Total System Time</div><div class="h2 text-warning">${totalSys.toFixed(2)}s</div></div></div></div>
            <div class="col-md-4"><div class="card"><div class="card-body text-center"><div class="text-muted">Active Threads</div><div class="h2 text-success">${psutilData.num_threads}</div></div></div></div>
          </div>` + cards;
    }

    // Environment
    function createEnvironmentVars() {
        const container = document.getElementById('environmentVars');
        container.innerHTML = Object.entries(psutilData.environ).map(([k,v])=>`
            <div class="card mb-1 env-var"><div class="card-body py-2"><div class="row">
              <div class="col-md-3"><span class="badge bg-blue text-truncate">${k}</span></div>
              <div class="col-md-9"><code class="text-muted">${v}</code></div>
            </div></div></div>
        `).join('');
    }

    // Process Info
    function createProcessInfo() {
        const mem = parseMemoryInfo(psutilData.memory_info);
        const full = parseMemoryFullInfo(psutilData.memory_full_info);
        document.getElementById('processInfo').innerHTML = `
          <div class="col-md-6"><div class="card"><div class="card-header"><h3 class="card-title"><i class="ti ti-info-circle me-2"></i>Process Details</h3></div><div class="card-body">
            <div class="row mb-2"><div class="col-5 text-muted">Process ID:</div><div class="col-7"><span class="badge bg-primary">${psutilData.pid}</span></div></div>
            <div class="row mb-2"><div class="col-5 text-muted">Parent PID:</div><div class="col-7"><span class="badge bg-secondary">${psutilData.ppid}</span></div></div>
            <div class="row mb-2"><div class="col-5 text-muted">Create Time:</div><div class="col-7">${new Date(psutilData.create_time*1000).toLocaleString()}</div></div>
            <div class="row mb-2"><div class="col-5 text-muted">Name:</div><div class="col-7"><code>${psutilData.name}</code></div></div>
            <div class="row mb-2"><div class="col-5 text-muted">Executable:</div><div class="col-7"><code>${psutilData.exe}</code></div></div>
            <div class="row mb-2"><div class="col-5 text-muted">CWD:</div><div class="col-7"><code>${psutilData.cwd}</code></div></div>
            <div class="row mb-2"><div class="col-5 text-muted">Status:</div><div class="col-7"><span class="badge bg-success">${psutilData.status}</span></div></div>
            <div class="row mb-2"><div class="col-5 text-muted">User:</div><div class="col-7"><span class="badge bg-info">${psutilData.username}</span></div></div>
          </div></div></div>
          <div class="col-md-6"><div class="card"><div class="card-header"><h3 class="card-title"><i class="ti ti-cpu me-2"></i>Memory Breakdown</h3></div><div class="card-body">
            <div class="row mb-2"><div class="col-5 text-muted">RSS:</div><div class="col-7 fw-bold text-primary">${formatBytes(full.rss)}</div></div>
            <div class="row mb-2"><div class="col-5 text-muted">VMS:</div><div class="col-7 fw-bold text-blue">${formatBytes(full.vms)}</div></div>
            <div class="row mb-2"><div class="col-5 text-muted">USS:</div><div class="col-7 fw-bold text-green">${formatBytes(full.uss)}</div></div>
            <div class="row mb-2"><div class="col-5 text-muted">PSS:</div><div class="col-7 fw-bold text-orange">${formatBytes(full.pss)}</div></div>
            <div class="row mb-2"><div class="col-5 text-muted">Shared:</div><div class="col-7 fw-bold text-purple">${formatBytes(full.shared)}</div></div>
            <div class="row mb-2"><div class="col-5 text-muted">Memory %:</div><div class="col-7"><div class="progress"><div class="progress-bar" style="width:${(psutilData.memory_percent*100)}%"></div></div><small class="text-muted">${(psutilData.memory_percent*100).toFixed(2)}%</small></div></div>
          </div></div></div>
          <div class="col-12 mt-3"><div class="card"><div class="card-header"><h3 class="card-title"><i class="ti ti-terminal me-2"></i>Command Line</h3></div><div class="card-body"><code class="d-block p-2 bg-light rounded">${psutilData.cmdline.join(' ')}</code></div></div></div>
        `;
    }

    // Tab switcher and filters
    function showTab(name) {
        document.querySelectorAll('.tab-content-active, .tab-content-inactive').forEach(t=>t.className='tab-content-inactive');
        document.getElementById(name).className='tab-content-active';
        document.querySelectorAll('.nav-link').forEach(l=>l.classList.remove('active'));
        document.querySelector(`[href=\"#${name}\"]`).classList.add('active');
    }
    function setupFilters() {
        document.getElementById('memoryFilter').addEventListener('input',e=>{
            const f=e.target.value.toLowerCase(); currentMaps = currentMaps.filter(m=>m.path.toLowerCase().includes(f)); renderMemoryMaps();
        });
        document.getElementById('connectionFilter').addEventListener('input',e=>{
            const f=e.target.value.toLowerCase(); document.querySelectorAll('.connection-item').forEach(el=>el.style.display=el.textContent.toLowerCase().includes(f)?'block':'none');
        });
        document.getElementById('envFilter').addEventListener('input',e=>{
            const f=e.target.value.toLowerCase(); document.querySelectorAll('.env-var').forEach(el=>el.style.display=el.textContent.toLowerCase().includes(f)?'block':'none');
        });
    }

    // Initialize
    document.addEventListener('DOMContentLoaded',()=>{
        createSummaryCards(); createMemoryMaps(); createNetworkConnections(); createThreadInfo(); createEnvironmentVars(); createProcessInfo(); setupFilters();
    });
</script>
