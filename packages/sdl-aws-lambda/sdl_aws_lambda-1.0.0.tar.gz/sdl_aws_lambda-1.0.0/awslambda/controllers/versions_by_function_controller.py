# -*- coding: utf-8 -*-

"""
awslambda

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from awslambda.api_helper import APIHelper
from awslambda.configuration import Server
from awslambda.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awslambda.http.http_method_enum import HttpMethodEnum


class VersionsByFunctionController(BaseController):

    """A Controller to access Endpoints in the awslambda API."""
    def __init__(self, config):
        super(VersionsByFunctionController, self).__init__(config)

    def list_versions_by_function(self,
                                  function_name,
                                  marker,
                                  max_items,
                                  action):
        """Does a GET request to /.

        Args:
            function_name (str): The name of the Lambda function.
            marker (str): Specify the pagination token that's returned by a
                previous request to retrieve the                              
                next page of results.
            max_items (str): Limit the number of versions that are returned.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FunctionName')
                         .value(function_name))
            .query_param(Parameter()
                         .key('Marker')
                         .value(marker))
            .query_param(Parameter()
                         .key('MaxItems')
                         .value(max_items))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()
