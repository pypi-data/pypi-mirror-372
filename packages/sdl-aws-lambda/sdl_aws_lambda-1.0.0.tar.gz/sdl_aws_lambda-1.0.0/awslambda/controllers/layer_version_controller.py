# -*- coding: utf-8 -*-

"""
awslambda

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from awslambda.api_helper import APIHelper
from awslambda.configuration import Server
from awslambda.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awslambda.http.http_method_enum import HttpMethodEnum


class LayerVersionController(BaseController):

    """A Controller to access Endpoints in the awslambda API."""
    def __init__(self, config):
        super(LayerVersionController, self).__init__(config)

    def delete_layer_version(self,
                             layer_name,
                             version_number,
                             action):
        """Does a GET request to /.

        Args:
            layer_name (str): The name or Amazon Resource Name (ARN) of the
                layer.
            version_number (str): The version number.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('LayerName')
                         .value(layer_name))
            .query_param(Parameter()
                         .key('VersionNumber')
                         .value(version_number))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def get_layer_version(self,
                          layer_name,
                          version_number,
                          action):
        """Does a GET request to /.

        Args:
            layer_name (str): The name or Amazon Resource Name (ARN) of the
                layer.
            version_number (str): The version number.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('LayerName')
                         .value(layer_name))
            .query_param(Parameter()
                         .key('VersionNumber')
                         .value(version_number))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def list_layer_versions(self,
                            compatible_runtime,
                            layer_name,
                            marker,
                            max_items,
                            action):
        """Does a GET request to /.

        Args:
            compatible_runtime (str): A runtime identifier. For example, go1.x.
            layer_name (str): The name or Amazon Resource Name (ARN) of the
                layer.
            marker (str): A pagination token returned by a previous call.
            max_items (str): The maximum number of versions to return.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('CompatibleRuntime')
                         .value(compatible_runtime))
            .query_param(Parameter()
                         .key('LayerName')
                         .value(layer_name))
            .query_param(Parameter()
                         .key('Marker')
                         .value(marker))
            .query_param(Parameter()
                         .key('MaxItems')
                         .value(max_items))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def publish_layer_version(self,
                              layer_name,
                              action):
        """Does a GET request to /.

        Args:
            layer_name (str): The name or Amazon Resource Name (ARN) of the
                layer.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('LayerName')
                         .value(layer_name))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()
