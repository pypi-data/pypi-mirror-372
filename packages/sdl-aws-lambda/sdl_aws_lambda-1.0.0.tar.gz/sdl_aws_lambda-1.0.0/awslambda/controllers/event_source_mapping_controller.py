# -*- coding: utf-8 -*-

"""
awslambda

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from awslambda.api_helper import APIHelper
from awslambda.configuration import Server
from awslambda.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awslambda.http.http_method_enum import HttpMethodEnum


class EventSourceMappingController(BaseController):

    """A Controller to access Endpoints in the awslambda API."""
    def __init__(self, config):
        super(EventSourceMappingController, self).__init__(config)

    def create_event_source_mapping(self,
                                    batch_size,
                                    enabled,
                                    event_source_arn,
                                    function_name,
                                    maximum_batching_window_in_seconds,
                                    starting_position,
                                    starting_position_timestamp,
                                    action):
        """Does a GET request to /.

        Args:
            batch_size (str): The maximum number of items to retrieve in a
                single batch.
            enabled (str): Disables the event source mapping to pause polling
                and invocation.
            event_source_arn (str): The Amazon Resource Name (ARN) of the
                event source.
            function_name (str): The name of the Lambda function.
            maximum_batching_window_in_seconds (str): The maximum amount of
                time to gather records before invoking the function, in
                seconds.
            starting_position (str): The position in a stream from which to
                start reading. Required for Amazon Kinesis                    
                and Amazon DynamoDB Streams                                
                sources. AT_TIMESTAMP is only supported for Amazon Kinesis
                streams.
            starting_position_timestamp (str): With StartingPosition set to
                AT_TIMESTAMP, the time from which to start                    
                reading, in Unix time seconds.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('BatchSize')
                         .value(batch_size))
            .query_param(Parameter()
                         .key('Enabled')
                         .value(enabled))
            .query_param(Parameter()
                         .key('EventSourceArn')
                         .value(event_source_arn))
            .query_param(Parameter()
                         .key('FunctionName')
                         .value(function_name))
            .query_param(Parameter()
                         .key('MaximumBatchingWindowInSeconds')
                         .value(maximum_batching_window_in_seconds))
            .query_param(Parameter()
                         .key('StartingPosition')
                         .value(starting_position))
            .query_param(Parameter()
                         .key('StartingPositionTimestamp')
                         .value(starting_position_timestamp))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def delete_event_source_mapping(self,
                                    uuid,
                                    action):
        """Does a GET request to /.

        Args:
            uuid (str): The identifier of the event source mapping.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('UUID')
                         .value(uuid))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def get_event_source_mapping(self,
                                 uuid,
                                 action):
        """Does a GET request to /.

        Args:
            uuid (str): The identifier of the event source mapping.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('UUID')
                         .value(uuid))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def list_event_source_mappings(self,
                                   event_source_arn,
                                   function_name,
                                   marker,
                                   max_items,
                                   action):
        """Does a GET request to /.

        Args:
            event_source_arn (str): The Amazon Resource Name (ARN) of the
                event source.
            function_name (str): The name of the Lambda function.
            marker (str): A pagination token returned by a previous call.
            max_items (str): The maximum number of event source mappings to
                return.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('EventSourceArn')
                         .value(event_source_arn))
            .query_param(Parameter()
                         .key('FunctionName')
                         .value(function_name))
            .query_param(Parameter()
                         .key('Marker')
                         .value(marker))
            .query_param(Parameter()
                         .key('MaxItems')
                         .value(max_items))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def update_event_source_mapping(self,
                                    uuid,
                                    action):
        """Does a GET request to /.

        Args:
            uuid (str): The identifier of the event source mapping.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('UUID')
                         .value(uuid))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()
