# -*- coding: utf-8 -*-

"""
awslambda

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from awslambda.api_helper import APIHelper
from awslambda.configuration import Server
from awslambda.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awslambda.http.http_method_enum import HttpMethodEnum


class FunctionController(BaseController):

    """A Controller to access Endpoints in the awslambda API."""
    def __init__(self, config):
        super(FunctionController, self).__init__(config)

    def create_function(self,
                        code,
                        dead_letter_config,
                        description,
                        environment,
                        function_name,
                        handler,
                        kms_key_arn,
                        layers,
                        memory_size,
                        publish,
                        role,
                        runtime,
                        tags,
                        timeout,
                        tracing_config,
                        vpc_config,
                        action):
        """Does a GET request to /.

        Args:
            code (str): The code for the function.
            dead_letter_config (str): A dead letter queue configuration that
                specifies the queue or topic where Lambda sends               
                asynchronous events                                 when they
                fail processing. For more information, see Dead Letter Queues.
            description (str): A description of the function.
            environment (str): Environment variables that are accessible from
                function code during execution.
            function_name (str): The name of the Lambda function.
            handler (str): The name of the method within your code that Lambda
                calls to execute your function.                               
                The format includes the                                 file
                name. It can also include namespaces and other qualifiers,
                depending on the runtime.                                 For
                more information,                                 see
                Programming Model.
            kms_key_arn (str): The ARN of the AWS Key Management Service (AWS
                KMS) key that's used to encrypt your                          
                function's environment                                
                variables. If it's not provided, AWS Lambda uses a default
                service key.
            layers (str): A list of function layers                           
                to add to the function's execution environment. Specify each
                layer by its ARN, including                                
                the version.
            memory_size (str): The amount of memory that your function has
                access to. Increasing the function's memory                   
                also increases its CPU                                
                allocation. The default value is 128 MB. The value must be a
                multiple of 64 MB.
            publish (str): Set to true to publish the first version of the
                function during creation.
            role (str): The Amazon Resource Name (ARN) of the function's
                execution role.
            runtime (str): The identifier of the function's runtime.
            tags (str): A list of tags to apply to the                        
                function.
            timeout (str): The amount of time that Lambda allows a function to
                run before stopping it. The default                           
                is 3 seconds. The                                 maximum
                allowed value is 900 seconds.
            tracing_config (str): Set Mode to Active to sample and trace a
                subset of incoming requests with AWS                          
                X-Ray.
            vpc_config (str): For network connectivity to AWS resources in a
                VPC, specify a list of security groups                        
                and subnets in the VPC.                                 When
                you connect a function to a VPC, it can only access resources
                and the internet                                 through that
                VPC. For more                                 information, see
                VPC Settings.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Code')
                         .value(code))
            .query_param(Parameter()
                         .key('DeadLetterConfig')
                         .value(dead_letter_config))
            .query_param(Parameter()
                         .key('Description')
                         .value(description))
            .query_param(Parameter()
                         .key('Environment')
                         .value(environment))
            .query_param(Parameter()
                         .key('FunctionName')
                         .value(function_name))
            .query_param(Parameter()
                         .key('Handler')
                         .value(handler))
            .query_param(Parameter()
                         .key('KMSKeyArn')
                         .value(kms_key_arn))
            .query_param(Parameter()
                         .key('Layers')
                         .value(layers))
            .query_param(Parameter()
                         .key('MemorySize')
                         .value(memory_size))
            .query_param(Parameter()
                         .key('Publish')
                         .value(publish))
            .query_param(Parameter()
                         .key('Role')
                         .value(role))
            .query_param(Parameter()
                         .key('Runtime')
                         .value(runtime))
            .query_param(Parameter()
                         .key('Tags')
                         .value(tags))
            .query_param(Parameter()
                         .key('Timeout')
                         .value(timeout))
            .query_param(Parameter()
                         .key('TracingConfig')
                         .value(tracing_config))
            .query_param(Parameter()
                         .key('VpcConfig')
                         .value(vpc_config))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def delete_function(self,
                        function_name,
                        qualifier,
                        action):
        """Does a GET request to /.

        Args:
            function_name (str): The name of the Lambda function or version.
            qualifier (str): Specify a version to delete. You can't delete a
                version that's referenced by an alias.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FunctionName')
                         .value(function_name))
            .query_param(Parameter()
                         .key('Qualifier')
                         .value(qualifier))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def get_function(self,
                     function_name,
                     qualifier,
                     action):
        """Does a GET request to /.

        Args:
            function_name (str): The name of the Lambda function, version, or
                alias.
            qualifier (str): Specify a version or alias to get details about a
                published version of the function.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FunctionName')
                         .value(function_name))
            .query_param(Parameter()
                         .key('Qualifier')
                         .value(qualifier))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()

    def list_functions(self,
                       function_version,
                       marker,
                       master_region,
                       max_items,
                       action):
        """Does a GET request to /.

        Args:
            function_version (str): Set to ALL to include entries for all
                published versions of each function.
            marker (str): Specify the pagination token that's returned by a
                previous request to retrieve the                              
                next page of results.
            master_region (str): For Lambda@Edge functions, the AWS Region of
                the master function. For example, us-east-2 or                
                ALL. If specified, you must set FunctionVersion to ALL.
            max_items (str): Specify a value between 1 and 50 to limit the
                number of functions in the response.
            action (str): The request query parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('FunctionVersion')
                         .value(function_version))
            .query_param(Parameter()
                         .key('Marker')
                         .value(marker))
            .query_param(Parameter()
                         .key('MasterRegion')
                         .value(master_region))
            .query_param(Parameter()
                         .key('MaxItems')
                         .value(max_items))
            .query_param(Parameter()
                         .key('Action')
                         .value(action))
        ).execute()
