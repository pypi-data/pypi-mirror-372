# -*- coding: utf-8 -*-

"""
awslambda

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from awslambda.configuration import Configuration
from awslambda.controllers.base_controller import BaseController
from awslambda.configuration import Environment
from awslambda.controllers.account_settings_controller\
    import AccountSettingsController
from awslambda.controllers.alias_controller import AliasController
from awslambda.controllers.aliases_controller import AliasesController
from awslambda.controllers.async_controller import AsyncController
from awslambda.controllers.event_source_mapping_controller\
    import EventSourceMappingController
from awslambda.controllers.function_controller import FunctionController
from awslambda.controllers.function_code_controller\
    import FunctionCodeController
from awslambda.controllers.function_concurrency_controller\
    import FunctionConcurrencyController
from awslambda.controllers.function_configuration_controller\
    import FunctionConfigurationController
from awslambda.controllers.layer_version_controller\
    import LayerVersionController
from awslambda.controllers.layer_version_by_arn_controller\
    import LayerVersionByArnController
from awslambda.controllers.layer_version_permission_controller\
    import LayerVersionPermissionController
from awslambda.controllers.layer_version_policy_controller\
    import LayerVersionPolicyController
from awslambda.controllers.layers_controller import LayersController
from awslambda.controllers.permission_controller import PermissionController
from awslambda.controllers.policy_controller import PolicyController
from awslambda.controllers.resource_controller import ResourceController
from awslambda.controllers.tags_controller import TagsController
from awslambda.controllers.version_controller import VersionController
from awslambda.controllers.versions_by_function_controller\
    import VersionsByFunctionController
from awslambda.controllers.misc_controller import MiscController


class AwslambdaClient(object):
    @LazyProperty
    def account_settings(self):
        return AccountSettingsController(self.global_configuration)

    @LazyProperty
    def alias(self):
        return AliasController(self.global_configuration)

    @LazyProperty
    def aliases(self):
        return AliasesController(self.global_configuration)

    @LazyProperty
    def masync(self):
        return AsyncController(self.global_configuration)

    @LazyProperty
    def event_source_mapping(self):
        return EventSourceMappingController(self.global_configuration)

    @LazyProperty
    def function(self):
        return FunctionController(self.global_configuration)

    @LazyProperty
    def function_code(self):
        return FunctionCodeController(self.global_configuration)

    @LazyProperty
    def function_concurrency(self):
        return FunctionConcurrencyController(self.global_configuration)

    @LazyProperty
    def function_configuration(self):
        return FunctionConfigurationController(self.global_configuration)

    @LazyProperty
    def layer_version(self):
        return LayerVersionController(self.global_configuration)

    @LazyProperty
    def layer_version_by_arn(self):
        return LayerVersionByArnController(self.global_configuration)

    @LazyProperty
    def layer_version_permission(self):
        return LayerVersionPermissionController(self.global_configuration)

    @LazyProperty
    def layer_version_policy(self):
        return LayerVersionPolicyController(self.global_configuration)

    @LazyProperty
    def layers(self):
        return LayersController(self.global_configuration)

    @LazyProperty
    def permission(self):
        return PermissionController(self.global_configuration)

    @LazyProperty
    def policy(self):
        return PolicyController(self.global_configuration)

    @LazyProperty
    def resource(self):
        return ResourceController(self.global_configuration)

    @LazyProperty
    def tags(self):
        return TagsController(self.global_configuration)

    @LazyProperty
    def version(self):
        return VersionController(self.global_configuration)

    @LazyProperty
    def versions_by_function(self):
        return VersionsByFunctionController(self.global_configuration)

    @LazyProperty
    def misc(self):
        return MiscController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

