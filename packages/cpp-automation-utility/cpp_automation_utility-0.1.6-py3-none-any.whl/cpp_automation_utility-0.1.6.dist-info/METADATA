Metadata-Version: 2.3
Name: cpp-automation-utility
Version: 0.1.6
Summary: CLI utility to assist C++ in a devops environment
License: MIT
Author: AldridgeSoftwareDesigns
Requires-Python: >=3.10,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: attrs (>=23.2.0,<24.0.0)
Requires-Dist: click (>=8.1.7,<9.0.0)
Requires-Dist: gitpython (>=3.1.43,<4.0.0)
Requires-Dist: importlib-metadata (>=8.7.0,<9.0.0)
Requires-Dist: jinja2 (>=3.1.4,<4.0.0)
Requires-Dist: lcov-cobertura (>=2.0.2,<3.0.0)
Requires-Dist: rich (>=13.7.1,<14.0.0)
Requires-Dist: tomli (>=2.0.1,<3.0.0)
Description-Content-Type: text/markdown

# CAU

CAU stands for **C**++ **A**utomation **U**tility and is pronounced  like *cow* :cow2:. The purpose is to provide templates and CLI scripts to instantiate/manage/run C++ projects in a devops environment. CAU covers common functionality across projects like:

* Running a static analyzer (`clang-tidy`)
* Running a memory leak test (`valgrind`)
* Running unit tests
* Restore dependencies (`conan`)
* Building the project (`conan` and `cmake`)
* Providing CI/CD templates for `gitlab`

The scope of CAU is really meant for how we do C++ projects at AldridgeSoftwareDesigns. As such, mileage may vary when applying to projects outside the "standard" configuration for an AldridgeSoftwareDesigns C++ project.

