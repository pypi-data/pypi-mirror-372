"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from glean.api_client.types import BaseModel
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class DocumentSpecUgcType(str, Enum):
    r"""The type of the user generated content (UGC datasource)."""

    ANNOUNCEMENTS = "ANNOUNCEMENTS"
    ANSWERS = "ANSWERS"
    COLLECTIONS = "COLLECTIONS"
    SHORTCUTS = "SHORTCUTS"


class DocumentSpec3TypedDict(TypedDict):
    ugc_type: NotRequired[DocumentSpecUgcType]
    r"""The type of the user generated content (UGC datasource)."""
    content_id: NotRequired[int]
    r"""The id for user generated content."""
    doc_type: NotRequired[str]
    r"""The specific type of the user generated content type."""


class DocumentSpec3(BaseModel):
    ugc_type: Annotated[
        Optional[DocumentSpecUgcType], pydantic.Field(alias="ugcType")
    ] = None
    r"""The type of the user generated content (UGC datasource)."""

    content_id: Annotated[Optional[int], pydantic.Field(alias="contentId")] = None
    r"""The id for user generated content."""

    doc_type: Annotated[Optional[str], pydantic.Field(alias="docType")] = None
    r"""The specific type of the user generated content type."""


class DocumentSpec2TypedDict(TypedDict):
    id: NotRequired[str]
    r"""The ID of the document."""


class DocumentSpec2(BaseModel):
    id: Optional[str] = None
    r"""The ID of the document."""


class DocumentSpec1TypedDict(TypedDict):
    url: NotRequired[str]
    r"""The URL of the document."""


class DocumentSpec1(BaseModel):
    url: Optional[str] = None
    r"""The URL of the document."""


DocumentSpecUnionTypedDict = TypeAliasType(
    "DocumentSpecUnionTypedDict",
    Union[DocumentSpec1TypedDict, DocumentSpec2TypedDict, DocumentSpec3TypedDict],
)


DocumentSpecUnion = TypeAliasType(
    "DocumentSpecUnion", Union[DocumentSpec1, DocumentSpec2, DocumentSpec3]
)
