[project]
name = "ai_app"
version = "0.1.4"
description = "AI web app for internal corporate use"
readme = "README.md"
requires-python = ">=3.12,<3.13"
dependencies = [
    "atlassian-python-api>=3.41.19",
    "authlib>=1.5.2",
    "bidict>=0.23.1",
    "bir-mcp==0.3.13",
    "cachetools>=5.5.2",
    "gradio>=5.18.0",
    "httpx>=0.28.1",
    "itsdangerous>=2.2.0",
    "langchain>=0.3.19",
    "langchain-community>=0.3.18",
    "langchain-google-genai>=2.0.11",
    "langchain-openai>=0.3.7",
    "langchain-postgres>=0.0.15",
    "langgraph>=0.3.5",
    "langsmith>=0.3.11",
    "limits>=5.2.0",
    "logfire[fastapi,httpx,sqlalchemy,system-metrics]>=3.17.0",
    "pgvector>=0.3.6",
    "polars>=1.23.0",
    "presidio-analyzer>=2.2.358",
    "presidio-anonymizer>=2.2.358",
    "psycopg[binary,pool]>=3.2.9",
    "py-consul>=1.5.4",
    "python-gitlab[graphql]>=5.6.0",
    "sqlmodel>=0.0.24",
    # Non essential dependencies, consider making them optional, check where they get imported.
    "alembic>=1.16.2",
    "google-api-python-client>=2.164.0",
    "google-auth-oauthlib>=1.2.1",
    "google-cloud-iam>=2.18.1",
    "langchain-anthropic>=0.3.16",
    "typer>=0.16.0",
    "pip>=25.1.1",
    "sqlalchemy[asyncio]>=2.0.41",
    "lxml>=6.0.0",
]

[project.optional-dependencies]
# https://docs.astral.sh/uv/concepts/projects/dependencies/#optional-dependencies
extra = [
    "langchain-chroma>=0.2.2",                   # For vector database.
    "langchain-huggingface>=0.1.2",
    "scipy>=1.16.0",                             # For local torch models.
    "zyphra>=0.1.4",                             # For local voice models.
    "llama-index>=0.12.42",
    "llama-index-vector-stores-postgres>=0.5.3",
    "oracledb>=3.1.1",
]


[dependency-groups]
# https://docs.astral.sh/uv/concepts/projects/dependencies/#development-dependencies
dev = [
    "grandalf>=0.8",
    "great-tables>=0.17.0",
    "jinja2>=3.1.6",
    "jupyter>=1.1.1",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-repeat>=0.9.4",
    "prefect>=3.4.6",
]

[tool.uv]
package = true

[project.scripts]
ai_app = "launch_app:main"

[tool.ruff.lint]
# Ignore unused imports in __init__.py files
per-file-ignores = { "**/__init__.py" = ["F401"] }
# E - pycodestyle, F - pyflakes, I - isort
select = ["E", "F", "I"]

[tool.ruff.lint.isort]
known-first-party = ["ai_app"]
known-third-party = ["alembic"]

[tool.pytest.ini_options]
filterwarnings = [
    # Format: action:message_regex:category:module_regex:lineno

    # Ignore websockets.legacy deprecation
    "ignore:websockets.legacy is deprecated:DeprecationWarning",
    "ignore:websockets.server.WebSocketServerProtocol is deprecated:DeprecationWarning",

    # Ignore pydantic field name shadowing warning
    # Using a more robust substring match for the message to avoid issues with quotes.
    # You can try the full message, but escape internal quotes:
    # "ignore:Field name \"schema\" in \"GraphqlGlobalId\" shadows an attribute in parent \"PydanticForbidExtra\":UserWarning:pydantic._internal._fields"
    # A more robust way if the above is tricky due to quotes or minor message changes:
    "ignore:Field name .* shadows an attribute in parent:UserWarning:pydantic._internal._fields",

    # Ignore gradio 'no current event loop'
    "ignore:There is no current event loop:DeprecationWarning:gradio.utils",

    # Ignore httpx verify=<str> deprecation
    # The message contains backticks, which should be fine for string matching.
    # If it were treated as a complex regex, they might need escaping, but usually not for simple message parts.
    "ignore:`verify=<str>` is deprecated.:DeprecationWarning:httpx._config",

    # Ignore starlette route deprecation
    "ignore:The `route` decorator is deprecated, and will be removed in version 1.0.0:DeprecationWarning:starlette.applications",

    "ignore:Importing chat models from langchain is deprecated:DeprecationWarning:langchain.chat_models",
    "ignore:Importing tools from langchain is deprecated:DeprecationWarning:langchain.tools",
]
