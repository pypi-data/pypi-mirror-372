from ..flint_base.flint_base import flint_scalar
from .fmpz import fmpz
from .fmpq import fmpq

_str = str
ifmpz = int | fmpz
ifmpq = int | fmpz | fmpq
inmod = int | fmpz | fmpq | nmod

class nmod(flint_scalar):
    def __init__(self, val: inmod, mod: int): ...

    def modulus(self) -> int: ...

    def str(self, base: int = 10, condense: int = 0) -> _str: ...
    def repr(self) -> _str: ...

    def __str__(self) -> _str: ...
    def __repr__(self) -> _str: ...

    def __int__(self) -> int: ...

    def __neg__(self) -> nmod: ...
    def __pos__(self) -> nmod: ...
    def __add__(self, other: inmod, /) -> nmod: ...
    def __radd__(self, other: ifmpq, /) -> nmod: ...
    def __sub__(self, other: inmod, /) -> nmod: ...
    def __rsub__(self, other: ifmpq, /) -> nmod: ...
    def __mul__(self, other: inmod, /) -> nmod: ...
    def __rmul__(self, other: ifmpq, /) -> nmod: ...
    def __truediv__(self, other: inmod, /) -> nmod: ...
    def __rtruediv__(self, other: ifmpq, /) -> nmod: ...
    def __pow__(self, other: ifmpz, /) -> nmod: ...

    def __invert__(self) -> nmod: ...

    def sqrt(self) -> nmod: ...
