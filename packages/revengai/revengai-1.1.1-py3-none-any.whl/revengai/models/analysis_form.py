# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from revengai.models.app_api_rest_v1_analyse_schema_model_name import AppApiRestV1AnalyseSchemaModelName
from revengai.models.app_api_rest_v1_analyse_schema_symbols import AppApiRestV1AnalyseSchemaSymbols
from revengai.models.file_options import FileOptions
from revengai.models.isa_options import IsaOptions
from revengai.models.platform_options import PlatformOptions
from typing import Optional, Set
from typing_extensions import Self

class AnalysisForm(BaseModel):
    """
    Form Model for receiving the analysis request
    """ # noqa: E501
    model_name: AppApiRestV1AnalyseSchemaModelName
    platform_options: Optional[PlatformOptions] = None
    isa_options: Optional[IsaOptions] = None
    file_options: Optional[FileOptions] = None
    dynamic_execution: Optional[StrictBool] = False
    tags: Optional[List[StrictStr]] = None
    binary_scope: Optional[StrictStr] = 'PRIVATE'
    symbols: Optional[AppApiRestV1AnalyseSchemaSymbols] = None
    file_name: Optional[StrictStr] = 'empty'
    command_line_args: Optional[StrictStr] = ''
    priority: Optional[StrictInt] = 0
    sha_256_hash: Optional[StrictStr] = ''
    debug_hash: Optional[StrictStr] = None
    size_in_bytes: StrictInt
    skip_scraping: Optional[StrictBool] = False
    skip_cves: Optional[StrictBool] = False
    skip_sbom: Optional[StrictBool] = False
    skip_capabilities: Optional[StrictBool] = False
    ignore_cache: Optional[StrictBool] = False
    advanced_analysis: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["model_name", "platform_options", "isa_options", "file_options", "dynamic_execution", "tags", "binary_scope", "symbols", "file_name", "command_line_args", "priority", "sha_256_hash", "debug_hash", "size_in_bytes", "skip_scraping", "skip_cves", "skip_sbom", "skip_capabilities", "ignore_cache", "advanced_analysis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalysisForm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of symbols
        if self.symbols:
            _dict['symbols'] = self.symbols.to_dict()
        # set to None if debug_hash (nullable) is None
        # and model_fields_set contains the field
        if self.debug_hash is None and "debug_hash" in self.model_fields_set:
            _dict['debug_hash'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalysisForm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_name": obj.get("model_name"),
            "platform_options": obj.get("platform_options"),
            "isa_options": obj.get("isa_options"),
            "file_options": obj.get("file_options"),
            "dynamic_execution": obj.get("dynamic_execution") if obj.get("dynamic_execution") is not None else False,
            "tags": obj.get("tags"),
            "binary_scope": obj.get("binary_scope") if obj.get("binary_scope") is not None else 'PRIVATE',
            "symbols": AppApiRestV1AnalyseSchemaSymbols.from_dict(obj["symbols"]) if obj.get("symbols") is not None else None,
            "file_name": obj.get("file_name") if obj.get("file_name") is not None else 'empty',
            "command_line_args": obj.get("command_line_args") if obj.get("command_line_args") is not None else '',
            "priority": obj.get("priority") if obj.get("priority") is not None else 0,
            "sha_256_hash": obj.get("sha_256_hash") if obj.get("sha_256_hash") is not None else '',
            "debug_hash": obj.get("debug_hash"),
            "size_in_bytes": obj.get("size_in_bytes"),
            "skip_scraping": obj.get("skip_scraping") if obj.get("skip_scraping") is not None else False,
            "skip_cves": obj.get("skip_cves") if obj.get("skip_cves") is not None else False,
            "skip_sbom": obj.get("skip_sbom") if obj.get("skip_sbom") is not None else False,
            "skip_capabilities": obj.get("skip_capabilities") if obj.get("skip_capabilities") is not None else False,
            "ignore_cache": obj.get("ignore_cache") if obj.get("ignore_cache") is not None else False,
            "advanced_analysis": obj.get("advanced_analysis") if obj.get("advanced_analysis") is not None else False
        })
        return _obj


