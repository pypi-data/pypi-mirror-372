# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.analysis_form import AnalysisForm

class TestAnalysisForm(unittest.TestCase):
    """AnalysisForm unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalysisForm:
        """Test AnalysisForm
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalysisForm`
        """
        model = AnalysisForm()
        if include_optional:
            return AnalysisForm(
                model_name = 'binnet-0.5-x86-windows',
                platform_options = 'Auto',
                isa_options = 'Auto',
                file_options = 'Auto',
                dynamic_execution = True,
                tags = [
                    ''
                    ],
                binary_scope = 'PRIVATE',
                symbols = revengai.models.symbols.Symbols(
                    base_addr = 56, 
                    functions = [
                        revengai.models.user_boundaries.UserBoundaries(
                            name = '', 
                            start_addr = 56, 
                            end_addr = 56, )
                        ], ),
                file_name = 'empty',
                command_line_args = '',
                priority = 56,
                sha_256_hash = '',
                debug_hash = '',
                size_in_bytes = 56,
                skip_scraping = True,
                skip_cves = True,
                skip_sbom = True,
                skip_capabilities = True,
                ignore_cache = True,
                advanced_analysis = True
            )
        else:
            return AnalysisForm(
                model_name = 'binnet-0.5-x86-windows',
                size_in_bytes = 56,
        )
        """

    def testAnalysisForm(self):
        """Test AnalysisForm"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
