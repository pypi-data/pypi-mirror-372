# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.outliersenginev3_outlier_type_stats import Outliersenginev3OutlierTypeStats
from typing import Optional, Set
from typing_extensions import Self

class Outliersenginev3OutliersStats(BaseModel):
    """
    Statistics of the types of outliers found during various time periods.
    """ # noqa: E501
    outlier_type_stats_1h: Optional[List[Outliersenginev3OutlierTypeStats]] = Field(default=None, description="Types of outliers found in the last hour.")
    outlier_type_stats_24h: Optional[List[Outliersenginev3OutlierTypeStats]] = Field(default=None, description="Types of outliers found in the past 24 hours.")
    __properties: ClassVar[List[str]] = ["outlier_type_stats_1h", "outlier_type_stats_24h"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Outliersenginev3OutliersStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in outlier_type_stats_1h (list)
        _items = []
        if self.outlier_type_stats_1h:
            for _item in self.outlier_type_stats_1h:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outlier_type_stats_1h'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outlier_type_stats_24h (list)
        _items = []
        if self.outlier_type_stats_24h:
            for _item in self.outlier_type_stats_24h:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outlier_type_stats_24h'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Outliersenginev3OutliersStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "outlier_type_stats_1h": [Outliersenginev3OutlierTypeStats.from_dict(_item) for _item in obj["outlier_type_stats_1h"]] if obj.get("outlier_type_stats_1h") is not None else None,
            "outlier_type_stats_24h": [Outliersenginev3OutlierTypeStats.from_dict(_item) for _item in obj["outlier_type_stats_24h"]] if obj.get("outlier_type_stats_24h") is not None else None
        })
        return _obj


