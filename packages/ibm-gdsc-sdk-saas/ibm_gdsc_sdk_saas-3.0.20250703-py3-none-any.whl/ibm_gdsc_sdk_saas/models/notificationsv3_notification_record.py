# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.notificationsv3_notification_severity import Notificationsv3NotificationSeverity
from ibm_gdsc_sdk_saas.models.notificationsv3_notification_state import Notificationsv3NotificationState
from typing import Optional, Set
from typing_extensions import Self

class Notificationsv3NotificationRecord(BaseModel):
    """
    A notifications record indicates who, what, when, where, and why something happened and presents it  to the user in a meaningful way.
    """ # noqa: E501
    creation_time: Optional[datetime] = Field(default=None, description="The time the notification record was created (when).")
    event_end_time: Optional[datetime] = Field(default=None, description="The time the associated event(s) completed.")
    event_start_time: Optional[datetime] = Field(default=None, description="The time the associated event(s) were initiated.")
    href: Optional[StrictStr] = Field(default=None, description="URL for details of the notification.")
    id: Optional[StrictStr] = Field(default=None, description="Unique ID for notification, \"\" for new records, required for update.")
    origin: Optional[StrictStr] = Field(default=None, description="Source of the notification (Predictive Analytics, Outlier Analytics, Analytic Preferences Changed, User Administration, etc).")
    origin_data: Optional[StrictStr] = Field(default=None, description="Data specifically related to the origin (an ID or description needed for further action).")
    severity: Optional[Notificationsv3NotificationSeverity] = None
    state: Optional[Notificationsv3NotificationState] = None
    style: Optional[StrictStr] = Field(default=None, description="For future use: \"\", info, error, criticalAnalysis, normalAnalysis, infoAnalysis.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The unique id for the Tenant the notification is associated with.")
    text: Optional[StrictStr] = Field(default=None, description="Detailed description of the notification in HTML format (to be embedded in HTML container).")
    title: Optional[StrictStr] = Field(default=None, description="Brief title used to quickly describe the notification.")
    transaction_id: Optional[StrictStr] = Field(default=None, description="For future use: batches of events that are related to each other may be grouped together when shown to the user.")
    type: Optional[StrictStr] = Field(default=None, description="For future use: type will be used to determine how and when a user is notified of an event.")
    user_id: Optional[StrictStr] = Field(default=None, description="The user unique ID in tenant user db of the user that requested the operation (who).")
    __properties: ClassVar[List[str]] = ["creation_time", "event_end_time", "event_start_time", "href", "id", "origin", "origin_data", "severity", "state", "style", "tenant_id", "text", "title", "transaction_id", "type", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Notificationsv3NotificationRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Notificationsv3NotificationRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creation_time": obj.get("creation_time"),
            "event_end_time": obj.get("event_end_time"),
            "event_start_time": obj.get("event_start_time"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "origin": obj.get("origin"),
            "origin_data": obj.get("origin_data"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "style": obj.get("style"),
            "tenant_id": obj.get("tenant_id"),
            "text": obj.get("text"),
            "title": obj.get("title"),
            "transaction_id": obj.get("transaction_id"),
            "type": obj.get("type"),
            "user_id": obj.get("user_id")
        })
        return _obj


