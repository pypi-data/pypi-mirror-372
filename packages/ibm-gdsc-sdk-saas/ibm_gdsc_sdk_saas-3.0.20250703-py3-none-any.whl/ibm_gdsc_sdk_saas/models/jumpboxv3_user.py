# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.jumpboxv3_user_state import Jumpboxv3UserState
from typing import Optional, Set
from typing_extensions import Self

class Jumpboxv3User(BaseModel):
    """
    User has information about a single user typically used in listing and editing users.
    """ # noqa: E501
    activation_date: Optional[datetime] = Field(default=None, description="Creation date.")
    directory_id: Optional[StrictStr] = Field(default=None, description="Which directory did this user come from.")
    disabled: Optional[StrictBool] = Field(default=None, description="User disabled.")
    display_name: Optional[StrictStr] = Field(default=None, description="LDAP cn.")
    distinguished_name: Optional[StrictStr] = Field(default=None, description="LDAP dn=  (needed to import user from LDAP into TenantUser).")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the user.")
    external_id: Optional[StrictStr] = Field(default=None, description="External id of the user.")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Metadata will contain all preferences.")
    roles: Optional[List[StrictStr]] = Field(default=None, description="Roles.")
    state: Optional[Jumpboxv3UserState] = None
    uid: Optional[StrictStr] = Field(default=None, description="Email.")
    user_id: Optional[StrictStr] = Field(default=None, description="Unique id for user.")
    __properties: ClassVar[List[str]] = ["activation_date", "directory_id", "disabled", "display_name", "distinguished_name", "email", "external_id", "metadata", "roles", "state", "uid", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Jumpboxv3User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Jumpboxv3User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activation_date": obj.get("activation_date"),
            "directory_id": obj.get("directory_id"),
            "disabled": obj.get("disabled"),
            "display_name": obj.get("display_name"),
            "distinguished_name": obj.get("distinguished_name"),
            "email": obj.get("email"),
            "external_id": obj.get("external_id"),
            "metadata": obj.get("metadata"),
            "roles": obj.get("roles"),
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "user_id": obj.get("user_id")
        })
        return _obj


