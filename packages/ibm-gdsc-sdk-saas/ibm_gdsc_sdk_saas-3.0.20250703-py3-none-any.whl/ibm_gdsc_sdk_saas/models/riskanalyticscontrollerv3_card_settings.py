# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_filter import Riskanalyticscontrollerv3Filter
from ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_order_by import Riskanalyticscontrollerv3OrderBy
from typing import Optional, Set
from typing_extensions import Self

class Riskanalyticscontrollerv3CardSettings(BaseModel):
    """
    CardSettings a object to display each card of risks.
    """ # noqa: E501
    filters: Optional[List[Riskanalyticscontrollerv3Filter]] = Field(default=None, description="Filters - list if filters to view the risk.")
    headers: Optional[List[StrictStr]] = Field(default=None, description="Headers - list of headers to view the risks.")
    id: Optional[StrictStr] = Field(default=None, description="Id of the settings.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the view - nls value in case its first time for user.")
    order_by: Optional[Riskanalyticscontrollerv3OrderBy] = None
    sequence_order: Optional[StrictInt] = Field(default=None, description="Sequence  order of the view(box) of the risks.")
    sorted_by: Optional[StrictStr] = Field(default=None, description="Sorted by header_id to sort the risks in the view by.")
    __properties: ClassVar[List[str]] = ["filters", "headers", "id", "name", "order_by", "sequence_order", "sorted_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Riskanalyticscontrollerv3CardSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item in self.filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Riskanalyticscontrollerv3CardSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filters": [Riskanalyticscontrollerv3Filter.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "headers": obj.get("headers"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "order_by": obj.get("order_by"),
            "sequence_order": obj.get("sequence_order"),
            "sorted_by": obj.get("sorted_by")
        })
        return _obj


