# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.policybuilderv3_parameter_relation_ship import Policybuilderv3ParameterRelationShip
from ibm_gdsc_sdk_saas.models.policybuilderv3_possible_value_obj import Policybuilderv3PossibleValueObj
from ibm_gdsc_sdk_saas.models.policybuilderv3_rule_type import Policybuilderv3RuleType
from typing import Optional, Set
from typing_extensions import Self

class Policybuilderv3RuleParameterMetadata(BaseModel):
    """
    Message format for RuleParameter Metadata.
    """ # noqa: E501
    default_value: Optional[StrictStr] = Field(default=None, description="Default value.")
    description: Optional[StrictStr] = None
    group_type_id: Optional[StrictInt] = Field(default=None, description="Group type id.")
    has_every: Optional[StrictStr] = Field(default=None, description="Indicating and populating parameter name if it supports every operator.")
    has_group: Optional[StrictStr] = Field(default=None, description="Indicating and populating parameter name if it supports group.")
    has_not: Optional[StrictStr] = Field(default=None, description="Indicating and populating parameter name if it supports a not operator.")
    label: Optional[StrictStr] = Field(default=None, description="UI label for parameter.")
    mandatory: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the parameter is mandatory or not.")
    parameter_name: Optional[StrictStr] = Field(default=None, description="Parameter name.")
    possible_values: Optional[List[Policybuilderv3PossibleValueObj]] = Field(default=None, description="Possible value length of the rule parameter.")
    relationships: Optional[List[Policybuilderv3ParameterRelationShip]] = Field(default=None, description="Parameter relationship object.")
    rule_category: Optional[StrictStr] = Field(default=None, description="Category of the rule.")
    rule_type: Optional[Policybuilderv3RuleType] = None
    standalone_parameter: Optional[StrictBool] = Field(default=None, description="If the parameter is standalone.")
    supported_db_types: Optional[List[StrictStr]] = Field(default=None, description="Stores all the supported db types.")
    type: Optional[StrictStr] = Field(default=None, description="Type of parameter.")
    value_length: Optional[StrictInt] = Field(default=None, description="Maximum value of the parameter value.")
    __properties: ClassVar[List[str]] = ["default_value", "description", "group_type_id", "has_every", "has_group", "has_not", "label", "mandatory", "parameter_name", "possible_values", "relationships", "rule_category", "rule_type", "standalone_parameter", "supported_db_types", "type", "value_length"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Policybuilderv3RuleParameterMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in possible_values (list)
        _items = []
        if self.possible_values:
            for _item in self.possible_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['possible_values'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relationships (list)
        _items = []
        if self.relationships:
            for _item in self.relationships:
                if _item:
                    _items.append(_item.to_dict())
            _dict['relationships'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Policybuilderv3RuleParameterMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default_value": obj.get("default_value"),
            "description": obj.get("description"),
            "group_type_id": obj.get("group_type_id"),
            "has_every": obj.get("has_every"),
            "has_group": obj.get("has_group"),
            "has_not": obj.get("has_not"),
            "label": obj.get("label"),
            "mandatory": obj.get("mandatory"),
            "parameter_name": obj.get("parameter_name"),
            "possible_values": [Policybuilderv3PossibleValueObj.from_dict(_item) for _item in obj["possible_values"]] if obj.get("possible_values") is not None else None,
            "relationships": [Policybuilderv3ParameterRelationShip.from_dict(_item) for _item in obj["relationships"]] if obj.get("relationships") is not None else None,
            "rule_category": obj.get("rule_category"),
            "rule_type": obj.get("rule_type"),
            "standalone_parameter": obj.get("standalone_parameter"),
            "supported_db_types": obj.get("supported_db_types"),
            "type": obj.get("type"),
            "value_length": obj.get("value_length")
        })
        return _obj


