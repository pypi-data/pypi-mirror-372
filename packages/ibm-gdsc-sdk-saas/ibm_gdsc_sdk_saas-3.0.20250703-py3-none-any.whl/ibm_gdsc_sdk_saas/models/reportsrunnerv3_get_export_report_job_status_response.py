# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.reportsrunnerv3_export_job_status import Reportsrunnerv3ExportJobStatus
from ibm_gdsc_sdk_saas.models.rpc_status import RpcStatus
from typing import Optional, Set
from typing_extensions import Self

class Reportsrunnerv3GetExportReportJobStatusResponse(BaseModel):
    """
    GetExportReportJobStatusResponse is the return type of GetExportReportStatus API.
    """ # noqa: E501
    call_status: Optional[RpcStatus] = None
    file_name: Optional[StrictStr] = Field(default=None, description="File name.")
    job_duration: Optional[StrictInt] = Field(default=None, description="Duration of the export job in minutes.")
    job_id: Optional[StrictStr] = Field(default=None, description="Token that identifies the export job.")
    job_start_time: Optional[StrictStr] = Field(default=None, description="The start time of the export job.")
    job_status: Optional[Reportsrunnerv3ExportJobStatus] = None
    message: Optional[StrictStr] = Field(default=None, description="An error message in case of failure while retriving the export job status.")
    result_size: Optional[StrictInt] = Field(default=None, description="The size of the exported file in MB.")
    tenant_id: Optional[StrictStr] = Field(default=None, description="The unique tenant ID that the executing job is running against.")
    __properties: ClassVar[List[str]] = ["call_status", "file_name", "job_duration", "job_id", "job_start_time", "job_status", "message", "result_size", "tenant_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reportsrunnerv3GetExportReportJobStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of call_status
        if self.call_status:
            _dict['call_status'] = self.call_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reportsrunnerv3GetExportReportJobStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "call_status": RpcStatus.from_dict(obj["call_status"]) if obj.get("call_status") is not None else None,
            "file_name": obj.get("file_name"),
            "job_duration": obj.get("job_duration"),
            "job_id": obj.get("job_id"),
            "job_start_time": obj.get("job_start_time"),
            "job_status": obj.get("job_status"),
            "message": obj.get("message"),
            "result_size": obj.get("result_size"),
            "tenant_id": obj.get("tenant_id")
        })
        return _obj


