# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.reportsv3_field_name import Reportsv3FieldName
from ibm_gdsc_sdk_saas.models.reportsv3_header_description import Reportsv3HeaderDescription
from ibm_gdsc_sdk_saas.models.reportsv3_header_type import Reportsv3HeaderType
from typing import Optional, Set
from typing_extensions import Self

class Reportsv3Header(BaseModel):
    """
    Reportsv3Header
    """ # noqa: E501
    can_be_used_in_chart: Optional[StrictBool] = Field(default=None, description="If the header can be used in charts.")
    field_name: Optional[Reportsv3FieldName] = None
    group_type_id: Optional[StrictInt] = Field(default=None, description="Group type id for the filter.")
    header_category: Optional[StrictStr] = Field(default=None, description="The category of the header.")
    header_description: Optional[Reportsv3HeaderDescription] = None
    header_id: Optional[StrictStr] = Field(default=None, description="The header id.")
    header_name: Optional[StrictStr] = Field(default=None, description="The header name.")
    is_recommended: Optional[StrictBool] = Field(default=None, description="If the header is recommended.")
    table_name: Optional[StrictStr] = Field(default=None, description="Table name.")
    type: Optional[Reportsv3HeaderType] = None
    type_length: Optional[StrictInt] = Field(default=None, description="Header type length.")
    __properties: ClassVar[List[str]] = ["can_be_used_in_chart", "field_name", "group_type_id", "header_category", "header_description", "header_id", "header_name", "is_recommended", "table_name", "type", "type_length"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reportsv3Header from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of field_name
        if self.field_name:
            _dict['field_name'] = self.field_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of header_description
        if self.header_description:
            _dict['header_description'] = self.header_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reportsv3Header from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_be_used_in_chart": obj.get("can_be_used_in_chart"),
            "field_name": Reportsv3FieldName.from_dict(obj["field_name"]) if obj.get("field_name") is not None else None,
            "group_type_id": obj.get("group_type_id"),
            "header_category": obj.get("header_category"),
            "header_description": Reportsv3HeaderDescription.from_dict(obj["header_description"]) if obj.get("header_description") is not None else None,
            "header_id": obj.get("header_id"),
            "header_name": obj.get("header_name"),
            "is_recommended": obj.get("is_recommended"),
            "table_name": obj.get("table_name"),
            "type": obj.get("type"),
            "type_length": obj.get("type_length")
        })
        return _obj


