# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_feature import Riskanalyticsenginev3Feature
from ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_severity_level import Riskanalyticsenginev3SeverityLevel
from typing import Optional, Set
from typing_extensions import Self

class Riskanalyticscontrollerv3RiskFeedback(BaseModel):
    """
    RiskFeedback represent feedback object in status NEW that should be sent to UI.
    """ # noqa: E501
    comments: Optional[StrictStr] = Field(default=None, description="Feedback comments.")
    creation_time: Optional[datetime] = Field(default=None, description="Feedback creation time.")
    features: Optional[List[Riskanalyticsenginev3Feature]] = Field(default=None, description="List of features for the risk that related to this feedback.")
    new_classification: Optional[StrictStr] = Field(default=None, description="Feedback classification.")
    new_severity: Optional[Riskanalyticsenginev3SeverityLevel] = None
    old_classification: Optional[StrictStr] = Field(default=None, description="Original classification.")
    old_severity: Optional[Riskanalyticsenginev3SeverityLevel] = None
    __properties: ClassVar[List[str]] = ["comments", "creation_time", "features", "new_classification", "new_severity", "old_classification", "old_severity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Riskanalyticscontrollerv3RiskFeedback from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item in self.features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['features'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Riskanalyticscontrollerv3RiskFeedback from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": obj.get("comments"),
            "creation_time": obj.get("creation_time"),
            "features": [Riskanalyticsenginev3Feature.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "new_classification": obj.get("new_classification"),
            "new_severity": obj.get("new_severity"),
            "old_classification": obj.get("old_classification"),
            "old_severity": obj.get("old_severity")
        })
        return _obj


