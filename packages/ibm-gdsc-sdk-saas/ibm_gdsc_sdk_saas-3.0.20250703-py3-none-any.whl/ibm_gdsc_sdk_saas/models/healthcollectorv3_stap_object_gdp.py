# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.healthcollectorv3_inspection_engine_object_gdp import Healthcollectorv3InspectionEngineObjectGdp
from ibm_gdsc_sdk_saas.models.healthcollectorv3_stap_details_object_gdp import Healthcollectorv3StapDetailsObjectGdp
from typing import Optional, Set
from typing_extensions import Self

class Healthcollectorv3StapObjectGdp(BaseModel):
    """
    StapObject gets information about monitoring agents.
    """ # noqa: E501
    children: Optional[List[Healthcollectorv3InspectionEngineObjectGdp]] = Field(default=None, description="Details about inspection engines.")
    collector_host_name: Optional[StrictStr] = Field(default=None, description="Host name of Guardium Data Protection system.")
    connectivity: Optional[StrictInt] = Field(default=None, description="Connectivity status of the S-TAP.")
    details: Optional[Healthcollectorv3StapDetailsObjectGdp] = None
    ie_status: Optional[StrictInt] = Field(default=None, description="Overall status of inspection engines.")
    inspection_engine: Optional[StrictStr] = Field(default=None, description="Name of inspection engine.")
    ktap: Optional[StrictInt] = Field(default=None, description="Status of the K-TAP.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the S-TAP.")
    os_type: Optional[StrictStr] = Field(default=None, description="Operating system of the S-TAP.")
    revision: Optional[StrictStr] = Field(default=None, description="The OS revision of the S-TAP.")
    stap_ip: Optional[StrictStr] = Field(default=None, description="IP address of the S-TAP.")
    status: Optional[StrictInt] = Field(default=None, description="Overall status of the S-TAP.")
    traffic: Optional[StrictInt] = Field(default=None, description="Traffic status from inspection engine for the S-TAP.")
    __properties: ClassVar[List[str]] = ["children", "collector_host_name", "connectivity", "details", "ie_status", "inspection_engine", "ktap", "name", "os_type", "revision", "stap_ip", "status", "traffic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Healthcollectorv3StapObjectGdp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Healthcollectorv3StapObjectGdp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "children": [Healthcollectorv3InspectionEngineObjectGdp.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "collector_host_name": obj.get("collector_host_name"),
            "connectivity": obj.get("connectivity"),
            "details": Healthcollectorv3StapDetailsObjectGdp.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "ie_status": obj.get("ie_status"),
            "inspection_engine": obj.get("inspection_engine"),
            "ktap": obj.get("ktap"),
            "name": obj.get("name"),
            "os_type": obj.get("os_type"),
            "revision": obj.get("revision"),
            "stap_ip": obj.get("stap_ip"),
            "status": obj.get("status"),
            "traffic": obj.get("traffic")
        })
        return _obj


