# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.policybuilderv3_action import Policybuilderv3Action
from ibm_gdsc_sdk_saas.models.policybuilderv3_rule_parameter import Policybuilderv3RuleParameter
from ibm_gdsc_sdk_saas.models.policybuilderv3_rule_severity import Policybuilderv3RuleSeverity
from ibm_gdsc_sdk_saas.models.policybuilderv3_rule_type import Policybuilderv3RuleType
from typing import Optional, Set
from typing_extensions import Self

class Policybuilderv3Rule(BaseModel):
    """
    Message format for rule object.
    """ # noqa: E501
    actions: Optional[List[Policybuilderv3Action]] = Field(default=None, description="Action object of the actions in the rules.")
    continue_to_next_rule: Optional[StrictBool] = Field(default=None, description="Flag indicating whether continue to next rule is on/off.")
    empty_groups: Optional[List[StrictInt]] = Field(default=None, description="Variable that contains group ids being used by the rule that contains 0 members.")
    invalid_actions: Optional[List[Policybuilderv3Action]] = None
    invalid_parameters: Optional[List[Policybuilderv3RuleParameter]] = None
    parameters: Optional[List[Policybuilderv3RuleParameter]] = Field(default=None, description="Parameter object which are used in the rule.")
    policy_id: Optional[StrictStr] = Field(default=None, description="Policy Id.")
    rule_id: Optional[StrictStr] = Field(default=None, description="Rule id.")
    rule_key: Optional[StrictStr] = None
    rule_name: Optional[StrictStr] = Field(default=None, description="Rule name.")
    rule_order: Optional[StrictInt] = Field(default=None, description="Integer to indicate the order of the rule in the policy.")
    rule_type: Optional[Policybuilderv3RuleType] = None
    severity: Optional[Policybuilderv3RuleSeverity] = None
    tags: Optional[List[StrictStr]] = Field(default=None, description="Variable that contains tags assosicated with the rule.")
    template: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the rule is a template rule.")
    __properties: ClassVar[List[str]] = ["actions", "continue_to_next_rule", "empty_groups", "invalid_actions", "invalid_parameters", "parameters", "policy_id", "rule_id", "rule_key", "rule_name", "rule_order", "rule_type", "severity", "tags", "template"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Policybuilderv3Rule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item in self.actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invalid_actions (list)
        _items = []
        if self.invalid_actions:
            for _item in self.invalid_actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invalid_actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invalid_parameters (list)
        _items = []
        if self.invalid_parameters:
            for _item in self.invalid_parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invalid_parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Policybuilderv3Rule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [Policybuilderv3Action.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "continue_to_next_rule": obj.get("continue_to_next_rule"),
            "empty_groups": obj.get("empty_groups"),
            "invalid_actions": [Policybuilderv3Action.from_dict(_item) for _item in obj["invalid_actions"]] if obj.get("invalid_actions") is not None else None,
            "invalid_parameters": [Policybuilderv3RuleParameter.from_dict(_item) for _item in obj["invalid_parameters"]] if obj.get("invalid_parameters") is not None else None,
            "parameters": [Policybuilderv3RuleParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "policy_id": obj.get("policy_id"),
            "rule_id": obj.get("rule_id"),
            "rule_key": obj.get("rule_key"),
            "rule_name": obj.get("rule_name"),
            "rule_order": obj.get("rule_order"),
            "rule_type": obj.get("rule_type"),
            "severity": obj.get("severity"),
            "tags": obj.get("tags"),
            "template": obj.get("template")
        })
        return _obj


