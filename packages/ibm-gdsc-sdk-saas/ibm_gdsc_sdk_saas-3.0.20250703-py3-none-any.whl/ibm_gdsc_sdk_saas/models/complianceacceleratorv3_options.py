# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.complianceacceleratorv3_email_config import Complianceacceleratorv3EmailConfig
from ibm_gdsc_sdk_saas.models.complianceacceleratorv3_group import Complianceacceleratorv3Group
from ibm_gdsc_sdk_saas.models.complianceacceleratorv3_rule_and_action import Complianceacceleratorv3RuleAndAction
from ibm_gdsc_sdk_saas.models.complianceacceleratorv3_syslog_config import Complianceacceleratorv3SyslogConfig
from ibm_gdsc_sdk_saas.models.complianceacceleratorv3_task_status import Complianceacceleratorv3TaskStatus
from typing import Optional, Set
from typing_extensions import Self

class Complianceacceleratorv3Options(BaseModel):
    """
    Complianceacceleratorv3Options
    """ # noqa: E501
    email_config: Optional[Complianceacceleratorv3EmailConfig] = None
    parent_groups: Optional[Dict[str, Complianceacceleratorv3Group]] = None
    policy_id: Optional[StrictStr] = None
    rules: Optional[Dict[str, Complianceacceleratorv3RuleAndAction]] = Field(default=None, description="Key is policy rule names for alerts.")
    syslog_config: Optional[Complianceacceleratorv3SyslogConfig] = None
    tasks: Optional[Dict[str, Complianceacceleratorv3TaskStatus]] = Field(default=None, description="Tasks that need to be completed.")
    __properties: ClassVar[List[str]] = ["email_config", "parent_groups", "policy_id", "rules", "syslog_config", "tasks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Complianceacceleratorv3Options from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_config
        if self.email_config:
            _dict['email_config'] = self.email_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in parent_groups (dict)
        _field_dict = {}
        if self.parent_groups:
            for _key in self.parent_groups:
                if self.parent_groups[_key]:
                    _field_dict[_key] = self.parent_groups[_key].to_dict()
            _dict['parent_groups'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in rules (dict)
        _field_dict = {}
        if self.rules:
            for _key in self.rules:
                if self.rules[_key]:
                    _field_dict[_key] = self.rules[_key].to_dict()
            _dict['rules'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of syslog_config
        if self.syslog_config:
            _dict['syslog_config'] = self.syslog_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Complianceacceleratorv3Options from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email_config": Complianceacceleratorv3EmailConfig.from_dict(obj["email_config"]) if obj.get("email_config") is not None else None,
            "parent_groups": dict(
                (_k, Complianceacceleratorv3Group.from_dict(_v))
                for _k, _v in obj["parent_groups"].items()
            )
            if obj.get("parent_groups") is not None
            else None,
            "policy_id": obj.get("policy_id"),
            "rules": dict(
                (_k, Complianceacceleratorv3RuleAndAction.from_dict(_v))
                for _k, _v in obj["rules"].items()
            )
            if obj.get("rules") is not None
            else None,
            "syslog_config": Complianceacceleratorv3SyslogConfig.from_dict(obj["syslog_config"]) if obj.get("syslog_config") is not None else None,
            "tasks": dict((_k, _v) for _k, _v in obj.get("tasks").items())
        })
        return _obj


