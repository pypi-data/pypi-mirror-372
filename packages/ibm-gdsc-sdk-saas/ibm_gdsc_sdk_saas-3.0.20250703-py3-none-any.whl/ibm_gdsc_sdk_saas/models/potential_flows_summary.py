# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from ibm_gdsc_sdk_saas.models.cloud_account_count_inner import CloudAccountCountInner
from ibm_gdsc_sdk_saas.models.cloud_region_count_inner import CloudRegionCountInner
from ibm_gdsc_sdk_saas.models.types_count_inner import TypesCountInner
from typing import Optional, Set
from typing_extensions import Self

class PotentialFlowsSummary(BaseModel):
    """
    PotentialFlowsSummary
    """ # noqa: E501
    count: Union[StrictFloat, StrictInt]
    types_count: List[TypesCountInner] = Field(alias="typesCount")
    cloud_account_count: List[CloudAccountCountInner] = Field(alias="cloudAccountCount")
    cloud_region_count: List[CloudRegionCountInner] = Field(alias="cloudRegionCount")
    __properties: ClassVar[List[str]] = ["count", "typesCount", "cloudAccountCount", "cloudRegionCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PotentialFlowsSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in types_count (list)
        _items = []
        if self.types_count:
            for _item in self.types_count:
                if _item:
                    _items.append(_item.to_dict())
            _dict['typesCount'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cloud_account_count (list)
        _items = []
        if self.cloud_account_count:
            for _item in self.cloud_account_count:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cloudAccountCount'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cloud_region_count (list)
        _items = []
        if self.cloud_region_count:
            for _item in self.cloud_region_count:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cloudRegionCount'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PotentialFlowsSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "typesCount": [TypesCountInner.from_dict(_item) for _item in obj["typesCount"]] if obj.get("typesCount") is not None else None,
            "cloudAccountCount": [CloudAccountCountInner.from_dict(_item) for _item in obj["cloudAccountCount"]] if obj.get("cloudAccountCount") is not None else None,
            "cloudRegionCount": [CloudRegionCountInner.from_dict(_item) for _item in obj["cloudRegionCount"]] if obj.get("cloudRegionCount") is not None else None
        })
        return _obj


