# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.universalconnectormanagerv3_datasource_type import Universalconnectormanagerv3DatasourceType
from ibm_gdsc_sdk_saas.models.universalconnectormanagerv3_plugin_definition import Universalconnectormanagerv3PluginDefinition
from typing import Optional, Set
from typing_extensions import Self

class Universalconnectormanagerv3ConnectorSummary(BaseModel):
    """
    Part of GetConnectors response. Contains details about a Universal connector connection configuration.
    """ # noqa: E501
    combined_configuration: Optional[StrictStr] = Field(default=None, description="Connector configuration parameters. A union of Input and Filter parameters.")
    combined_configuration_strings: Optional[StrictStr] = Field(default=None, description="Connector configuration parameters strings, for UI.")
    connector_name: Optional[StrictStr] = Field(default=None, description="ID of connector.")
    developer: Optional[StrictStr] = Field(default=None, description="The developer who developed the manifest.")
    filter_plugin: Optional[Universalconnectormanagerv3PluginDefinition] = None
    filter_plugin_name: Optional[StrictStr] = Field(default=None, description="ID of filter plugin.")
    input_plugin: Optional[Universalconnectormanagerv3PluginDefinition] = None
    input_plugin_name: Optional[StrictStr] = Field(default=None, description="ID of input plugin.")
    supported_datasources: Optional[List[Universalconnectormanagerv3DatasourceType]] = Field(default=None, description="Supported data source types, according to the Filter plugin.")
    supported_platforms: Optional[List[StrictStr]] = Field(default=None, description="Array of supported platforms/environments. Examples: \"on-premise\", \"AWS\", \"Azure\", \"GCP\".")
    upload_date: Optional[datetime] = Field(default=None, description="Date connector manifest was uploaded.")
    upload_user: Optional[StrictStr] = Field(default=None, description="User who uploaded the manifest.")
    __properties: ClassVar[List[str]] = ["combined_configuration", "combined_configuration_strings", "connector_name", "developer", "filter_plugin", "filter_plugin_name", "input_plugin", "input_plugin_name", "supported_datasources", "supported_platforms", "upload_date", "upload_user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Universalconnectormanagerv3ConnectorSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter_plugin
        if self.filter_plugin:
            _dict['filter_plugin'] = self.filter_plugin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_plugin
        if self.input_plugin:
            _dict['input_plugin'] = self.input_plugin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supported_datasources (list)
        _items = []
        if self.supported_datasources:
            for _item in self.supported_datasources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['supported_datasources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Universalconnectormanagerv3ConnectorSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "combined_configuration": obj.get("combined_configuration"),
            "combined_configuration_strings": obj.get("combined_configuration_strings"),
            "connector_name": obj.get("connector_name"),
            "developer": obj.get("developer"),
            "filter_plugin": Universalconnectormanagerv3PluginDefinition.from_dict(obj["filter_plugin"]) if obj.get("filter_plugin") is not None else None,
            "filter_plugin_name": obj.get("filter_plugin_name"),
            "input_plugin": Universalconnectormanagerv3PluginDefinition.from_dict(obj["input_plugin"]) if obj.get("input_plugin") is not None else None,
            "input_plugin_name": obj.get("input_plugin_name"),
            "supported_datasources": [Universalconnectormanagerv3DatasourceType.from_dict(_item) for _item in obj["supported_datasources"]] if obj.get("supported_datasources") is not None else None,
            "supported_platforms": obj.get("supported_platforms"),
            "upload_date": obj.get("upload_date"),
            "upload_user": obj.get("upload_user")
        })
        return _obj


