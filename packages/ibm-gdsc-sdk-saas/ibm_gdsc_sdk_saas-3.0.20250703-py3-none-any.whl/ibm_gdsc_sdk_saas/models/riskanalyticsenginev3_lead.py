# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_additional_info import Riskanalyticsenginev3AdditionalInfo
from ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_lead_type import Riskanalyticsenginev3LeadType
from ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_pivot import Riskanalyticsenginev3Pivot
from typing import Optional, Set
from typing_extensions import Self

class Riskanalyticsenginev3Lead(BaseModel):
    """
    A lead for each pivot which triggers the whole process - to find a risk for this pivot.
    """ # noqa: E501
    count: Optional[StrictInt] = Field(default=None, description="Count of events.")
    creation_time: Optional[datetime] = Field(default=None, description="The lead creation time in format YYYY-MM-DDTHH:mm:ss.sssZ.")
    info: Optional[List[Riskanalyticsenginev3AdditionalInfo]] = Field(default=None, description="Additional info.")
    is_observation: Optional[StrictBool] = Field(default=None, description="Is observation flag for the lead to set true based on lead information.")
    lead_key: Optional[StrictStr] = Field(default=None, description="The Lead Key name.")
    pivot: Optional[Riskanalyticsenginev3Pivot] = None
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The lead score (normalized score between 0 and 1).")
    severity: Optional[StrictInt] = Field(default=None, description="Lead severity.")
    type: Optional[Riskanalyticsenginev3LeadType] = None
    __properties: ClassVar[List[str]] = ["count", "creation_time", "info", "is_observation", "lead_key", "pivot", "score", "severity", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Riskanalyticsenginev3Lead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in info (list)
        _items = []
        if self.info:
            for _item in self.info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['info'] = _items
        # override the default output from pydantic by calling `to_dict()` of pivot
        if self.pivot:
            _dict['pivot'] = self.pivot.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Riskanalyticsenginev3Lead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "creation_time": obj.get("creation_time"),
            "info": [Riskanalyticsenginev3AdditionalInfo.from_dict(_item) for _item in obj["info"]] if obj.get("info") is not None else None,
            "is_observation": obj.get("is_observation"),
            "lead_key": obj.get("lead_key"),
            "pivot": Riskanalyticsenginev3Pivot.from_dict(obj["pivot"]) if obj.get("pivot") is not None else None,
            "score": obj.get("score"),
            "severity": obj.get("severity"),
            "type": obj.get("type")
        })
        return _obj


