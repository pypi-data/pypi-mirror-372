# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.reportsv3_aggregation_type import Reportsv3AggregationType
from ibm_gdsc_sdk_saas.models.reportsv3_field_name import Reportsv3FieldName
from ibm_gdsc_sdk_saas.models.reportsv3_header_data_type import Reportsv3HeaderDataType
from ibm_gdsc_sdk_saas.models.reportsv3_header_description import Reportsv3HeaderDescription
from ibm_gdsc_sdk_saas.models.reportsv3_header_type import Reportsv3HeaderType
from ibm_gdsc_sdk_saas.models.reportsv3_literal import Reportsv3Literal
from ibm_gdsc_sdk_saas.models.reportsv3_order_by import Reportsv3OrderBy
from typing import Optional, Set
from typing_extensions import Self

class Reportsv3ReportHeader(BaseModel):
    """
    Report header.
    """ # noqa: E501
    aggregation_type: Optional[Reportsv3AggregationType] = None
    field_name: Optional[Reportsv3FieldName] = None
    group_type_id: Optional[StrictInt] = Field(default=None, description="Group type id for the filter.")
    header_data_type: Optional[Reportsv3HeaderDataType] = None
    header_description: Optional[Reportsv3HeaderDescription] = None
    header_id: Optional[StrictStr] = Field(default=None, description="Header ID.")
    header_name: Optional[StrictStr] = Field(default=None, description="The header name.")
    header_type: Optional[Reportsv3HeaderType] = None
    header_type_length: Optional[StrictInt] = Field(default=None, description="Header type length.")
    literal: Optional[Reportsv3Literal] = None
    order_by: Optional[Reportsv3OrderBy] = None
    order_by_seq: Optional[StrictInt] = Field(default=None, description="Order by sequence.")
    schema_name: Optional[StrictStr] = Field(default=None, description="Schema name.")
    sequence: Optional[StrictInt] = Field(default=None, description="Column sequence number.")
    table_name: Optional[StrictStr] = Field(default=None, description="Table name.")
    __properties: ClassVar[List[str]] = ["aggregation_type", "field_name", "group_type_id", "header_data_type", "header_description", "header_id", "header_name", "header_type", "header_type_length", "literal", "order_by", "order_by_seq", "schema_name", "sequence", "table_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reportsv3ReportHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of field_name
        if self.field_name:
            _dict['field_name'] = self.field_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of header_description
        if self.header_description:
            _dict['header_description'] = self.header_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of literal
        if self.literal:
            _dict['literal'] = self.literal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reportsv3ReportHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregation_type": obj.get("aggregation_type"),
            "field_name": Reportsv3FieldName.from_dict(obj["field_name"]) if obj.get("field_name") is not None else None,
            "group_type_id": obj.get("group_type_id"),
            "header_data_type": obj.get("header_data_type"),
            "header_description": Reportsv3HeaderDescription.from_dict(obj["header_description"]) if obj.get("header_description") is not None else None,
            "header_id": obj.get("header_id"),
            "header_name": obj.get("header_name"),
            "header_type": obj.get("header_type"),
            "header_type_length": obj.get("header_type_length"),
            "literal": Reportsv3Literal.from_dict(obj["literal"]) if obj.get("literal") is not None else None,
            "order_by": obj.get("order_by"),
            "order_by_seq": obj.get("order_by_seq"),
            "schema_name": obj.get("schema_name"),
            "sequence": obj.get("sequence"),
            "table_name": obj.get("table_name")
        })
        return _obj


