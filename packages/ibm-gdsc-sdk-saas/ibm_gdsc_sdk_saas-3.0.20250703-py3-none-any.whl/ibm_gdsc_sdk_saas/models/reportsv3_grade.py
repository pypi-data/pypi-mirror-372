# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.reportsv3_grade_threshold import Reportsv3GradeThreshold
from typing import Optional, Set
from typing_extensions import Self

class Reportsv3Grade(BaseModel):
    """
    Grade defines a given grade.
    """ # noqa: E501
    control_id: Optional[StrictInt] = None
    create_user_id: Optional[StrictStr] = None
    create_user_name: Optional[StrictStr] = None
    date_created: Optional[datetime] = None
    date_updated: Optional[datetime] = None
    default_score: Optional[StrictInt] = None
    default_score_name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    grade_id: Optional[StrictInt] = None
    grade_threshold: Optional[List[Reportsv3GradeThreshold]] = None
    is_percentage: Optional[StrictBool] = None
    metric_id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    recommendation: Optional[StrictStr] = None
    update_user_id: Optional[StrictStr] = None
    update_user_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["control_id", "create_user_id", "create_user_name", "date_created", "date_updated", "default_score", "default_score_name", "description", "grade_id", "grade_threshold", "is_percentage", "metric_id", "name", "recommendation", "update_user_id", "update_user_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reportsv3Grade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in grade_threshold (list)
        _items = []
        if self.grade_threshold:
            for _item in self.grade_threshold:
                if _item:
                    _items.append(_item.to_dict())
            _dict['grade_threshold'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reportsv3Grade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "control_id": obj.get("control_id"),
            "create_user_id": obj.get("create_user_id"),
            "create_user_name": obj.get("create_user_name"),
            "date_created": obj.get("date_created"),
            "date_updated": obj.get("date_updated"),
            "default_score": obj.get("default_score"),
            "default_score_name": obj.get("default_score_name"),
            "description": obj.get("description"),
            "grade_id": obj.get("grade_id"),
            "grade_threshold": [Reportsv3GradeThreshold.from_dict(_item) for _item in obj["grade_threshold"]] if obj.get("grade_threshold") is not None else None,
            "is_percentage": obj.get("is_percentage"),
            "metric_id": obj.get("metric_id"),
            "name": obj.get("name"),
            "recommendation": obj.get("recommendation"),
            "update_user_id": obj.get("update_user_id"),
            "update_user_name": obj.get("update_user_name")
        })
        return _obj


