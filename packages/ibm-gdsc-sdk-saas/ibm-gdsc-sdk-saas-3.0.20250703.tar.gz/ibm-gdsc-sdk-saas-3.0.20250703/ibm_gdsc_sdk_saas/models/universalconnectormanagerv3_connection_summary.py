# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.universalconnectormanagerv3_connection_route import Universalconnectormanagerv3ConnectionRoute
from ibm_gdsc_sdk_saas.models.universalconnectormanagerv3_connection_status import Universalconnectormanagerv3ConnectionStatus
from ibm_gdsc_sdk_saas.models.universalconnectormanagerv3_user import Universalconnectormanagerv3User
from typing import Optional, Set
from typing_extensions import Self

class Universalconnectormanagerv3ConnectionSummary(BaseModel):
    """
    Structure for [Universal connector] Connection response.
    """ # noqa: E501
    connection_alias: Optional[StrictStr] = Field(default=None, description="Connection configuration nickname, set by dev/user (optional).")
    connection_changed: Optional[datetime] = Field(default=None, description="Date changed; used to defer tenant status queries immediately after creation.")
    connection_config_id: Optional[StrictStr] = Field(default=None, description="Foreign key to the saved connection configuration by the user.")
    connection_configuration_note: Optional[StrictStr] = Field(default=None, description="Datasource configuration note, by plugin developers, intended for user.")
    connection_filter_alias: Optional[StrictStr] = Field(default=None, description="Connector filter plugin alias (datasource, usually, like \"MongoDB\").")
    connection_id: Optional[StrictStr] = Field(default=None, description="Connection configuration id.")
    connection_input_alias: Optional[StrictStr] = Field(default=None, description="Connection input plugin alias, like \"Filebeat\".")
    connection_route: Optional[Universalconnectormanagerv3ConnectionRoute] = None
    connection_status: Optional[Universalconnectormanagerv3ConnectionStatus] = None
    user: Optional[Universalconnectormanagerv3User] = None
    __properties: ClassVar[List[str]] = ["connection_alias", "connection_changed", "connection_config_id", "connection_configuration_note", "connection_filter_alias", "connection_id", "connection_input_alias", "connection_route", "connection_status", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Universalconnectormanagerv3ConnectionSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connection_route
        if self.connection_route:
            _dict['connection_route'] = self.connection_route.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connection_status
        if self.connection_status:
            _dict['connection_status'] = self.connection_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Universalconnectormanagerv3ConnectionSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connection_alias": obj.get("connection_alias"),
            "connection_changed": obj.get("connection_changed"),
            "connection_config_id": obj.get("connection_config_id"),
            "connection_configuration_note": obj.get("connection_configuration_note"),
            "connection_filter_alias": obj.get("connection_filter_alias"),
            "connection_id": obj.get("connection_id"),
            "connection_input_alias": obj.get("connection_input_alias"),
            "connection_route": Universalconnectormanagerv3ConnectionRoute.from_dict(obj["connection_route"]) if obj.get("connection_route") is not None else None,
            "connection_status": Universalconnectormanagerv3ConnectionStatus.from_dict(obj["connection_status"]) if obj.get("connection_status") is not None else None,
            "user": Universalconnectormanagerv3User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj


