# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.workflowv3_filter_column import Workflowv3FilterColumn
from ibm_gdsc_sdk_saas.models.workflowv3_filter_operator import Workflowv3FilterOperator
from ibm_gdsc_sdk_saas.models.workflowv3_priority import Workflowv3Priority
from ibm_gdsc_sdk_saas.models.workflowv3_status import Workflowv3Status
from typing import Optional, Set
from typing_extensions import Self

class Workflowv3Filter(BaseModel):
    """
    Filter - to find specific Cases.
    """ # noqa: E501
    assigned_to_me: Optional[StrictBool] = Field(default=None, description="Optional: Cases and tasks that are assigned to Me.")
    assigned_to_my_roles: Optional[StrictBool] = Field(default=None, description="Optional: Cases and tasks that are assigned to My Roles.")
    date_created: Optional[datetime] = Field(default=None, description="Optional: where Date Created meets criteria.")
    date_created_operator: Optional[Workflowv3FilterOperator] = None
    date_due: Optional[datetime] = Field(default=None, description="Optional: where Date Due meets criteria.")
    date_due_operator: Optional[Workflowv3FilterOperator] = None
    filter_columns: Optional[List[Workflowv3FilterColumn]] = None
    priority: Optional[Workflowv3Priority] = None
    priority_operator: Optional[Workflowv3FilterOperator] = None
    report_id: Optional[StrictStr] = None
    scheduled_job_id: Optional[List[StrictStr]] = None
    scheduled_task_id: Optional[List[StrictStr]] = None
    status: Optional[Workflowv3Status] = None
    status_operator: Optional[Workflowv3FilterOperator] = None
    tags: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["assigned_to_me", "assigned_to_my_roles", "date_created", "date_created_operator", "date_due", "date_due_operator", "filter_columns", "priority", "priority_operator", "report_id", "scheduled_job_id", "scheduled_task_id", "status", "status_operator", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workflowv3Filter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filter_columns (list)
        _items = []
        if self.filter_columns:
            for _item in self.filter_columns:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filter_columns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workflowv3Filter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assigned_to_me": obj.get("assigned_to_me"),
            "assigned_to_my_roles": obj.get("assigned_to_my_roles"),
            "date_created": obj.get("date_created"),
            "date_created_operator": obj.get("date_created_operator"),
            "date_due": obj.get("date_due"),
            "date_due_operator": obj.get("date_due_operator"),
            "filter_columns": [Workflowv3FilterColumn.from_dict(_item) for _item in obj["filter_columns"]] if obj.get("filter_columns") is not None else None,
            "priority": obj.get("priority"),
            "priority_operator": obj.get("priority_operator"),
            "report_id": obj.get("report_id"),
            "scheduled_job_id": obj.get("scheduled_job_id"),
            "scheduled_task_id": obj.get("scheduled_task_id"),
            "status": obj.get("status"),
            "status_operator": obj.get("status_operator"),
            "tags": obj.get("tags")
        })
        return _obj


