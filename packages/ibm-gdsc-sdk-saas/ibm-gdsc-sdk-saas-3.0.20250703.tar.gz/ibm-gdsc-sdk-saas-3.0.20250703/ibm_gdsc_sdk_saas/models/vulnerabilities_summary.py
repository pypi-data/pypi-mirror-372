# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from ibm_gdsc_sdk_saas.models.vulnerabilities_criticality_count_inner import VulnerabilitiesCriticalityCountInner
from ibm_gdsc_sdk_saas.models.vulnerabilities_summary_affected_data_store_summary import VulnerabilitiesSummaryAffectedDataStoreSummary
from ibm_gdsc_sdk_saas.models.vulnerabilities_summary_status_summary import VulnerabilitiesSummaryStatusSummary
from ibm_gdsc_sdk_saas.models.vulnerabilities_summary_status_type_count_inner import VulnerabilitiesSummaryStatusTypeCountInner
from ibm_gdsc_sdk_saas.models.vulnerabilities_summary_vulnerability_type_count_inner import VulnerabilitiesSummaryVulnerabilityTypeCountInner
from typing import Optional, Set
from typing_extensions import Self

class VulnerabilitiesSummary(BaseModel):
    """
    VulnerabilitiesSummary
    """ # noqa: E501
    criticality_count: List[VulnerabilitiesCriticalityCountInner] = Field(alias="criticalityCount")
    vulnerability_type_count: List[VulnerabilitiesSummaryVulnerabilityTypeCountInner] = Field(alias="vulnerabilityTypeCount")
    status_type_count: List[VulnerabilitiesSummaryStatusTypeCountInner] = Field(alias="statusTypeCount")
    status_summary: VulnerabilitiesSummaryStatusSummary = Field(alias="statusSummary")
    affected_data_store_summary: VulnerabilitiesSummaryAffectedDataStoreSummary = Field(alias="affectedDataStoreSummary")
    __properties: ClassVar[List[str]] = ["criticalityCount", "vulnerabilityTypeCount", "statusTypeCount", "statusSummary", "affectedDataStoreSummary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulnerabilitiesSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in criticality_count (list)
        _items = []
        if self.criticality_count:
            for _item in self.criticality_count:
                if _item:
                    _items.append(_item.to_dict())
            _dict['criticalityCount'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vulnerability_type_count (list)
        _items = []
        if self.vulnerability_type_count:
            for _item in self.vulnerability_type_count:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vulnerabilityTypeCount'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in status_type_count (list)
        _items = []
        if self.status_type_count:
            for _item in self.status_type_count:
                if _item:
                    _items.append(_item.to_dict())
            _dict['statusTypeCount'] = _items
        # override the default output from pydantic by calling `to_dict()` of status_summary
        if self.status_summary:
            _dict['statusSummary'] = self.status_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of affected_data_store_summary
        if self.affected_data_store_summary:
            _dict['affectedDataStoreSummary'] = self.affected_data_store_summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulnerabilitiesSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "criticalityCount": [VulnerabilitiesCriticalityCountInner.from_dict(_item) for _item in obj["criticalityCount"]] if obj.get("criticalityCount") is not None else None,
            "vulnerabilityTypeCount": [VulnerabilitiesSummaryVulnerabilityTypeCountInner.from_dict(_item) for _item in obj["vulnerabilityTypeCount"]] if obj.get("vulnerabilityTypeCount") is not None else None,
            "statusTypeCount": [VulnerabilitiesSummaryStatusTypeCountInner.from_dict(_item) for _item in obj["statusTypeCount"]] if obj.get("statusTypeCount") is not None else None,
            "statusSummary": VulnerabilitiesSummaryStatusSummary.from_dict(obj["statusSummary"]) if obj.get("statusSummary") is not None else None,
            "affectedDataStoreSummary": VulnerabilitiesSummaryAffectedDataStoreSummary.from_dict(obj["affectedDataStoreSummary"]) if obj.get("affectedDataStoreSummary") is not None else None
        })
        return _obj


