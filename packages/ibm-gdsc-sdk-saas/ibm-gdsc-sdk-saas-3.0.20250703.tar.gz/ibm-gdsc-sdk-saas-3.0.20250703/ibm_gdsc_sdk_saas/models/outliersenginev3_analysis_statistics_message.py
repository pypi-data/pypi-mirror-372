# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.outliersenginev3_analysis_performance_stats import Outliersenginev3AnalysisPerformanceStats
from typing import Optional, Set
from typing_extensions import Self

class Outliersenginev3AnalysisStatisticsMessage(BaseModel):
    """
    statistics of analysis tasks, with higher resolution on number of data sources, errors, and performance.
    """ # noqa: E501
    datasources_1h: Optional[StrictInt] = Field(default=None, description="Number of data sources analyzed, in the last hour.")
    datasources_24h: Optional[StrictInt] = Field(default=None, description="Number of data sources analyzed, in the last 24 hours.")
    datasources_72h: Optional[StrictInt] = Field(default=None, description="Number of data sources analyzed, in the last 3 days.")
    errors_1h: Optional[StrictInt] = Field(default=None, description="Number of errors in log, in the last hour.")
    errors_24h: Optional[StrictInt] = Field(default=None, description="Number of errors in log, in the last 24 hours.")
    errors_72h: Optional[StrictInt] = Field(default=None, description="Number of errors in log, in the last 3 days.")
    performance_1h: Optional[Outliersenginev3AnalysisPerformanceStats] = None
    performance_24h: Optional[Outliersenginev3AnalysisPerformanceStats] = None
    performance_3h: Optional[Outliersenginev3AnalysisPerformanceStats] = None
    performance_72h: Optional[Outliersenginev3AnalysisPerformanceStats] = None
    __properties: ClassVar[List[str]] = ["datasources_1h", "datasources_24h", "datasources_72h", "errors_1h", "errors_24h", "errors_72h", "performance_1h", "performance_24h", "performance_3h", "performance_72h"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Outliersenginev3AnalysisStatisticsMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of performance_1h
        if self.performance_1h:
            _dict['performance_1h'] = self.performance_1h.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance_24h
        if self.performance_24h:
            _dict['performance_24h'] = self.performance_24h.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance_3h
        if self.performance_3h:
            _dict['performance_3h'] = self.performance_3h.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance_72h
        if self.performance_72h:
            _dict['performance_72h'] = self.performance_72h.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Outliersenginev3AnalysisStatisticsMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasources_1h": obj.get("datasources_1h"),
            "datasources_24h": obj.get("datasources_24h"),
            "datasources_72h": obj.get("datasources_72h"),
            "errors_1h": obj.get("errors_1h"),
            "errors_24h": obj.get("errors_24h"),
            "errors_72h": obj.get("errors_72h"),
            "performance_1h": Outliersenginev3AnalysisPerformanceStats.from_dict(obj["performance_1h"]) if obj.get("performance_1h") is not None else None,
            "performance_24h": Outliersenginev3AnalysisPerformanceStats.from_dict(obj["performance_24h"]) if obj.get("performance_24h") is not None else None,
            "performance_3h": Outliersenginev3AnalysisPerformanceStats.from_dict(obj["performance_3h"]) if obj.get("performance_3h") is not None else None,
            "performance_72h": Outliersenginev3AnalysisPerformanceStats.from_dict(obj["performance_72h"]) if obj.get("performance_72h") is not None else None
        })
        return _obj


