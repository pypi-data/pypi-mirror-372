# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.reportsv3_report_filter_brackets import Reportsv3ReportFilterBrackets
from typing import Optional, Set
from typing_extensions import Self

class Reportsrunnerv3GetAuditDataCountRequest(BaseModel):
    """
    GetReportAuditCountRequest is the argument get audit report task count.
    """ # noqa: E501
    job_id: Optional[StrictStr] = Field(default=None, description="Unique token identifying the export job.")
    report_filters: Optional[Reportsv3ReportFilterBrackets] = None
    report_id: Optional[StrictStr] = Field(default=None, description="Optional: the ID of the Report we wish to run (e.g. 000000000000000000000905).")
    schema_name: Optional[StrictStr] = Field(default=None, description="The schema name to organize report task temp tables.")
    table_name: Optional[StrictStr] = Field(default=None, description="The table name to save report task data(task_id).")
    __properties: ClassVar[List[str]] = ["job_id", "report_filters", "report_id", "schema_name", "table_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reportsrunnerv3GetAuditDataCountRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of report_filters
        if self.report_filters:
            _dict['report_filters'] = self.report_filters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reportsrunnerv3GetAuditDataCountRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_id": obj.get("job_id"),
            "report_filters": Reportsv3ReportFilterBrackets.from_dict(obj["report_filters"]) if obj.get("report_filters") is not None else None,
            "report_id": obj.get("report_id"),
            "schema_name": obj.get("schema_name"),
            "table_name": obj.get("table_name")
        })
        return _obj


