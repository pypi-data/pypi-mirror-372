# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.reportsv3_report_filter_brackets import Reportsv3ReportFilterBrackets
from ibm_gdsc_sdk_saas.models.schedulerv3_audit_type import Schedulerv3AuditType
from ibm_gdsc_sdk_saas.models.schedulerv3_configuration_item import Schedulerv3ConfigurationItem
from ibm_gdsc_sdk_saas.models.schedulerv3_delivery_method import Schedulerv3DeliveryMethod
from ibm_gdsc_sdk_saas.models.schedulerv3_recipient import Schedulerv3Recipient
from ibm_gdsc_sdk_saas.models.schedulerv3_task_parameter import Schedulerv3TaskParameter
from ibm_gdsc_sdk_saas.models.schedulerv3_task_type import Schedulerv3TaskType
from ibm_gdsc_sdk_saas.models.schedulerv3_workflow_type import Schedulerv3WorkflowType
from typing import Optional, Set
from typing_extensions import Self

class Schedulerv3ScheduledTask(BaseModel):
    """
    Scheduled Task for Post v3/schedules api.
    """ # noqa: E501
    audit_type: Optional[Schedulerv3AuditType] = None
    delivery_method: Optional[Schedulerv3DeliveryMethod] = None
    distribution_rule_ids: Optional[List[StrictStr]] = Field(default=None, description="Optional: Distribution rule IDs for a task. Will be populated by recipients on save.")
    email_subject: Optional[StrictStr] = Field(default=None, description="Optional: Email subject with replaceable variables.")
    instructions: Optional[StrictStr] = Field(default=None, description="Optional: Instructions for the task owner.")
    name: Optional[StrictStr] = Field(default=None, description="Task name (usually the same as the report name).")
    parameter: Optional[Schedulerv3TaskParameter] = None
    recipients: Optional[List[Schedulerv3Recipient]] = Field(default=None, description="Optional: Report result recipients.")
    report_filters: Optional[Reportsv3ReportFilterBrackets] = None
    scheduled_task_id: Optional[StrictStr] = Field(default=None, description="Optional: Id for the task.")
    type: Optional[Schedulerv3TaskType] = None
    workflow_investigation_links: Optional[List[Schedulerv3ConfigurationItem]] = None
    workflow_response_template: Optional[Schedulerv3ConfigurationItem] = None
    workflow_type: Optional[Schedulerv3WorkflowType] = None
    workflow_unique_fields: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["audit_type", "delivery_method", "distribution_rule_ids", "email_subject", "instructions", "name", "parameter", "recipients", "report_filters", "scheduled_task_id", "type", "workflow_investigation_links", "workflow_response_template", "workflow_type", "workflow_unique_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Schedulerv3ScheduledTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_method
        if self.delivery_method:
            _dict['delivery_method'] = self.delivery_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameter
        if self.parameter:
            _dict['parameter'] = self.parameter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of report_filters
        if self.report_filters:
            _dict['report_filters'] = self.report_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in workflow_investigation_links (list)
        _items = []
        if self.workflow_investigation_links:
            for _item in self.workflow_investigation_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workflow_investigation_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of workflow_response_template
        if self.workflow_response_template:
            _dict['workflow_response_template'] = self.workflow_response_template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Schedulerv3ScheduledTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audit_type": obj.get("audit_type"),
            "delivery_method": Schedulerv3DeliveryMethod.from_dict(obj["delivery_method"]) if obj.get("delivery_method") is not None else None,
            "distribution_rule_ids": obj.get("distribution_rule_ids"),
            "email_subject": obj.get("email_subject"),
            "instructions": obj.get("instructions"),
            "name": obj.get("name"),
            "parameter": Schedulerv3TaskParameter.from_dict(obj["parameter"]) if obj.get("parameter") is not None else None,
            "recipients": [Schedulerv3Recipient.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "report_filters": Reportsv3ReportFilterBrackets.from_dict(obj["report_filters"]) if obj.get("report_filters") is not None else None,
            "scheduled_task_id": obj.get("scheduled_task_id"),
            "type": obj.get("type"),
            "workflow_investigation_links": [Schedulerv3ConfigurationItem.from_dict(_item) for _item in obj["workflow_investigation_links"]] if obj.get("workflow_investigation_links") is not None else None,
            "workflow_response_template": Schedulerv3ConfigurationItem.from_dict(obj["workflow_response_template"]) if obj.get("workflow_response_template") is not None else None,
            "workflow_type": obj.get("workflow_type"),
            "workflow_unique_fields": obj.get("workflow_unique_fields")
        })
        return _obj


