# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Reportsv3ChartSettingsv2(BaseModel):
    """
    ChartSettingsv2 encapsulates all data necessary for a VEGA chart object.
    """ # noqa: E501
    category_sequence_numbers: Optional[List[StrictInt]] = Field(default=None, description="Sequence numbers for the categories.")
    chart_id: Optional[StrictStr] = Field(default=None, description="The chart ID.")
    chart_title: Optional[StrictStr] = Field(default=None, description="The chart title.")
    creation_time: Optional[datetime] = Field(default=None, description="The creation time of the chart.")
    creator_user_id: Optional[StrictStr] = Field(default=None, description="The ID of the creator of the chart.")
    default_chart_expanded: Optional[StrictBool] = Field(default=None, description="Indicates if the default chart is expanded.")
    is_default_chart: Optional[StrictBool] = Field(default=None, description="Indicates if the chart is the default chart.")
    is_predefined: Optional[StrictBool] = Field(default=None, description="Indicates if the chart is predefined.")
    measure_sequence_numbers: Optional[List[StrictInt]] = Field(default=None, description="Sequence numbers for the measures.")
    refresh_rate: Optional[StrictInt] = Field(default=None, description="Chart refresh rate.")
    report_id: Optional[StrictStr] = Field(default=None, description="The ID of the report connected to the chart.")
    vega_definition: Optional[StrictStr] = Field(default=None, description="The VEGA chart definition in a stringified JSON.")
    __properties: ClassVar[List[str]] = ["category_sequence_numbers", "chart_id", "chart_title", "creation_time", "creator_user_id", "default_chart_expanded", "is_default_chart", "is_predefined", "measure_sequence_numbers", "refresh_rate", "report_id", "vega_definition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reportsv3ChartSettingsv2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reportsv3ChartSettingsv2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category_sequence_numbers": obj.get("category_sequence_numbers"),
            "chart_id": obj.get("chart_id"),
            "chart_title": obj.get("chart_title"),
            "creation_time": obj.get("creation_time"),
            "creator_user_id": obj.get("creator_user_id"),
            "default_chart_expanded": obj.get("default_chart_expanded"),
            "is_default_chart": obj.get("is_default_chart"),
            "is_predefined": obj.get("is_predefined"),
            "measure_sequence_numbers": obj.get("measure_sequence_numbers"),
            "refresh_rate": obj.get("refresh_rate"),
            "report_id": obj.get("report_id"),
            "vega_definition": obj.get("vega_definition")
        })
        return _obj


