# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.groupbuilderv3_group_member import Groupbuilderv3GroupMember
from ibm_gdsc_sdk_saas.models.groupbuilderv3_ldap_config import Groupbuilderv3LdapConfig
from typing import Optional, Set
from typing_extensions import Self

class Complianceacceleratorv3Group(BaseModel):
    """
    Group info for compliance.
    """ # noqa: E501
    desc: Optional[StrictStr] = None
    group_type_id: Optional[StrictInt] = Field(default=None, description="Group type ID.")
    id: Optional[StrictInt] = Field(default=None, description="Id of group.")
    ldap_config: Optional[Groupbuilderv3LdapConfig] = None
    members: Optional[List[Groupbuilderv3GroupMember]] = Field(default=None, description="Group members.")
    members_to_add: Optional[List[StrictStr]] = Field(default=None, description="Members of the groups to be stored.")
    members_to_delete: Optional[List[Groupbuilderv3GroupMember]] = Field(default=None, description="Member ids to be deleted.")
    name: Optional[StrictStr] = Field(default=None, description="Name of group.")
    parent: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["desc", "group_type_id", "id", "ldap_config", "members", "members_to_add", "members_to_delete", "name", "parent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Complianceacceleratorv3Group from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ldap_config
        if self.ldap_config:
            _dict['ldap_config'] = self.ldap_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item in self.members:
                if _item:
                    _items.append(_item.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in members_to_delete (list)
        _items = []
        if self.members_to_delete:
            for _item in self.members_to_delete:
                if _item:
                    _items.append(_item.to_dict())
            _dict['members_to_delete'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Complianceacceleratorv3Group from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "desc": obj.get("desc"),
            "group_type_id": obj.get("group_type_id"),
            "id": obj.get("id"),
            "ldap_config": Groupbuilderv3LdapConfig.from_dict(obj["ldap_config"]) if obj.get("ldap_config") is not None else None,
            "members": [Groupbuilderv3GroupMember.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "members_to_add": obj.get("members_to_add"),
            "members_to_delete": [Groupbuilderv3GroupMember.from_dict(_item) for _item in obj["members_to_delete"]] if obj.get("members_to_delete") is not None else None,
            "name": obj.get("name"),
            "parent": obj.get("parent")
        })
        return _obj


