# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Assetsv3AssetInformation(BaseModel):
    """
    AssetInformation - Asset Overview - Asset Information .
    """ # noqa: E501
    application: Optional[StrictStr] = None
    application_id: Optional[StrictStr] = None
    asset_name: Optional[StrictStr] = None
    asset_type: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    criticality: Optional[StrictStr] = None
    data_center: Optional[StrictStr] = None
    database: Optional[StrictStr] = None
    database_protocol: Optional[StrictStr] = None
    database_type: Optional[StrictStr] = None
    deployment: Optional[StrictStr] = None
    endpoint: Optional[StrictStr] = None
    environment: Optional[StrictStr] = None
    folder_path: Optional[StrictStr] = None
    gdp_data_sources: Optional[StrictStr] = None
    has_training_data: Optional[StrictBool] = None
    host_name: Optional[StrictStr] = None
    last_activity: Optional[StrictStr] = None
    last_trained: Optional[StrictStr] = None
    mac_address: Optional[StrictStr] = None
    model: Optional[StrictStr] = None
    os: Optional[StrictStr] = None
    owner: Optional[StrictStr] = None
    publisher: Optional[StrictStr] = None
    region: Optional[StrictStr] = None
    risk_level: Optional[StrictStr] = None
    var_schema: Optional[StrictStr] = Field(default=None, alias="schema")
    server: Optional[StrictStr] = None
    service: Optional[StrictStr] = None
    size: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    storage: Optional[StrictStr] = None
    storage_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["application", "application_id", "asset_name", "asset_type", "category", "city", "country", "criticality", "data_center", "database", "database_protocol", "database_type", "deployment", "endpoint", "environment", "folder_path", "gdp_data_sources", "has_training_data", "host_name", "last_activity", "last_trained", "mac_address", "model", "os", "owner", "publisher", "region", "risk_level", "schema", "server", "service", "size", "state", "storage", "storage_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Assetsv3AssetInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Assetsv3AssetInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application": obj.get("application"),
            "application_id": obj.get("application_id"),
            "asset_name": obj.get("asset_name"),
            "asset_type": obj.get("asset_type"),
            "category": obj.get("category"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "criticality": obj.get("criticality"),
            "data_center": obj.get("data_center"),
            "database": obj.get("database"),
            "database_protocol": obj.get("database_protocol"),
            "database_type": obj.get("database_type"),
            "deployment": obj.get("deployment"),
            "endpoint": obj.get("endpoint"),
            "environment": obj.get("environment"),
            "folder_path": obj.get("folder_path"),
            "gdp_data_sources": obj.get("gdp_data_sources"),
            "has_training_data": obj.get("has_training_data"),
            "host_name": obj.get("host_name"),
            "last_activity": obj.get("last_activity"),
            "last_trained": obj.get("last_trained"),
            "mac_address": obj.get("mac_address"),
            "model": obj.get("model"),
            "os": obj.get("os"),
            "owner": obj.get("owner"),
            "publisher": obj.get("publisher"),
            "region": obj.get("region"),
            "risk_level": obj.get("risk_level"),
            "schema": obj.get("schema"),
            "server": obj.get("server"),
            "service": obj.get("service"),
            "size": obj.get("size"),
            "state": obj.get("state"),
            "storage": obj.get("storage"),
            "storage_id": obj.get("storage_id")
        })
        return _obj


