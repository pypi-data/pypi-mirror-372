# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.assetsv3_account_vertex import Assetsv3AccountVertex
from ibm_gdsc_sdk_saas.models.assetsv3_application_vertex import Assetsv3ApplicationVertex
from ibm_gdsc_sdk_saas.models.assetsv3_database_vertex import Assetsv3DatabaseVertex
from ibm_gdsc_sdk_saas.models.assetsv3_deployment_vertex import Assetsv3DeploymentVertex
from ibm_gdsc_sdk_saas.models.assetsv3_endpoint_vertex import Assetsv3EndpointVertex
from ibm_gdsc_sdk_saas.models.assetsv3_host_vertex import Assetsv3HostVertex
from ibm_gdsc_sdk_saas.models.assetsv3_ip_vertex import Assetsv3IPVertex
from ibm_gdsc_sdk_saas.models.assetsv3_model_vertex import Assetsv3ModelVertex
from ibm_gdsc_sdk_saas.models.assetsv3_port_vertex import Assetsv3PortVertex
from ibm_gdsc_sdk_saas.models.assetsv3_resources_vertex import Assetsv3ResourcesVertex
from ibm_gdsc_sdk_saas.models.assetsv3_storage_vertex import Assetsv3StorageVertex
from ibm_gdsc_sdk_saas.models.assetsv3_subscription_vertex import Assetsv3SubscriptionVertex
from typing import Optional, Set
from typing_extensions import Self

class Assetsv3AssetIngestionRequest(BaseModel):
    """
    Assetsv3AssetIngestionRequest
    """ # noqa: E501
    accounts: Optional[List[Assetsv3AccountVertex]] = None
    applications: Optional[List[Assetsv3ApplicationVertex]] = None
    databases: Optional[List[Assetsv3DatabaseVertex]] = None
    deployments: Optional[List[Assetsv3DeploymentVertex]] = None
    endpoints: Optional[List[Assetsv3EndpointVertex]] = None
    hosts: Optional[List[Assetsv3HostVertex]] = None
    ips: Optional[List[Assetsv3IPVertex]] = None
    models: Optional[List[Assetsv3ModelVertex]] = None
    origin: Optional[StrictStr] = None
    ports: Optional[List[Assetsv3PortVertex]] = None
    resources: Optional[List[Assetsv3ResourcesVertex]] = None
    storages: Optional[List[Assetsv3StorageVertex]] = None
    subscriptions: Optional[List[Assetsv3SubscriptionVertex]] = None
    __properties: ClassVar[List[str]] = ["accounts", "applications", "databases", "deployments", "endpoints", "hosts", "ips", "models", "origin", "ports", "resources", "storages", "subscriptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Assetsv3AssetIngestionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in applications (list)
        _items = []
        if self.applications:
            for _item in self.applications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['applications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in databases (list)
        _items = []
        if self.databases:
            for _item in self.databases:
                if _item:
                    _items.append(_item.to_dict())
            _dict['databases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deployments (list)
        _items = []
        if self.deployments:
            for _item in self.deployments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deployments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item in self.endpoints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hosts (list)
        _items = []
        if self.hosts:
            for _item in self.hosts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hosts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ips (list)
        _items = []
        if self.ips:
            for _item in self.ips:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ips'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in models (list)
        _items = []
        if self.models:
            for _item in self.models:
                if _item:
                    _items.append(_item.to_dict())
            _dict['models'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item in self.ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item in self.resources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in storages (list)
        _items = []
        if self.storages:
            for _item in self.storages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['storages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item in self.subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Assetsv3AssetIngestionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accounts": [Assetsv3AccountVertex.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "applications": [Assetsv3ApplicationVertex.from_dict(_item) for _item in obj["applications"]] if obj.get("applications") is not None else None,
            "databases": [Assetsv3DatabaseVertex.from_dict(_item) for _item in obj["databases"]] if obj.get("databases") is not None else None,
            "deployments": [Assetsv3DeploymentVertex.from_dict(_item) for _item in obj["deployments"]] if obj.get("deployments") is not None else None,
            "endpoints": [Assetsv3EndpointVertex.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "hosts": [Assetsv3HostVertex.from_dict(_item) for _item in obj["hosts"]] if obj.get("hosts") is not None else None,
            "ips": [Assetsv3IPVertex.from_dict(_item) for _item in obj["ips"]] if obj.get("ips") is not None else None,
            "models": [Assetsv3ModelVertex.from_dict(_item) for _item in obj["models"]] if obj.get("models") is not None else None,
            "origin": obj.get("origin"),
            "ports": [Assetsv3PortVertex.from_dict(_item) for _item in obj["ports"]] if obj.get("ports") is not None else None,
            "resources": [Assetsv3ResourcesVertex.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "storages": [Assetsv3StorageVertex.from_dict(_item) for _item in obj["storages"]] if obj.get("storages") is not None else None,
            "subscriptions": [Assetsv3SubscriptionVertex.from_dict(_item) for _item in obj["subscriptions"]] if obj.get("subscriptions") is not None else None
        })
        return _obj


