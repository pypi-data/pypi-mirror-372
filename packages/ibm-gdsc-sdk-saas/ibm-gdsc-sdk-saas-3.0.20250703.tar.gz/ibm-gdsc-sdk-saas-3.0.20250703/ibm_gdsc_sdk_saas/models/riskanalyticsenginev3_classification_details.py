# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_classification_match_details import Riskanalyticsenginev3ClassificationMatchDetails
from ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_classification_observation import Riskanalyticsenginev3ClassificationObservation
from typing import Optional, Set
from typing_extensions import Self

class Riskanalyticsenginev3ClassificationDetails(BaseModel):
    """
    ClassificationDetails message an additional info for the classification the UI.
    """ # noqa: E501
    class_description_nls: Optional[StrictStr] = Field(default=None, description="Class description for UI with translation.")
    class_key: Optional[StrictStr] = Field(default=None, description="Key of the classification found for this risk.")
    class_nls: Optional[StrictStr] = Field(default=None, description="Key of the classification found for this risk.")
    class_observations: Optional[List[Riskanalyticsenginev3ClassificationObservation]] = Field(default=None, description="Classification Observation array of observations that were found for this classification.")
    class_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value of the classification found for this risk.")
    classification_match_details: Optional[List[Riskanalyticsenginev3ClassificationMatchDetails]] = None
    classification_modified: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["class_description_nls", "class_key", "class_nls", "class_observations", "class_value", "classification_match_details", "classification_modified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Riskanalyticsenginev3ClassificationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in class_observations (list)
        _items = []
        if self.class_observations:
            for _item in self.class_observations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['class_observations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in classification_match_details (list)
        _items = []
        if self.classification_match_details:
            for _item in self.classification_match_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['classification_match_details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Riskanalyticsenginev3ClassificationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "class_description_nls": obj.get("class_description_nls"),
            "class_key": obj.get("class_key"),
            "class_nls": obj.get("class_nls"),
            "class_observations": [Riskanalyticsenginev3ClassificationObservation.from_dict(_item) for _item in obj["class_observations"]] if obj.get("class_observations") is not None else None,
            "class_value": obj.get("class_value"),
            "classification_match_details": [Riskanalyticsenginev3ClassificationMatchDetails.from_dict(_item) for _item in obj["classification_match_details"]] if obj.get("classification_match_details") is not None else None,
            "classification_modified": obj.get("classification_modified")
        })
        return _obj


