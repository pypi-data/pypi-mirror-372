# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_short_observation import Riskanalyticscontrollerv3ShortObservation
from ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_status import Riskanalyticscontrollerv3Status
from ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_pivot import Riskanalyticsenginev3Pivot
from ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_severity_level import Riskanalyticsenginev3SeverityLevel
from typing import Optional, Set
from typing_extensions import Self

class Riskanalyticscontrollerv3RiskEvent(BaseModel):
    """
    Risk event.
    """ # noqa: E501
    categorization_confidence: Optional[Union[StrictFloat, StrictInt]] = None
    categorization_modified: Optional[StrictBool] = None
    category_description: Optional[StrictStr] = Field(default=None, description="Category description of the risk.")
    classification: Optional[StrictStr] = Field(default=None, description="Classification of the risk // key of the classification.")
    classification_nls: Optional[StrictStr] = Field(default=None, description="Classification nls // key of nls.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the risk.")
    emerging_risk: Optional[StrictBool] = Field(default=None, description="Flag for emerging risks.")
    from_date: Optional[datetime] = Field(default=None, description="Opened date in format YYYY-MM-DDTHH:mm:ssZ.")
    justification: Optional[StrictStr] = Field(default=None, description="Justification.")
    pivot: Optional[Riskanalyticsenginev3Pivot] = None
    risk_id: Optional[StrictInt] = Field(default=None, description="Risk id.")
    severity: Optional[StrictInt] = Field(default=None, description="Severity of the risk.")
    severity_level: Optional[Riskanalyticsenginev3SeverityLevel] = None
    short_observations: Optional[List[Riskanalyticscontrollerv3ShortObservation]] = Field(default=None, description="Observations of the risk.")
    status: Optional[Riskanalyticscontrollerv3Status] = None
    status_changed_by_user_name: Optional[StrictStr] = Field(default=None, description="Status changed by the user name.")
    to_date: Optional[datetime] = Field(default=None, description="Last updated date in format YYYY-MM-DDTHH:mm:ssZ.")
    __properties: ClassVar[List[str]] = ["categorization_confidence", "categorization_modified", "category_description", "classification", "classification_nls", "description", "emerging_risk", "from_date", "justification", "pivot", "risk_id", "severity", "severity_level", "short_observations", "status", "status_changed_by_user_name", "to_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Riskanalyticscontrollerv3RiskEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pivot
        if self.pivot:
            _dict['pivot'] = self.pivot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in short_observations (list)
        _items = []
        if self.short_observations:
            for _item in self.short_observations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['short_observations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Riskanalyticscontrollerv3RiskEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categorization_confidence": obj.get("categorization_confidence"),
            "categorization_modified": obj.get("categorization_modified"),
            "category_description": obj.get("category_description"),
            "classification": obj.get("classification"),
            "classification_nls": obj.get("classification_nls"),
            "description": obj.get("description"),
            "emerging_risk": obj.get("emerging_risk"),
            "from_date": obj.get("from_date"),
            "justification": obj.get("justification"),
            "pivot": Riskanalyticsenginev3Pivot.from_dict(obj["pivot"]) if obj.get("pivot") is not None else None,
            "risk_id": obj.get("risk_id"),
            "severity": obj.get("severity"),
            "severity_level": obj.get("severity_level"),
            "short_observations": [Riskanalyticscontrollerv3ShortObservation.from_dict(_item) for _item in obj["short_observations"]] if obj.get("short_observations") is not None else None,
            "status": obj.get("status"),
            "status_changed_by_user_name": obj.get("status_changed_by_user_name"),
            "to_date": obj.get("to_date")
        })
        return _obj


