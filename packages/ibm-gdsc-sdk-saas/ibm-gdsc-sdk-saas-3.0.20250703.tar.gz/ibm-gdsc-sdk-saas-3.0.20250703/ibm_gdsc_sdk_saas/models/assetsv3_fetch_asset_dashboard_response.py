# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.assetsv3_assets_with_open_vulnerabilities import Assetsv3AssetsWithOpenVulnerabilities
from ibm_gdsc_sdk_saas.models.assetsv3_classification_scan_status import Assetsv3ClassificationScanStatus
from ibm_gdsc_sdk_saas.models.assetsv3_filter_catagory import Assetsv3FilterCatagory
from ibm_gdsc_sdk_saas.models.assetsv3_highest_asset_tag_counts import Assetsv3HighestAssetTagCounts
from ibm_gdsc_sdk_saas.models.assetsv3_tag_categories_data import Assetsv3TagCategoriesData
from ibm_gdsc_sdk_saas.models.assetsv3_tags_filter_data import Assetsv3TagsFilterData
from ibm_gdsc_sdk_saas.models.assetsv3_vulnerability_scan_status import Assetsv3VulnerabilityScanStatus
from ibm_gdsc_sdk_saas.models.assetsv3_vulnerability_trend import Assetsv3VulnerabilityTrend
from typing import Optional, Set
from typing_extensions import Self

class Assetsv3FetchAssetDashboardResponse(BaseModel):
    """
    Assetsv3FetchAssetDashboardResponse
    """ # noqa: E501
    assets_with_open_vulnerabilities: Optional[List[Assetsv3AssetsWithOpenVulnerabilities]] = None
    classification_scan_status: Optional[List[Assetsv3ClassificationScanStatus]] = None
    count: Optional[StrictStr] = None
    highest_asset_tag_counts: Optional[List[Assetsv3HighestAssetTagCounts]] = None
    selected_filters: Optional[List[Assetsv3FilterCatagory]] = None
    tag_categories_data: Optional[List[Assetsv3TagCategoriesData]] = None
    tags_filter_data: Optional[List[Assetsv3TagsFilterData]] = None
    template_id: Optional[StrictStr] = None
    vulnerability_scan_status: Optional[List[Assetsv3VulnerabilityScanStatus]] = None
    vulnerability_trend: Optional[List[Assetsv3VulnerabilityTrend]] = None
    __properties: ClassVar[List[str]] = ["assets_with_open_vulnerabilities", "classification_scan_status", "count", "highest_asset_tag_counts", "selected_filters", "tag_categories_data", "tags_filter_data", "template_id", "vulnerability_scan_status", "vulnerability_trend"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Assetsv3FetchAssetDashboardResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assets_with_open_vulnerabilities (list)
        _items = []
        if self.assets_with_open_vulnerabilities:
            for _item in self.assets_with_open_vulnerabilities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assets_with_open_vulnerabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in classification_scan_status (list)
        _items = []
        if self.classification_scan_status:
            for _item in self.classification_scan_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['classification_scan_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in highest_asset_tag_counts (list)
        _items = []
        if self.highest_asset_tag_counts:
            for _item in self.highest_asset_tag_counts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['highest_asset_tag_counts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in selected_filters (list)
        _items = []
        if self.selected_filters:
            for _item in self.selected_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['selected_filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tag_categories_data (list)
        _items = []
        if self.tag_categories_data:
            for _item in self.tag_categories_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tag_categories_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags_filter_data (list)
        _items = []
        if self.tags_filter_data:
            for _item in self.tags_filter_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags_filter_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vulnerability_scan_status (list)
        _items = []
        if self.vulnerability_scan_status:
            for _item in self.vulnerability_scan_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vulnerability_scan_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vulnerability_trend (list)
        _items = []
        if self.vulnerability_trend:
            for _item in self.vulnerability_trend:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vulnerability_trend'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Assetsv3FetchAssetDashboardResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assets_with_open_vulnerabilities": [Assetsv3AssetsWithOpenVulnerabilities.from_dict(_item) for _item in obj["assets_with_open_vulnerabilities"]] if obj.get("assets_with_open_vulnerabilities") is not None else None,
            "classification_scan_status": [Assetsv3ClassificationScanStatus.from_dict(_item) for _item in obj["classification_scan_status"]] if obj.get("classification_scan_status") is not None else None,
            "count": obj.get("count"),
            "highest_asset_tag_counts": [Assetsv3HighestAssetTagCounts.from_dict(_item) for _item in obj["highest_asset_tag_counts"]] if obj.get("highest_asset_tag_counts") is not None else None,
            "selected_filters": [Assetsv3FilterCatagory.from_dict(_item) for _item in obj["selected_filters"]] if obj.get("selected_filters") is not None else None,
            "tag_categories_data": [Assetsv3TagCategoriesData.from_dict(_item) for _item in obj["tag_categories_data"]] if obj.get("tag_categories_data") is not None else None,
            "tags_filter_data": [Assetsv3TagsFilterData.from_dict(_item) for _item in obj["tags_filter_data"]] if obj.get("tags_filter_data") is not None else None,
            "template_id": obj.get("template_id"),
            "vulnerability_scan_status": [Assetsv3VulnerabilityScanStatus.from_dict(_item) for _item in obj["vulnerability_scan_status"]] if obj.get("vulnerability_scan_status") is not None else None,
            "vulnerability_trend": [Assetsv3VulnerabilityTrend.from_dict(_item) for _item in obj["vulnerability_trend"]] if obj.get("vulnerability_trend") is not None else None
        })
        return _obj


