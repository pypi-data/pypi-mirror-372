# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.reportsv3_chart_settingsv2 import Reportsv3ChartSettingsv2
from ibm_gdsc_sdk_saas.models.reportsv3_model_type import Reportsv3ModelType
from ibm_gdsc_sdk_saas.models.reportsv3_report_definition import Reportsv3ReportDefinition
from ibm_gdsc_sdk_saas.models.reportsv3_run_time_parameter import Reportsv3RunTimeParameter
from typing import Optional, Set
from typing_extensions import Self

class Reportsrunnerv3GetChartDataRequestv2(BaseModel):
    """
    GetChartDataRequestv2 is the argument type used to run api.
    """ # noqa: E501
    chart_id: Optional[StrictStr] = Field(default=None, description="Optional: the ID of the chart we wish to get its data.")
    chart_settings: Optional[Reportsv3ChartSettingsv2] = None
    model_type: Optional[Reportsv3ModelType] = None
    report_definition: Optional[Reportsv3ReportDefinition] = None
    runtime_parameter_list: Optional[List[Reportsv3RunTimeParameter]] = Field(default=None, description="Runtime parameters.")
    time_zone: Optional[StrictStr] = Field(default=None, description="Optional: time zone.")
    __properties: ClassVar[List[str]] = ["chart_id", "chart_settings", "model_type", "report_definition", "runtime_parameter_list", "time_zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reportsrunnerv3GetChartDataRequestv2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chart_settings
        if self.chart_settings:
            _dict['chart_settings'] = self.chart_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of report_definition
        if self.report_definition:
            _dict['report_definition'] = self.report_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in runtime_parameter_list (list)
        _items = []
        if self.runtime_parameter_list:
            for _item in self.runtime_parameter_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['runtime_parameter_list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reportsrunnerv3GetChartDataRequestv2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chart_id": obj.get("chart_id"),
            "chart_settings": Reportsv3ChartSettingsv2.from_dict(obj["chart_settings"]) if obj.get("chart_settings") is not None else None,
            "model_type": obj.get("model_type"),
            "report_definition": Reportsv3ReportDefinition.from_dict(obj["report_definition"]) if obj.get("report_definition") is not None else None,
            "runtime_parameter_list": [Reportsv3RunTimeParameter.from_dict(_item) for _item in obj["runtime_parameter_list"]] if obj.get("runtime_parameter_list") is not None else None,
            "time_zone": obj.get("time_zone")
        })
        return _obj


