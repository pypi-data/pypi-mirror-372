# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.compliance import Compliance
from ibm_gdsc_sdk_saas.models.data_store_encryption_status import DataStoreEncryptionStatus
from ibm_gdsc_sdk_saas.models.sensitivity_category import SensitivityCategory
from ibm_gdsc_sdk_saas.models.service_provider import ServiceProvider
from ibm_gdsc_sdk_saas.models.store_classification_status import StoreClassificationStatus
from typing import Optional, Set
from typing_extensions import Self

class ListDataStoresFilterParameter(BaseModel):
    """
    ListDataStoresFilterParameter
    """ # noqa: E501
    store_types_family: Optional[List[StrictStr]] = Field(default=None, alias="storeTypesFamily")
    store_names: Optional[List[StrictStr]] = Field(default=None, alias="storeNames")
    store_types: Optional[List[StrictStr]] = Field(default=None, alias="storeTypes")
    service_providers: Optional[List[ServiceProvider]] = Field(default=None, alias="serviceProviders")
    cloud_account_ids: Optional[List[StrictStr]] = Field(default=None, alias="cloudAccountIds")
    cloud_regions: Optional[List[StrictStr]] = Field(default=None, alias="cloudRegions")
    labels: Optional[List[StrictStr]] = None
    classification_statuses: Optional[List[StoreClassificationStatus]] = Field(default=None, alias="classificationStatuses")
    sensitivity_tags: Optional[List[StrictStr]] = Field(default=None, alias="sensitivityTags")
    sensitivity_categories: Optional[List[SensitivityCategory]] = Field(default=None, alias="sensitivityCategories")
    compliances: Optional[List[Compliance]] = None
    cloud_tags: Optional[List[StrictStr]] = Field(default=None, alias="cloudTags")
    encryption_statuses: Optional[List[DataStoreEncryptionStatus]] = Field(default=None, alias="encryptionStatuses")
    store_partial_name: Optional[StrictStr] = Field(default=None, alias="storePartialName")
    __properties: ClassVar[List[str]] = ["storeTypesFamily", "storeNames", "storeTypes", "serviceProviders", "cloudAccountIds", "cloudRegions", "labels", "classificationStatuses", "sensitivityTags", "sensitivityCategories", "compliances", "cloudTags", "encryptionStatuses", "storePartialName"]

    @field_validator('store_types_family')
    def store_types_family_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SAAS', 'CLOUD']):
                raise ValueError("each list item must be one of ('SAAS', 'CLOUD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListDataStoresFilterParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListDataStoresFilterParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "storeTypesFamily": obj.get("storeTypesFamily"),
            "storeNames": obj.get("storeNames"),
            "storeTypes": obj.get("storeTypes"),
            "serviceProviders": obj.get("serviceProviders"),
            "cloudAccountIds": obj.get("cloudAccountIds"),
            "cloudRegions": obj.get("cloudRegions"),
            "labels": obj.get("labels"),
            "classificationStatuses": obj.get("classificationStatuses"),
            "sensitivityTags": obj.get("sensitivityTags"),
            "sensitivityCategories": obj.get("sensitivityCategories"),
            "compliances": obj.get("compliances"),
            "cloudTags": obj.get("cloudTags"),
            "encryptionStatuses": obj.get("encryptionStatuses"),
            "storePartialName": obj.get("storePartialName")
        })
        return _obj


