# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.schedulerv3_day_of_week import Schedulerv3DayOfWeek
from ibm_gdsc_sdk_saas.models.schedulerv3_day_order import Schedulerv3DayOrder
from ibm_gdsc_sdk_saas.models.schedulerv3_frequency import Schedulerv3Frequency
from ibm_gdsc_sdk_saas.models.schedulerv3_month import Schedulerv3Month
from ibm_gdsc_sdk_saas.models.schedulerv3_repeat_begin import Schedulerv3RepeatBegin
from ibm_gdsc_sdk_saas.models.schedulerv3_repeat_end import Schedulerv3RepeatEnd
from typing import Optional, Set
from typing_extensions import Self

class Complianceacceleratorv3AuditScheduler(BaseModel):
    """
    Audit scheduler.
    """ # noqa: E501
    begin_schedule: Optional[datetime] = Field(default=None, description="Begin the schedule on.")
    by_day_of_month: Optional[StrictBool] = Field(default=None, description="Either by day of month or date of the week of month.")
    day_of_month: Optional[StrictStr] = Field(default=None, description="The day of the month, combined with frequency = 4 because there last day of the month the data type is string.")
    day_of_week: Optional[List[Schedulerv3DayOfWeek]] = Field(default=None, description="What day do you want to run , combined with frequency= 3, such as Monday, Tuesday.")
    day_order: Optional[Schedulerv3DayOrder] = None
    day_order_day_of_week: Optional[Schedulerv3DayOfWeek] = None
    end_schedule: Optional[datetime] = Field(default=None, description="End the schedule on , if it is null means never ends.")
    frequency: Optional[Schedulerv3Frequency] = None
    months: Optional[List[Schedulerv3Month]] = Field(default=None, description="Month value.")
    never_end: Optional[StrictBool] = Field(default=None, description="Never end schedule or not.")
    repeat: Optional[StrictInt] = Field(default=None, description="Combined with frequency to define how often to run the job. ie, if frequncy =1 and repeat =3 means run the job every 3 hours.")
    repeat_begin: Optional[Schedulerv3RepeatBegin] = None
    repeat_end: Optional[Schedulerv3RepeatEnd] = None
    __properties: ClassVar[List[str]] = ["begin_schedule", "by_day_of_month", "day_of_month", "day_of_week", "day_order", "day_order_day_of_week", "end_schedule", "frequency", "months", "never_end", "repeat", "repeat_begin", "repeat_end"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Complianceacceleratorv3AuditScheduler from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of repeat_begin
        if self.repeat_begin:
            _dict['repeat_begin'] = self.repeat_begin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repeat_end
        if self.repeat_end:
            _dict['repeat_end'] = self.repeat_end.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Complianceacceleratorv3AuditScheduler from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "begin_schedule": obj.get("begin_schedule"),
            "by_day_of_month": obj.get("by_day_of_month"),
            "day_of_month": obj.get("day_of_month"),
            "day_of_week": obj.get("day_of_week"),
            "day_order": obj.get("day_order"),
            "day_order_day_of_week": obj.get("day_order_day_of_week"),
            "end_schedule": obj.get("end_schedule"),
            "frequency": obj.get("frequency"),
            "months": obj.get("months"),
            "never_end": obj.get("never_end"),
            "repeat": obj.get("repeat"),
            "repeat_begin": Schedulerv3RepeatBegin.from_dict(obj["repeat_begin"]) if obj.get("repeat_begin") is not None else None,
            "repeat_end": Schedulerv3RepeatEnd.from_dict(obj["repeat_end"]) if obj.get("repeat_end") is not None else None
        })
        return _obj


