# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.reportsv3_display_header import Reportsv3DisplayHeader
from ibm_gdsc_sdk_saas.models.reportsv3_in_report_additional_parameter import Reportsv3InReportAdditionalParameter
from ibm_gdsc_sdk_saas.models.reportsv3_report_tag import Reportsv3ReportTag
from ibm_gdsc_sdk_saas.models.reportsv3_run_time_parameter import Reportsv3RunTimeParameter
from typing import Optional, Set
from typing_extensions import Self

class Reportsv3ReportDisplayLayout(BaseModel):
    """
    ReportDisplayLayout has report matadata , rows and headers.
    """ # noqa: E501
    default_timestamp_header_id: Optional[StrictStr] = Field(default=None, description="The default timestamp header id.")
    fetch_size: Optional[StrictInt] = Field(default=None, description="Report data fetch size.")
    in_report_additional_parameter: Optional[List[Reportsv3InReportAdditionalParameter]] = Field(default=None, description="Additional Parameters for in report.")
    is_auditable: Optional[StrictBool] = Field(default=None, description="If a report is auditable.")
    is_predefined: Optional[StrictBool] = Field(default=None, description="Is predefined report.")
    number_of_events: Optional[StrictStr] = Field(default=None, description="Total count of the report results.")
    offset: Optional[StrictInt] = Field(default=None, description="Report data offset.")
    refresh_rate: Optional[StrictInt] = Field(default=None, description="Report refresh rate.")
    report_description: Optional[StrictStr] = Field(default=None, description="Report description.")
    report_headers: Optional[List[Reportsv3DisplayHeader]] = Field(default=None, description="The report headers.")
    report_id: Optional[StrictStr] = Field(default=None, description="The report ID.")
    report_name: Optional[StrictStr] = Field(default=None, description="Report name.")
    report_tags: Optional[List[Reportsv3ReportTag]] = Field(default=None, description="Report tags.")
    runtime_param_list: Optional[List[Reportsv3RunTimeParameter]] = Field(default=None, description="Runtime Parameter list.")
    selected_timestamp_header_id: Optional[StrictStr] = Field(default=None, description="The selected timestamp header id- in case the user override the default.")
    __properties: ClassVar[List[str]] = ["default_timestamp_header_id", "fetch_size", "in_report_additional_parameter", "is_auditable", "is_predefined", "number_of_events", "offset", "refresh_rate", "report_description", "report_headers", "report_id", "report_name", "report_tags", "runtime_param_list", "selected_timestamp_header_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reportsv3ReportDisplayLayout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in in_report_additional_parameter (list)
        _items = []
        if self.in_report_additional_parameter:
            for _item in self.in_report_additional_parameter:
                if _item:
                    _items.append(_item.to_dict())
            _dict['in_report_additional_parameter'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in report_headers (list)
        _items = []
        if self.report_headers:
            for _item in self.report_headers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['report_headers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in report_tags (list)
        _items = []
        if self.report_tags:
            for _item in self.report_tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['report_tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in runtime_param_list (list)
        _items = []
        if self.runtime_param_list:
            for _item in self.runtime_param_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['runtime_param_list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reportsv3ReportDisplayLayout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default_timestamp_header_id": obj.get("default_timestamp_header_id"),
            "fetch_size": obj.get("fetch_size"),
            "in_report_additional_parameter": [Reportsv3InReportAdditionalParameter.from_dict(_item) for _item in obj["in_report_additional_parameter"]] if obj.get("in_report_additional_parameter") is not None else None,
            "is_auditable": obj.get("is_auditable"),
            "is_predefined": obj.get("is_predefined"),
            "number_of_events": obj.get("number_of_events"),
            "offset": obj.get("offset"),
            "refresh_rate": obj.get("refresh_rate"),
            "report_description": obj.get("report_description"),
            "report_headers": [Reportsv3DisplayHeader.from_dict(_item) for _item in obj["report_headers"]] if obj.get("report_headers") is not None else None,
            "report_id": obj.get("report_id"),
            "report_name": obj.get("report_name"),
            "report_tags": [Reportsv3ReportTag.from_dict(_item) for _item in obj["report_tags"]] if obj.get("report_tags") is not None else None,
            "runtime_param_list": [Reportsv3RunTimeParameter.from_dict(_item) for _item in obj["runtime_param_list"]] if obj.get("runtime_param_list") is not None else None,
            "selected_timestamp_header_id": obj.get("selected_timestamp_header_id")
        })
        return _obj


