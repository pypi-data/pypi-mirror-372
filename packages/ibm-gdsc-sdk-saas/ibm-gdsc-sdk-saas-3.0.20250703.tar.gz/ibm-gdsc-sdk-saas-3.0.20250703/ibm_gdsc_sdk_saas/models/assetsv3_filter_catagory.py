# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.assetsv3_filter_sub_catagory import Assetsv3FilterSubCatagory
from ibm_gdsc_sdk_saas.models.assetsv3_timeline_date_range import Assetsv3TimelineDateRange
from typing import Optional, Set
from typing_extensions import Self

class Assetsv3FilterCatagory(BaseModel):
    """
    Assetsv3FilterCatagory
    """ # noqa: E501
    catagory_id: Optional[StrictStr] = None
    date_range: Optional[Assetsv3TimelineDateRange] = None
    selected_sub_catagory_list: Optional[List[Assetsv3FilterSubCatagory]] = None
    sub_catagory_ids: Optional[List[StrictStr]] = None
    sub_category_values: Optional[List[StrictStr]] = None
    timeline_value_selected: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["catagory_id", "date_range", "selected_sub_catagory_list", "sub_catagory_ids", "sub_category_values", "timeline_value_selected"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Assetsv3FilterCatagory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['date_range'] = self.date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in selected_sub_catagory_list (list)
        _items = []
        if self.selected_sub_catagory_list:
            for _item in self.selected_sub_catagory_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['selected_sub_catagory_list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Assetsv3FilterCatagory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "catagory_id": obj.get("catagory_id"),
            "date_range": Assetsv3TimelineDateRange.from_dict(obj["date_range"]) if obj.get("date_range") is not None else None,
            "selected_sub_catagory_list": [Assetsv3FilterSubCatagory.from_dict(_item) for _item in obj["selected_sub_catagory_list"]] if obj.get("selected_sub_catagory_list") is not None else None,
            "sub_catagory_ids": obj.get("sub_catagory_ids"),
            "sub_category_values": obj.get("sub_category_values"),
            "timeline_value_selected": obj.get("timeline_value_selected")
        })
        return _obj


