# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.connectionsv3_edge_deployment_server import Connectionsv3EdgeDeploymentServer
from ibm_gdsc_sdk_saas.models.connectionsv3_status import Connectionsv3Status
from typing import Optional, Set
from typing_extensions import Self

class Connectionsv3UCConnectionSummary(BaseModel):
    """
    Structure for [Universal connector] Connection.
    """ # noqa: E501
    alias: Optional[StrictStr] = Field(default=None, description="Connection configuration nickname, set by dev/user (optional).")
    config_id: Optional[StrictStr] = Field(default=None, description="Foreign key to the saved connection configuration by the user.")
    datasource_type: Optional[StrictStr] = Field(default=None, description="Datasource type.")
    edge_deployment_server: Optional[Connectionsv3EdgeDeploymentServer] = None
    filter_alias: Optional[StrictStr] = Field(default=None, description="Connector filter plugin alias (datasource, usually, like \"MongoDB\").")
    host: Optional[StrictStr] = Field(default=None, description="URI where related Universal connector service is running/listening.")
    input_alias: Optional[StrictStr] = Field(default=None, description="Connection input plugin alias, like \"Filebeat\".")
    last_response: Optional[StrictStr] = Field(default=None, description="The heartbeat.")
    port: Optional[StrictStr] = Field(default=None, description="Port where the related Universal connector service is running/listening.")
    status: Optional[Connectionsv3Status] = None
    status_text: Optional[StrictStr] = Field(default=None, description="If status is not OK, details what's wrong (non-localized).")
    uc_connection_id: Optional[StrictStr] = Field(default=None, description="UC connection id.")
    __properties: ClassVar[List[str]] = ["alias", "config_id", "datasource_type", "edge_deployment_server", "filter_alias", "host", "input_alias", "last_response", "port", "status", "status_text", "uc_connection_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connectionsv3UCConnectionSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of edge_deployment_server
        if self.edge_deployment_server:
            _dict['edge_deployment_server'] = self.edge_deployment_server.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connectionsv3UCConnectionSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alias": obj.get("alias"),
            "config_id": obj.get("config_id"),
            "datasource_type": obj.get("datasource_type"),
            "edge_deployment_server": Connectionsv3EdgeDeploymentServer.from_dict(obj["edge_deployment_server"]) if obj.get("edge_deployment_server") is not None else None,
            "filter_alias": obj.get("filter_alias"),
            "host": obj.get("host"),
            "input_alias": obj.get("input_alias"),
            "last_response": obj.get("last_response"),
            "port": obj.get("port"),
            "status": obj.get("status"),
            "status_text": obj.get("status_text"),
            "uc_connection_id": obj.get("uc_connection_id")
        })
        return _obj


