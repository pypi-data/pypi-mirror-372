# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibm_gdsc_sdk_saas.models.complianceacceleratorv3_audit_scheduler import Complianceacceleratorv3AuditScheduler
from ibm_gdsc_sdk_saas.models.schedulerv3_recipient import Schedulerv3Recipient
from ibm_gdsc_sdk_saas.models.schedulerv3_scheduled_task import Schedulerv3ScheduledTask
from typing import Optional, Set
from typing_extensions import Self

class Complianceacceleratorv3AuditConfig(BaseModel):
    """
    Audit scheduling configuration.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Audit description.")
    enabled: Optional[StrictBool] = Field(default=None, description="If audit is enabled to run.")
    id: Optional[StrictStr] = Field(default=None, description="Audit id.")
    instructions: Optional[StrictStr] = Field(default=None, description="Audit instructions.")
    is_deletion: Optional[StrictBool] = Field(default=None, description="Delete flag.")
    name: Optional[StrictStr] = Field(default=None, description="Audit name.")
    owner: Optional[Schedulerv3Recipient] = None
    recipients: Optional[List[Schedulerv3Recipient]] = Field(default=None, description="Recepients.")
    report_key: Optional[StrictStr] = Field(default=None, description="Which reports set will be used.")
    run_once_now: Optional[StrictBool] = Field(default=None, description="Flag if run once right away.")
    scheduler: Optional[Complianceacceleratorv3AuditScheduler] = None
    tasks: Optional[List[Schedulerv3ScheduledTask]] = Field(default=None, description="Array of tasks.")
    __properties: ClassVar[List[str]] = ["description", "enabled", "id", "instructions", "is_deletion", "name", "owner", "recipients", "report_key", "run_once_now", "scheduler", "tasks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Complianceacceleratorv3AuditConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of scheduler
        if self.scheduler:
            _dict['scheduler'] = self.scheduler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item in self.tasks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tasks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Complianceacceleratorv3AuditConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "instructions": obj.get("instructions"),
            "is_deletion": obj.get("is_deletion"),
            "name": obj.get("name"),
            "owner": Schedulerv3Recipient.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "recipients": [Schedulerv3Recipient.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "report_key": obj.get("report_key"),
            "run_once_now": obj.get("run_once_now"),
            "scheduler": Complianceacceleratorv3AuditScheduler.from_dict(obj["scheduler"]) if obj.get("scheduler") is not None else None,
            "tasks": [Schedulerv3ScheduledTask.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None
        })
        return _obj


