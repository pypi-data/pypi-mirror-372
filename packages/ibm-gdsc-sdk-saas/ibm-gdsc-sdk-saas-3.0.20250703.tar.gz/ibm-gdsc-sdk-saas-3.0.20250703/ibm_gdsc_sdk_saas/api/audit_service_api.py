# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from ibm_gdsc_sdk_saas.models.auditv3_get_activity_records_response import Auditv3GetActivityRecordsResponse
from ibm_gdsc_sdk_saas.models.auditv3_put_activity_record_request import Auditv3PutActivityRecordRequest
from ibm_gdsc_sdk_saas.models.auditv3_put_activity_record_response import Auditv3PutActivityRecordResponse

from ibm_gdsc_sdk_saas.api_client import ApiClient, RequestSerialized
from ibm_gdsc_sdk_saas.api_response import ApiResponse
from ibm_gdsc_sdk_saas.rest import RESTResponseType


class AuditServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def audit_service_get_activity_records(
        self,
        start_time: Annotated[Optional[datetime], Field(description="Return records starting at this time (>=).")] = None,
        end_time: Annotated[Optional[datetime], Field(description="Return records ending before this time (<).")] = None,
        uid: Annotated[Optional[StrictStr], Field(description="Return records with this service/collection id.")] = None,
        action_taken: Annotated[Optional[StrictStr], Field(description="Return records matching this operation (CRUD or other action).")] = None,
        context: Annotated[Optional[StrictStr], Field(description="Return records for this service/collection.")] = None,
        changes_made: Annotated[Optional[StrictStr], Field(description="Return records created only for this reason.")] = None,
        performed_by: Annotated[Optional[StrictStr], Field(description="Return records originating with the specified user id.")] = None,
        context_description: Annotated[Optional[StrictStr], Field(description="Return records with this label.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Return records based on the query.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The amount to offset the rows by for pagination.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The max amount of rows to return for pagination.")] = None,
        filter: Annotated[Optional[StrictBool], Field(description="Return eligable filters if this is true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Auditv3GetActivityRecordsResponse:
        """(Deprecated) Summary: Get activity records Description: Return activity records that match the arguments passed in the request.  Multiple values can be passed to the (UID, Context, ActionTaken, PerformedBy) fields by supplying a  comma-separated list to the corresponding fields in the request.  For instance to check for  multiple Contexts set the field to \"op1, op2, op3\".


        :param start_time: Return records starting at this time (>=).
        :type start_time: datetime
        :param end_time: Return records ending before this time (<).
        :type end_time: datetime
        :param uid: Return records with this service/collection id.
        :type uid: str
        :param action_taken: Return records matching this operation (CRUD or other action).
        :type action_taken: str
        :param context: Return records for this service/collection.
        :type context: str
        :param changes_made: Return records created only for this reason.
        :type changes_made: str
        :param performed_by: Return records originating with the specified user id.
        :type performed_by: str
        :param context_description: Return records with this label.
        :type context_description: str
        :param query: Return records based on the query.
        :type query: str
        :param offset: The amount to offset the rows by for pagination.
        :type offset: int
        :param limit: The max amount of rows to return for pagination.
        :type limit: int
        :param filter: Return eligable filters if this is true.
        :type filter: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api/v3/activity is deprecated.", DeprecationWarning)

        _param = self._audit_service_get_activity_records_serialize(
            start_time=start_time,
            end_time=end_time,
            uid=uid,
            action_taken=action_taken,
            context=context,
            changes_made=changes_made,
            performed_by=performed_by,
            context_description=context_description,
            query=query,
            offset=offset,
            limit=limit,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Auditv3GetActivityRecordsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def audit_service_get_activity_records_with_http_info(
        self,
        start_time: Annotated[Optional[datetime], Field(description="Return records starting at this time (>=).")] = None,
        end_time: Annotated[Optional[datetime], Field(description="Return records ending before this time (<).")] = None,
        uid: Annotated[Optional[StrictStr], Field(description="Return records with this service/collection id.")] = None,
        action_taken: Annotated[Optional[StrictStr], Field(description="Return records matching this operation (CRUD or other action).")] = None,
        context: Annotated[Optional[StrictStr], Field(description="Return records for this service/collection.")] = None,
        changes_made: Annotated[Optional[StrictStr], Field(description="Return records created only for this reason.")] = None,
        performed_by: Annotated[Optional[StrictStr], Field(description="Return records originating with the specified user id.")] = None,
        context_description: Annotated[Optional[StrictStr], Field(description="Return records with this label.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Return records based on the query.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The amount to offset the rows by for pagination.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The max amount of rows to return for pagination.")] = None,
        filter: Annotated[Optional[StrictBool], Field(description="Return eligable filters if this is true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Auditv3GetActivityRecordsResponse]:
        """(Deprecated) Summary: Get activity records Description: Return activity records that match the arguments passed in the request.  Multiple values can be passed to the (UID, Context, ActionTaken, PerformedBy) fields by supplying a  comma-separated list to the corresponding fields in the request.  For instance to check for  multiple Contexts set the field to \"op1, op2, op3\".


        :param start_time: Return records starting at this time (>=).
        :type start_time: datetime
        :param end_time: Return records ending before this time (<).
        :type end_time: datetime
        :param uid: Return records with this service/collection id.
        :type uid: str
        :param action_taken: Return records matching this operation (CRUD or other action).
        :type action_taken: str
        :param context: Return records for this service/collection.
        :type context: str
        :param changes_made: Return records created only for this reason.
        :type changes_made: str
        :param performed_by: Return records originating with the specified user id.
        :type performed_by: str
        :param context_description: Return records with this label.
        :type context_description: str
        :param query: Return records based on the query.
        :type query: str
        :param offset: The amount to offset the rows by for pagination.
        :type offset: int
        :param limit: The max amount of rows to return for pagination.
        :type limit: int
        :param filter: Return eligable filters if this is true.
        :type filter: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api/v3/activity is deprecated.", DeprecationWarning)

        _param = self._audit_service_get_activity_records_serialize(
            start_time=start_time,
            end_time=end_time,
            uid=uid,
            action_taken=action_taken,
            context=context,
            changes_made=changes_made,
            performed_by=performed_by,
            context_description=context_description,
            query=query,
            offset=offset,
            limit=limit,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Auditv3GetActivityRecordsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def audit_service_get_activity_records_without_preload_content(
        self,
        start_time: Annotated[Optional[datetime], Field(description="Return records starting at this time (>=).")] = None,
        end_time: Annotated[Optional[datetime], Field(description="Return records ending before this time (<).")] = None,
        uid: Annotated[Optional[StrictStr], Field(description="Return records with this service/collection id.")] = None,
        action_taken: Annotated[Optional[StrictStr], Field(description="Return records matching this operation (CRUD or other action).")] = None,
        context: Annotated[Optional[StrictStr], Field(description="Return records for this service/collection.")] = None,
        changes_made: Annotated[Optional[StrictStr], Field(description="Return records created only for this reason.")] = None,
        performed_by: Annotated[Optional[StrictStr], Field(description="Return records originating with the specified user id.")] = None,
        context_description: Annotated[Optional[StrictStr], Field(description="Return records with this label.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Return records based on the query.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The amount to offset the rows by for pagination.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The max amount of rows to return for pagination.")] = None,
        filter: Annotated[Optional[StrictBool], Field(description="Return eligable filters if this is true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Summary: Get activity records Description: Return activity records that match the arguments passed in the request.  Multiple values can be passed to the (UID, Context, ActionTaken, PerformedBy) fields by supplying a  comma-separated list to the corresponding fields in the request.  For instance to check for  multiple Contexts set the field to \"op1, op2, op3\".


        :param start_time: Return records starting at this time (>=).
        :type start_time: datetime
        :param end_time: Return records ending before this time (<).
        :type end_time: datetime
        :param uid: Return records with this service/collection id.
        :type uid: str
        :param action_taken: Return records matching this operation (CRUD or other action).
        :type action_taken: str
        :param context: Return records for this service/collection.
        :type context: str
        :param changes_made: Return records created only for this reason.
        :type changes_made: str
        :param performed_by: Return records originating with the specified user id.
        :type performed_by: str
        :param context_description: Return records with this label.
        :type context_description: str
        :param query: Return records based on the query.
        :type query: str
        :param offset: The amount to offset the rows by for pagination.
        :type offset: int
        :param limit: The max amount of rows to return for pagination.
        :type limit: int
        :param filter: Return eligable filters if this is true.
        :type filter: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /api/v3/activity is deprecated.", DeprecationWarning)

        _param = self._audit_service_get_activity_records_serialize(
            start_time=start_time,
            end_time=end_time,
            uid=uid,
            action_taken=action_taken,
            context=context,
            changes_made=changes_made,
            performed_by=performed_by,
            context_description=context_description,
            query=query,
            offset=offset,
            limit=limit,
            filter=filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Auditv3GetActivityRecordsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _audit_service_get_activity_records_serialize(
        self,
        start_time,
        end_time,
        uid,
        action_taken,
        context,
        changes_made,
        performed_by,
        context_description,
        query,
        offset,
        limit,
        filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'start_time',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start_time', start_time))
            
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'end_time',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end_time', end_time))
            
        if uid is not None:
            
            _query_params.append(('uid', uid))
            
        if action_taken is not None:
            
            _query_params.append(('action_taken', action_taken))
            
        if context is not None:
            
            _query_params.append(('context', context))
            
        if changes_made is not None:
            
            _query_params.append(('changes_made', changes_made))
            
        if performed_by is not None:
            
            _query_params.append(('performed_by', performed_by))
            
        if context_description is not None:
            
            _query_params.append(('context_description', context_description))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth', 
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v3/activity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def audit_service_put_download_activity_record(
        self,
        auditv3_put_activity_record_request: Auditv3PutActivityRecordRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Auditv3PutActivityRecordResponse:
        """Summary: Put download activity record Description: Create an activity log record with the arguments passed in the request.


        :param auditv3_put_activity_record_request: (required)
        :type auditv3_put_activity_record_request: Auditv3PutActivityRecordRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._audit_service_put_download_activity_record_serialize(
            auditv3_put_activity_record_request=auditv3_put_activity_record_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Auditv3PutActivityRecordResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def audit_service_put_download_activity_record_with_http_info(
        self,
        auditv3_put_activity_record_request: Auditv3PutActivityRecordRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Auditv3PutActivityRecordResponse]:
        """Summary: Put download activity record Description: Create an activity log record with the arguments passed in the request.


        :param auditv3_put_activity_record_request: (required)
        :type auditv3_put_activity_record_request: Auditv3PutActivityRecordRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._audit_service_put_download_activity_record_serialize(
            auditv3_put_activity_record_request=auditv3_put_activity_record_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Auditv3PutActivityRecordResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def audit_service_put_download_activity_record_without_preload_content(
        self,
        auditv3_put_activity_record_request: Auditv3PutActivityRecordRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Summary: Put download activity record Description: Create an activity log record with the arguments passed in the request.


        :param auditv3_put_activity_record_request: (required)
        :type auditv3_put_activity_record_request: Auditv3PutActivityRecordRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._audit_service_put_download_activity_record_serialize(
            auditv3_put_activity_record_request=auditv3_put_activity_record_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Auditv3PutActivityRecordResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _audit_service_put_download_activity_record_serialize(
        self,
        auditv3_put_activity_record_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if auditv3_put_activity_record_request is not None:
            _body_params = auditv3_put_activity_record_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth', 
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v3/activity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


