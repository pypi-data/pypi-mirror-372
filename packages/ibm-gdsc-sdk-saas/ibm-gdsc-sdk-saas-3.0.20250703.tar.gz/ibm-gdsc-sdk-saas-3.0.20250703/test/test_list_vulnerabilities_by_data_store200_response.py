# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_saas.models.list_vulnerabilities_by_data_store200_response import ListVulnerabilitiesByDataStore200Response

class TestListVulnerabilitiesByDataStore200Response(unittest.TestCase):
    """ListVulnerabilitiesByDataStore200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListVulnerabilitiesByDataStore200Response:
        """Test ListVulnerabilitiesByDataStore200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListVulnerabilitiesByDataStore200Response`
        """
        model = ListVulnerabilitiesByDataStore200Response()
        if include_optional:
            return ListVulnerabilitiesByDataStore200Response(
                results = [
                    ibm_gdsc_sdk_saas.models.vulnerability_by_data_store_list_item.VulnerabilityByDataStoreListItem(
                        data_store_id = 'arn:aws:s3::123456789101:polar-bucket', 
                        data_store_type = 's3', 
                        data_store_name = 'polar-bucket', 
                        cloud_account_id = '123456789101', 
                        cloud_service_provider = 'aws', 
                        vulnerability_criticality_count = [
                            ibm_gdsc_sdk_saas.models.vulnerabilities_criticality_count_inner.VulnerabilitiesCriticalityCount_inner(
                                criticality = 'HIGH', 
                                count = 5, )
                            ], 
                        sensitivities_summary = [
                            ibm_gdsc_sdk_saas.models.sensitivity_summary.SensitivitySummary(
                                tag = 'BUSINESS_EMAIL_ADDRESS', 
                                count = 230, 
                                category = 'Personal', )
                            ], 
                        custodian = '', )
                    ],
                next_token = ''
            )
        else:
            return ListVulnerabilitiesByDataStore200Response(
                results = [
                    ibm_gdsc_sdk_saas.models.vulnerability_by_data_store_list_item.VulnerabilityByDataStoreListItem(
                        data_store_id = 'arn:aws:s3::123456789101:polar-bucket', 
                        data_store_type = 's3', 
                        data_store_name = 'polar-bucket', 
                        cloud_account_id = '123456789101', 
                        cloud_service_provider = 'aws', 
                        vulnerability_criticality_count = [
                            ibm_gdsc_sdk_saas.models.vulnerabilities_criticality_count_inner.VulnerabilitiesCriticalityCount_inner(
                                criticality = 'HIGH', 
                                count = 5, )
                            ], 
                        sensitivities_summary = [
                            ibm_gdsc_sdk_saas.models.sensitivity_summary.SensitivitySummary(
                                tag = 'BUSINESS_EMAIL_ADDRESS', 
                                count = 230, 
                                category = 'Personal', )
                            ], 
                        custodian = '', )
                    ],
                next_token = '',
        )
        """

    def testListVulnerabilitiesByDataStore200Response(self):
        """Test ListVulnerabilitiesByDataStore200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
