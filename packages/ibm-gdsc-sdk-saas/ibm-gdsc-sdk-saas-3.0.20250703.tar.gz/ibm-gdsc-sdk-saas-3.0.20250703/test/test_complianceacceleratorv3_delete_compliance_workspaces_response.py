# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_saas.models.complianceacceleratorv3_delete_compliance_workspaces_response import Complianceacceleratorv3DeleteComplianceWorkspacesResponse

class TestComplianceacceleratorv3DeleteComplianceWorkspacesResponse(unittest.TestCase):
    """Complianceacceleratorv3DeleteComplianceWorkspacesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Complianceacceleratorv3DeleteComplianceWorkspacesResponse:
        """Test Complianceacceleratorv3DeleteComplianceWorkspacesResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Complianceacceleratorv3DeleteComplianceWorkspacesResponse`
        """
        model = Complianceacceleratorv3DeleteComplianceWorkspacesResponse()
        if include_optional:
            return Complianceacceleratorv3DeleteComplianceWorkspacesResponse(
                status = ibm_gdsc_sdk_saas.models.complianceacceleratorv3_status_response_base.complianceacceleratorv3StatusResponseBase(
                    message = '', 
                    status = '', ),
                workspace_id = ''
            )
        else:
            return Complianceacceleratorv3DeleteComplianceWorkspacesResponse(
        )
        """

    def testComplianceacceleratorv3DeleteComplianceWorkspacesResponse(self):
        """Test Complianceacceleratorv3DeleteComplianceWorkspacesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
