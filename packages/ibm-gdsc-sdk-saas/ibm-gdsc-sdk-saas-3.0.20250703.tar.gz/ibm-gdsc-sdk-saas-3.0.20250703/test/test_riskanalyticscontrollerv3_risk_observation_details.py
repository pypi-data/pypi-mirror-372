# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_risk_observation_details import Riskanalyticscontrollerv3RiskObservationDetails

class TestRiskanalyticscontrollerv3RiskObservationDetails(unittest.TestCase):
    """Riskanalyticscontrollerv3RiskObservationDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Riskanalyticscontrollerv3RiskObservationDetails:
        """Test Riskanalyticscontrollerv3RiskObservationDetails
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Riskanalyticscontrollerv3RiskObservationDetails`
        """
        model = Riskanalyticscontrollerv3RiskObservationDetails()
        if include_optional:
            return Riskanalyticscontrollerv3RiskObservationDetails(
                classification = '',
                date_from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                date_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                emerging_risk_details = ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_emerging_risk_details.riskanalyticscontrollerv3EmergingRiskDetails(
                    end_max_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_max_value = 56, 
                    peak_max_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    peak_max_value = 56, 
                    previous_max_value = 56, 
                    risk_features = '', 
                    start_max_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    start_max_value = 56, ),
                features = [
                    ibm_gdsc_sdk_saas.models.riskanalyticsenginev3_feature.riskanalyticsenginev3Feature(
                        feature_nls = '', 
                        is_observation = True, 
                        is_zero = True, 
                        key = '', 
                        method_type = 'UNDEFINED_METHOD_TYPE', 
                        original_value = 1.337, 
                        score = 56, 
                        sequence = 56, 
                        severity_level = 'UNDEFINED_SEVERITY_LEVEL', 
                        value = 1.337, )
                    ],
                finding = ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_finding.riskanalyticscontrollerv3Finding(
                    finding_description = '', 
                    finding_details_map = [
                        ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_finding_details_map.riskanalyticscontrollerv3FindingDetailsMap(
                            finding_details = ibm_gdsc_sdk_saas.models.details_examples,_reference_links_that_show_evidence.Details examples, reference links that show evidence(
                                counts = [
                                    ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_detail_to_count.riskanalyticscontrollerv3DetailToCount(
                                        count = 56, 
                                        desc = '', )
                                    ], 
                                finding_examples = [
                                    ''
                                    ], 
                                finding_references = [
                                    ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_finding_reference_link.riskanalyticscontrollerv3FindingReferenceLink(
                                        report_filters = [
                                            ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_observation_report_filter.riskanalyticscontrollerv3ObservationReportFilter(
                                                header_id = '', 
                                                header_value = '', 
                                                operator_type = 'UNDEFINED_OPERATOR_TYPE', )
                                            ], 
                                        statistics = ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_statistics.riskanalyticscontrollerv3Statistics(
                                            average = 1.337, 
                                            total = 56, ), 
                                        text = '', 
                                        text_template = '', 
                                        text_variables = [
                                            ''
                                            ], )
                                    ], ), 
                            finding_details_type = '', 
                            finding_reference = ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_finding_reference_link.riskanalyticscontrollerv3FindingReferenceLink(
                                report_filters = [
                                    ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_observation_report_filter.riskanalyticscontrollerv3ObservationReportFilter(
                                        header_id = '', 
                                        header_value = '', )
                                    ], 
                                text = '', 
                                text_template = '', ), 
                            report = '', )
                        ], 
                    finding_type = 'UNDEFINED_OBSERVATION_TYPE', ),
                report_filters = [
                    ibm_gdsc_sdk_saas.models.riskanalyticscontrollerv3_observation_report_filter.riskanalyticscontrollerv3ObservationReportFilter(
                        header_id = '', 
                        header_value = '', 
                        operator_type = 'UNDEFINED_OPERATOR_TYPE', )
                    ],
                report_id = ''
            )
        else:
            return Riskanalyticscontrollerv3RiskObservationDetails(
        )
        """

    def testRiskanalyticscontrollerv3RiskObservationDetails(self):
        """Test Riskanalyticscontrollerv3RiskObservationDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
