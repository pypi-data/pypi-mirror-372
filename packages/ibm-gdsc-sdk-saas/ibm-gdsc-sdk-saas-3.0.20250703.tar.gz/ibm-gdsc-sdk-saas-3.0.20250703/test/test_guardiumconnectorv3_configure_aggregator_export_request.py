# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_saas.models.guardiumconnectorv3_configure_aggregator_export_request import Guardiumconnectorv3ConfigureAggregatorExportRequest

class TestGuardiumconnectorv3ConfigureAggregatorExportRequest(unittest.TestCase):
    """Guardiumconnectorv3ConfigureAggregatorExportRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Guardiumconnectorv3ConfigureAggregatorExportRequest:
        """Test Guardiumconnectorv3ConfigureAggregatorExportRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Guardiumconnectorv3ConfigureAggregatorExportRequest`
        """
        model = Guardiumconnectorv3ConfigureAggregatorExportRequest()
        if include_optional:
            return Guardiumconnectorv3ConfigureAggregatorExportRequest(
                central_manager_id = '',
                datamart_end_date_aggregator = '',
                datamart_start_date_aggregator = '',
                managed_units = [
                    ''
                    ],
                skip_historical_datamarts = True,
                update_central_manager = True
            )
        else:
            return Guardiumconnectorv3ConfigureAggregatorExportRequest(
        )
        """

    def testGuardiumconnectorv3ConfigureAggregatorExportRequest(self):
        """Test Guardiumconnectorv3ConfigureAggregatorExportRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
