# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_saas.models.assetsv3_asset_overview_response import Assetsv3AssetOverviewResponse

class TestAssetsv3AssetOverviewResponse(unittest.TestCase):
    """Assetsv3AssetOverviewResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Assetsv3AssetOverviewResponse:
        """Test Assetsv3AssetOverviewResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Assetsv3AssetOverviewResponse`
        """
        model = Assetsv3AssetOverviewResponse()
        if include_optional:
            return Assetsv3AssetOverviewResponse(
                asset_classification = ibm_gdsc_sdk_saas.models.asset_classification___assets_classification_widget_data.AssetClassification - Assets classification widget data(
                    classification = [
                        ibm_gdsc_sdk_saas.models.asset_classification___assets_classification_widget_data.AssetClassification - Assets classification widget data(
                            availability = '', 
                            rule_name = '', 
                            sensitive_data_count = '', )
                        ], 
                    last_activity = '', 
                    total_count = 56, ),
                asset_control = ibm_gdsc_sdk_saas.models.assetsv3_asset_control.assetsv3AssetControl(
                    encryption = 'NA', 
                    last_response = '', 
                    monitoring = 'NA', 
                    policy_applied_status = ibm_gdsc_sdk_saas.models.assetsv3_policy_applied.assetsv3PolicyApplied(
                        id = '', 
                        name = '', 
                        policy_source = '', 
                        status = '', ), 
                    stap_name = '', 
                    version = '', ),
                asset_endpoints = [
                    ibm_gdsc_sdk_saas.models.asset_endpoint___endpoint_related_info_for_the_application_type_asset.AssetEndpoint - endpoint related info for the Application type asset(
                        name = '', )
                    ],
                asset_information = ibm_gdsc_sdk_saas.models.assetsv3_asset_information.assetsv3AssetInformation(
                    application = '', 
                    application_id = '', 
                    asset_name = '', 
                    asset_type = '', 
                    category = '', 
                    city = '', 
                    country = '', 
                    criticality = '', 
                    data_center = '', 
                    database = '', 
                    database_protocol = '', 
                    database_type = '', 
                    deployment = '', 
                    endpoint = '', 
                    environment = '', 
                    folder_path = '', 
                    gdp_data_sources = '', 
                    has_training_data = True, 
                    host_name = '', 
                    last_activity = '', 
                    last_trained = '', 
                    mac_address = '', 
                    model = '', 
                    os = '', 
                    owner = '', 
                    publisher = '', 
                    region = '', 
                    risk_level = '', 
                    schema = '', 
                    server = '', 
                    service = '', 
                    size = '', 
                    state = '', 
                    storage = '', 
                    storage_id = '', ),
                asset_resource = ibm_gdsc_sdk_saas.models.asset_resources_info___assets_resource_widget_data.AssetResourcesInfo - Assets resource widget data(
                    resource = [
                        ibm_gdsc_sdk_saas.models.resource_data___resource_related_info_for_the_storage_type_asset.ResourceData - resource related info for the Storage type asset(
                            creation_date = '', 
                            location = '', 
                            sensitivities = '', 
                            size = '', 
                            type = '', )
                        ], 
                    total_count = 56, ),
                asset_risk_events = ibm_gdsc_sdk_saas.models.asset_risk_events___assets_open_risk_events_widget_data.AssetRiskEvents - Assets Open risk events widget data(
                    asset_open_risk_event_list = [
                        ibm_gdsc_sdk_saas.models.asset_open_risk_event_list___assets_open_risk_events_widget_data.AssetOpenRiskEventList - Assets Open risk events widget data(
                            event_type = '', 
                            expandable = True, 
                            value = [
                                ibm_gdsc_sdk_saas.models.asset_open_risk_event___assets_open_risk_events_widget_data.AssetOpenRiskEvent - Assets Open risk events widget data(
                                    criticallity = '', 
                                    id = '', 
                                    name = '', 
                                    risk_id = '', 
                                    type = '', )
                                ], )
                        ], 
                    last_activity = '', ),
                asset_subscriptions = [
                    ibm_gdsc_sdk_saas.models.asset_subscription___subscription_related_info_for_the_asset.AssetSubscription - subscription related info for the asset(
                        duration = '', 
                        end_time = '', 
                        start_time = '', 
                        subscription = '', 
                        type = '', )
                    ],
                asset_tags = [
                    ibm_gdsc_sdk_saas.models.assetsv3_asset_tags.assetsv3AssetTags(
                        asset_id = '', 
                        concept = '', 
                        concept_id = '', 
                        domain_id = '', 
                        domain_name = '', )
                    ],
                asset_va = ibm_gdsc_sdk_saas.models.assetsv3_asset_va.assetsv3AssetVa(
                    critical_count = 56, 
                    high_count = 56, ),
                dropdown_flag = 56,
                entity_type = '',
                extended_properties = [
                    ibm_gdsc_sdk_saas.models.extended_properties_structure.Extended properties structure(
                        data_type = '', 
                        entity_name = '', 
                        entity_type = '', 
                        key = '', 
                        value = '', )
                    ],
                model_application = [
                    ibm_gdsc_sdk_saas.models.model_application___application_information_widget_on_which_model_is_deployed.ModelApplication - Application information widget on which Model is deployed(
                        application_name = '', 
                        last_used = '', 
                        service_type = '', )
                    ],
                model_data = [
                    ibm_gdsc_sdk_saas.models.model_data___training_data_information_widget_for_model_assets.ModelData - Training data information widget for Model assets(
                        resource_location = '', 
                        resource_name = '', 
                        resource_size = '', 
                        resource_type = '', )
                    ],
                overview_parameters = [
                    ibm_gdsc_sdk_saas.models.overview_parameter_for_a_asset_to_be_used_in_dropdown_selection_for_asset_overview_page.Overview Parameter for a asset to be used in dropdown selection for Asset Overview page(
                        database_name = '', 
                        db_id = '', 
                        ip_host = [
                            ibm_gdsc_sdk_saas.models.assetsv3_ip_host.assetsv3IpHost(
                                host = [
                                    ''
                                    ], 
                                ip = '', )
                            ], )
                    ]
            )
        else:
            return Assetsv3AssetOverviewResponse(
        )
        """

    def testAssetsv3AssetOverviewResponse(self):
        """Test Assetsv3AssetOverviewResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
