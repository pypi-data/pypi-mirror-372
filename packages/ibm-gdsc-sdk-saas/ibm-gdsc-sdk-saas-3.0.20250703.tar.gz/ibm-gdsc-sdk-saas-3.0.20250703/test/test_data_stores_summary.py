# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_saas.models.data_stores_summary import DataStoresSummary

class TestDataStoresSummary(unittest.TestCase):
    """DataStoresSummary unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DataStoresSummary:
        """Test DataStoresSummary
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DataStoresSummary`
        """
        model = DataStoresSummary()
        if include_optional:
            return DataStoresSummary(
                total_stores = 464,
                store_types = [
                    ibm_gdsc_sdk_saas.models.data_stores_summary_store_types_inner.DataStoresSummary_storeTypes_inner(
                        store_type = 'S3', 
                        count = 47, )
                    ],
                cloud_locations = [
                    ibm_gdsc_sdk_saas.models.data_stores_summary_cloud_locations_inner.DataStoresSummary_cloudLocations_inner(
                        location = 'us-east-1', 
                        count = 3, )
                    ],
                service_providers = [
                    ibm_gdsc_sdk_saas.models.data_stores_summary_service_providers_inner.DataStoresSummary_serviceProviders_inner(
                        service_provider = 'aws', 
                        count = 5, )
                    ],
                total_sensitivities = 2118,
                sensitivities = [
                    ibm_gdsc_sdk_saas.models.sensitivities_items_inner.SensitivitiesItems_inner(
                        sensitivity = 'EMAIL', 
                        count = 57, 
                        category = 'PERSONAL', )
                    ],
                total_potential_flows = 2141,
                total_actual_flows = 4,
                total_sensitive_stores = 45,
                accounts_ids = [
                    'polar-corplex'
                    ]
            )
        else:
            return DataStoresSummary(
                total_stores = 464,
                store_types = [
                    ibm_gdsc_sdk_saas.models.data_stores_summary_store_types_inner.DataStoresSummary_storeTypes_inner(
                        store_type = 'S3', 
                        count = 47, )
                    ],
                cloud_locations = [
                    ibm_gdsc_sdk_saas.models.data_stores_summary_cloud_locations_inner.DataStoresSummary_cloudLocations_inner(
                        location = 'us-east-1', 
                        count = 3, )
                    ],
                service_providers = [
                    ibm_gdsc_sdk_saas.models.data_stores_summary_service_providers_inner.DataStoresSummary_serviceProviders_inner(
                        service_provider = 'aws', 
                        count = 5, )
                    ],
                total_sensitivities = 2118,
                sensitivities = [
                    ibm_gdsc_sdk_saas.models.sensitivities_items_inner.SensitivitiesItems_inner(
                        sensitivity = 'EMAIL', 
                        count = 57, 
                        category = 'PERSONAL', )
                    ],
                total_potential_flows = 2141,
                total_actual_flows = 4,
                total_sensitive_stores = 45,
                accounts_ids = [
                    'polar-corplex'
                    ],
        )
        """

    def testDataStoresSummary(self):
        """Test DataStoresSummary"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
