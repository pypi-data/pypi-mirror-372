# coding: utf-8

"""
    IBM Guardium Data Security Center

    Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.

    The version of the OpenAPI document: 3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ibm_gdsc_sdk_saas.models.complianceacceleratorv3_reports import Complianceacceleratorv3Reports

class TestComplianceacceleratorv3Reports(unittest.TestCase):
    """Complianceacceleratorv3Reports unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Complianceacceleratorv3Reports:
        """Test Complianceacceleratorv3Reports
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Complianceacceleratorv3Reports`
        """
        model = Complianceacceleratorv3Reports()
        if include_optional:
            return Complianceacceleratorv3Reports(
                reports = [
                    ibm_gdsc_sdk_saas.models.complianceacceleratorv3_report.complianceacceleratorv3Report(
                        description = '', 
                        groups_needed = [
                            ibm_gdsc_sdk_saas.models.complianceacceleratorv3_group.complianceacceleratorv3Group(
                                desc = '', 
                                group_type_id = 56, 
                                id = 56, 
                                ldap_config = ibm_gdsc_sdk_saas.models.groupbuilderv3_ldap_config.groupbuilderv3LdapConfig(
                                    attributes = [
                                        ''
                                        ], 
                                    bind_group_id = 56, 
                                    bind_password = '', 
                                    clear_group = True, 
                                    filter = '', 
                                    filter_scope = 56, 
                                    import_limit = 56, 
                                    ldap_group_name = '', 
                                    ldap_id = '', 
                                    member_prefix = '', ), 
                                members = [
                                    ibm_gdsc_sdk_saas.models.groupbuilderv3_group_member.groupbuilderv3GroupMember(
                                        member_id = '', 
                                        name = '', )
                                    ], 
                                members_to_add = [
                                    ''
                                    ], 
                                members_to_delete = [
                                    ibm_gdsc_sdk_saas.models.groupbuilderv3_group_member.groupbuilderv3GroupMember(
                                        member_id = '', 
                                        name = '', )
                                    ], 
                                name = '', 
                                parent = True, )
                            ], 
                        groups_present = [
                            ibm_gdsc_sdk_saas.models.complianceacceleratorv3_group.complianceacceleratorv3Group(
                                desc = '', 
                                group_type_id = 56, 
                                id = 56, 
                                name = '', 
                                parent = True, )
                            ], 
                        report_id = '', 
                        report_tags = [
                            ibm_gdsc_sdk_saas.models.reportsv3_report_tag.reportsv3ReportTag(
                                nls_key = '', 
                                nls_value = '', )
                            ], 
                        status = 'POPULATED', 
                        title = '', )
                    ]
            )
        else:
            return Complianceacceleratorv3Reports(
        )
        """

    def testComplianceacceleratorv3Reports(self):
        """Test Complianceacceleratorv3Reports"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
