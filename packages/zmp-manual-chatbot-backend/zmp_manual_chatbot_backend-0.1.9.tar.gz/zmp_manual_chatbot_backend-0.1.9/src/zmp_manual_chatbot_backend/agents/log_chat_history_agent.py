"""
Log Chat History Agent for the multi-agent workflow system.

This agent is responsible for logging chat history to MCP using thread_id
generated by planner_agent.
"""

from ..schemas import PlanExecute
from typing import Optional
import asyncio
from ..mcp_client import MCPClient
from .base import update_step_tracking, should_log_chat_history


async def log_chat_history_agent(state: PlanExecute, mcp_client: Optional[MCPClient] = None) -> PlanExecute:
    """
    Agent: Log chat history to MCP using thread_id generated by planner_agent.
    
    This agent:
    1. Validates that thread_id was generated by planner_agent earlier in workflow
    2. Logs the conversation to chat history via MCP tool
    
    Args:
        state: The shared workflow state containing all conversation information
        mcp_client: Optional MCP client for logging
        
    Returns:
        Updated PlanExecute state
    """
    
    # ===== STEP 1: Validate Thread ID (Generated by planner_agent) =====
    # The thread_id should already be generated by planner_agent earlier in the workflow
    thread_id = state.get("thread_id")
    if not thread_id:
        print("[log_chat_history_agent] WARNING: No thread_id found in state, this should have been generated by planner_agent")
        # Emergency fallback only - this shouldn't happen in normal flow
        query = state.get("query", "")
        query_hash = abs(hash(query.lower().strip())) % 100000
        state["thread_id"] = f"thread_emergency_{query_hash:05d}"
        print(f"[log_chat_history_agent] Emergency fallback thread_id: {state['thread_id']}")
    else:
        print(f"[log_chat_history_agent] Using thread_id from planner_agent: {thread_id}")
    
    # ===== STEP 2: Log Chat History =====
    should_log = should_log_chat_history(state)
    if should_log:
        # Log chat history in background
        async def log_history():
            try:
                # Use thread_id instead of session_id for MCP tool
                # Use rewritten query (English) for better consistency in stored chat history
                rewritten_query = state.get("rewritten_query") or state.get("query", "")
                payload = {
                    "query": rewritten_query,
                    "response": state.get("final_answer", ""),
                    "user_id": state.get("user_id") or "anonymous",  # Provide string fallback for None
                    "user_name": state.get("user_name") or "unknown",  # Provide string fallback for None
                    "thread_id": state.get("thread_id") or "thread_unknown",  # Provide string fallback for None
                    "doc_urls": state.get("doc_urls") or [],  # Ensure it's never None
                    "citation_map": state.get("citation_map", {}) or {}  # Ensure it's never None
                }
                
                # Log what we're sending for debugging
                print(f"[log_chat_history_agent] Sending payload: user_id={payload['user_id']}, user_name={payload['user_name']}, thread_id={payload['thread_id']}, doc_urls={len(payload['doc_urls'])} URLs, citation_map={len(payload['citation_map'])} citations")
                
                if mcp_client:
                    await mcp_client.call_tool("log_chat_history", payload)
                else:
                    async with MCPClient() as client:
                        await client.call_tool("log_chat_history", payload)
                        
                print(f"[log_chat_history_agent] Successfully logged chat history with thread_id: {payload['thread_id']}")
                        
            except Exception as e:
                print(f"[log_chat_history_agent] Error logging chat history: {e}")
        
        # Create task but don't await it to avoid blocking
        try:
            asyncio.create_task(log_history())
            print("[log_chat_history_agent] Started background chat history logging task")
        except Exception as e:
            print(f"[log_chat_history_agent] Error creating log task: {e}")
    else:
        print("[log_chat_history_agent] Skipping chat history logging - no meaningful information provided")
    
    update_step_tracking(state, "log_chat_history")
    return state
