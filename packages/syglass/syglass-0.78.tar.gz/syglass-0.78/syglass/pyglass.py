# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyglass
else:
    import _pyglass

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyglass.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _pyglass.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pyglass.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _pyglass.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _pyglass.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _pyglass.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _pyglass.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _pyglass.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _pyglass.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _pyglass.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pyglass.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _pyglass.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _pyglass.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pyglass.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _pyglass.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _pyglass.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _pyglass.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyglass:
_pyglass.SwigPyIterator_swigregister(SwigPyIterator)


def exists(p: "path") -> "bool":
    return _pyglass.exists(p)
class path(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s: "std::string const &"):
        _pyglass.path_swiginit(self, _pyglass.new_path(s))

    def append(self, source: "std::string const &") -> "boost::filesystem::path &":
        return _pyglass.path_append(self, source)

    def string(self) -> "std::string":
        return _pyglass.path_string(self)

    def root_path(self) -> "boost::filesystem::path":
        return _pyglass.path_root_path(self)

    def root_name(self) -> "boost::filesystem::path":
        return _pyglass.path_root_name(self)

    def root_directory(self) -> "boost::filesystem::path":
        return _pyglass.path_root_directory(self)

    def relative_path(self) -> "boost::filesystem::path":
        return _pyglass.path_relative_path(self)

    def parent_path(self) -> "boost::filesystem::path":
        return _pyglass.path_parent_path(self)

    def filename(self) -> "boost::filesystem::path":
        return _pyglass.path_filename(self)

    def stem(self) -> "boost::filesystem::path":
        return _pyglass.path_stem(self)

    def extension(self) -> "boost::filesystem::path":
        return _pyglass.path_extension(self)

    def empty(self) -> "bool":
        return _pyglass.path_empty(self)

    def filename_is_dot(self) -> "bool":
        return _pyglass.path_filename_is_dot(self)

    def filename_is_dot_dot(self) -> "bool":
        return _pyglass.path_filename_is_dot_dot(self)

    def has_root_path(self) -> "bool":
        return _pyglass.path_has_root_path(self)

    def has_root_name(self) -> "bool":
        return _pyglass.path_has_root_name(self)

    def has_root_directory(self) -> "bool":
        return _pyglass.path_has_root_directory(self)

    def has_relative_path(self) -> "bool":
        return _pyglass.path_has_relative_path(self)

    def has_parent_path(self) -> "bool":
        return _pyglass.path_has_parent_path(self)

    def has_filename(self) -> "bool":
        return _pyglass.path_has_filename(self)

    def has_stem(self) -> "bool":
        return _pyglass.path_has_stem(self)

    def has_extension(self) -> "bool":
        return _pyglass.path_has_extension(self)

    def is_relative(self) -> "bool":
        return _pyglass.path_is_relative(self)

    def is_absolute(self) -> "bool":
        return _pyglass.path_is_absolute(self)

    def normalize(self) -> "boost::filesystem::path &":
        return _pyglass.path_normalize(self)

    def remove_leaf(self) -> "boost::filesystem::path &":
        return _pyglass.path_remove_leaf(self)

    def leaf(self) -> "boost::filesystem::path":
        return _pyglass.path_leaf(self)

    def branch_path(self) -> "boost::filesystem::path":
        return _pyglass.path_branch_path(self)

    def generic(self) -> "boost::filesystem::path":
        return _pyglass.path_generic(self)

    def has_leaf(self) -> "bool":
        return _pyglass.path_has_leaf(self)

    def has_branch_path(self) -> "bool":
        return _pyglass.path_has_branch_path(self)

    def is_complete(self) -> "bool":
        return _pyglass.path_is_complete(self)
    __swig_destroy__ = _pyglass.delete_path

# Register path in _pyglass:
_pyglass.path_swigregister(path)

class DBAccessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetDirectories(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.DBAccessor_GetDirectories(self)

    def __init__(self):
        _pyglass.DBAccessor_swiginit(self, _pyglass.new_DBAccessor())
    __swig_destroy__ = _pyglass.delete_DBAccessor

# Register DBAccessor in _pyglass:
_pyglass.DBAccessor_swigregister(DBAccessor)

class ivec2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s1: "int const &", s2: "int const &"):
        _pyglass.ivec2_swiginit(self, _pyglass.new_ivec2(s1, s2))
    x = property(_pyglass.ivec2_x_get, _pyglass.ivec2_x_set)
    y = property(_pyglass.ivec2_y_get, _pyglass.ivec2_y_set)
    __swig_destroy__ = _pyglass.delete_ivec2

# Register ivec2 in _pyglass:
_pyglass.ivec2_swigregister(ivec2)

class ivec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s1: "int const &", s2: "int const &", s3: "int const &"):
        _pyglass.ivec3_swiginit(self, _pyglass.new_ivec3(s1, s2, s3))
    x = property(_pyglass.ivec3_x_get, _pyglass.ivec3_x_set)
    y = property(_pyglass.ivec3_y_get, _pyglass.ivec3_y_set)
    z = property(_pyglass.ivec3_z_get, _pyglass.ivec3_z_set)
    __swig_destroy__ = _pyglass.delete_ivec3

# Register ivec3 in _pyglass:
_pyglass.ivec3_swigregister(ivec3)

class vec2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s1: "float const &", s2: "float const &"):
        _pyglass.vec2_swiginit(self, _pyglass.new_vec2(s1, s2))
    x = property(_pyglass.vec2_x_get, _pyglass.vec2_x_set)
    y = property(_pyglass.vec2_y_get, _pyglass.vec2_y_set)
    __swig_destroy__ = _pyglass.delete_vec2

# Register vec2 in _pyglass:
_pyglass.vec2_swigregister(vec2)

class vec3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s1: "float const &", s2: "float const &", s3: "float const &"):
        _pyglass.vec3_swiginit(self, _pyglass.new_vec3(s1, s2, s3))
    x = property(_pyglass.vec3_x_get, _pyglass.vec3_x_set)
    y = property(_pyglass.vec3_y_get, _pyglass.vec3_y_set)
    z = property(_pyglass.vec3_z_get, _pyglass.vec3_z_set)
    __swig_destroy__ = _pyglass.delete_vec3

# Register vec3 in _pyglass:
_pyglass.vec3_swigregister(vec3)

class vec4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s1: "float const &", s2: "float const &", s3: "float const &", s4: "float const &"):
        _pyglass.vec4_swiginit(self, _pyglass.new_vec4(s1, s2, s3, s4))
    x = property(_pyglass.vec4_x_get, _pyglass.vec4_x_set)
    y = property(_pyglass.vec4_y_get, _pyglass.vec4_y_set)
    z = property(_pyglass.vec4_z_get, _pyglass.vec4_z_set)
    w = property(_pyglass.vec4_w_get, _pyglass.vec4_w_set)
    __swig_destroy__ = _pyglass.delete_vec4

# Register vec4 in _pyglass:
_pyglass.vec4_swigregister(vec4)

class IReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT = _pyglass.IReader_DEFAULT
    ABSORPTION = _pyglass.IReader_ABSORPTION
    MIP = _pyglass.IReader_MIP

    def ReadBlock(self, *args) -> "Raster":
        return _pyglass.IReader_ReadBlock(self, *args)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.IReader_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.IReader_GetFrameCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.IReader_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.IReader_GetChannelsCount(self)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.IReader_HasSupportOfArbitraryReads(self)

    def GetBytesPerVoxel(self) -> "size_t":
        return _pyglass.IReader_GetBytesPerVoxel(self)

    def GetDataSizeForBlock(self, size: "ivec3") -> "size_t":
        return _pyglass.IReader_GetDataSizeForBlock(self, size)

    def GetResolutionLayersCount(self) -> "int":
        return _pyglass.IReader_GetResolutionLayersCount(self)

    def GetSampleMagnitude(self) -> "float":
        return _pyglass.IReader_GetSampleMagnitude(self)

    def SetSampleMagnitude(self, sampleMagnitude: "float") -> "void":
        return _pyglass.IReader_SetSampleMagnitude(self, sampleMagnitude)

    def SetStitchMode(self, stitchMode: "bool") -> "void":
        return _pyglass.IReader_SetStitchMode(self, stitchMode)

    def GetVoxelDimensions(self, *args) -> "glm::vec3":
        return _pyglass.IReader_GetVoxelDimensions(self, *args)

    def GetChannelNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.IReader_GetChannelNames(self)

    def GetIncludedChannels(self) -> "std::vector< int,std::allocator< int > >":
        return _pyglass.IReader_GetIncludedChannels(self)

    def SetIncludedChannels(self, includedChannels: "IntList") -> "void":
        return _pyglass.IReader_SetIncludedChannels(self, includedChannels)

    def GetVolumeCount(self) -> "int":
        return _pyglass.IReader_GetVolumeCount(self)

    def GetNIfTIAffine(self) -> "glm::mat4x4":
        return _pyglass.IReader_GetNIfTIAffine(self)

    def GetDCMBiasAndScale(self) -> "glm::vec4":
        return _pyglass.IReader_GetDCMBiasAndScale(self)

    def GetVolumeInfo(self) -> "std::vector< IReader::VolumeInfo,std::allocator< IReader::VolumeInfo > >":
        return _pyglass.IReader_GetVolumeInfo(self)

    def SetSelectedVolume(self, volumeID: "int") -> "void":
        return _pyglass.IReader_SetSelectedVolume(self, volumeID)

    def GetWindowString(self) -> "std::string":
        return _pyglass.IReader_GetWindowString(self)

    def GetContrastString(self) -> "std::string":
        return _pyglass.IReader_GetContrastString(self)

    def GetNativeHDF5Reader(self) -> "HDF5Reader *":
        return _pyglass.IReader_GetNativeHDF5Reader(self)

    def GetVoxelUnit(self) -> "std::string":
        return _pyglass.IReader_GetVoxelUnit(self)

    def GetDefaultOpticalModel(self) -> "IReader::OpticalModel":
        return _pyglass.IReader_GetDefaultOpticalModel(self)
    __swig_destroy__ = _pyglass.delete_IReader

# Register IReader in _pyglass:
_pyglass.IReader_swigregister(IReader)

class DataProvider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyglass.DataProvider_swiginit(self, _pyglass.new_DataProvider(*args))

    def Valid(self) -> "bool":
        return _pyglass.DataProvider_Valid(self)

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.DataProvider_ReadBlock(self, start, size, timepoint)

    def ReadBlockAtResolution(self, start: "ivec3", size: "ivec3", timepoint: "int", resolutionLayer: "int") -> "Raster":
        return _pyglass.DataProvider_ReadBlockAtResolution(self, start, size, timepoint, resolutionLayer)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.DataProvider_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.DataProvider_GetFrameCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.DataProvider_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.DataProvider_GetChannelsCount(self)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.DataProvider_HasSupportOfArbitraryReads(self)

    def GetResolutionLayersCount(self) -> "int":
        return _pyglass.DataProvider_GetResolutionLayersCount(self)

    def GetDataSizeForBlock(self, size: "ivec3") -> "size_t":
        return _pyglass.DataProvider_GetDataSizeForBlock(self, size)

    def GetBytesPerVoxel(self) -> "size_t":
        return _pyglass.DataProvider_GetBytesPerVoxel(self)

    def GetChannelNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.DataProvider_GetChannelNames(self)

    def GetIncludedChannels(self) -> "std::vector< int,std::allocator< int > >":
        return _pyglass.DataProvider_GetIncludedChannels(self)

    def SetIncludedChannels(self, includedChannels: "IntList") -> "void":
        return _pyglass.DataProvider_SetIncludedChannels(self, includedChannels)

    def GetVolumeCount(self) -> "int":
        return _pyglass.DataProvider_GetVolumeCount(self)

    def GetVolumeInfo(self) -> "std::vector< IReader::VolumeInfo,std::allocator< IReader::VolumeInfo > >":
        return _pyglass.DataProvider_GetVolumeInfo(self)

    def SetSelectedVolume(self, volumeID: "int") -> "void":
        return _pyglass.DataProvider_SetSelectedVolume(self, volumeID)

    def GetNativeHDF5Reader(self) -> "HDF5Reader *":
        return _pyglass.DataProvider_GetNativeHDF5Reader(self)

    def GetVoxelDimensions(self) -> "glm::vec3":
        return _pyglass.DataProvider_GetVoxelDimensions(self)

    def GetSampleMagnitude(self) -> "float":
        return _pyglass.DataProvider_GetSampleMagnitude(self)

    def SetSampleMagnitude(self, sampleMagnitude: "float") -> "void":
        return _pyglass.DataProvider_SetSampleMagnitude(self, sampleMagnitude)

    def SetStitchMode(self, stitchMode: "bool") -> "void":
        return _pyglass.DataProvider_SetStitchMode(self, stitchMode)

    def GetWindowString(self) -> "std::string":
        return _pyglass.DataProvider_GetWindowString(self)

    def GetContrastString(self) -> "std::string":
        return _pyglass.DataProvider_GetContrastString(self)

    def GetDefaultOpticalModel(self) -> "IReader::OpticalModel":
        return _pyglass.DataProvider_GetDefaultOpticalModel(self)

    def GetVoxelUnit(self) -> "std::string":
        return _pyglass.DataProvider_GetVoxelUnit(self)

    def GetNIfTIAffine(self) -> "glm::mat4x4":
        return _pyglass.DataProvider_GetNIfTIAffine(self)

    def GetDCMBiasAndScale(self) -> "glm::vec4":
        return _pyglass.DataProvider_GetDCMBiasAndScale(self)
    __swig_destroy__ = _pyglass.delete_DataProvider

    def GetReader(self) -> "IReaderPtr":
        return _pyglass.DataProvider_GetReader(self)

# Register DataProvider in _pyglass:
_pyglass.DataProvider_swigregister(DataProvider)

class DICOMFileInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyglass.DICOMFileInfo_swiginit(self, _pyglass.new_DICOMFileInfo(*args))
    __swig_destroy__ = _pyglass.delete_DICOMFileInfo

    def GetJ2kData(self, vData: "ByteList") -> "bool":
        return _pyglass.DICOMFileInfo_GetJ2kData(self, vData)

    def GetData(self, *args) -> "bool":
        return _pyglass.DICOMFileInfo_GetData(self, *args)
    m_bSigned = property(_pyglass.DICOMFileInfo_m_bSigned_get, _pyglass.DICOMFileInfo_m_bSigned_set)
    m_fBias = property(_pyglass.DICOMFileInfo_m_fBias_get, _pyglass.DICOMFileInfo_m_fBias_set)
    m_fScale = property(_pyglass.DICOMFileInfo_m_fScale_get, _pyglass.DICOMFileInfo_m_fScale_set)
    m_fWindowWidth = property(_pyglass.DICOMFileInfo_m_fWindowWidth_get, _pyglass.DICOMFileInfo_m_fWindowWidth_set)
    m_fWindowCenter = property(_pyglass.DICOMFileInfo_m_fWindowCenter_get, _pyglass.DICOMFileInfo_m_fWindowCenter_set)
    m_fSliceLocation = property(_pyglass.DICOMFileInfo_m_fSliceLocation_get, _pyglass.DICOMFileInfo_m_fSliceLocation_set)
    m_iComponentCount = property(_pyglass.DICOMFileInfo_m_iComponentCount_get, _pyglass.DICOMFileInfo_m_iComponentCount_set)
    m_iStudyID = property(_pyglass.DICOMFileInfo_m_iStudyID_get, _pyglass.DICOMFileInfo_m_iStudyID_set)
    m_iSeries = property(_pyglass.DICOMFileInfo_m_iSeries_get, _pyglass.DICOMFileInfo_m_iSeries_set)
    m_fvPatientPosition = property(_pyglass.DICOMFileInfo_m_fvPatientPosition_get, _pyglass.DICOMFileInfo_m_fvPatientPosition_set)
    m_fvPatientOrientation = property(_pyglass.DICOMFileInfo_m_fvPatientOrientation_get, _pyglass.DICOMFileInfo_m_fvPatientOrientation_set)
    m_ivSize = property(_pyglass.DICOMFileInfo_m_ivSize_get, _pyglass.DICOMFileInfo_m_ivSize_set)
    m_fvfAspect = property(_pyglass.DICOMFileInfo_m_fvfAspect_get, _pyglass.DICOMFileInfo_m_fvfAspect_set)
    m_fsliceSpacing = property(_pyglass.DICOMFileInfo_m_fsliceSpacing_get, _pyglass.DICOMFileInfo_m_fsliceSpacing_set)
    m_iAllocated = property(_pyglass.DICOMFileInfo_m_iAllocated_get, _pyglass.DICOMFileInfo_m_iAllocated_set)
    m_iStored = property(_pyglass.DICOMFileInfo_m_iStored_get, _pyglass.DICOMFileInfo_m_iStored_set)
    m_iPlanarConfig = property(_pyglass.DICOMFileInfo_m_iPlanarConfig_get, _pyglass.DICOMFileInfo_m_iPlanarConfig_set)
    m_bIsBigEndian = property(_pyglass.DICOMFileInfo_m_bIsBigEndian_get, _pyglass.DICOMFileInfo_m_bIsBigEndian_set)
    m_bIsJPEGEncoded = property(_pyglass.DICOMFileInfo_m_bIsJPEGEncoded_get, _pyglass.DICOMFileInfo_m_bIsJPEGEncoded_set)
    m_isJ2K = property(_pyglass.DICOMFileInfo_m_isJ2K_get, _pyglass.DICOMFileInfo_m_isJ2K_set)
    m_strAcquDate = property(_pyglass.DICOMFileInfo_m_strAcquDate_get, _pyglass.DICOMFileInfo_m_strAcquDate_set)
    m_strAcquTime = property(_pyglass.DICOMFileInfo_m_strAcquTime_get, _pyglass.DICOMFileInfo_m_strAcquTime_set)
    m_strModality = property(_pyglass.DICOMFileInfo_m_strModality_get, _pyglass.DICOMFileInfo_m_strModality_set)
    m_strDesc = property(_pyglass.DICOMFileInfo_m_strDesc_get, _pyglass.DICOMFileInfo_m_strDesc_set)
    m_strStudyID = property(_pyglass.DICOMFileInfo_m_strStudyID_get, _pyglass.DICOMFileInfo_m_strStudyID_set)
    m_strSeriesDesc = property(_pyglass.DICOMFileInfo_m_strSeriesDesc_get, _pyglass.DICOMFileInfo_m_strSeriesDesc_set)

    def SetOffsetToData(self, iOffset: "uint32_t const") -> "void":
        return _pyglass.DICOMFileInfo_SetOffsetToData(self, iOffset)
    m_strFileName = property(_pyglass.DICOMFileInfo_m_strFileName_get, _pyglass.DICOMFileInfo_m_strFileName_set)
    m_iImageIndex = property(_pyglass.DICOMFileInfo_m_iImageIndex_get, _pyglass.DICOMFileInfo_m_iImageIndex_set)
    m_hasImageIndex = property(_pyglass.DICOMFileInfo_m_hasImageIndex_get, _pyglass.DICOMFileInfo_m_hasImageIndex_set)

    def GetOffsetToData(self) -> "uint32_t":
        return _pyglass.DICOMFileInfo_GetOffsetToData(self)

    def GetDataSize(self) -> "uint32_t":
        return _pyglass.DICOMFileInfo_GetDataSize(self)
    m_iOffsetToData = property(_pyglass.DICOMFileInfo_m_iOffsetToData_get, _pyglass.DICOMFileInfo_m_iOffsetToData_set)
    m_iDataSize = property(_pyglass.DICOMFileInfo_m_iDataSize_get, _pyglass.DICOMFileInfo_m_iDataSize_set)

# Register DICOMFileInfo in _pyglass:
_pyglass.DICOMFileInfo_swigregister(DICOMFileInfo)

TYPE_AE = _pyglass.TYPE_AE
TYPE_AS = _pyglass.TYPE_AS
TYPE_AT = _pyglass.TYPE_AT
TYPE_CS = _pyglass.TYPE_CS
TYPE_DA = _pyglass.TYPE_DA
TYPE_DS = _pyglass.TYPE_DS
TYPE_DT = _pyglass.TYPE_DT
TYPE_FL = _pyglass.TYPE_FL
TYPE_FD = _pyglass.TYPE_FD
TYPE_IS = _pyglass.TYPE_IS
TYPE_LO = _pyglass.TYPE_LO
TYPE_LT = _pyglass.TYPE_LT
TYPE_OB = _pyglass.TYPE_OB
TYPE_OW = _pyglass.TYPE_OW
TYPE_OF = _pyglass.TYPE_OF
TYPE_PN = _pyglass.TYPE_PN
TYPE_SH = _pyglass.TYPE_SH
TYPE_SL = _pyglass.TYPE_SL
TYPE_SQ = _pyglass.TYPE_SQ
TYPE_SS = _pyglass.TYPE_SS
TYPE_ST = _pyglass.TYPE_ST
TYPE_TM = _pyglass.TYPE_TM
TYPE_UI = _pyglass.TYPE_UI
TYPE_UL = _pyglass.TYPE_UL
TYPE_US = _pyglass.TYPE_US
TYPE_UT = _pyglass.TYPE_UT
TYPE_UN = _pyglass.TYPE_UN
TYPE_Implicit = _pyglass.TYPE_Implicit
class DICOMReader(IReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.DICOMReader_swiginit(self, _pyglass.new_DICOMReader())
    __swig_destroy__ = _pyglass.delete_DICOMReader

    def OpenFiles(self, files: "StringList") -> "void":
        return _pyglass.DICOMReader_OpenFiles(self, files)

    def GetDICOMFileInfo(self, strFilename: "std::string const &", info: "DICOMFileInfo") -> "bool":
        return _pyglass.DICOMReader_GetDICOMFileInfo(self, strFilename, info)

    def GetNIfTIAffine(self) -> "glm::mat4x4":
        return _pyglass.DICOMReader_GetNIfTIAffine(self)

    def GetDCMBiasAndScale(self) -> "glm::vec4":
        return _pyglass.DICOMReader_GetDCMBiasAndScale(self)

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.DICOMReader_ReadBlock(self, start, size, timepoint)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.DICOMReader_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.DICOMReader_GetFrameCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.DICOMReader_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.DICOMReader_GetChannelsCount(self)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.DICOMReader_HasSupportOfArbitraryReads(self)

    def GetVoxelDimensions(self) -> "glm::vec3":
        return _pyglass.DICOMReader_GetVoxelDimensions(self)

    def GetWindowString(self) -> "std::string":
        return _pyglass.DICOMReader_GetWindowString(self)

    def GetDefaultOpticalModel(self) -> "IReader::OpticalModel":
        return _pyglass.DICOMReader_GetDefaultOpticalModel(self)

    @staticmethod
    def RegisterDecoderCodecs() -> "void":
        return _pyglass.DICOMReader_RegisterDecoderCodecs()

    @staticmethod
    def CleanupDecoderCodecs() -> "void":
        return _pyglass.DICOMReader_CleanupDecoderCodecs()

# Register DICOMReader in _pyglass:
_pyglass.DICOMReader_swigregister(DICOMReader)

def DICOMReader_RegisterDecoderCodecs() -> "void":
    return _pyglass.DICOMReader_RegisterDecoderCodecs()

def DICOMReader_CleanupDecoderCodecs() -> "void":
    return _pyglass.DICOMReader_CleanupDecoderCodecs()


def OpenDICOMs(paths: "StringList") -> "DataProvider":
    return _pyglass.OpenDICOMs(paths)
class HDF5Reader(IReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def OpenFile(self, path: "std::string") -> "void":
        return _pyglass.HDF5Reader_OpenFile(self, path)

    def ReadBlock(self, *args) -> "Raster":
        return _pyglass.HDF5Reader_ReadBlock(self, *args)

    def ReadBlockOfChannel(self, start: "ivec3", size: "ivec3", timepoint: "int", channel: "int", resolutionLayer: "int") -> "Raster":
        return _pyglass.HDF5Reader_ReadBlockOfChannel(self, start, size, timepoint, channel, resolutionLayer)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.HDF5Reader_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.HDF5Reader_GetFrameCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.HDF5Reader_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.HDF5Reader_GetChannelsCount(self)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.HDF5Reader_HasSupportOfArbitraryReads(self)

    def GetResolutionLayersCount(self) -> "int":
        return _pyglass.HDF5Reader_GetResolutionLayersCount(self)

    def GetDataRangeUsage(self) -> "float":
        return _pyglass.HDF5Reader_GetDataRangeUsage(self)

    def GetChannelNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.HDF5Reader_GetChannelNames(self)

    def SetIncludedChannels(self, includedChannels: "IntList") -> "void":
        return _pyglass.HDF5Reader_SetIncludedChannels(self, includedChannels)

    def GetCounts(self) -> "std::vector< std::vector< glm::vec3,std::allocator< glm::vec3 > >,std::allocator< std::vector< glm::vec3,std::allocator< glm::vec3 > > > >":
        return _pyglass.HDF5Reader_GetCounts(self)

    def GetSWCGraph(self) -> "SWCP::Graph":
        return _pyglass.HDF5Reader_GetSWCGraph(self)

    def GetVoxelDimensions(self) -> "glm::vec3":
        return _pyglass.HDF5Reader_GetVoxelDimensions(self)

    def GetVoxelUnit(self) -> "std::string":
        return _pyglass.HDF5Reader_GetVoxelUnit(self)

    def GetNativeHDF5Reader(self) -> "HDF5Reader *":
        return _pyglass.HDF5Reader_GetNativeHDF5Reader(self)
    __swig_destroy__ = _pyglass.delete_HDF5Reader

    def __init__(self):
        _pyglass.HDF5Reader_swiginit(self, _pyglass.new_HDF5Reader())

# Register HDF5Reader in _pyglass:
_pyglass.HDF5Reader_swigregister(HDF5Reader)


def OpenHDF5(path: "std::string") -> "DataProvider":
    return _pyglass.OpenHDF5(path)
class JPEGReader(IReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.JPEGReader_swiginit(self, _pyglass.new_JPEGReader())
    __swig_destroy__ = _pyglass.delete_JPEGReader

    def OpenFiles(self, files: "StringList") -> "void":
        return _pyglass.JPEGReader_OpenFiles(self, files)

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.JPEGReader_ReadBlock(self, start, size, timepoint)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.JPEGReader_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.JPEGReader_GetFrameCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.JPEGReader_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.JPEGReader_GetChannelsCount(self)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.JPEGReader_HasSupportOfArbitraryReads(self)

# Register JPEGReader in _pyglass:
_pyglass.JPEGReader_swigregister(JPEGReader)


def OpenJPEGs(paths: "StringList") -> "DataProvider":
    return _pyglass.OpenJPEGs(paths)
class OlympusReader(IReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.OlympusReader_swiginit(self, _pyglass.new_OlympusReader())
    __swig_destroy__ = _pyglass.delete_OlympusReader

    def OpenFile(self, file: "std::string const &") -> "void":
        return _pyglass.OlympusReader_OpenFile(self, file)

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.OlympusReader_ReadBlock(self, start, size, timepoint)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.OlympusReader_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.OlympusReader_GetFrameCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.OlympusReader_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.OlympusReader_GetChannelsCount(self)

    def GetChannelNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.OlympusReader_GetChannelNames(self)

    def SetIncludedChannels(self, includedChannels: "IntList") -> "void":
        return _pyglass.OlympusReader_SetIncludedChannels(self, includedChannels)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.OlympusReader_HasSupportOfArbitraryReads(self)

# Register OlympusReader in _pyglass:
_pyglass.OlympusReader_swigregister(OlympusReader)


def OpenOlympus(path: "std::string") -> "DataProvider":
    return _pyglass.OpenOlympus(path)
class PNGReader(IReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.PNGReader_swiginit(self, _pyglass.new_PNGReader())
    __swig_destroy__ = _pyglass.delete_PNGReader

    def OpenFiles(self, files: "StringList") -> "void":
        return _pyglass.PNGReader_OpenFiles(self, files)

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.PNGReader_ReadBlock(self, start, size, timepoint)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.PNGReader_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.PNGReader_GetFrameCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.PNGReader_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.PNGReader_GetChannelsCount(self)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.PNGReader_HasSupportOfArbitraryReads(self)

# Register PNGReader in _pyglass:
_pyglass.PNGReader_swigregister(PNGReader)


def OpenPNGs(paths: "StringList") -> "DataProvider":
    return _pyglass.OpenPNGs(paths)
class TIFFReader(IReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.TIFFReader_swiginit(self, _pyglass.new_TIFFReader())
    __swig_destroy__ = _pyglass.delete_TIFFReader

    def OpenFile(self, filepath: "std::string const &") -> "void":
        return _pyglass.TIFFReader_OpenFile(self, filepath)

    def OpenFiles(self, files: "StringList", timeSeries: "bool") -> "void":
        return _pyglass.TIFFReader_OpenFiles(self, files, timeSeries)

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.TIFFReader_ReadBlock(self, start, size, timepoint)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.TIFFReader_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.TIFFReader_GetFrameCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.TIFFReader_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.TIFFReader_GetChannelsCount(self)

    def GetChannelNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.TIFFReader_GetChannelNames(self)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.TIFFReader_HasSupportOfArbitraryReads(self)

    def SetIncludedChannels(self, includedChannels: "IntList") -> "void":
        return _pyglass.TIFFReader_SetIncludedChannels(self, includedChannels)

    def GetVoxelDimensions(self) -> "glm::vec3":
        return _pyglass.TIFFReader_GetVoxelDimensions(self)

    def GetVoxelUnit(self) -> "std::string":
        return _pyglass.TIFFReader_GetVoxelUnit(self)

# Register TIFFReader in _pyglass:
_pyglass.TIFFReader_swigregister(TIFFReader)


def OpenTIFFs(paths: "StringList", timeSeries: "bool") -> "DataProvider":
    return _pyglass.OpenTIFFs(paths, timeSeries)

def OpenTIFF(path: "std::string") -> "DataProvider":
    return _pyglass.OpenTIFF(path)
class BossDBReader(IReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.BossDBReader_swiginit(self, _pyglass.new_BossDBReader())
    __swig_destroy__ = _pyglass.delete_BossDBReader

    def OpenExperiment(self, collection: "std::string const &", experiment: "std::string const &", channel: "std::string const &", offset: "ivec3", size: "ivec3") -> "void":
        return _pyglass.BossDBReader_OpenExperiment(self, collection, experiment, channel, offset, size)

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.BossDBReader_ReadBlock(self, start, size, timepoint)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.BossDBReader_GetSize(self)

    def GetTotalSize(self) -> "glm::ivec3":
        return _pyglass.BossDBReader_GetTotalSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.BossDBReader_GetFrameCount(self)

    def GetVoxelDimensions(self) -> "glm::vec3":
        return _pyglass.BossDBReader_GetVoxelDimensions(self)

    def GetVoxelUnit(self) -> "std::string":
        return _pyglass.BossDBReader_GetVoxelUnit(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.BossDBReader_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.BossDBReader_GetChannelsCount(self)

    def GetChannelNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.BossDBReader_GetChannelNames(self)

    def SetIncludedChannels(self, includedChannels: "IntList") -> "void":
        return _pyglass.BossDBReader_SetIncludedChannels(self, includedChannels)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.BossDBReader_HasSupportOfArbitraryReads(self)

    def GetChannelBitDepth(self, collection: "std::string const &", experiment: "std::string const &", channel: "std::string const &") -> "int":
        return _pyglass.BossDBReader_GetChannelBitDepth(self, collection, experiment, channel)

    def GetCollections(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.BossDBReader_GetCollections(self)

    def GetCollectionExperiments(self, collection: "std::string") -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.BossDBReader_GetCollectionExperiments(self, collection)

    def GetCollectionExperimentsChannels(self, collection: "std::string", experiment: "std::string") -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.BossDBReader_GetCollectionExperimentsChannels(self, collection, experiment)

# Register BossDBReader in _pyglass:
_pyglass.BossDBReader_swigregister(BossDBReader)


def GetBossDBDataProvider(collection: "std::string", experiment: "std::string", channel: "std::string", offset: "ivec3", size: "ivec3") -> "DataProvider":
    return _pyglass.GetBossDBDataProvider(collection, experiment, channel, offset, size)
class BMPReader(IReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.BMPReader_swiginit(self, _pyglass.new_BMPReader())
    __swig_destroy__ = _pyglass.delete_BMPReader

    def OpenFiles(self, files: "StringList") -> "void":
        return _pyglass.BMPReader_OpenFiles(self, files)

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.BMPReader_ReadBlock(self, start, size, timepoint)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.BMPReader_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.BMPReader_GetFrameCount(self)

    def GetVoxelDimensions(self) -> "glm::vec3":
        return _pyglass.BMPReader_GetVoxelDimensions(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.BMPReader_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.BMPReader_GetChannelsCount(self)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.BMPReader_HasSupportOfArbitraryReads(self)

    def GetVoxelUnit(self) -> "std::string":
        return _pyglass.BMPReader_GetVoxelUnit(self)

# Register BMPReader in _pyglass:
_pyglass.BMPReader_swigregister(BMPReader)


def OpenBMPs(paths: "StringList") -> "DataProvider":
    return _pyglass.OpenBMPs(paths)
class ConversionDriver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyglass.ConversionDriver_swiginit(self, _pyglass.new_ConversionDriver(*args))
    __swig_destroy__ = _pyglass.delete_ConversionDriver

    def SetInput(self, reader: "DataProvider") -> "void":
        return _pyglass.ConversionDriver_SetInput(self, reader)

    def SetOutput(self, project: "Project") -> "void":
        return _pyglass.ConversionDriver_SetOutput(self, project)

    def Start(self) -> "void":
        return _pyglass.ConversionDriver_Start(self)

    def StartAsynchronous(self) -> "void":
        return _pyglass.ConversionDriver_StartAsynchronous(self)

    def AddTimepoint(self) -> "void":
        return _pyglass.ConversionDriver_AddTimepoint(self)

    def AddImageFragment(self, raster: "Raster", transformation: "glm::mat4 const &", frame: "int") -> "void":
        return _pyglass.ConversionDriver_AddImageFragment(self, raster, transformation, frame)

    def GetPercentage(self) -> "float":
        return _pyglass.ConversionDriver_GetPercentage(self)

    def GetElapsedTime(self) -> "float":
        return _pyglass.ConversionDriver_GetElapsedTime(self)

    def GetRemainingTime(self) -> "float":
        return _pyglass.ConversionDriver_GetRemainingTime(self)

    def GetMinimalNeededRAM(self) -> "size_t":
        return _pyglass.ConversionDriver_GetMinimalNeededRAM(self)

    def GetFreeRAM(self) -> "unsigned long long":
        return _pyglass.ConversionDriver_GetFreeRAM(self)

    def SetRAMLimit(self, s: "unsigned long long") -> "void":
        return _pyglass.ConversionDriver_SetRAMLimit(self, s)

    def GetRAMLimit(self) -> "size_t":
        return _pyglass.ConversionDriver_GetRAMLimit(self)

    def GetMaxBlockSize(self) -> "size_t":
        return _pyglass.ConversionDriver_GetMaxBlockSize(self)

# Register ConversionDriver in _pyglass:
_pyglass.ConversionDriver_swigregister(ConversionDriver)

class comparator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a: "ivec3", b: "ivec3") -> "bool":
        return _pyglass.comparator___call__(self, a, b)

    def __init__(self):
        _pyglass.comparator_swiginit(self, _pyglass.new_comparator())
    __swig_destroy__ = _pyglass.delete_comparator

# Register comparator in _pyglass:
_pyglass.comparator_swigregister(comparator)


def FillTable(*args) -> "void":
    return _pyglass.FillTable(*args)
class MaskOctreeRasterExtractor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, core: "Core const *"):
        _pyglass.MaskOctreeRasterExtractor_swiginit(self, _pyglass.new_MaskOctreeRasterExtractor(core))

    def ExportTiffFile(self, *args) -> "void":
        return _pyglass.MaskOctreeRasterExtractor_ExportTiffFile(self, *args)

    def SetIsStereology(self, isStereology: "bool") -> "void":
        return _pyglass.MaskOctreeRasterExtractor_SetIsStereology(self, isStereology)

    def DuplicateSykFile(self, srcPathStr: "std::string const &", destPathStr: "std::string const &") -> "void":
        return _pyglass.MaskOctreeRasterExtractor_DuplicateSykFile(self, srcPathStr, destPathStr)

    def SetShouldCancel(self, shouldCancel: "bool") -> "void":
        return _pyglass.MaskOctreeRasterExtractor_SetShouldCancel(self, shouldCancel)

    def GetCustomBlock(self, p: "Project", timepoint: "int", resolutionLevel: "int", offset: "vec3", dimensions: "vec3") -> "Raster":
        return _pyglass.MaskOctreeRasterExtractor_GetCustomBlock(self, p, timepoint, resolutionLevel, offset, dimensions)

    def PutCustomBlock(self, p: "VoxelProject *", timepoint: "int", resolutionLevel: "int", offset: "vec3", input: "Raster", modifiedBlocks: "std::set< uint64_t > &") -> "void":
        return _pyglass.MaskOctreeRasterExtractor_PutCustomBlock(self, p, timepoint, resolutionLevel, offset, input, modifiedBlocks)
    __swig_destroy__ = _pyglass.delete_MaskOctreeRasterExtractor

# Register MaskOctreeRasterExtractor in _pyglass:
_pyglass.MaskOctreeRasterExtractor_swigregister(MaskOctreeRasterExtractor)

class DirectoryDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Invalid = _pyglass.DirectoryDescription_Invalid
    Imaris = _pyglass.DirectoryDescription_Imaris
    DICOM = _pyglass.DirectoryDescription_DICOM
    TIFF = _pyglass.DirectoryDescription_TIFF
    PNG = _pyglass.DirectoryDescription_PNG
    JPEG = _pyglass.DirectoryDescription_JPEG
    BMP = _pyglass.DirectoryDescription_BMP
    VSI = _pyglass.DirectoryDescription_VSI
    OIR = _pyglass.DirectoryDescription_OIR
    ND2 = _pyglass.DirectoryDescription_ND2
    CZI = _pyglass.DirectoryDescription_CZI
    LIF = _pyglass.DirectoryDescription_LIF
    SLD = _pyglass.DirectoryDescription_SLD
    ZARR = _pyglass.DirectoryDescription_ZARR
    NIFTI = _pyglass.DirectoryDescription_NIFTI
    Null = _pyglass.DirectoryDescription_Null

    def __init__(self):
        _pyglass.DirectoryDescription_swiginit(self, _pyglass.new_DirectoryDescription())

    def InspectByReferenceFile(self, path: "std::string", forceDICOM: "bool"=False) -> "void":
        return _pyglass.DirectoryDescription_InspectByReferenceFile(self, path, forceDICOM)

    def GetFileType(self) -> "DirectoryDescription::FileType":
        return _pyglass.DirectoryDescription_GetFileType(self)

    def GetTemplateString(self) -> "std::string":
        return _pyglass.DirectoryDescription_GetTemplateString(self)

    def GetKeyPosCount(self) -> "int":
        return _pyglass.DirectoryDescription_GetKeyPosCount(self)

    def GetNumberOfKeyPositionsWithUniqueValues(self) -> "int":
        return _pyglass.DirectoryDescription_GetNumberOfKeyPositionsWithUniqueValues(self)

    def SetKeyPos(self, k: "int") -> "void":
        return _pyglass.DirectoryDescription_SetKeyPos(self, k)

    def GenerateChannelDDs(self, keyPos: "int") -> "std::vector< DirectoryDescription,std::allocator< DirectoryDescription > >":
        return _pyglass.DirectoryDescription_GenerateChannelDDs(self, keyPos)

    def GetFileList(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.DirectoryDescription_GetFileList(self)

    def GetOnlyReferenceFile(self) -> "std::string":
        return _pyglass.DirectoryDescription_GetOnlyReferenceFile(self)

    def InspectForDicomSeriesByReferenceFile(self, path: "std::string const &") -> "DicomSeriesDescriptionMap":
        return _pyglass.DirectoryDescription_InspectForDicomSeriesByReferenceFile(self, path)

    def SelectDicomFilesBySeries(self, selectedDicomSeries: "uint32_t") -> "void":
        return _pyglass.DirectoryDescription_SelectDicomFilesBySeries(self, selectedDicomSeries)
    __swig_destroy__ = _pyglass.delete_DirectoryDescription

# Register DirectoryDescription in _pyglass:
_pyglass.DirectoryDescription_swigregister(DirectoryDescription)

class NNGDialer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.NNGDialer_swiginit(self, _pyglass.new_NNGDialer())
    __swig_destroy__ = _pyglass.delete_NNGDialer

    def Connect(self) -> "bool":
        return _pyglass.NNGDialer_Connect(self)

    def SendMessageNNG(self, *args) -> "int":
        return _pyglass.NNGDialer_SendMessageNNG(self, *args)

# Register NNGDialer in _pyglass:
_pyglass.NNGDialer_swigregister(NNGDialer)

class PresentationFileWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def WriteFile(self, *args) -> "void":
        return _pyglass.PresentationFileWriter_WriteFile(self, *args)

    def WriteFileWorkingDir(self, presFile: "PresentationFile", dst: "path") -> "void":
        return _pyglass.PresentationFileWriter_WriteFileWorkingDir(self, presFile, dst)

    def ReadFileWorkingDir(self, src: "path") -> "PresentationFile":
        return _pyglass.PresentationFileWriter_ReadFileWorkingDir(self, src)

    @staticmethod
    def GetAsPresentationNarration(narrationName: "std::string const &", narrationFile: "NarrationFile") -> "PresentationFile::Narration":
        return _pyglass.PresentationFileWriter_GetAsPresentationNarration(narrationName, narrationFile)

    @staticmethod
    def SwapProjectReferences(presFile: "PresentationFile", sceneIndices: "IntList", newProjectName: "std::string const &", newProjectHash: "std::string const &") -> "PresentationFile":
        return _pyglass.PresentationFileWriter_SwapProjectReferences(presFile, sceneIndices, newProjectName, newProjectHash)

    @staticmethod
    def DeleteScenes(presFile: "PresentationFile", sceneIndices: "IntList") -> "PresentationFile":
        return _pyglass.PresentationFileWriter_DeleteScenes(presFile, sceneIndices)

    def __init__(self):
        _pyglass.PresentationFileWriter_swiginit(self, _pyglass.new_PresentationFileWriter())
    __swig_destroy__ = _pyglass.delete_PresentationFileWriter

# Register PresentationFileWriter in _pyglass:
_pyglass.PresentationFileWriter_swigregister(PresentationFileWriter)

def PresentationFileWriter_GetAsPresentationNarration(narrationName: "std::string const &", narrationFile: "NarrationFile") -> "PresentationFile::Narration":
    return _pyglass.PresentationFileWriter_GetAsPresentationNarration(narrationName, narrationFile)

def PresentationFileWriter_SwapProjectReferences(presFile: "PresentationFile", sceneIndices: "IntList", newProjectName: "std::string const &", newProjectHash: "std::string const &") -> "PresentationFile":
    return _pyglass.PresentationFileWriter_SwapProjectReferences(presFile, sceneIndices, newProjectName, newProjectHash)

def PresentationFileWriter_DeleteScenes(presFile: "PresentationFile", sceneIndices: "IntList") -> "PresentationFile":
    return _pyglass.PresentationFileWriter_DeleteScenes(presFile, sceneIndices)
cvar = _pyglass.cvar
PresentationFileWriter.k_formatVersion = _pyglass.cvar.PresentationFileWriter_k_formatVersion

class NarrationFileWriter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def WriteFile(self, *args) -> "void":
        return _pyglass.NarrationFileWriter_WriteFile(self, *args)

    def GetSerializedSize(self, *args) -> "size_t":
        return _pyglass.NarrationFileWriter_GetSerializedSize(self, *args)

    @staticmethod
    def WriteFileWorkingDir(presFile: "NarrationFile", dst: "path") -> "void":
        return _pyglass.NarrationFileWriter_WriteFileWorkingDir(presFile, dst)

    @staticmethod
    def ReadFileWorkingDir(src: "path") -> "NarrationFile":
        return _pyglass.NarrationFileWriter_ReadFileWorkingDir(src)

    @staticmethod
    def WriteSYAWorkingDir(module: "LearningModule", dst: "path") -> "void":
        return _pyglass.NarrationFileWriter_WriteSYAWorkingDir(module, dst)

    @staticmethod
    def ReadSYAWorkingDir(src: "path") -> "LearningModule":
        return _pyglass.NarrationFileWriter_ReadSYAWorkingDir(src)

    @staticmethod
    def GetAsNarrationFile(presentationNarration: "Narration") -> "NarrationFile":
        return _pyglass.NarrationFileWriter_GetAsNarrationFile(presentationNarration)

    @staticmethod
    def GetNarrationProjects(packetHistoryFile: "FileHandle") -> "std::set< std::string >":
        return _pyglass.NarrationFileWriter_GetNarrationProjects(packetHistoryFile)

    @staticmethod
    def GetNarrationFiles(packetHistoryFile: "FileHandle") -> "std::set< std::string >":
        return _pyglass.NarrationFileWriter_GetNarrationFiles(packetHistoryFile)

    @staticmethod
    def SwapProjectReference(packetHistoryFile: "NarrationFile", newProjectName: "std::string const &") -> "void":
        return _pyglass.NarrationFileWriter_SwapProjectReference(packetHistoryFile, newProjectName)

    def __init__(self):
        _pyglass.NarrationFileWriter_swiginit(self, _pyglass.new_NarrationFileWriter())
    __swig_destroy__ = _pyglass.delete_NarrationFileWriter

# Register NarrationFileWriter in _pyglass:
_pyglass.NarrationFileWriter_swigregister(NarrationFileWriter)
NarrationFileWriter.k_formatVersion = _pyglass.cvar.NarrationFileWriter_k_formatVersion

def NarrationFileWriter_WriteFileWorkingDir(presFile: "NarrationFile", dst: "path") -> "void":
    return _pyglass.NarrationFileWriter_WriteFileWorkingDir(presFile, dst)

def NarrationFileWriter_ReadFileWorkingDir(src: "path") -> "NarrationFile":
    return _pyglass.NarrationFileWriter_ReadFileWorkingDir(src)

def NarrationFileWriter_WriteSYAWorkingDir(module: "LearningModule", dst: "path") -> "void":
    return _pyglass.NarrationFileWriter_WriteSYAWorkingDir(module, dst)

def NarrationFileWriter_ReadSYAWorkingDir(src: "path") -> "LearningModule":
    return _pyglass.NarrationFileWriter_ReadSYAWorkingDir(src)

def NarrationFileWriter_GetAsNarrationFile(presentationNarration: "Narration") -> "NarrationFile":
    return _pyglass.NarrationFileWriter_GetAsNarrationFile(presentationNarration)

def NarrationFileWriter_GetNarrationProjects(packetHistoryFile: "FileHandle") -> "std::set< std::string >":
    return _pyglass.NarrationFileWriter_GetNarrationProjects(packetHistoryFile)

def NarrationFileWriter_GetNarrationFiles(packetHistoryFile: "FileHandle") -> "std::set< std::string >":
    return _pyglass.NarrationFileWriter_GetNarrationFiles(packetHistoryFile)

def NarrationFileWriter_SwapProjectReference(packetHistoryFile: "NarrationFile", newProjectName: "std::string const &") -> "void":
    return _pyglass.NarrationFileWriter_SwapProjectReference(packetHistoryFile, newProjectName)

class LearningModule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyglass.LearningModule_swiginit(self, _pyglass.new_LearningModule(*args))

    def GetName(self) -> "std::string":
        return _pyglass.LearningModule_GetName(self)

    def GetProjectNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.LearningModule_GetProjectNames(self)

    def GetSupplementalFiles(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.LearningModule_GetSupplementalFiles(self)

    def AddExercise(self, exercise: "LearningModule::ExerciseInfo const &") -> "void":
        return _pyglass.LearningModule_AddExercise(self, exercise)

    def GetExercises(self) -> "std::vector< LearningModule::ExerciseInfo,std::allocator< LearningModule::ExerciseInfo > >":
        return _pyglass.LearningModule_GetExercises(self)

    def GetMultipleChoiceExercises(self) -> "std::vector< MultipleChoiceExercise *,std::allocator< MultipleChoiceExercise * > >":
        return _pyglass.LearningModule_GetMultipleChoiceExercises(self)

    def WriteFile(self, *args) -> "fs::path":
        return _pyglass.LearningModule_WriteFile(self, *args)
    __swig_destroy__ = _pyglass.delete_LearningModule

# Register LearningModule in _pyglass:
_pyglass.LearningModule_swigregister(LearningModule)

class PresentationFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PNG = _pyglass.PresentationFile_PNG
    JPEG = _pyglass.PresentationFile_JPEG
    PDF = _pyglass.PresentationFile_PDF
    SYC = _pyglass.PresentationFile_SYC
    MP4 = _pyglass.PresentationFile_MP4
    Unknown = _pyglass.PresentationFile_Unknown
    NarrationItem = _pyglass.PresentationFile_NarrationItem
    LearningModuleItem = _pyglass.PresentationFile_LearningModuleItem

    def __init__(self):
        _pyglass.PresentationFile_swiginit(self, _pyglass.new_PresentationFile())
    header = property(_pyglass.PresentationFile_header_get, _pyglass.PresentationFile_header_set)
    tags = property(_pyglass.PresentationFile_tags_get, _pyglass.PresentationFile_tags_set)
    preview = property(_pyglass.PresentationFile_preview_get, _pyglass.PresentationFile_preview_set)
    projects = property(_pyglass.PresentationFile_projects_get, _pyglass.PresentationFile_projects_set)
    files = property(_pyglass.PresentationFile_files_get, _pyglass.PresentationFile_files_set)
    narrations = property(_pyglass.PresentationFile_narrations_get, _pyglass.PresentationFile_narrations_set)
    learningModules = property(_pyglass.PresentationFile_learningModules_get, _pyglass.PresentationFile_learningModules_set)
    presentationOrder = property(_pyglass.PresentationFile_presentationOrder_get, _pyglass.PresentationFile_presentationOrder_set)
    __swig_destroy__ = _pyglass.delete_PresentationFile

# Register PresentationFile in _pyglass:
_pyglass.PresentationFile_swigregister(PresentationFile)

class PresentationInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_pyglass.PresentationInfo_type_get, _pyglass.PresentationInfo_type_set)
    index = property(_pyglass.PresentationInfo_index_get, _pyglass.PresentationInfo_index_set)

    def __init__(self):
        _pyglass.PresentationInfo_swiginit(self, _pyglass.new_PresentationInfo())
    __swig_destroy__ = _pyglass.delete_PresentationInfo

# Register PresentationInfo in _pyglass:
_pyglass.PresentationInfo_swigregister(PresentationInfo)

class PresentationFileHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    formatVersion = property(_pyglass.PresentationFileHeader_formatVersion_get, _pyglass.PresentationFileHeader_formatVersion_set)
    minBuildNumber = property(_pyglass.PresentationFileHeader_minBuildNumber_get, _pyglass.PresentationFileHeader_minBuildNumber_set)
    title = property(_pyglass.PresentationFileHeader_title_get, _pyglass.PresentationFileHeader_title_set)
    author = property(_pyglass.PresentationFileHeader_author_get, _pyglass.PresentationFileHeader_author_set)
    creationDateString = property(_pyglass.PresentationFileHeader_creationDateString_get, _pyglass.PresentationFileHeader_creationDateString_set)
    description = property(_pyglass.PresentationFileHeader_description_get, _pyglass.PresentationFileHeader_description_set)

    def IsEncrypted(self) -> "bool":
        return _pyglass.PresentationFileHeader_IsEncrypted(self)

    def SetEncrypted(self, encrypted: "bool") -> "void":
        return _pyglass.PresentationFileHeader_SetEncrypted(self, encrypted)

    def GetVersion(self) -> "uint16_t":
        return _pyglass.PresentationFileHeader_GetVersion(self)

    def __init__(self):
        _pyglass.PresentationFileHeader_swiginit(self, _pyglass.new_PresentationFileHeader())
    __swig_destroy__ = _pyglass.delete_PresentationFileHeader

# Register PresentationFileHeader in _pyglass:
_pyglass.PresentationFileHeader_swigregister(PresentationFileHeader)

class SupplementaryFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.SupplementaryFile_swiginit(self, _pyglass.new_SupplementaryFile())
    name = property(_pyglass.SupplementaryFile_name_get, _pyglass.SupplementaryFile_name_set)
    format = property(_pyglass.SupplementaryFile_format_get, _pyglass.SupplementaryFile_format_set)
    file = property(_pyglass.SupplementaryFile_file_get, _pyglass.SupplementaryFile_file_set)
    __swig_destroy__ = _pyglass.delete_SupplementaryFile

# Register SupplementaryFile in _pyglass:
_pyglass.SupplementaryFile_swigregister(SupplementaryFile)

class Narration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.Narration_swiginit(self, _pyglass.new_Narration())
    narrationName = property(_pyglass.Narration_narrationName_get, _pyglass.Narration_narrationName_set)
    narrationDurationSeconds = property(_pyglass.Narration_narrationDurationSeconds_get, _pyglass.Narration_narrationDurationSeconds_set)
    narrationRecording = property(_pyglass.Narration_narrationRecording_get, _pyglass.Narration_narrationRecording_set)
    narrationThumbnail = property(_pyglass.Narration_narrationThumbnail_get, _pyglass.Narration_narrationThumbnail_set)
    narrationAudioTrack = property(_pyglass.Narration_narrationAudioTrack_get, _pyglass.Narration_narrationAudioTrack_set)
    narrationIndex = property(_pyglass.Narration_narrationIndex_get, _pyglass.Narration_narrationIndex_set)
    seekThumbnails = property(_pyglass.Narration_seekThumbnails_get, _pyglass.Narration_seekThumbnails_set)
    narrationFormatVersion = property(_pyglass.Narration_narrationFormatVersion_get, _pyglass.Narration_narrationFormatVersion_set)

    def GetRaster(self) -> "Raster":
        return _pyglass.Narration_GetRaster(self)
    __swig_destroy__ = _pyglass.delete_Narration

# Register Narration in _pyglass:
_pyglass.Narration_swigregister(Narration)

class NarrationProject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_pyglass.NarrationProject_name_get, _pyglass.NarrationProject_name_set)
    hash = property(_pyglass.NarrationProject_hash_get, _pyglass.NarrationProject_hash_set)
    url = property(_pyglass.NarrationProject_url_get, _pyglass.NarrationProject_url_set)

    def __init__(self):
        _pyglass.NarrationProject_swiginit(self, _pyglass.new_NarrationProject())
    __swig_destroy__ = _pyglass.delete_NarrationProject

# Register NarrationProject in _pyglass:
_pyglass.NarrationProject_swigregister(NarrationProject)

class ExerciseInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_pyglass.ExerciseInfo_type_get, _pyglass.ExerciseInfo_type_set)
    exercise = property(_pyglass.ExerciseInfo_exercise_get, _pyglass.ExerciseInfo_exercise_set)

    def __init__(self):
        _pyglass.ExerciseInfo_swiginit(self, _pyglass.new_ExerciseInfo())
    __swig_destroy__ = _pyglass.delete_ExerciseInfo

# Register ExerciseInfo in _pyglass:
_pyglass.ExerciseInfo_swigregister(ExerciseInfo)

class ThumbnailGrabber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.ThumbnailGrabber_swiginit(self, _pyglass.new_ThumbnailGrabber())
    thumbnail = property(_pyglass.ThumbnailGrabber_thumbnail_get, _pyglass.ThumbnailGrabber_thumbnail_set)
    __swig_destroy__ = _pyglass.delete_ThumbnailGrabber

# Register ThumbnailGrabber in _pyglass:
_pyglass.ThumbnailGrabber_swigregister(ThumbnailGrabber)

class VolumeLibrary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.VolumeLibrary_swiginit(self, _pyglass.new_VolumeLibrary())

    def GetFilePath(self) -> "std::string":
        return _pyglass.VolumeLibrary_GetFilePath(self)

    def GetLibraryEntries(self) -> "std::vector< VolumeLibrary::LibraryEntry,std::allocator< VolumeLibrary::LibraryEntry > >":
        return _pyglass.VolumeLibrary_GetLibraryEntries(self)

    def GetEntry(self, name: "std::string const &") -> "VolumeLibrary::LibraryEntry":
        return _pyglass.VolumeLibrary_GetEntry(self, name)

    def GetProjectByHash(self, hash: "std::string const &") -> "VolumeLibrary::LibraryEntry":
        return _pyglass.VolumeLibrary_GetProjectByHash(self, hash)

    def GetHashByProject(self, project: "std::string const &") -> "std::string":
        return _pyglass.VolumeLibrary_GetHashByProject(self, project)

    def GetEntryFromPath(self, pathToProjectFile: "std::string const &") -> "VolumeLibrary::LibraryEntry":
        return _pyglass.VolumeLibrary_GetEntryFromPath(self, pathToProjectFile)

    def GetFolders(self, synced: "bool"=False) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.VolumeLibrary_GetFolders(self, synced)

    def UpdateFolder(self, oldDisplayPath: "std::string const &", newDisplayPath: "std::string const &", synced: "bool"=False) -> "void":
        return _pyglass.VolumeLibrary_UpdateFolder(self, oldDisplayPath, newDisplayPath, synced)

    def AddFolder(self, newDisplayPath: "std::string const &", synced: "bool"=False, save: "bool"=True) -> "void":
        return _pyglass.VolumeLibrary_AddFolder(self, newDisplayPath, synced, save)

    def DeleteFolder(self, folderPath: "std::string const &", deleteContents: "bool const"=True, synced: "bool"=False, save: "bool"=True) -> "void":
        return _pyglass.VolumeLibrary_DeleteFolder(self, folderPath, deleteContents, synced, save)

    def HasEntry(self, name: "std::string const &") -> "bool":
        return _pyglass.VolumeLibrary_HasEntry(self, name)

    def PutEntry(self, *args) -> "void":
        return _pyglass.VolumeLibrary_PutEntry(self, *args)

    def HasProjectFile(self, pathToProjectFile: "std::string const &") -> "bool":
        return _pyglass.VolumeLibrary_HasProjectFile(self, pathToProjectFile)

    def RenameEntry(self, newName: "std::string const &", path: "std::string const &") -> "std::string":
        return _pyglass.VolumeLibrary_RenameEntry(self, newName, path)

    def DeleteEntry(self, name: "std::string const &") -> "void":
        return _pyglass.VolumeLibrary_DeleteEntry(self, name)

    def ReloadLibrary(self) -> "void":
        return _pyglass.VolumeLibrary_ReloadLibrary(self)

    def SaveLibrary(self) -> "void":
        return _pyglass.VolumeLibrary_SaveLibrary(self)

    def CreateEntryFromPath(self, *args) -> "VolumeLibrary::LibraryEntry":
        return _pyglass.VolumeLibrary_CreateEntryFromPath(self, *args)

    def SetRemoteProjectOpenedCallback(self, callback: "CSharpCallback *") -> "void":
        return _pyglass.VolumeLibrary_SetRemoteProjectOpenedCallback(self, callback)

    def TriggerRemoteProjectOpenedCallback(self, projectName: "std::string const &") -> "void":
        return _pyglass.VolumeLibrary_TriggerRemoteProjectOpenedCallback(self, projectName)

    def ImportProject(self, *args) -> "bool":
        return _pyglass.VolumeLibrary_ImportProject(self, *args)

    def ExportProject(self, name: "std::string const &", destination: "path", roomManager: "RoomManager *"=None) -> "bool":
        return _pyglass.VolumeLibrary_ExportProject(self, name, destination, roomManager)

    def CancelProjectExport(self) -> "void":
        return _pyglass.VolumeLibrary_CancelProjectExport(self)

    def UnzipSYGZ(self, *args) -> "fs::path":
        return _pyglass.VolumeLibrary_UnzipSYGZ(self, *args)

    @staticmethod
    def AddMeshesToZipFile(zip: "SB::ZipWriter &", pathToProjectFile: "path", includeRoot: "bool", progressLambda: "std::function< void (float) >"=0, shouldCancel: "bool *"=None) -> "void":
        return _pyglass.VolumeLibrary_AddMeshesToZipFile(zip, pathToProjectFile, includeRoot, progressLambda, shouldCancel)
    __swig_destroy__ = _pyglass.delete_VolumeLibrary

# Register VolumeLibrary in _pyglass:
_pyglass.VolumeLibrary_swigregister(VolumeLibrary)

def VolumeLibrary_AddMeshesToZipFile(zip: "SB::ZipWriter &", pathToProjectFile: "path", includeRoot: "bool", progressLambda: "std::function< void (float) >"=0, shouldCancel: "bool *"=None) -> "void":
    return _pyglass.VolumeLibrary_AddMeshesToZipFile(zip, pathToProjectFile, includeRoot, progressLambda, shouldCancel)

class LibraryEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NOT_SIGNED = _pyglass.LibraryEntry_NOT_SIGNED
    SIGNED = _pyglass.LibraryEntry_SIGNED
    UNKNOWN = _pyglass.LibraryEntry_UNKNOWN
    DENSE = _pyglass.LibraryEntry_DENSE
    SPARSE = _pyglass.LibraryEntry_SPARSE

    @staticmethod
    def GetTypeString(m: "VolumeLibrary::LibraryEntry::Type") -> "std::string":
        return _pyglass.LibraryEntry_GetTypeString(m)
    type = property(_pyglass.LibraryEntry_type_get, _pyglass.LibraryEntry_type_set)
    path = property(_pyglass.LibraryEntry_path_get, _pyglass.LibraryEntry_path_set)
    displayPath = property(_pyglass.LibraryEntry_displayPath_get, _pyglass.LibraryEntry_displayPath_set)
    notes = property(_pyglass.LibraryEntry_notes_get, _pyglass.LibraryEntry_notes_set)
    name = property(_pyglass.LibraryEntry_name_get, _pyglass.LibraryEntry_name_set)
    voxelSize = property(_pyglass.LibraryEntry_voxelSize_get, _pyglass.LibraryEntry_voxelSize_set)
    thumbnail = property(_pyglass.LibraryEntry_thumbnail_get, _pyglass.LibraryEntry_thumbnail_set)
    creationDate = property(_pyglass.LibraryEntry_creationDate_get, _pyglass.LibraryEntry_creationDate_set)
    dataType = property(_pyglass.LibraryEntry_dataType_get, _pyglass.LibraryEntry_dataType_set)
    isSigned = property(_pyglass.LibraryEntry_isSigned_get, _pyglass.LibraryEntry_isSigned_set)
    grade = property(_pyglass.LibraryEntry_grade_get, _pyglass.LibraryEntry_grade_set)
    mandatory = property(_pyglass.LibraryEntry_mandatory_get, _pyglass.LibraryEntry_mandatory_set)
    local = property(_pyglass.LibraryEntry_local_get, _pyglass.LibraryEntry_local_set)

    def __init__(self):
        _pyglass.LibraryEntry_swiginit(self, _pyglass.new_LibraryEntry())
    __swig_destroy__ = _pyglass.delete_LibraryEntry

# Register LibraryEntry in _pyglass:
_pyglass.LibraryEntry_swigregister(LibraryEntry)

def LibraryEntry_GetTypeString(m: "VolumeLibrary::LibraryEntry::Type") -> "std::string":
    return _pyglass.LibraryEntry_GetTypeString(m)

class PresentationLibrary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def ReloadLibrary(self) -> "void":
        return _pyglass.PresentationLibrary_ReloadLibrary(self)

    def ImportFile(self, filePath: "path") -> "void":
        return _pyglass.PresentationLibrary_ImportFile(self, filePath)

    def CreatePresentationFile(self, fileName: "std::string const &", author: "std::string const &", description: "std::string const &", buildNumber: "int const", narrationProjects: "NarrationProjectList", supplementaryFiles: "SupplementaryFileList", presentationOrder: "PresentationItemTypeList", narrations: "NarrationList", learningModules: "LearningModuleList") -> "boost::filesystem::path":
        return _pyglass.PresentationLibrary_CreatePresentationFile(self, fileName, author, description, buildNumber, narrationProjects, supplementaryFiles, presentationOrder, narrations, learningModules)

    def RemoveFile(self, filePath: "path") -> "void":
        return _pyglass.PresentationLibrary_RemoveFile(self, filePath)

    def ExportPresentation(self, sourcePath: "path", destinationPath: "path") -> "void":
        return _pyglass.PresentationLibrary_ExportPresentation(self, sourcePath, destinationPath)

    def HasFile(self, fileName: "std::string const &") -> "bool":
        return _pyglass.PresentationLibrary_HasFile(self, fileName)

    def EncryptPresentationFile(self, name: "std::string const &") -> "bool":
        return _pyglass.PresentationLibrary_EncryptPresentationFile(self, name)

    def EncryptPresentationFileByPath(self, path: "std::string const &") -> "bool":
        return _pyglass.PresentationLibrary_EncryptPresentationFileByPath(self, path)

    def GetPresentationFile(self, name: "std::string const &") -> "PresentationFile":
        return _pyglass.PresentationLibrary_GetPresentationFile(self, name)

    def GetPresentationFileHandle(self, name: "std::string const &") -> "SB::FileHandle":
        return _pyglass.PresentationLibrary_GetPresentationFileHandle(self, name)

    def GetEntries(self) -> "std::vector< PresentationLibrary::PresentationEntry,std::allocator< PresentationLibrary::PresentationEntry > >":
        return _pyglass.PresentationLibrary_GetEntries(self)

    def GetFileFormat(self, path: "path") -> "PresentationFile::SupplementaryFileFormat":
        return _pyglass.PresentationLibrary_GetFileFormat(self, path)

    def SaveLibrary(self) -> "void":
        return _pyglass.PresentationLibrary_SaveLibrary(self)

    def GetThumbnailImage(self, filePath: "path") -> "Raster":
        return _pyglass.PresentationLibrary_GetThumbnailImage(self, filePath)

    def SetThumbnailImage(self, filePath: "path", thumbnailImage: "Raster") -> "void":
        return _pyglass.PresentationLibrary_SetThumbnailImage(self, filePath, thumbnailImage)

    def SetEncryptionKey(self, encryptionKey: "std::string const &") -> "void":
        return _pyglass.PresentationLibrary_SetEncryptionKey(self, encryptionKey)

    def GetEncryptionKey(self) -> "std::string":
        return _pyglass.PresentationLibrary_GetEncryptionKey(self)

    def ImportPresentation(self, *args) -> "std::string":
        return _pyglass.PresentationLibrary_ImportPresentation(self, *args)

    def ImportSYPIfNotImported(self, arg2: "path") -> "bool":
        return _pyglass.PresentationLibrary_ImportSYPIfNotImported(self, arg2)

    def UpdatePresentationFile(self, presFile: "PresentationFile") -> "void":
        return _pyglass.PresentationLibrary_UpdatePresentationFile(self, presFile)

    def DoOldFormatPresentationsExist(self) -> "bool":
        return _pyglass.PresentationLibrary_DoOldFormatPresentationsExist(self)

    def __init__(self):
        _pyglass.PresentationLibrary_swiginit(self, _pyglass.new_PresentationLibrary())
    __swig_destroy__ = _pyglass.delete_PresentationLibrary

# Register PresentationLibrary in _pyglass:
_pyglass.PresentationLibrary_swigregister(PresentationLibrary)

class PresentationEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fileName = property(_pyglass.PresentationEntry_fileName_get, _pyglass.PresentationEntry_fileName_set)
    thumbnailString = property(_pyglass.PresentationEntry_thumbnailString_get, _pyglass.PresentationEntry_thumbnailString_set)

    def __init__(self):
        _pyglass.PresentationEntry_swiginit(self, _pyglass.new_PresentationEntry())
    __swig_destroy__ = _pyglass.delete_PresentationEntry

# Register PresentationEntry in _pyglass:
_pyglass.PresentationEntry_swigregister(PresentationEntry)

class NarrationLibrary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.NarrationLibrary_swiginit(self, _pyglass.new_NarrationLibrary())

    def ReloadLibrary(self) -> "void":
        return _pyglass.NarrationLibrary_ReloadLibrary(self)

    def ImportFile(self, filePath: "path", prependText: "std::string const &") -> "void":
        return _pyglass.NarrationLibrary_ImportFile(self, filePath, prependText)

    def CreateNarrationFile(self, *args) -> "boost::filesystem::path":
        return _pyglass.NarrationLibrary_CreateNarrationFile(self, *args)

    def UpdateNarrationFile(self, narrationFile: "NarrationFile", narrationName: "std::string const &") -> "void":
        return _pyglass.NarrationLibrary_UpdateNarrationFile(self, narrationFile, narrationName)

    def CreateFolder(self, filePath: "path") -> "void":
        return _pyglass.NarrationLibrary_CreateFolder(self, filePath)

    def RemoveFile(self, filePath: "path") -> "bool":
        return _pyglass.NarrationLibrary_RemoveFile(self, filePath)

    def RenameFile(self, filePath: "path", newFilePath: "path") -> "void":
        return _pyglass.NarrationLibrary_RenameFile(self, filePath, newFilePath)

    def HasFile(self, fileName: "std::string const &") -> "bool":
        return _pyglass.NarrationLibrary_HasFile(self, fileName)

    def GetPathFromFilename(self, fileName: "std::string const &") -> "boost::filesystem::path":
        return _pyglass.NarrationLibrary_GetPathFromFilename(self, fileName)

    def GetIndexByPath(self, filePath: "path") -> "int":
        return _pyglass.NarrationLibrary_GetIndexByPath(self, filePath)

    def MoveFilePath(self, oldFilePath: "path", newFilePath: "path", newIndex: "int") -> "void":
        return _pyglass.NarrationLibrary_MoveFilePath(self, oldFilePath, newFilePath, newIndex)

    def UpdateIndex(self, newIndex: "int", oldIndex: "int", filePath: "path") -> "void":
        return _pyglass.NarrationLibrary_UpdateIndex(self, newIndex, oldIndex, filePath)

    def ExportNarration(self, narrationPath: "path", destinationPath: "path") -> "void":
        return _pyglass.NarrationLibrary_ExportNarration(self, narrationPath, destinationPath)

    def SetNarrationSavedCallback(self, narrationSavedCallback: "CSharpCallback *") -> "void":
        return _pyglass.NarrationLibrary_SetNarrationSavedCallback(self, narrationSavedCallback)

    def SetNarrationStrSavedCallback(self, narrationStrSavedCallback: "CSharpCallback *") -> "void":
        return _pyglass.NarrationLibrary_SetNarrationStrSavedCallback(self, narrationStrSavedCallback)

    def SetNarrationVRDeleteCallback(self, narrationDeletedCallback: "CSharpCallback *") -> "void":
        return _pyglass.NarrationLibrary_SetNarrationVRDeleteCallback(self, narrationDeletedCallback)

    def NarrationDeletedFromVR(self) -> "void":
        return _pyglass.NarrationLibrary_NarrationDeletedFromVR(self)

    def GetFiles(self) -> "std::vector< boost::filesystem::path,std::allocator< boost::filesystem::path > >":
        return _pyglass.NarrationLibrary_GetFiles(self)

    def GetFolders(self) -> "std::vector< boost::filesystem::path,std::allocator< boost::filesystem::path > >":
        return _pyglass.NarrationLibrary_GetFolders(self)

    def GetFileNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.NarrationLibrary_GetFileNames(self)

    def GetThumbnailImage(self, filePath: "path") -> "Raster":
        return _pyglass.NarrationLibrary_GetThumbnailImage(self, filePath)

    def SetThumbnailImage(self, filePath: "path", thumbnailImage: "Raster") -> "void":
        return _pyglass.NarrationLibrary_SetThumbnailImage(self, filePath, thumbnailImage)

    def HasCollision(self, filename: "std::string const &") -> "bool":
        return _pyglass.NarrationLibrary_HasCollision(self, filename)

    def AddLearningModuleFile(self, filePath: "path") -> "void":
        return _pyglass.NarrationLibrary_AddLearningModuleFile(self, filePath)

    def DoOldFormatNarrationsExist(self) -> "bool":
        return _pyglass.NarrationLibrary_DoOldFormatNarrationsExist(self)

    def GetNarrationFormatVersion(self, filePath: "path") -> "uint16_t":
        return _pyglass.NarrationLibrary_GetNarrationFormatVersion(self, filePath)
    __swig_destroy__ = _pyglass.delete_NarrationLibrary

# Register NarrationLibrary in _pyglass:
_pyglass.NarrationLibrary_swigregister(NarrationLibrary)

class SupplementalLibrary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Unknown = _pyglass.SupplementalLibrary_Unknown
    PNG = _pyglass.SupplementalLibrary_PNG
    SYC = _pyglass.SupplementalLibrary_SYC
    FOLDER = _pyglass.SupplementalLibrary_FOLDER
    MP4 = _pyglass.SupplementalLibrary_MP4

    def __init__(self):
        _pyglass.SupplementalLibrary_swiginit(self, _pyglass.new_SupplementalLibrary())

    @staticmethod
    def GetFileFormat(filePath: "path") -> "SupplementalLibrary::SupplementalFileFormat":
        return _pyglass.SupplementalLibrary_GetFileFormat(filePath)

    def ReloadLibrary(self) -> "void":
        return _pyglass.SupplementalLibrary_ReloadLibrary(self)

    def AddFile(self, filePath: "path", prependText: "std::string const &") -> "void":
        return _pyglass.SupplementalLibrary_AddFile(self, filePath, prependText)

    def AddPath(self, filePath: "path") -> "void":
        return _pyglass.SupplementalLibrary_AddPath(self, filePath)

    def AddFolder(self, filePath: "path") -> "void":
        return _pyglass.SupplementalLibrary_AddFolder(self, filePath)

    def RemoveFile(self, filePath: "path") -> "void":
        return _pyglass.SupplementalLibrary_RemoveFile(self, filePath)

    def RenameFile(self, filePath: "path", newFilePath: "path") -> "void":
        return _pyglass.SupplementalLibrary_RenameFile(self, filePath, newFilePath)

    def GetIndexByPath(self, filePath: "path") -> "int":
        return _pyglass.SupplementalLibrary_GetIndexByPath(self, filePath)

    def GetIndexMap(self) -> "std::map< boost::filesystem::path,int,std::less< boost::filesystem::path >,std::allocator< std::pair< boost::filesystem::path const,int > > >":
        return _pyglass.SupplementalLibrary_GetIndexMap(self)

    def UpdateIndex(self, newIndex: "int", oldIndex: "int", filePath: "path") -> "void":
        return _pyglass.SupplementalLibrary_UpdateIndex(self, newIndex, oldIndex, filePath)

    def HasFile(self, fileName: "std::string const &") -> "bool":
        return _pyglass.SupplementalLibrary_HasFile(self, fileName)

    def GetPath(self, fileName: "std::string const &") -> "std::string":
        return _pyglass.SupplementalLibrary_GetPath(self, fileName)

    def GetFiles(self) -> "std::map< SupplementalLibrary::SupplementalFileFormat,std::vector< boost::filesystem::path,std::allocator< boost::filesystem::path > >,std::less< SupplementalLibrary::SupplementalFileFormat >,std::allocator< std::pair< SupplementalLibrary::SupplementalFileFormat const,std::vector< boost::filesystem::path,std::allocator< boost::filesystem::path > > > > >":
        return _pyglass.SupplementalLibrary_GetFiles(self)

    def GetActiveFilesList(self) -> "std::vector< boost::filesystem::path,std::allocator< boost::filesystem::path > >":
        return _pyglass.SupplementalLibrary_GetActiveFilesList(self)

    def GetFolders(self) -> "std::vector< boost::filesystem::path,std::allocator< boost::filesystem::path > >":
        return _pyglass.SupplementalLibrary_GetFolders(self)

    def SetActiveFilesList(self, folderPath: "path") -> "void":
        return _pyglass.SupplementalLibrary_SetActiveFilesList(self, folderPath)

    def GetActivePath(self) -> "boost::filesystem::path":
        return _pyglass.SupplementalLibrary_GetActivePath(self)

    def MoveFilePath(self, oldFilePath: "path", newFilePath: "path", newIndex: "int") -> "void":
        return _pyglass.SupplementalLibrary_MoveFilePath(self, oldFilePath, newFilePath, newIndex)

    def ExportSlideShow(self, sourcePath: "path", destinationPath: "path") -> "void":
        return _pyglass.SupplementalLibrary_ExportSlideShow(self, sourcePath, destinationPath)

    def ImportSlideShow(self, sourcePath: "path") -> "std::vector< boost::filesystem::path,std::allocator< boost::filesystem::path > >":
        return _pyglass.SupplementalLibrary_ImportSlideShow(self, sourcePath)

    def SetIsActiveDirectoryDirty(self, isDirty: "bool") -> "void":
        return _pyglass.SupplementalLibrary_SetIsActiveDirectoryDirty(self, isDirty)

    def GetIsActiveDirectoryDirty(self) -> "bool":
        return _pyglass.SupplementalLibrary_GetIsActiveDirectoryDirty(self)
    __swig_destroy__ = _pyglass.delete_SupplementalLibrary

# Register SupplementalLibrary in _pyglass:
_pyglass.SupplementalLibrary_swigregister(SupplementalLibrary)

def SupplementalLibrary_GetFileFormat(filePath: "path") -> "SupplementalLibrary::SupplementalFileFormat":
    return _pyglass.SupplementalLibrary_GetFileFormat(filePath)

class SupplementalFileEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    path = property(_pyglass.SupplementalFileEntry_path_get, _pyglass.SupplementalFileEntry_path_set)
    index = property(_pyglass.SupplementalFileEntry_index_get, _pyglass.SupplementalFileEntry_index_set)

    def __init__(self):
        _pyglass.SupplementalFileEntry_swiginit(self, _pyglass.new_SupplementalFileEntry())
    __swig_destroy__ = _pyglass.delete_SupplementalFileEntry

# Register SupplementalFileEntry in _pyglass:
_pyglass.SupplementalFileEntry_swigregister(SupplementalFileEntry)

class NarrationFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.NarrationFile_swiginit(self, _pyglass.new_NarrationFile())
    header = property(_pyglass.NarrationFile_header_get, _pyglass.NarrationFile_header_set)
    projectNames = property(_pyglass.NarrationFile_projectNames_get, _pyglass.NarrationFile_projectNames_set)
    supplementaryFilePaths = property(_pyglass.NarrationFile_supplementaryFilePaths_get, _pyglass.NarrationFile_supplementaryFilePaths_set)
    narration = property(_pyglass.NarrationFile_narration_get, _pyglass.NarrationFile_narration_set)
    preview = property(_pyglass.NarrationFile_preview_get, _pyglass.NarrationFile_preview_set)
    audioTrack = property(_pyglass.NarrationFile_audioTrack_get, _pyglass.NarrationFile_audioTrack_set)
    narrationIndex = property(_pyglass.NarrationFile_narrationIndex_get, _pyglass.NarrationFile_narrationIndex_set)
    seekThumbnails = property(_pyglass.NarrationFile_seekThumbnails_get, _pyglass.NarrationFile_seekThumbnails_set)
    __swig_destroy__ = _pyglass.delete_NarrationFile

# Register NarrationFile in _pyglass:
_pyglass.NarrationFile_swigregister(NarrationFile)

class NarrationFileHeader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    formatVersion = property(_pyglass.NarrationFileHeader_formatVersion_get, _pyglass.NarrationFileHeader_formatVersion_set)
    minBuildNumber = property(_pyglass.NarrationFileHeader_minBuildNumber_get, _pyglass.NarrationFileHeader_minBuildNumber_set)

    def __init__(self):
        _pyglass.NarrationFileHeader_swiginit(self, _pyglass.new_NarrationFileHeader())
    __swig_destroy__ = _pyglass.delete_NarrationFileHeader

# Register NarrationFileHeader in _pyglass:
_pyglass.NarrationFileHeader_swigregister(NarrationFileHeader)

class NarrationIndexEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_pyglass.NarrationIndexEntry_state_get, _pyglass.NarrationIndexEntry_state_set)
    fileOffset = property(_pyglass.NarrationIndexEntry_fileOffset_get, _pyglass.NarrationIndexEntry_fileOffset_set)
    drawingNodes = property(_pyglass.NarrationIndexEntry_drawingNodes_get, _pyglass.NarrationIndexEntry_drawingNodes_set)

    def __init__(self):
        _pyglass.NarrationIndexEntry_swiginit(self, _pyglass.new_NarrationIndexEntry())
    __swig_destroy__ = _pyglass.delete_NarrationIndexEntry

# Register NarrationIndexEntry in _pyglass:
_pyglass.NarrationIndexEntry_swigregister(NarrationIndexEntry)

class NarrationData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.NarrationData_swiginit(self, _pyglass.new_NarrationData())
    narrationDurationSeconds = property(_pyglass.NarrationData_narrationDurationSeconds_get, _pyglass.NarrationData_narrationDurationSeconds_set)
    recording = property(_pyglass.NarrationData_recording_get, _pyglass.NarrationData_recording_set)
    __swig_destroy__ = _pyglass.delete_NarrationData

# Register NarrationData in _pyglass:
_pyglass.NarrationData_swigregister(NarrationData)

class Operator(IReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.Operator_GetSize(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.Operator_GetFrameCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.Operator_GetDataType(self)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.Operator_GetChannelsCount(self)

    def GetNIfTIAffine(self) -> "glm::mat4x4":
        return _pyglass.Operator_GetNIfTIAffine(self)

    def GetDCMBiasAndScale(self) -> "glm::vec4":
        return _pyglass.Operator_GetDCMBiasAndScale(self)

    def HasSupportOfArbitraryReads(self) -> "bool":
        return _pyglass.Operator_HasSupportOfArbitraryReads(self)

    def GetWindowString(self) -> "std::string":
        return _pyglass.Operator_GetWindowString(self)

    def GetContrastString(self) -> "std::string":
        return _pyglass.Operator_GetContrastString(self)

    def GetDefaultOpticalModel(self) -> "IReader::OpticalModel":
        return _pyglass.Operator_GetDefaultOpticalModel(self)
    __swig_destroy__ = _pyglass.delete_Operator

# Register Operator in _pyglass:
_pyglass.Operator_swigregister(Operator)

class LinearTransform(Operator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reader: "IReaderPtr", a: "float", b: "float"):
        _pyglass.LinearTransform_swiginit(self, _pyglass.new_LinearTransform(reader, a, b))

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.LinearTransform_ReadBlock(self, start, size, timepoint)
    __swig_destroy__ = _pyglass.delete_LinearTransform

# Register LinearTransform in _pyglass:
_pyglass.LinearTransform_swigregister(LinearTransform)

class ConvertorTo8Bit(Operator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reader: "IReaderPtr"):
        _pyglass.ConvertorTo8Bit_swiginit(self, _pyglass.new_ConvertorTo8Bit(reader))

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.ConvertorTo8Bit_ReadBlock(self, start, size, timepoint)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.ConvertorTo8Bit_GetDataType(self)
    __swig_destroy__ = _pyglass.delete_ConvertorTo8Bit

# Register ConvertorTo8Bit in _pyglass:
_pyglass.ConvertorTo8Bit_swigregister(ConvertorTo8Bit)

class ConverterTo16Bit(Operator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reader: "IReaderPtr"):
        _pyglass.ConverterTo16Bit_swiginit(self, _pyglass.new_ConverterTo16Bit(reader))

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.ConverterTo16Bit_ReadBlock(self, start, size, timepoint)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.ConverterTo16Bit_GetDataType(self)
    __swig_destroy__ = _pyglass.delete_ConverterTo16Bit

# Register ConverterTo16Bit in _pyglass:
_pyglass.ConverterTo16Bit_swigregister(ConverterTo16Bit)

class ConverterToFloat(Operator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reader: "IReaderPtr"):
        _pyglass.ConverterToFloat_swiginit(self, _pyglass.new_ConverterToFloat(reader))

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.ConverterToFloat_ReadBlock(self, start, size, timepoint)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.ConverterToFloat_GetDataType(self)
    __swig_destroy__ = _pyglass.delete_ConverterToFloat

# Register ConverterToFloat in _pyglass:
_pyglass.ConverterToFloat_swigregister(ConverterToFloat)

class ChannelCombiner2(Operator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, primary: "IReaderPtr", secondary: "IReaderPtr"):
        _pyglass.ChannelCombiner2_swiginit(self, _pyglass.new_ChannelCombiner2(primary, secondary))

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.ChannelCombiner2_ReadBlock(self, start, size, timepoint)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.ChannelCombiner2_GetChannelsCount(self)
    __swig_destroy__ = _pyglass.delete_ChannelCombiner2

# Register ChannelCombiner2 in _pyglass:
_pyglass.ChannelCombiner2_swigregister(ChannelCombiner2)

class ChannelCombiner3(Operator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, primary: "IReaderPtr", second: "IReaderPtr", third: "IReaderPtr"):
        _pyglass.ChannelCombiner3_swiginit(self, _pyglass.new_ChannelCombiner3(primary, second, third))

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.ChannelCombiner3_ReadBlock(self, start, size, timepoint)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.ChannelCombiner3_GetChannelsCount(self)
    __swig_destroy__ = _pyglass.delete_ChannelCombiner3

# Register ChannelCombiner3 in _pyglass:
_pyglass.ChannelCombiner3_swigregister(ChannelCombiner3)

class ChannelCombiner4(Operator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, primary: "IReaderPtr", second: "IReaderPtr", third: "IReaderPtr", fourth: "IReaderPtr"):
        _pyglass.ChannelCombiner4_swiginit(self, _pyglass.new_ChannelCombiner4(primary, second, third, fourth))

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.ChannelCombiner4_ReadBlock(self, start, size, timepoint)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.ChannelCombiner4_GetChannelsCount(self)
    __swig_destroy__ = _pyglass.delete_ChannelCombiner4

# Register ChannelCombiner4 in _pyglass:
_pyglass.ChannelCombiner4_swigregister(ChannelCombiner4)

class ChannelExtracter(Operator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reader: "IReaderPtr", channel: "int"):
        _pyglass.ChannelExtracter_swiginit(self, _pyglass.new_ChannelExtracter(reader, channel))

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.ChannelExtracter_ReadBlock(self, start, size, timepoint)

    def GetChannelsCount(self) -> "ProjectIO::Channels":
        return _pyglass.ChannelExtracter_GetChannelsCount(self)
    __swig_destroy__ = _pyglass.delete_ChannelExtracter

# Register ChannelExtracter in _pyglass:
_pyglass.ChannelExtracter_swigregister(ChannelExtracter)

class ColorInverse(Operator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reader: "IReaderPtr"):
        _pyglass.ColorInverse_swiginit(self, _pyglass.new_ColorInverse(reader))

    def ReadBlock(self, start: "ivec3", size: "ivec3", timepoint: "int") -> "Raster":
        return _pyglass.ColorInverse_ReadBlock(self, start, size, timepoint)
    __swig_destroy__ = _pyglass.delete_ColorInverse

# Register ColorInverse in _pyglass:
_pyglass.ColorInverse_swigregister(ColorInverse)


def ConvertTo8Bit(dp: "DataProvider") -> "DataProvider":
    return _pyglass.ConvertTo8Bit(dp)

def ConvertTo16Bit(dp: "DataProvider") -> "DataProvider":
    return _pyglass.ConvertTo16Bit(dp)

def ConvertToFloat(dp: "DataProvider") -> "DataProvider":
    return _pyglass.ConvertToFloat(dp)

def Invert(dp: "DataProvider") -> "DataProvider":
    return _pyglass.Invert(dp)

def ApplyTransform(dp: "DataProvider", a: "float", b: "float") -> "DataProvider":
    return _pyglass.ApplyTransform(dp, a, b)

def Combine2(in1: "DataProvider", in2: "DataProvider") -> "DataProvider":
    return _pyglass.Combine2(in1, in2)

def Combine3(in1: "DataProvider", in2: "DataProvider", in3: "DataProvider") -> "DataProvider":
    return _pyglass.Combine3(in1, in2, in3)

def Combine4(in1: "DataProvider", in2: "DataProvider", in3: "DataProvider", in4: "DataProvider") -> "DataProvider":
    return _pyglass.Combine4(in1, in2, in3, in4)

def ExtractChannel(dp: "DataProvider", channel: "int") -> "DataProvider":
    return _pyglass.ExtractChannel(dp, channel)
MAX_KEY = _pyglass.MAX_KEY
UINT8 = _pyglass.UINT8
UINT16 = _pyglass.UINT16
UINT32 = _pyglass.UINT32
HALF_FLOAT = _pyglass.HALF_FLOAT
FLOAT = _pyglass.FLOAT
SingleChannel = _pyglass.SingleChannel
TwoChannels = _pyglass.TwoChannels
ThreeChannels = _pyglass.ThreeChannels
FourChannels = _pyglass.FourChannels
IO_VERSION = _pyglass.IO_VERSION
IO_VERSION_MASK = _pyglass.IO_VERSION_MASK
IO_FLAGS_MASK = _pyglass.IO_FLAGS_MASK
IO_SIGNED = _pyglass.IO_SIGNED
HAS_EMBEDDED_SYM = _pyglass.HAS_EMBEDDED_SYM
HAS_FULL_HASH = _pyglass.HAS_FULL_HASH
IO_SELF_SIGNED = _pyglass.IO_SELF_SIGNED
IO_SIGNED_CUSTOM_KEY = _pyglass.IO_SIGNED_CUSTOM_KEY
IO_INDEX_TABLE_DONE = _pyglass.IO_INDEX_TABLE_DONE
IO_MAGIC_INT_MASK = _pyglass.IO_MAGIC_INT_MASK
IO_MAGIC_INT = _pyglass.IO_MAGIC_INT
PS_INVALID = _pyglass.PS_INVALID
PS_PROJECTFILE_WAS_CREATED_BY_NEWER_VERSION_OF_SYGLASS = _pyglass.PS_PROJECTFILE_WAS_CREATED_BY_NEWER_VERSION_OF_SYGLASS
PS_CONVERSION_WAS_INTERRUPTED = _pyglass.PS_CONVERSION_WAS_INTERRUPTED
PS_CONVERTING = _pyglass.PS_CONVERTING
PS_CONVERSION_DONE = _pyglass.PS_CONVERSION_DONE
PS_VALID = _pyglass.PS_VALID

def IsAProjectFile(*args) -> "bool":
    return _pyglass.IsAProjectFile(*args)

def WasProjectFileOpened(path: "path") -> "bool":
    return _pyglass.WasProjectFileOpened(path)

def OpenProject(path: "path") -> "ProjectIO::Project":
    return _pyglass.OpenProject(path)

def OpenProjectForImportingEncrypted(path: "path") -> "ProjectIO::Project":
    return _pyglass.OpenProjectForImportingEncrypted(path)

def OpenProjectWithKey(path: "path", key: "std::string const &") -> "ProjectIO::Project":
    return _pyglass.OpenProjectWithKey(path, key)

def CreateTestProject() -> "ProjectIO::Project":
    return _pyglass.CreateTestProject()

def GenerateKey(projectPath: "path", keyPath: "path") -> "std::string":
    return _pyglass.GenerateKey(projectPath, keyPath)

def Sign(*args) -> "bool":
    return _pyglass.Sign(*args)

def UnSign(projectPath: "path") -> "bool":
    return _pyglass.UnSign(projectPath)

def IsProjectSigned(path: "path") -> "bool":
    return _pyglass.IsProjectSigned(path)

def SignWithCustomKey(projectPath: "path") -> "bool":
    return _pyglass.SignWithCustomKey(projectPath)

def IsCustomKeyFileValid() -> "bool":
    return _pyglass.IsCustomKeyFileValid()

def OpenMouselight(path: "path") -> "ProjectIO::Project":
    return _pyglass.OpenMouselight(path)

def CreateProject(path: "path", projectName: "std::string", isMaskMode: "bool"=False) -> "ProjectIO::Project":
    return _pyglass.CreateProject(path, projectName, isMaskMode)

def DataTypeAndChannelToRasterType(d: "ProjectIO::DataType", c: "ProjectIO::Channels") -> "Raster::DataType":
    return _pyglass.DataTypeAndChannelToRasterType(d, c)

def RasterTypeToDataTypeAndChannel(rd: "Raster::DataType", d: "ProjectIO::DataType &", c: "ProjectIO::Channels &") -> "void":
    return _pyglass.RasterTypeToDataTypeAndChannel(rd, d, c)

def GetDataTypeAsString(dataType: "ProjectIO::DataType") -> "std::string":
    return _pyglass.GetDataTypeAsString(dataType)
class Project(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CreateMouselight() -> "ProjectIO::Project":
        return _pyglass.Project_CreateMouselight()

    @staticmethod
    def CreateImaris() -> "ProjectIO::Project":
        return _pyglass.Project_CreateImaris()

    @staticmethod
    def CreateTestProject() -> "ProjectIO::Project":
        return _pyglass.Project_CreateTestProject()

    def __init__(self, *args):
        _pyglass.Project_swiginit(self, _pyglass.new_Project(*args))

    def Init(self, dataType: "ProjectIO::DataType", channels: "ProjectIO::Channels", blockSize: "ivec3", FrameCount: "int", pyramidHeight: "int") -> "void":
        return _pyglass.Project_Init(self, dataType, channels, blockSize, FrameCount, pyramidHeight)

    def FinilizeConversion(self) -> "void":
        return _pyglass.Project_FinilizeConversion(self)

    def Close(self) -> "void":
        return _pyglass.Project_Close(self)

    def Wait(self) -> "void":
        return _pyglass.Project_Wait(self)

    def AddBlock(self, raster: "Raster", timepoint: "int", path: "int", mr: "MemoryReservation", cache: "bool") -> "bool":
        return _pyglass.Project_AddBlock(self, raster, timepoint, path, mr, cache)

    def GetBlock(self, timepoint: "int", path: "int", createRequestIfNo: "bool") -> "Raster":
        return _pyglass.Project_GetBlock(self, timepoint, path, createRequestIfNo)

    def DoesBlockExist(self, timepoint: "int", path: "int") -> "bool":
        return _pyglass.Project_DoesBlockExist(self, timepoint, path)

    def GetBlockSynchronous(self, timepoint: "int", path: "int", mr: "MemoryReservation", cache: "bool") -> "Raster":
        return _pyglass.Project_GetBlockSynchronous(self, timepoint, path, mr, cache)

    def GetStatus(self) -> "ProjectIO::ProjectStatus":
        return _pyglass.Project_GetStatus(self)

    def GetReserver(self) -> "MemoryReserver":
        return _pyglass.Project_GetReserver(self)

    def GetFrameCount(self) -> "int":
        return _pyglass.Project_GetFrameCount(self)

    def GetPyramidHeight(self) -> "int":
        return _pyglass.Project_GetPyramidHeight(self)

    def GetTreeK(self) -> "int":
        return _pyglass.Project_GetTreeK(self)

    def SetVoxelSize(self, voxelSize: "vec3") -> "void":
        return _pyglass.Project_SetVoxelSize(self, voxelSize)

    def SaveNIfTIAffine(self, NIfTIAffine: "glm::mat4x4 const &") -> "void":
        return _pyglass.Project_SaveNIfTIAffine(self, NIfTIAffine)

    def GetNIfTIAffine(self) -> "glm::mat4x4":
        return _pyglass.Project_GetNIfTIAffine(self)

    def SaveDCMBiasAndScale(self, BiasAndScale: "vec4") -> "void":
        return _pyglass.Project_SaveDCMBiasAndScale(self, BiasAndScale)

    def GetDCMBiasAndScale(self) -> "glm::vec4":
        return _pyglass.Project_GetDCMBiasAndScale(self)

    def GetVoxelSize(self) -> "glm::vec3":
        return _pyglass.Project_GetVoxelSize(self)

    def SetVoxelUnit(self, voxelUnit: "std::string const &") -> "void":
        return _pyglass.Project_SetVoxelUnit(self, voxelUnit)

    def GetVoxelUnit(self) -> "std::string":
        return _pyglass.Project_GetVoxelUnit(self)

    def IsSigned(self) -> "bool":
        return _pyglass.Project_IsSigned(self)

    def ZipMeshes(self) -> "bool":
        return _pyglass.Project_ZipMeshes(self)

    def MoveMeshesToNewLocation(self) -> "void":
        return _pyglass.Project_MoveMeshesToNewLocation(self)

    def SetProjectCreationTime(self) -> "void":
        return _pyglass.Project_SetProjectCreationTime(self)

    def GetProjectCreationTime(self) -> "std::string":
        return _pyglass.Project_GetProjectCreationTime(self)

    def GetBlockSize(self) -> "glm::ivec3":
        return _pyglass.Project_GetBlockSize(self)

    def GetProjectName(self) -> "std::string":
        return _pyglass.Project_GetProjectName(self)

    def GetChannelCount(self) -> "ProjectIO::Channels":
        return _pyglass.Project_GetChannelCount(self)

    def GetDataType(self) -> "ProjectIO::DataType":
        return _pyglass.Project_GetDataType(self)

    def GetPathToSygFile(self) -> "boost::filesystem::path":
        return _pyglass.Project_GetPathToSygFile(self)

    def GetPathToSykFile(self) -> "boost::filesystem::path":
        return _pyglass.Project_GetPathToSykFile(self)

    def GetPathToMeshes(self) -> "boost::filesystem::path":
        return _pyglass.Project_GetPathToMeshes(self)

    def GetCacheSize(self) -> "size_t":
        return _pyglass.Project_GetCacheSize(self)

    def SetCacheSize(self, size: "size_t") -> "void":
        return _pyglass.Project_SetCacheSize(self, size)

    def SetMinCacheSize(self, minCacheSize: "size_t") -> "void":
        return _pyglass.Project_SetMinCacheSize(self, minCacheSize)

    def SetMaxCacheSize(self, maxCacheSize: "size_t") -> "void":
        return _pyglass.Project_SetMaxCacheSize(self, maxCacheSize)

    def GetMaxCacheSize(self) -> "size_t":
        return _pyglass.Project_GetMaxCacheSize(self)

    def GetSWCTransform(self) -> "glm::mat4":
        return _pyglass.Project_GetSWCTransform(self)

    def GetDBAccessor(self) -> "ProjectIO::DBAccessor":
        return _pyglass.Project_GetDBAccessor(self)

    def GetProjectDimensions(self) -> "glm::vec3":
        return _pyglass.Project_GetProjectDimensions(self)

    def GetProjectDimensionsInUnitVoxels(self) -> "glm::ivec3":
        return _pyglass.Project_GetProjectDimensionsInUnitVoxels(self)

    def GetProjectHash(self) -> "std::string":
        return _pyglass.Project_GetProjectHash(self)

    def DeleteExperiment(self, name: "std::string const &") -> "void":
        return _pyglass.Project_DeleteExperiment(self, name)

    def AddExperiment(self, name: "std::string const &") -> "void":
        return _pyglass.Project_AddExperiment(self, name)

    def SetExperiment(self, name: "std::string const &") -> "void":
        return _pyglass.Project_SetExperiment(self, name)

    def GetCurrentExperiment(self) -> "std::string":
        return _pyglass.Project_GetCurrentExperiment(self)

    def CopyAnnotations(self, key: "std::string const &", sourceDir: "std::string const &", destinationDir: "std::string const &") -> "bool":
        return _pyglass.Project_CopyAnnotations(self, key, sourceDir, destinationDir)

    def CopyExperiment(self, sourceDir: "std::string const &", destinationDir: "std::string const &") -> "bool":
        return _pyglass.Project_CopyExperiment(self, sourceDir, destinationDir)

    def GetSykFilePathStr(self, expName: "std::string const &") -> "std::string":
        return _pyglass.Project_GetSykFilePathStr(self, expName)

    def GetCutplanes(self, dir: "std::string const &") -> "std::vector< glm::vec4,std::allocator< glm::vec4 > >":
        return _pyglass.Project_GetCutplanes(self, dir)

    def ImportMeshOBJs(self, dir: "std::string const &", paths: "std::string const &") -> "bool":
        return _pyglass.Project_ImportMeshOBJs(self, dir, paths)

    def ImportMeshOBJsSync(self, dir: "std::string const &", paths: "PathList") -> "bool":
        return _pyglass.Project_ImportMeshOBJsSync(self, dir, paths)

    def ExportMeshOBJs(self, dir: "std::string const &", names: "std::string const &", paths: "std::string const &") -> "bool":
        return _pyglass.Project_ExportMeshOBJs(self, dir, names, paths)

    def CancelMeshIO(self) -> "void":
        return _pyglass.Project_CancelMeshIO(self)

    def GetMeshIOPercentage(self) -> "float":
        return _pyglass.Project_GetMeshIOPercentage(self)

    def GetMeshIOName(self) -> "std::string":
        return _pyglass.Project_GetMeshIOName(self)

    def GetMeshIOItemizedProgress(self) -> "std::pair< int,int >":
        return _pyglass.Project_GetMeshIOItemizedProgress(self)

    def ExportCountJSON(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportCountJSON(self, dir, path)

    def ExportCountCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportCountCSV(self, dir, path)

    def ExportTraceJSON(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportTraceJSON(self, dir, path)

    def ExportTraceCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportTraceCSV(self, dir, path)

    def ExportMeasurementJSON(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportMeasurementJSON(self, dir, path)

    def ExportMeasurementCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportMeasurementCSV(self, dir, path)

    def ImportMeasurementJSON(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportMeasurementJSON(self, dir, path)

    def ImportMeasurementCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportMeasurementCSV(self, dir, path)

    def ImportCountJSON(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportCountJSON(self, dir, path)

    def ImportCountCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportCountCSV(self, dir, path)

    def ImportCountCSVFromVaa3D(self, dir: "std::string const &", path: "std::string const &", pixelCount: "vec3") -> "bool":
        return _pyglass.Project_ImportCountCSVFromVaa3D(self, dir, path, pixelCount)

    def ImportCountLists(self, allCountingPoints: "std::vector< std::vector< glm::vec3,std::allocator< glm::vec3 > >,std::allocator< std::vector< glm::vec3,std::allocator< glm::vec3 > > > > const &") -> "bool":
        return _pyglass.Project_ImportCountLists(self, allCountingPoints)

    def ImportTraceJSON(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportTraceJSON(self, dir, path)

    def ImportTraceCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportTraceCSV(self, dir, path)

    def ExportSkeletonHOC(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportSkeletonHOC(self, dir, path)

    def ExportSkeletonSWC(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportSkeletonSWC(self, dir, path)

    def ExportSkeletonCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportSkeletonCSV(self, dir, path)

    def ExportAdjacencyListCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportAdjacencyListCSV(self, dir, path)

    def ImportSkeletonSWC(self, dir: "std::string const &", paths: "StringList") -> "bool":
        return _pyglass.Project_ImportSkeletonSWC(self, dir, paths)

    def ImportSkeletonSWCFromVaa3D(self, dir: "std::string const &", path: "std::string const &", pixelCount: "vec3") -> "bool":
        return _pyglass.Project_ImportSkeletonSWCFromVaa3D(self, dir, path, pixelCount)

    def ImportSkeletonHOC(self, dir: "std::string const &", paths: "StringList") -> "bool":
        return _pyglass.Project_ImportSkeletonHOC(self, dir, paths)

    def ImportSWCGraph(self, graph: "SWCP::Graph &") -> "bool":
        return _pyglass.Project_ImportSWCGraph(self, graph)

    def ExportMeshReviewJSON(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportMeshReviewJSON(self, dir, path)

    def ImportMeshReviewJSON(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportMeshReviewJSON(self, dir, path)

    def ImportMultivariateDataCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportMultivariateDataCSV(self, dir, path)

    def GetNumberOfMVDPoints(self, dir: "std::string const &") -> "int":
        return _pyglass.Project_GetNumberOfMVDPoints(self, dir)

    def DeleteMultivariateData(self, dir: "std::string const &") -> "void":
        return _pyglass.Project_DeleteMultivariateData(self, dir)

    def GetNumberOfOnionSeries(self, dir: "std::string const &") -> "int":
        return _pyglass.Project_GetNumberOfOnionSeries(self, dir)

    def DeleteOnionSeries(self, dir: "std::string const &") -> "void":
        return _pyglass.Project_DeleteOnionSeries(self, dir)

    def ExportOnionSeriesCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ExportOnionSeriesCSV(self, dir, path)

    def ImportOnionSeriesCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportOnionSeriesCSV(self, dir, path)

    def AddOnionSeries(self, dir: "std::string const &", onionPoints: "IntVec3Map") -> "bool":
        return _pyglass.Project_AddOnionSeries(self, dir, onionPoints)

    def GetMeshNamesAndSizes(self, dir: "std::string const &") -> "std::map< std::string,std::pair< int,int >,std::less< std::string >,std::allocator< std::pair< std::string const,std::pair< int,int > > > >":
        return _pyglass.Project_GetMeshNamesAndSizes(self, dir)

    def DeleteMeshByName(self, dir: "std::string const &", name: "std::string const &") -> "void":
        return _pyglass.Project_DeleteMeshByName(self, dir, name)

    def RenameMesh(self, dir: "std::string const &", oldName: "std::string const &", newName: "std::string const &") -> "void":
        return _pyglass.Project_RenameMesh(self, dir, oldName, newName)

    def DeleteAllMeshes(self, dir: "std::string const &") -> "void":
        return _pyglass.Project_DeleteAllMeshes(self, dir)

    def SetMeshColor(self, dir: "std::string const &", meshName: "std::string const &", color: "int const &") -> "bool":
        return _pyglass.Project_SetMeshColor(self, dir, meshName, color)

    def GetMeshColors(self, dir: "std::string const &") -> "std::map< std::string,int,std::less< std::string >,std::allocator< std::pair< std::string const,int > > >":
        return _pyglass.Project_GetMeshColors(self, dir)

    def RandomizeMeshColors(self, dir: "std::string const &") -> "bool":
        return _pyglass.Project_RandomizeMeshColors(self, dir)

    def SetPDB(self, *args) -> "bool":
        return _pyglass.Project_SetPDB(self, *args)

    def GetPDBs(self, dir: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.Project_GetPDBs(self, dir)

    def DeletePDB(self, dir: "std::string const &", pdbName: "std::string const &") -> "bool":
        return _pyglass.Project_DeletePDB(self, dir, pdbName)

    def EmbedPDBs(self, dir: "std::string const &") -> "void":
        return _pyglass.Project_EmbedPDBs(self, dir)

    def GetTags(self, dir: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.Project_GetTags(self, dir)

    def CreateTag(self, dir: "std::string const &", tagName: "std::string const &") -> "bool":
        return _pyglass.Project_CreateTag(self, dir, tagName)

    def DeleteTag(self, dir: "std::string const &", tagName: "std::string const &") -> "bool":
        return _pyglass.Project_DeleteTag(self, dir, tagName)

    def AddTagToMesh(self, dir: "std::string const &", tagName: "std::string const &", meshName: "std::string const &") -> "bool":
        return _pyglass.Project_AddTagToMesh(self, dir, tagName, meshName)

    def RemoveTagFromMesh(self, dir: "std::string const &", tagName: "std::string const &", meshName: "std::string const &") -> "bool":
        return _pyglass.Project_RemoveTagFromMesh(self, dir, tagName, meshName)

    def GetMeshTags(self, dir: "std::string const &", meshName: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.Project_GetMeshTags(self, dir, meshName)

    def SetTagOpacity(self, dir: "std::string const &", tag: "std::string const &", opacity: "float") -> "void":
        return _pyglass.Project_SetTagOpacity(self, dir, tag, opacity)

    def SetDVIDFields(self, dir: "std::string const &", dvidServer: "std::string const &", dvidUUID: "std::string const &", dvidDataTypeName: "std::string const &") -> "bool":
        return _pyglass.Project_SetDVIDFields(self, dir, dvidServer, dvidUUID, dvidDataTypeName)

    def GetDVIDServer(self, dir: "std::string const &") -> "std::string":
        return _pyglass.Project_GetDVIDServer(self, dir)

    def GetDVIDUUID(self, dir: "std::string const &") -> "std::string":
        return _pyglass.Project_GetDVIDUUID(self, dir)

    def GetDVIDDataTypeName(self, dir: "std::string const &") -> "std::string":
        return _pyglass.Project_GetDVIDDataTypeName(self, dir)

    def GetNumberOfSkeletonNodes(self, dir: "std::string const &") -> "int":
        return _pyglass.Project_GetNumberOfSkeletonNodes(self, dir)

    def DeleteSkeletons(self, dir: "std::string const &") -> "void":
        return _pyglass.Project_DeleteSkeletons(self, dir)

    def GetNumberOfMeasurements(self, dir: "std::string const &") -> "int":
        return _pyglass.Project_GetNumberOfMeasurements(self, dir)

    def DeleteMeasurements(self, dir: "std::string const &") -> "void":
        return _pyglass.Project_DeleteMeasurements(self, dir)

    def GetNumberOfTraces(self, dir: "std::string const &") -> "int":
        return _pyglass.Project_GetNumberOfTraces(self, dir)

    def DeleteTraces(self, dir: "std::string const &") -> "void":
        return _pyglass.Project_DeleteTraces(self, dir)

    def GetNumberOfCounts(self, dir: "std::string const &") -> "int":
        return _pyglass.Project_GetNumberOfCounts(self, dir)

    def DeleteCounts(self, dir: "std::string const &") -> "void":
        return _pyglass.Project_DeleteCounts(self, dir)

    def SetCitation(self, citationText: "std::string const &") -> "void":
        return _pyglass.Project_SetCitation(self, citationText)

    def GetCitation(self) -> "std::string":
        return _pyglass.Project_GetCitation(self)

    def CreateLabel(self, dir: "std::string const &", label: "std::string const &") -> "bool":
        return _pyglass.Project_CreateLabel(self, dir, label)

    def DeleteLabel(self, dir: "std::string const &", label: "std::string const &") -> "bool":
        return _pyglass.Project_DeleteLabel(self, dir, label)

    def GetLabels(self, dir: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.Project_GetLabels(self, dir)

    def ImportLabelsCSV(self, dir: "std::string const &", path: "std::string const &") -> "bool":
        return _pyglass.Project_ImportLabelsCSV(self, dir, path)

    def CopyShaderSettingsFromProject(self, source: "Project") -> "void":
        return _pyglass.Project_CopyShaderSettingsFromProject(self, source)

    def GetThresholds(self, dir: "std::string const &", preset: "int") -> "std::vector< glm::ivec2,std::allocator< glm::ivec2 > >":
        return _pyglass.Project_GetThresholds(self, dir, preset)

    def SetCoordinateFrame(self, coordinateFrame: "CoordinateFrame") -> "void":
        return _pyglass.Project_SetCoordinateFrame(self, coordinateFrame)

    def SetMaskRaster(self, maskRaster: "Raster", roiIndex: "int", dir: "std::string const &") -> "bool":
        return _pyglass.Project_SetMaskRaster(self, maskRaster, roiIndex, dir)

    def GetMinROIPoint(self, dir: "std::string const &", roiIndex: "int"=1) -> "glm::vec3":
        return _pyglass.Project_GetMinROIPoint(self, dir, roiIndex)

    def GetMaxROIPoint(self, dir: "std::string const &", roiIndex: "int"=1) -> "glm::vec3":
        return _pyglass.Project_GetMaxROIPoint(self, dir, roiIndex)

    def GetRoiIDList(self) -> "std::vector< int,std::allocator< int > >":
        return _pyglass.Project_GetRoiIDList(self)

    def UpdateMaskColorMap(self, dir: "std::string const &", IDs: "std::vector< uint16_t,std::allocator< uint16_t > > const &", values: "ByteList", No: "uint8_t"=1) -> "void":
        return _pyglass.Project_UpdateMaskColorMap(self, dir, IDs, values, No)

    def GetMaskIdColorMap(self, dir: "std::string const &", IDs: "std::vector< uint16_t,std::allocator< uint16_t > > const &", No: "uint8_t"=1) -> "std::map< uint16_t,int,std::less< uint16_t >,std::allocator< std::pair< uint16_t const,int > > >":
        return _pyglass.Project_GetMaskIdColorMap(self, dir, IDs, No)

    def GetAllMaskIDs(self, subStr: "std::string const &") -> "std::vector< uint16_t,std::allocator< uint16_t > >":
        return _pyglass.Project_GetAllMaskIDs(self, subStr)

    def RenameMask(self, dir: "std::string const &", newName: "std::string const &", id: "uint16_t") -> "void":
        return _pyglass.Project_RenameMask(self, dir, newName, id)

    def ResetMaskNames(self, dir: "std::string const &", IDs: "std::vector< uint16_t,std::allocator< uint16_t > > const &") -> "void":
        return _pyglass.Project_ResetMaskNames(self, dir, IDs)

    def GetMaskNamesByIDs(self, dir: "std::string const &", IDs: "std::vector< uint16_t,std::allocator< uint16_t > > const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.Project_GetMaskNamesByIDs(self, dir, IDs)

    def GetMaskTags(self, dir: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.Project_GetMaskTags(self, dir)

    def CreateMaskTag(self, dir: "std::string const &", tagName: "std::string const &") -> "bool":
        return _pyglass.Project_CreateMaskTag(self, dir, tagName)

    def DeleteMaskTags(self, dir: "std::string const &", tagNames: "StringList") -> "bool":
        return _pyglass.Project_DeleteMaskTags(self, dir, tagNames)

    def AddTagsToMask(self, dir: "std::string const &", tagNames: "StringList", id: "uint16_t") -> "bool":
        return _pyglass.Project_AddTagsToMask(self, dir, tagNames, id)

    def RemoveTagsFromMask(self, dir: "std::string const &", tagNames: "StringList", id: "uint16_t") -> "bool":
        return _pyglass.Project_RemoveTagsFromMask(self, dir, tagNames, id)

    def GetMaskTagsByID(self, dir: "std::string const &", id: "uint16_t") -> "std::vector< std::string,std::allocator< std::string > >":
        return _pyglass.Project_GetMaskTagsByID(self, dir, id)

    def RemoveMaskNameAndTagsByID(self, id: "uint16_t") -> "void":
        return _pyglass.Project_RemoveMaskNameAndTagsByID(self, id)

    def SetSampleWeight(self, sampleWeight: "float") -> "void":
        return _pyglass.Project_SetSampleWeight(self, sampleWeight)

    def GetSampleWeight(self) -> "float":
        return _pyglass.Project_GetSampleWeight(self)

    def SetGrayLevelDensityRatio(self, gldRatio: "float") -> "void":
        return _pyglass.Project_SetGrayLevelDensityRatio(self, gldRatio)

    def GetGrayLevelDensityRatio(self) -> "float":
        return _pyglass.Project_GetGrayLevelDensityRatio(self)

    def SetUseDensityRatio(self, useDensityRatio: "bool") -> "void":
        return _pyglass.Project_SetUseDensityRatio(self, useDensityRatio)

    def GetUseDensityRatio(self) -> "bool":
        return _pyglass.Project_GetUseDensityRatio(self)

    def SetMedianFilterSize(self, pixels: "uint16_t") -> "void":
        return _pyglass.Project_SetMedianFilterSize(self, pixels)

    def GetMedianFilterSize(self) -> "uint16_t":
        return _pyglass.Project_GetMedianFilterSize(self)

    def GetTotalGrayLevelEstimate(self, channel: "int") -> "size_t":
        return _pyglass.Project_GetTotalGrayLevelEstimate(self, channel)

    def SetAcquisitionCoordinate(self, coordinate: "vec3") -> "void":
        return _pyglass.Project_SetAcquisitionCoordinate(self, coordinate)

    def GetAcquisitionCoordinate(self) -> "glm::vec3":
        return _pyglass.Project_GetAcquisitionCoordinate(self)

    def SetLiveAcquisitionDirectory(self, liveDirectory: "std::string const &") -> "void":
        return _pyglass.Project_SetLiveAcquisitionDirectory(self, liveDirectory)

    def GetLiveAcquisitionDirectory(self) -> "std::string":
        return _pyglass.Project_GetLiveAcquisitionDirectory(self)

    def SetLiveFilesPerImage(self, liveFilesPerImage: "int") -> "void":
        return _pyglass.Project_SetLiveFilesPerImage(self, liveFilesPerImage)

    def GetLiveFilesPerImage(self) -> "int":
        return _pyglass.Project_GetLiveFilesPerImage(self)

    def GetBlockHash(self) -> "std::string":
        return _pyglass.Project_GetBlockHash(self)

    def CreateBlockHash(self) -> "void":
        return _pyglass.Project_CreateBlockHash(self)

    def ApplyWindowDefaults(self, windowString: "std::string const &") -> "void":
        return _pyglass.Project_ApplyWindowDefaults(self, windowString)

    def ApplyContrastDefaults(self, contrastString: "std::string const &") -> "void":
        return _pyglass.Project_ApplyContrastDefaults(self, contrastString)

    def ApplyAbsorptionModel(self) -> "void":
        return _pyglass.Project_ApplyAbsorptionModel(self)

    def ApplyMIPModel(self) -> "void":
        return _pyglass.Project_ApplyMIPModel(self)

    def GetUnpaddedImageDimensions(self) -> "glm::ivec3":
        return _pyglass.Project_GetUnpaddedImageDimensions(self)

    def SetUnpaddedImageDimensions(self, dims: "ivec3") -> "void":
        return _pyglass.Project_SetUnpaddedImageDimensions(self, dims)

    def EstimateHistogram(self) -> "void":
        return _pyglass.Project_EstimateHistogram(self)
    __swig_destroy__ = _pyglass.delete_Project

# Register Project in _pyglass:
_pyglass.Project_swigregister(Project)

def Project_CreateMouselight() -> "ProjectIO::Project":
    return _pyglass.Project_CreateMouselight()

def Project_CreateImaris() -> "ProjectIO::Project":
    return _pyglass.Project_CreateImaris()

def Project_CreateTestProject() -> "ProjectIO::Project":
    return _pyglass.Project_CreateTestProject()

class CoordinateFrame(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Center = _pyglass.CoordinateFrame_Center
    BottomLeft = _pyglass.CoordinateFrame_BottomLeft
    Voxels = _pyglass.CoordinateFrame_Voxels
    PhysicalUnits = _pyglass.CoordinateFrame_PhysicalUnits

    def __init__(self, *args):
        _pyglass.CoordinateFrame_swiginit(self, _pyglass.new_CoordinateFrame(*args))

    def SetOrigin(self, origin: "ProjectIO::CoordinateFrame::Origin") -> "void":
        return _pyglass.CoordinateFrame_SetOrigin(self, origin)

    def SetUnits(self, units: "ProjectIO::CoordinateFrame::Units") -> "void":
        return _pyglass.CoordinateFrame_SetUnits(self, units)

    def ToCustomFrame(self, *args) -> "float":
        return _pyglass.CoordinateFrame_ToCustomFrame(self, *args)

    def FromCustomFrame(self, *args) -> "float":
        return _pyglass.CoordinateFrame_FromCustomFrame(self, *args)
    __swig_destroy__ = _pyglass.delete_CoordinateFrame

# Register CoordinateFrame in _pyglass:
_pyglass.CoordinateFrame_swigregister(CoordinateFrame)

class Raster(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    R8 = _pyglass.Raster_R8
    R16 = _pyglass.Raster_R16
    R32 = _pyglass.Raster_R32
    RG8 = _pyglass.Raster_RG8
    RG16 = _pyglass.Raster_RG16
    RG32 = _pyglass.Raster_RG32
    RGB8 = _pyglass.Raster_RGB8
    RGB16 = _pyglass.Raster_RGB16
    RGB32 = _pyglass.Raster_RGB32
    RGBA8 = _pyglass.Raster_RGBA8
    RGBA16 = _pyglass.Raster_RGBA16
    RGBA32 = _pyglass.Raster_RGBA32
    RF = _pyglass.Raster_RF
    RGF = _pyglass.Raster_RGF
    RGBF = _pyglass.Raster_RGBF
    RGBAF = _pyglass.Raster_RGBAF
    RHF = _pyglass.Raster_RHF
    RGHF = _pyglass.Raster_RGHF
    RGBHF = _pyglass.Raster_RGBHF
    RGBAHF = _pyglass.Raster_RGBAHF

    @staticmethod
    def GetBytesPerVoxel(*args) -> "size_t":
        return _pyglass.Raster_GetBytesPerVoxel(*args)

    def Valid(self) -> "bool":
        return _pyglass.Raster_Valid(self)

    def GetSize(self) -> "glm::ivec3":
        return _pyglass.Raster_GetSize(self)

    def GetDataSize(self) -> "size_t":
        return _pyglass.Raster_GetDataSize(self)

    def GetScanLineSizeAligned(self) -> "size_t":
        return _pyglass.Raster_GetScanLineSizeAligned(self)

    def GetScanLineSize(self) -> "size_t":
        return _pyglass.Raster_GetScanLineSize(self)

    def SetDataType(self, type: "Raster::DataType") -> "void":
        return _pyglass.Raster_SetDataType(self, type)

    def GetDataType(self) -> "Raster::DataType":
        return _pyglass.Raster_GetDataType(self)

    @staticmethod
    def ConstructEmpty(*args) -> "Raster":
        return _pyglass.Raster_ConstructEmpty(*args)

    @staticmethod
    def ConstructFromData(d: "Raster::DataType", size: "ivec3", m_ptr: "std::shared_ptr< uint8_t >") -> "Raster":
        return _pyglass.Raster_ConstructFromData(d, size, m_ptr)

    @staticmethod
    def ConstructEmptyFileMapped(d: "Raster::DataType", size: "ivec3", file: "std::string const &") -> "Raster":
        return _pyglass.Raster_ConstructEmptyFileMapped(d, size, file)

    def GetScanLinePtr(self, *args) -> "uint8_t const *":
        return _pyglass.Raster_GetScanLinePtr(self, *args)

    def Place(self, r: "Raster", pos: "ivec3") -> "void":
        return _pyglass.Raster_Place(self, r, pos)

    def PlaceUpSampled(self, r: "Raster", scale: "ivec3", pos: "ivec3") -> "void":
        return _pyglass.Raster_PlaceUpSampled(self, r, scale, pos)

    def PlaceResized(self, r: "Raster", pos: "ivec3", size: "ivec3") -> "void":
        return _pyglass.Raster_PlaceResized(self, r, pos, size)

    def Crop(self, pos: "ivec3", size: "ivec3") -> "Raster":
        return _pyglass.Raster_Crop(self, pos, size)

    def DownSample2X(self, *args) -> "Raster":
        return _pyglass.Raster_DownSample2X(self, *args)

    @staticmethod
    def GetMask(i: "int") -> "glm::ivec3":
        return _pyglass.Raster_GetMask(i)

    @staticmethod
    def Combine(*args) -> "Raster":
        return _pyglass.Raster_Combine(*args)

    def ExtractChannel(self, channel: "int") -> "Raster":
        return _pyglass.Raster_ExtractChannel(self, channel)

    def Inverse(self) -> "Raster":
        return _pyglass.Raster_Inverse(self)

    def ConvertTo8Bit(self) -> "Raster":
        return _pyglass.Raster_ConvertTo8Bit(self)

    def ConvertTo16Bit(self) -> "Raster":
        return _pyglass.Raster_ConvertTo16Bit(self)

    def ConvertToFloat(self) -> "Raster":
        return _pyglass.Raster_ConvertToFloat(self)

    def ConvertToR16Bit(self, channel: "int") -> "Raster":
        return _pyglass.Raster_ConvertToR16Bit(self, channel)

    def Resize(self, size: "ivec3", aligned: "bool"=True) -> "Raster":
        return _pyglass.Raster_Resize(self, size, aligned)

    def LinearTransform(self, a: "float", b: "float") -> "Raster":
        return _pyglass.Raster_LinearTransform(self, a, b)

    def MirrorY(self) -> "Raster":
        return _pyglass.Raster_MirrorY(self)

    def Clear(self, pos: "ivec3", size: "ivec3") -> "void":
        return _pyglass.Raster_Clear(self, pos, size)

    def Export(self, path: "std::string") -> "void":
        return _pyglass.Raster_Export(self, path)

    def Import(self, path: "std::string") -> "void":
        return _pyglass.Raster_Import(self, path)

    def AssignMemoryReservation(self, mr: "MemoryReservation") -> "void":
        return _pyglass.Raster_AssignMemoryReservation(self, mr)

    def size(self) -> "size_t":
        return _pyglass.Raster_size(self)

    def __init__(self):
        _pyglass.Raster_swiginit(self, _pyglass.new_Raster())
    __swig_destroy__ = _pyglass.delete_Raster

# Register Raster in _pyglass:
_pyglass.Raster_swigregister(Raster)

def Raster_GetBytesPerVoxel(*args) -> "size_t":
    return _pyglass.Raster_GetBytesPerVoxel(*args)

def Raster_ConstructEmpty(*args) -> "Raster":
    return _pyglass.Raster_ConstructEmpty(*args)

def Raster_ConstructFromData(d: "Raster::DataType", size: "ivec3", m_ptr: "std::shared_ptr< uint8_t >") -> "Raster":
    return _pyglass.Raster_ConstructFromData(d, size, m_ptr)

def Raster_ConstructEmptyFileMapped(d: "Raster::DataType", size: "ivec3", file: "std::string const &") -> "Raster":
    return _pyglass.Raster_ConstructEmptyFileMapped(d, size, file)

def Raster_GetMask(i: "int") -> "glm::ivec3":
    return _pyglass.Raster_GetMask(i)

def Raster_Combine(*args) -> "Raster":
    return _pyglass.Raster_Combine(*args)

class Service(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetInstance() -> "WebUtils::Service *":
        return _pyglass.Service_GetInstance()

    def Init(self, maxSimultaneousRequests: "int", settings: "ConnectionSettings") -> "void":
        return _pyglass.Service_Init(self, maxSimultaneousRequests, settings)
    __swig_destroy__ = _pyglass.delete_Service

    def AddRequest(self, *args) -> "WebUtils::UrlResponsePtr":
        return _pyglass.Service_AddRequest(self, *args)

    def OnRequestFinished(self, bond: "WebUtils::Service::ResponceRequestBond const &") -> "void":
        return _pyglass.Service_OnRequestFinished(self, bond)

    def NewRequest(self) -> "WebUtils::UrlRequest":
        return _pyglass.Service_NewRequest(self)

    def CancelAll(self) -> "void":
        return _pyglass.Service_CancelAll(self)

    def Cancel(self, request: "WebUtils::UrlRequest &") -> "void":
        return _pyglass.Service_Cancel(self, request)

    def Finished(self) -> "bool":
        return _pyglass.Service_Finished(self)

    def SetToken(self, token: "std::string const &") -> "void":
        return _pyglass.Service_SetToken(self, token)

    def __init__(self):
        _pyglass.Service_swiginit(self, _pyglass.new_Service())

# Register Service in _pyglass:
_pyglass.Service_swigregister(Service)

def Service_GetInstance() -> "WebUtils::Service *":
    return _pyglass.Service_GetInstance()

class ConnectionSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_timeout = property(_pyglass.ConnectionSettings_m_timeout_get, _pyglass.ConnectionSettings_m_timeout_set)
    m_doRedirect = property(_pyglass.ConnectionSettings_m_doRedirect_get, _pyglass.ConnectionSettings_m_doRedirect_set)
    m_connectTimeout = property(_pyglass.ConnectionSettings_m_connectTimeout_get, _pyglass.ConnectionSettings_m_connectTimeout_set)
    m_maxConnections = property(_pyglass.ConnectionSettings_m_maxConnections_get, _pyglass.ConnectionSettings_m_maxConnections_set)
    m_userAgent = property(_pyglass.ConnectionSettings_m_userAgent_get, _pyglass.ConnectionSettings_m_userAgent_set)
    m_enableCompression = property(_pyglass.ConnectionSettings_m_enableCompression_get, _pyglass.ConnectionSettings_m_enableCompression_set)
    m_dumpRequest = property(_pyglass.ConnectionSettings_m_dumpRequest_get, _pyglass.ConnectionSettings_m_dumpRequest_set)

    def __init__(self, *args):
        _pyglass.ConnectionSettings_swiginit(self, _pyglass.new_ConnectionSettings(*args))
    __swig_destroy__ = _pyglass.delete_ConnectionSettings

# Register ConnectionSettings in _pyglass:
_pyglass.ConnectionSettings_swigregister(ConnectionSettings)

class UrlConnection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    State_ERROR = _pyglass.UrlConnection_State_ERROR
    State_IDLE = _pyglass.UrlConnection_State_IDLE
    State_RUNNING = _pyglass.UrlConnection_State_RUNNING
    ErrorType_SUCCESS = _pyglass.UrlConnection_ErrorType_SUCCESS
    ErrorType_UNSUPPORTED_PROTOCOL = _pyglass.UrlConnection_ErrorType_UNSUPPORTED_PROTOCOL
    ErrorType_URL_MALFORMAT = _pyglass.UrlConnection_ErrorType_URL_MALFORMAT
    ErrorType_TOO_MANY_REDIRECTS = _pyglass.UrlConnection_ErrorType_TOO_MANY_REDIRECTS
    ErrorType_COULDNT_RESOLVE_HOST = _pyglass.UrlConnection_ErrorType_COULDNT_RESOLVE_HOST
    ErrorType_COULDNT_CONNECT = _pyglass.UrlConnection_ErrorType_COULDNT_CONNECT
    ErrorType_TIMEOUT = _pyglass.UrlConnection_ErrorType_TIMEOUT
    ErrorType_SSL_CONNECT_ERROR = _pyglass.UrlConnection_ErrorType_SSL_CONNECT_ERROR
    ErrorType_CONNECTION_CANCELLED = _pyglass.UrlConnection_ErrorType_CONNECTION_CANCELLED

    def __init__(self, settings: "ConnectionSettings"):
        _pyglass.UrlConnection_swiginit(self, _pyglass.new_UrlConnection(settings))
    __swig_destroy__ = _pyglass.delete_UrlConnection

    def GetState(self) -> "WebUtils::UrlConnection::StateType":
        return _pyglass.UrlConnection_GetState(self)

    def AttachRequest(self, request: "WebUtils::UrlRequest", response: "WebUtils::UrlResponsePtr const &") -> "bool":
        return _pyglass.UrlConnection_AttachRequest(self, request, response)

    def CancelRequest(self) -> "bool":
        return _pyglass.UrlConnection_CancelRequest(self)

    def RunRequest(self) -> "void":
        return _pyglass.UrlConnection_RunRequest(self)

    def GetLastError(self) -> "WebUtils::UrlConnection::ErrorType":
        return _pyglass.UrlConnection_GetLastError(self)

    def GetResponse(self) -> "WebUtils::UrlResponsePtr":
        return _pyglass.UrlConnection_GetResponse(self)

    def GetReceivedDataSize(self) -> "size_t":
        return _pyglass.UrlConnection_GetReceivedDataSize(self)

    def GetProgress(self) -> "int":
        return _pyglass.UrlConnection_GetProgress(self)

    def HasUrlRequestAttached(self, request: "WebUtils::UrlRequest const &") -> "bool":
        return _pyglass.UrlConnection_HasUrlRequestAttached(self, request)

# Register UrlConnection in _pyglass:
_pyglass.UrlConnection_swigregister(UrlConnection)


def InitThreads() -> "void":
    return _pyglass.InitThreads()

def GetRasterAsNumpyArray(r: "Raster", channelShape: "bool"=True) -> "PyObject *":
    return _pyglass.GetRasterAsNumpyArray(r, channelShape)

def GetRasterFromNumpyArray(pyArray: "PyObject *") -> "Raster":
    return _pyglass.GetRasterFromNumpyArray(pyArray)

def SLIC(r: "Raster", mask: "Raster", voxelSize: "vec3", compactness: "float", numberOfSegments: "int") -> "Raster":
    return _pyglass.SLIC(r, mask, voxelSize, compactness, numberOfSegments)

def RunPythonScript(path: "std::string const &", selectedPaths: "StringList") -> "std::string":
    return _pyglass.RunPythonScript(path, selectedPaths)

def GetPackageVersionString(moduleName: "std::string") -> "std::string":
    return _pyglass.GetPackageVersionString(moduleName)

def GetExpectedSyGlassPythonPackageVersion() -> "double":
    return _pyglass.GetExpectedSyGlassPythonPackageVersion()

def InitSkimage() -> "void":
    return _pyglass.InitSkimage()
class IFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyglass.delete_IFile
    FILE_READ = _pyglass.IFile_FILE_READ
    FILE_WRITE = _pyglass.IFile_FILE_WRITE
    FILE_APPEND = _pyglass.IFile_FILE_APPEND
    FILE_APPEND_PLUS = _pyglass.IFile_FILE_APPEND_PLUS
    FILE_READ_UPDATE = _pyglass.IFile_FILE_READ_UPDATE
    FILE_WRITE_UPDATE = _pyglass.IFile_FILE_WRITE_UPDATE
    FILE_APPEND_UPDATE = _pyglass.IFile_FILE_APPEND_UPDATE

    def GetPointerConst(self) -> "char const *":
        return _pyglass.IFile_GetPointerConst(self)

    def GetPointer(self) -> "char *":
        return _pyglass.IFile_GetPointer(self)

    def Open(self, filename: "path", mode: "SB::IFile::MODE") -> "bool":
        return _pyglass.IFile_Open(self, filename, mode)

    def Valid(self) -> "bool":
        return _pyglass.IFile_Valid(self)

    def Seek(self, position: "size_t") -> "void":
        return _pyglass.IFile_Seek(self, position)

    def Tell(self) -> "size_t":
        return _pyglass.IFile_Tell(self)

    def GetSize(self) -> "size_t":
        return _pyglass.IFile_GetSize(self)

    def Read(self, destanation: "char *", size: "size_t", readSize: "size_t *"=None) -> "bool":
        return _pyglass.IFile_Read(self, destanation, size, readSize)

    def Write(self, *args) -> "bool":
        return _pyglass.IFile_Write(self, *args)

    def Flush(self) -> "void":
        return _pyglass.IFile_Flush(self)

# Register IFile in _pyglass:
_pyglass.IFile_swigregister(IFile)

class FileHandle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyglass.FileHandle_swiginit(self, _pyglass.new_FileHandle(*args))

    def GetPath(self) -> "boost::filesystem::path const &":
        return _pyglass.FileHandle_GetPath(self)

    def GetPointerConst(self) -> "char const *":
        return _pyglass.FileHandle_GetPointerConst(self)

    def GetPointer(self) -> "char *":
        return _pyglass.FileHandle_GetPointer(self)

    def Open(self, filename: "path", mode: "SB::IFile::MODE") -> "bool":
        return _pyglass.FileHandle_Open(self, filename, mode)

    def Close(self) -> "void":
        return _pyglass.FileHandle_Close(self)

    def Valid(self) -> "bool":
        return _pyglass.FileHandle_Valid(self)

    def Seek(self, position: "size_t") -> "void":
        return _pyglass.FileHandle_Seek(self, position)

    def Tell(self) -> "size_t":
        return _pyglass.FileHandle_Tell(self)

    def GetSize(self) -> "size_t":
        return _pyglass.FileHandle_GetSize(self)

    def Read(self, destanation: "char *", size: "size_t", readSize: "size_t *"=None) -> "bool":
        return _pyglass.FileHandle_Read(self, destanation, size, readSize)

    def Write(self, *args) -> "bool":
        return _pyglass.FileHandle_Write(self, *args)

    def ReadCompressed(self, destanation: "char *", size: "size_t", readSize: "size_t *"=None) -> "bool":
        return _pyglass.FileHandle_ReadCompressed(self, destanation, size, readSize)

    def WriteCompressed(self, source: "char const *", size: "size_t") -> "bool":
        return _pyglass.FileHandle_WriteCompressed(self, source, size)

    def ReadByte(self, byte: "int8_t &") -> "bool":
        return _pyglass.FileHandle_ReadByte(self, byte)

    def ReadInt(self, integer: "int32_t &") -> "bool":
        return _pyglass.FileHandle_ReadInt(self, integer)

    def ReadUInt(self, integer: "uint32_t &") -> "bool":
        return _pyglass.FileHandle_ReadUInt(self, integer)

    def ReadInt64(self, integer: "int64_t &") -> "bool":
        return _pyglass.FileHandle_ReadInt64(self, integer)

    def ReadUInt64(self, integer: "uint64_t &") -> "bool":
        return _pyglass.FileHandle_ReadUInt64(self, integer)

    def ReadInt16(self, integer: "int16_t &") -> "bool":
        return _pyglass.FileHandle_ReadInt16(self, integer)

    def ReadUInt16(self, integer: "uint16_t &") -> "bool":
        return _pyglass.FileHandle_ReadUInt16(self, integer)

    def ReadFloat(self, floatValue: "float &") -> "bool":
        return _pyglass.FileHandle_ReadFloat(self, floatValue)

    def ReadDouble(self, doubleValue: "double &") -> "bool":
        return _pyglass.FileHandle_ReadDouble(self, doubleValue)

    def ReadBool(self, boolValue: "bool &") -> "bool":
        return _pyglass.FileHandle_ReadBool(self, boolValue)

    def ReadString(self, str: "std::string &") -> "bool":
        return _pyglass.FileHandle_ReadString(self, str)

    def WriteByte(self, byte: "int8_t") -> "bool":
        return _pyglass.FileHandle_WriteByte(self, byte)

    def WriteInt(self, integer: "int32_t") -> "bool":
        return _pyglass.FileHandle_WriteInt(self, integer)

    def WriteUInt(self, integer: "uint32_t") -> "bool":
        return _pyglass.FileHandle_WriteUInt(self, integer)

    def WriteInt64(self, integer: "int64_t") -> "bool":
        return _pyglass.FileHandle_WriteInt64(self, integer)

    def WriteUInt64(self, integer: "uint64_t") -> "bool":
        return _pyglass.FileHandle_WriteUInt64(self, integer)

    def WriteInt16(self, integer: "int16_t") -> "bool":
        return _pyglass.FileHandle_WriteInt16(self, integer)

    def WriteUInt16(self, integer: "uint16_t") -> "bool":
        return _pyglass.FileHandle_WriteUInt16(self, integer)

    def WriteFloat(self, floatValue: "float") -> "bool":
        return _pyglass.FileHandle_WriteFloat(self, floatValue)

    def WriteDouble(self, doubleValue: "double") -> "bool":
        return _pyglass.FileHandle_WriteDouble(self, doubleValue)

    def WriteBool(self, boolValue: "bool") -> "bool":
        return _pyglass.FileHandle_WriteBool(self, boolValue)

    def WriteString(self, str: "std::string const &") -> "bool":
        return _pyglass.FileHandle_WriteString(self, str)

    def Flush(self) -> "void":
        return _pyglass.FileHandle_Flush(self)
    __swig_destroy__ = _pyglass.delete_FileHandle

# Register FileHandle in _pyglass:
_pyglass.FileHandle_swigregister(FileHandle)

class Location(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Resources = _pyglass.Location_Resources
    RoamingAppData = _pyglass.Location_RoamingAppData
    LocalAppData = _pyglass.Location_LocalAppData
    UserPictures = _pyglass.Location_UserPictures
    UserVideos = _pyglass.Location_UserVideos
    ProgramData = _pyglass.Location_ProgramData
    ProgramFiles = _pyglass.Location_ProgramFiles
    Documents = _pyglass.Location_Documents
    Temp = _pyglass.Location_Temp
    WorkingDir = _pyglass.Location_WorkingDir
    UserMusic = _pyglass.Location_UserMusic
    User = _pyglass.Location_User
    InstallationDir = _pyglass.Location_InstallationDir

    def __init__(self):
        _pyglass.Location_swiginit(self, _pyglass.new_Location())
    __swig_destroy__ = _pyglass.delete_Location

# Register Location in _pyglass:
_pyglass.Location_swigregister(Location)

class FileSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def OpenFile(*args) -> "SB::FileHandle":
        return _pyglass.FileSystem_OpenFile(*args)

    @staticmethod
    def OpenFileAuto(*args) -> "SB::FileHandle":
        return _pyglass.FileSystem_OpenFileAuto(*args)

    @staticmethod
    def Copy(*args) -> "void":
        return _pyglass.FileSystem_Copy(*args)

    @staticmethod
    def IsDirectory(*args) -> "bool":
        return _pyglass.FileSystem_IsDirectory(*args)

    @staticmethod
    def IsFile(*args) -> "bool":
        return _pyglass.FileSystem_IsFile(*args)

    @staticmethod
    def IsNonEmptyFile(*args) -> "bool":
        return _pyglass.FileSystem_IsNonEmptyFile(*args)

    @staticmethod
    def IsLocal(*args) -> "bool":
        return _pyglass.FileSystem_IsLocal(*args)

    @staticmethod
    def GetAbsolutePath(path: "path", location: "SB::Location::Type") -> "boost::filesystem::path":
        return _pyglass.FileSystem_GetAbsolutePath(path, location)

    @staticmethod
    def GetNativePathString(path: "path") -> "std::string":
        return _pyglass.FileSystem_GetNativePathString(path)

    @staticmethod
    def GetNativeParentPathString(path: "path") -> "std::string":
        return _pyglass.FileSystem_GetNativeParentPathString(path)

    @staticmethod
    def Rename(source: "path", destination: "path", location: "SB::Location::Type") -> "int":
        return _pyglass.FileSystem_Rename(source, destination, location)

    @staticmethod
    def Delete(path: "path", location: "SB::Location::Type") -> "void":
        return _pyglass.FileSystem_Delete(path, location)

    @staticmethod
    def AddResourcesSearchPath(path: "path") -> "void":
        return _pyglass.FileSystem_AddResourcesSearchPath(path)

    @staticmethod
    def AddArchive(archive: "SB::ZipReaderPtr") -> "void":
        return _pyglass.FileSystem_AddArchive(archive)

    @staticmethod
    def GetFileList(filemask: "std::string const &", resultList: "StringList", sortByCreationTime: "bool"=False) -> "bool const":
        return _pyglass.FileSystem_GetFileList(filemask, resultList, sortByCreationTime)

    @staticmethod
    def MkDir(path: "path") -> "int":
        return _pyglass.FileSystem_MkDir(path)

    @staticmethod
    def GetTimes(path: "path", atime: "time_t &", mtime: "time_t &", ctime: "time_t &") -> "void":
        return _pyglass.FileSystem_GetTimes(path, atime, mtime, ctime)

    @staticmethod
    def DumpSystemPaths() -> "void":
        return _pyglass.FileSystem_DumpSystemPaths()

    @staticmethod
    def IsBeingWritten(path: "path") -> "bool":
        return _pyglass.FileSystem_IsBeingWritten(path)

    @staticmethod
    def GenDateTimeSecStr() -> "std::string":
        return _pyglass.FileSystem_GenDateTimeSecStr()

    @staticmethod
    def GenDateTimeSecStrGMT() -> "std::string":
        return _pyglass.FileSystem_GenDateTimeSecStrGMT()

    @staticmethod
    def GrantAllUsersFilePermission(path: "path") -> "void":
        return _pyglass.FileSystem_GrantAllUsersFilePermission(path)

    @staticmethod
    def GetPathFromBytes(bytes: "uint8_t *") -> "boost::filesystem::path":
        return _pyglass.FileSystem_GetPathFromBytes(bytes)

    def __init__(self):
        _pyglass.FileSystem_swiginit(self, _pyglass.new_FileSystem())
    __swig_destroy__ = _pyglass.delete_FileSystem

# Register FileSystem in _pyglass:
_pyglass.FileSystem_swigregister(FileSystem)

def FileSystem_OpenFile(*args) -> "SB::FileHandle":
    return _pyglass.FileSystem_OpenFile(*args)

def FileSystem_OpenFileAuto(*args) -> "SB::FileHandle":
    return _pyglass.FileSystem_OpenFileAuto(*args)

def FileSystem_Copy(*args) -> "void":
    return _pyglass.FileSystem_Copy(*args)

def FileSystem_IsDirectory(*args) -> "bool":
    return _pyglass.FileSystem_IsDirectory(*args)

def FileSystem_IsFile(*args) -> "bool":
    return _pyglass.FileSystem_IsFile(*args)

def FileSystem_IsNonEmptyFile(*args) -> "bool":
    return _pyglass.FileSystem_IsNonEmptyFile(*args)

def FileSystem_IsLocal(*args) -> "bool":
    return _pyglass.FileSystem_IsLocal(*args)

def FileSystem_GetAbsolutePath(path: "path", location: "SB::Location::Type") -> "boost::filesystem::path":
    return _pyglass.FileSystem_GetAbsolutePath(path, location)

def FileSystem_GetNativePathString(path: "path") -> "std::string":
    return _pyglass.FileSystem_GetNativePathString(path)

def FileSystem_GetNativeParentPathString(path: "path") -> "std::string":
    return _pyglass.FileSystem_GetNativeParentPathString(path)

def FileSystem_Rename(source: "path", destination: "path", location: "SB::Location::Type") -> "int":
    return _pyglass.FileSystem_Rename(source, destination, location)

def FileSystem_Delete(path: "path", location: "SB::Location::Type") -> "void":
    return _pyglass.FileSystem_Delete(path, location)

def FileSystem_AddResourcesSearchPath(path: "path") -> "void":
    return _pyglass.FileSystem_AddResourcesSearchPath(path)

def FileSystem_AddArchive(archive: "SB::ZipReaderPtr") -> "void":
    return _pyglass.FileSystem_AddArchive(archive)

def FileSystem_GetFileList(filemask: "std::string const &", resultList: "StringList", sortByCreationTime: "bool"=False) -> "bool const":
    return _pyglass.FileSystem_GetFileList(filemask, resultList, sortByCreationTime)

def FileSystem_MkDir(path: "path") -> "int":
    return _pyglass.FileSystem_MkDir(path)

def FileSystem_GetTimes(path: "path", atime: "time_t &", mtime: "time_t &", ctime: "time_t &") -> "void":
    return _pyglass.FileSystem_GetTimes(path, atime, mtime, ctime)

def FileSystem_DumpSystemPaths() -> "void":
    return _pyglass.FileSystem_DumpSystemPaths()

def FileSystem_IsBeingWritten(path: "path") -> "bool":
    return _pyglass.FileSystem_IsBeingWritten(path)

def FileSystem_GenDateTimeSecStr() -> "std::string":
    return _pyglass.FileSystem_GenDateTimeSecStr()

def FileSystem_GenDateTimeSecStrGMT() -> "std::string":
    return _pyglass.FileSystem_GenDateTimeSecStrGMT()

def FileSystem_GrantAllUsersFilePermission(path: "path") -> "void":
    return _pyglass.FileSystem_GrantAllUsersFilePermission(path)

def FileSystem_GetPathFromBytes(bytes: "uint8_t *") -> "boost::filesystem::path":
    return _pyglass.FileSystem_GetPathFromBytes(bytes)


def BoostInit() -> "void":
    return _pyglass.BoostInit()
SHARED_PTR_DISOWN = _pyglass.SHARED_PTR_DISOWN
class VolumeLibraryList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.VolumeLibraryList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.VolumeLibraryList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.VolumeLibraryList___bool__(self)

    def __len__(self) -> "std::vector< VolumeLibrary::LibraryEntry >::size_type":
        return _pyglass.VolumeLibraryList___len__(self)

    def __getslice__(self, i: "std::vector< VolumeLibrary::LibraryEntry >::difference_type", j: "std::vector< VolumeLibrary::LibraryEntry >::difference_type") -> "std::vector< VolumeLibrary::LibraryEntry,std::allocator< VolumeLibrary::LibraryEntry > > *":
        return _pyglass.VolumeLibraryList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.VolumeLibraryList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< VolumeLibrary::LibraryEntry >::difference_type", j: "std::vector< VolumeLibrary::LibraryEntry >::difference_type") -> "void":
        return _pyglass.VolumeLibraryList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.VolumeLibraryList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< VolumeLibrary::LibraryEntry >::value_type const &":
        return _pyglass.VolumeLibraryList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.VolumeLibraryList___setitem__(self, *args)

    def pop(self) -> "std::vector< VolumeLibrary::LibraryEntry >::value_type":
        return _pyglass.VolumeLibraryList_pop(self)

    def append(self, x: "LibraryEntry") -> "void":
        return _pyglass.VolumeLibraryList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.VolumeLibraryList_empty(self)

    def size(self) -> "std::vector< VolumeLibrary::LibraryEntry >::size_type":
        return _pyglass.VolumeLibraryList_size(self)

    def swap(self, v: "VolumeLibraryList") -> "void":
        return _pyglass.VolumeLibraryList_swap(self, v)

    def begin(self) -> "std::vector< VolumeLibrary::LibraryEntry >::iterator":
        return _pyglass.VolumeLibraryList_begin(self)

    def end(self) -> "std::vector< VolumeLibrary::LibraryEntry >::iterator":
        return _pyglass.VolumeLibraryList_end(self)

    def rbegin(self) -> "std::vector< VolumeLibrary::LibraryEntry >::reverse_iterator":
        return _pyglass.VolumeLibraryList_rbegin(self)

    def rend(self) -> "std::vector< VolumeLibrary::LibraryEntry >::reverse_iterator":
        return _pyglass.VolumeLibraryList_rend(self)

    def clear(self) -> "void":
        return _pyglass.VolumeLibraryList_clear(self)

    def get_allocator(self) -> "std::vector< VolumeLibrary::LibraryEntry >::allocator_type":
        return _pyglass.VolumeLibraryList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.VolumeLibraryList_pop_back(self)

    def erase(self, *args) -> "std::vector< VolumeLibrary::LibraryEntry >::iterator":
        return _pyglass.VolumeLibraryList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.VolumeLibraryList_swiginit(self, _pyglass.new_VolumeLibraryList(*args))

    def push_back(self, x: "LibraryEntry") -> "void":
        return _pyglass.VolumeLibraryList_push_back(self, x)

    def front(self) -> "std::vector< VolumeLibrary::LibraryEntry >::value_type const &":
        return _pyglass.VolumeLibraryList_front(self)

    def back(self) -> "std::vector< VolumeLibrary::LibraryEntry >::value_type const &":
        return _pyglass.VolumeLibraryList_back(self)

    def assign(self, n: "std::vector< VolumeLibrary::LibraryEntry >::size_type", x: "LibraryEntry") -> "void":
        return _pyglass.VolumeLibraryList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.VolumeLibraryList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.VolumeLibraryList_insert(self, *args)

    def reserve(self, n: "std::vector< VolumeLibrary::LibraryEntry >::size_type") -> "void":
        return _pyglass.VolumeLibraryList_reserve(self, n)

    def capacity(self) -> "std::vector< VolumeLibrary::LibraryEntry >::size_type":
        return _pyglass.VolumeLibraryList_capacity(self)
    __swig_destroy__ = _pyglass.delete_VolumeLibraryList

# Register VolumeLibraryList in _pyglass:
_pyglass.VolumeLibraryList_swigregister(VolumeLibraryList)

class Vec4List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.Vec4List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.Vec4List___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.Vec4List___bool__(self)

    def __len__(self) -> "std::vector< glm::tvec4< float,glm::highp > >::size_type":
        return _pyglass.Vec4List___len__(self)

    def __getslice__(self, i: "std::vector< glm::tvec4< float,glm::highp > >::difference_type", j: "std::vector< glm::tvec4< float,glm::highp > >::difference_type") -> "std::vector< glm::tvec4< float,glm::highp >,std::allocator< glm::tvec4< float,glm::highp > > > *":
        return _pyglass.Vec4List___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.Vec4List___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< glm::tvec4< float,glm::highp > >::difference_type", j: "std::vector< glm::tvec4< float,glm::highp > >::difference_type") -> "void":
        return _pyglass.Vec4List___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.Vec4List___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< glm::tvec4< float,glm::highp > >::value_type const &":
        return _pyglass.Vec4List___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.Vec4List___setitem__(self, *args)

    def pop(self) -> "std::vector< glm::tvec4< float,glm::highp > >::value_type":
        return _pyglass.Vec4List_pop(self)

    def append(self, x: "vec4") -> "void":
        return _pyglass.Vec4List_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.Vec4List_empty(self)

    def size(self) -> "std::vector< glm::tvec4< float,glm::highp > >::size_type":
        return _pyglass.Vec4List_size(self)

    def swap(self, v: "Vec4List") -> "void":
        return _pyglass.Vec4List_swap(self, v)

    def begin(self) -> "std::vector< glm::tvec4< float,glm::highp > >::iterator":
        return _pyglass.Vec4List_begin(self)

    def end(self) -> "std::vector< glm::tvec4< float,glm::highp > >::iterator":
        return _pyglass.Vec4List_end(self)

    def rbegin(self) -> "std::vector< glm::tvec4< float,glm::highp > >::reverse_iterator":
        return _pyglass.Vec4List_rbegin(self)

    def rend(self) -> "std::vector< glm::tvec4< float,glm::highp > >::reverse_iterator":
        return _pyglass.Vec4List_rend(self)

    def clear(self) -> "void":
        return _pyglass.Vec4List_clear(self)

    def get_allocator(self) -> "std::vector< glm::tvec4< float,glm::highp > >::allocator_type":
        return _pyglass.Vec4List_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.Vec4List_pop_back(self)

    def erase(self, *args) -> "std::vector< glm::tvec4< float,glm::highp > >::iterator":
        return _pyglass.Vec4List_erase(self, *args)

    def __init__(self, *args):
        _pyglass.Vec4List_swiginit(self, _pyglass.new_Vec4List(*args))

    def push_back(self, x: "vec4") -> "void":
        return _pyglass.Vec4List_push_back(self, x)

    def front(self) -> "std::vector< glm::tvec4< float,glm::highp > >::value_type const &":
        return _pyglass.Vec4List_front(self)

    def back(self) -> "std::vector< glm::tvec4< float,glm::highp > >::value_type const &":
        return _pyglass.Vec4List_back(self)

    def assign(self, n: "std::vector< glm::tvec4< float,glm::highp > >::size_type", x: "vec4") -> "void":
        return _pyglass.Vec4List_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.Vec4List_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.Vec4List_insert(self, *args)

    def reserve(self, n: "std::vector< glm::tvec4< float,glm::highp > >::size_type") -> "void":
        return _pyglass.Vec4List_reserve(self, n)

    def capacity(self) -> "std::vector< glm::tvec4< float,glm::highp > >::size_type":
        return _pyglass.Vec4List_capacity(self)
    __swig_destroy__ = _pyglass.delete_Vec4List

# Register Vec4List in _pyglass:
_pyglass.Vec4List_swigregister(Vec4List)

class ByteList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.ByteList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.ByteList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.ByteList___bool__(self)

    def __len__(self) -> "std::vector< unsigned char >::size_type":
        return _pyglass.ByteList___len__(self)

    def __getslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "std::vector< unsigned char,std::allocator< unsigned char > > *":
        return _pyglass.ByteList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.ByteList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "void":
        return _pyglass.ByteList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.ByteList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned char >::value_type const &":
        return _pyglass.ByteList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.ByteList___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned char >::value_type":
        return _pyglass.ByteList_pop(self)

    def append(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _pyglass.ByteList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.ByteList_empty(self)

    def size(self) -> "std::vector< unsigned char >::size_type":
        return _pyglass.ByteList_size(self)

    def swap(self, v: "ByteList") -> "void":
        return _pyglass.ByteList_swap(self, v)

    def begin(self) -> "std::vector< unsigned char >::iterator":
        return _pyglass.ByteList_begin(self)

    def end(self) -> "std::vector< unsigned char >::iterator":
        return _pyglass.ByteList_end(self)

    def rbegin(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _pyglass.ByteList_rbegin(self)

    def rend(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _pyglass.ByteList_rend(self)

    def clear(self) -> "void":
        return _pyglass.ByteList_clear(self)

    def get_allocator(self) -> "std::vector< unsigned char >::allocator_type":
        return _pyglass.ByteList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.ByteList_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned char >::iterator":
        return _pyglass.ByteList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.ByteList_swiginit(self, _pyglass.new_ByteList(*args))

    def push_back(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _pyglass.ByteList_push_back(self, x)

    def front(self) -> "std::vector< unsigned char >::value_type const &":
        return _pyglass.ByteList_front(self)

    def back(self) -> "std::vector< unsigned char >::value_type const &":
        return _pyglass.ByteList_back(self)

    def assign(self, n: "std::vector< unsigned char >::size_type", x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _pyglass.ByteList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.ByteList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.ByteList_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned char >::size_type") -> "void":
        return _pyglass.ByteList_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned char >::size_type":
        return _pyglass.ByteList_capacity(self)
    __swig_destroy__ = _pyglass.delete_ByteList

# Register ByteList in _pyglass:
_pyglass.ByteList_swigregister(ByteList)

class StringList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.StringList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.StringList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.StringList___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _pyglass.StringList___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _pyglass.StringList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.StringList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _pyglass.StringList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.StringList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _pyglass.StringList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.StringList___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _pyglass.StringList_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _pyglass.StringList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.StringList_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _pyglass.StringList_size(self)

    def swap(self, v: "StringList") -> "void":
        return _pyglass.StringList_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _pyglass.StringList_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _pyglass.StringList_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _pyglass.StringList_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _pyglass.StringList_rend(self)

    def clear(self) -> "void":
        return _pyglass.StringList_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _pyglass.StringList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.StringList_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _pyglass.StringList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.StringList_swiginit(self, _pyglass.new_StringList(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _pyglass.StringList_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _pyglass.StringList_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _pyglass.StringList_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _pyglass.StringList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.StringList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.StringList_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _pyglass.StringList_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _pyglass.StringList_capacity(self)
    __swig_destroy__ = _pyglass.delete_StringList

# Register StringList in _pyglass:
_pyglass.StringList_swigregister(StringList)

class PathList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.PathList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.PathList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.PathList___bool__(self)

    def __len__(self) -> "std::vector< boost::filesystem::path >::size_type":
        return _pyglass.PathList___len__(self)

    def __getslice__(self, i: "std::vector< boost::filesystem::path >::difference_type", j: "std::vector< boost::filesystem::path >::difference_type") -> "std::vector< boost::filesystem::path,std::allocator< boost::filesystem::path > > *":
        return _pyglass.PathList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.PathList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< boost::filesystem::path >::difference_type", j: "std::vector< boost::filesystem::path >::difference_type") -> "void":
        return _pyglass.PathList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.PathList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< boost::filesystem::path >::value_type const &":
        return _pyglass.PathList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.PathList___setitem__(self, *args)

    def pop(self) -> "std::vector< boost::filesystem::path >::value_type":
        return _pyglass.PathList_pop(self)

    def append(self, x: "path") -> "void":
        return _pyglass.PathList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.PathList_empty(self)

    def size(self) -> "std::vector< boost::filesystem::path >::size_type":
        return _pyglass.PathList_size(self)

    def swap(self, v: "PathList") -> "void":
        return _pyglass.PathList_swap(self, v)

    def begin(self) -> "std::vector< boost::filesystem::path >::iterator":
        return _pyglass.PathList_begin(self)

    def end(self) -> "std::vector< boost::filesystem::path >::iterator":
        return _pyglass.PathList_end(self)

    def rbegin(self) -> "std::vector< boost::filesystem::path >::reverse_iterator":
        return _pyglass.PathList_rbegin(self)

    def rend(self) -> "std::vector< boost::filesystem::path >::reverse_iterator":
        return _pyglass.PathList_rend(self)

    def clear(self) -> "void":
        return _pyglass.PathList_clear(self)

    def get_allocator(self) -> "std::vector< boost::filesystem::path >::allocator_type":
        return _pyglass.PathList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.PathList_pop_back(self)

    def erase(self, *args) -> "std::vector< boost::filesystem::path >::iterator":
        return _pyglass.PathList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.PathList_swiginit(self, _pyglass.new_PathList(*args))

    def push_back(self, x: "path") -> "void":
        return _pyglass.PathList_push_back(self, x)

    def front(self) -> "std::vector< boost::filesystem::path >::value_type const &":
        return _pyglass.PathList_front(self)

    def back(self) -> "std::vector< boost::filesystem::path >::value_type const &":
        return _pyglass.PathList_back(self)

    def assign(self, n: "std::vector< boost::filesystem::path >::size_type", x: "path") -> "void":
        return _pyglass.PathList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.PathList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.PathList_insert(self, *args)

    def reserve(self, n: "std::vector< boost::filesystem::path >::size_type") -> "void":
        return _pyglass.PathList_reserve(self, n)

    def capacity(self) -> "std::vector< boost::filesystem::path >::size_type":
        return _pyglass.PathList_capacity(self)
    __swig_destroy__ = _pyglass.delete_PathList

# Register PathList in _pyglass:
_pyglass.PathList_swigregister(PathList)

class IntList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.IntList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.IntList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.IntList___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _pyglass.IntList___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _pyglass.IntList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.IntList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _pyglass.IntList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.IntList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _pyglass.IntList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.IntList___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _pyglass.IntList_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _pyglass.IntList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.IntList_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _pyglass.IntList_size(self)

    def swap(self, v: "IntList") -> "void":
        return _pyglass.IntList_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _pyglass.IntList_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _pyglass.IntList_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _pyglass.IntList_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _pyglass.IntList_rend(self)

    def clear(self) -> "void":
        return _pyglass.IntList_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _pyglass.IntList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.IntList_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _pyglass.IntList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.IntList_swiginit(self, _pyglass.new_IntList(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _pyglass.IntList_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _pyglass.IntList_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _pyglass.IntList_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _pyglass.IntList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.IntList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.IntList_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _pyglass.IntList_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _pyglass.IntList_capacity(self)
    __swig_destroy__ = _pyglass.delete_IntList

# Register IntList in _pyglass:
_pyglass.IntList_swigregister(IntList)

class IntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyglass.IntPair_swiginit(self, _pyglass.new_IntPair(*args))
    first = property(_pyglass.IntPair_first_get, _pyglass.IntPair_first_set)
    second = property(_pyglass.IntPair_second_get, _pyglass.IntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pyglass.delete_IntPair

# Register IntPair in _pyglass:
_pyglass.IntPair_swigregister(IntPair)

class StringIntMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.StringIntMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.StringIntMap___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.StringIntMap___bool__(self)

    def __len__(self) -> "std::map< std::string,int >::size_type":
        return _pyglass.StringIntMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::map< std::string,int >::key_type const &") -> "std::map< std::string,int >::mapped_type const &":
        return _pyglass.StringIntMap___getitem__(self, key)

    def __delitem__(self, key: "std::map< std::string,int >::key_type const &") -> "void":
        return _pyglass.StringIntMap___delitem__(self, key)

    def has_key(self, key: "std::map< std::string,int >::key_type const &") -> "bool":
        return _pyglass.StringIntMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _pyglass.StringIntMap_keys(self)

    def values(self) -> "PyObject *":
        return _pyglass.StringIntMap_values(self)

    def items(self) -> "PyObject *":
        return _pyglass.StringIntMap_items(self)

    def __contains__(self, key: "std::map< std::string,int >::key_type const &") -> "bool":
        return _pyglass.StringIntMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.StringIntMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.StringIntMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _pyglass.StringIntMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _pyglass.StringIntMap_asdict(self)

    def __init__(self, *args):
        _pyglass.StringIntMap_swiginit(self, _pyglass.new_StringIntMap(*args))

    def empty(self) -> "bool":
        return _pyglass.StringIntMap_empty(self)

    def size(self) -> "std::map< std::string,int >::size_type":
        return _pyglass.StringIntMap_size(self)

    def swap(self, v: "StringIntMap") -> "void":
        return _pyglass.StringIntMap_swap(self, v)

    def begin(self) -> "std::map< std::string,int >::iterator":
        return _pyglass.StringIntMap_begin(self)

    def end(self) -> "std::map< std::string,int >::iterator":
        return _pyglass.StringIntMap_end(self)

    def rbegin(self) -> "std::map< std::string,int >::reverse_iterator":
        return _pyglass.StringIntMap_rbegin(self)

    def rend(self) -> "std::map< std::string,int >::reverse_iterator":
        return _pyglass.StringIntMap_rend(self)

    def clear(self) -> "void":
        return _pyglass.StringIntMap_clear(self)

    def get_allocator(self) -> "std::map< std::string,int >::allocator_type":
        return _pyglass.StringIntMap_get_allocator(self)

    def count(self, x: "std::map< std::string,int >::key_type const &") -> "std::map< std::string,int >::size_type":
        return _pyglass.StringIntMap_count(self, x)

    def erase(self, *args) -> "void":
        return _pyglass.StringIntMap_erase(self, *args)

    def find(self, x: "std::map< std::string,int >::key_type const &") -> "std::map< std::string,int >::iterator":
        return _pyglass.StringIntMap_find(self, x)

    def lower_bound(self, x: "std::map< std::string,int >::key_type const &") -> "std::map< std::string,int >::iterator":
        return _pyglass.StringIntMap_lower_bound(self, x)

    def upper_bound(self, x: "std::map< std::string,int >::key_type const &") -> "std::map< std::string,int >::iterator":
        return _pyglass.StringIntMap_upper_bound(self, x)
    __swig_destroy__ = _pyglass.delete_StringIntMap

# Register StringIntMap in _pyglass:
_pyglass.StringIntMap_swigregister(StringIntMap)

class StringIntPairMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.StringIntPairMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.StringIntPairMap___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.StringIntPairMap___bool__(self)

    def __len__(self) -> "std::map< std::string,std::pair< int,int > >::size_type":
        return _pyglass.StringIntPairMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::map< std::string,std::pair< int,int > >::key_type const &") -> "std::map< std::string,std::pair< int,int > >::mapped_type const &":
        return _pyglass.StringIntPairMap___getitem__(self, key)

    def __delitem__(self, key: "std::map< std::string,std::pair< int,int > >::key_type const &") -> "void":
        return _pyglass.StringIntPairMap___delitem__(self, key)

    def has_key(self, key: "std::map< std::string,std::pair< int,int > >::key_type const &") -> "bool":
        return _pyglass.StringIntPairMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _pyglass.StringIntPairMap_keys(self)

    def values(self) -> "PyObject *":
        return _pyglass.StringIntPairMap_values(self)

    def items(self) -> "PyObject *":
        return _pyglass.StringIntPairMap_items(self)

    def __contains__(self, key: "std::map< std::string,std::pair< int,int > >::key_type const &") -> "bool":
        return _pyglass.StringIntPairMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.StringIntPairMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.StringIntPairMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _pyglass.StringIntPairMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _pyglass.StringIntPairMap_asdict(self)

    def __init__(self, *args):
        _pyglass.StringIntPairMap_swiginit(self, _pyglass.new_StringIntPairMap(*args))

    def empty(self) -> "bool":
        return _pyglass.StringIntPairMap_empty(self)

    def size(self) -> "std::map< std::string,std::pair< int,int > >::size_type":
        return _pyglass.StringIntPairMap_size(self)

    def swap(self, v: "StringIntPairMap") -> "void":
        return _pyglass.StringIntPairMap_swap(self, v)

    def begin(self) -> "std::map< std::string,std::pair< int,int > >::iterator":
        return _pyglass.StringIntPairMap_begin(self)

    def end(self) -> "std::map< std::string,std::pair< int,int > >::iterator":
        return _pyglass.StringIntPairMap_end(self)

    def rbegin(self) -> "std::map< std::string,std::pair< int,int > >::reverse_iterator":
        return _pyglass.StringIntPairMap_rbegin(self)

    def rend(self) -> "std::map< std::string,std::pair< int,int > >::reverse_iterator":
        return _pyglass.StringIntPairMap_rend(self)

    def clear(self) -> "void":
        return _pyglass.StringIntPairMap_clear(self)

    def get_allocator(self) -> "std::map< std::string,std::pair< int,int > >::allocator_type":
        return _pyglass.StringIntPairMap_get_allocator(self)

    def count(self, x: "std::map< std::string,std::pair< int,int > >::key_type const &") -> "std::map< std::string,std::pair< int,int > >::size_type":
        return _pyglass.StringIntPairMap_count(self, x)

    def erase(self, *args) -> "void":
        return _pyglass.StringIntPairMap_erase(self, *args)

    def find(self, x: "std::map< std::string,std::pair< int,int > >::key_type const &") -> "std::map< std::string,std::pair< int,int > >::iterator":
        return _pyglass.StringIntPairMap_find(self, x)

    def lower_bound(self, x: "std::map< std::string,std::pair< int,int > >::key_type const &") -> "std::map< std::string,std::pair< int,int > >::iterator":
        return _pyglass.StringIntPairMap_lower_bound(self, x)

    def upper_bound(self, x: "std::map< std::string,std::pair< int,int > >::key_type const &") -> "std::map< std::string,std::pair< int,int > >::iterator":
        return _pyglass.StringIntPairMap_upper_bound(self, x)
    __swig_destroy__ = _pyglass.delete_StringIntPairMap

# Register StringIntPairMap in _pyglass:
_pyglass.StringIntPairMap_swigregister(StringIntPairMap)

class IReaderPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyglass.IReaderPtr_swiginit(self, _pyglass.new_IReaderPtr())
    __swig_destroy__ = _pyglass.delete_IReaderPtr

# Register IReaderPtr in _pyglass:
_pyglass.IReaderPtr_swigregister(IReaderPtr)

class IVec2List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.IVec2List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.IVec2List___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.IVec2List___bool__(self)

    def __len__(self) -> "std::vector< glm::tvec2< int,glm::highp > >::size_type":
        return _pyglass.IVec2List___len__(self)

    def __getslice__(self, i: "std::vector< glm::tvec2< int,glm::highp > >::difference_type", j: "std::vector< glm::tvec2< int,glm::highp > >::difference_type") -> "std::vector< glm::tvec2< int,glm::highp >,std::allocator< glm::tvec2< int,glm::highp > > > *":
        return _pyglass.IVec2List___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.IVec2List___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< glm::tvec2< int,glm::highp > >::difference_type", j: "std::vector< glm::tvec2< int,glm::highp > >::difference_type") -> "void":
        return _pyglass.IVec2List___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.IVec2List___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< glm::tvec2< int,glm::highp > >::value_type const &":
        return _pyglass.IVec2List___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.IVec2List___setitem__(self, *args)

    def pop(self) -> "std::vector< glm::tvec2< int,glm::highp > >::value_type":
        return _pyglass.IVec2List_pop(self)

    def append(self, x: "ivec2") -> "void":
        return _pyglass.IVec2List_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.IVec2List_empty(self)

    def size(self) -> "std::vector< glm::tvec2< int,glm::highp > >::size_type":
        return _pyglass.IVec2List_size(self)

    def swap(self, v: "IVec2List") -> "void":
        return _pyglass.IVec2List_swap(self, v)

    def begin(self) -> "std::vector< glm::tvec2< int,glm::highp > >::iterator":
        return _pyglass.IVec2List_begin(self)

    def end(self) -> "std::vector< glm::tvec2< int,glm::highp > >::iterator":
        return _pyglass.IVec2List_end(self)

    def rbegin(self) -> "std::vector< glm::tvec2< int,glm::highp > >::reverse_iterator":
        return _pyglass.IVec2List_rbegin(self)

    def rend(self) -> "std::vector< glm::tvec2< int,glm::highp > >::reverse_iterator":
        return _pyglass.IVec2List_rend(self)

    def clear(self) -> "void":
        return _pyglass.IVec2List_clear(self)

    def get_allocator(self) -> "std::vector< glm::tvec2< int,glm::highp > >::allocator_type":
        return _pyglass.IVec2List_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.IVec2List_pop_back(self)

    def erase(self, *args) -> "std::vector< glm::tvec2< int,glm::highp > >::iterator":
        return _pyglass.IVec2List_erase(self, *args)

    def __init__(self, *args):
        _pyglass.IVec2List_swiginit(self, _pyglass.new_IVec2List(*args))

    def push_back(self, x: "ivec2") -> "void":
        return _pyglass.IVec2List_push_back(self, x)

    def front(self) -> "std::vector< glm::tvec2< int,glm::highp > >::value_type const &":
        return _pyglass.IVec2List_front(self)

    def back(self) -> "std::vector< glm::tvec2< int,glm::highp > >::value_type const &":
        return _pyglass.IVec2List_back(self)

    def assign(self, n: "std::vector< glm::tvec2< int,glm::highp > >::size_type", x: "ivec2") -> "void":
        return _pyglass.IVec2List_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.IVec2List_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.IVec2List_insert(self, *args)

    def reserve(self, n: "std::vector< glm::tvec2< int,glm::highp > >::size_type") -> "void":
        return _pyglass.IVec2List_reserve(self, n)

    def capacity(self) -> "std::vector< glm::tvec2< int,glm::highp > >::size_type":
        return _pyglass.IVec2List_capacity(self)
    __swig_destroy__ = _pyglass.delete_IVec2List

# Register IVec2List in _pyglass:
_pyglass.IVec2List_swigregister(IVec2List)

class LearningModuleList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.LearningModuleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.LearningModuleList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.LearningModuleList___bool__(self)

    def __len__(self) -> "std::vector< LearningModule >::size_type":
        return _pyglass.LearningModuleList___len__(self)

    def __getslice__(self, i: "std::vector< LearningModule >::difference_type", j: "std::vector< LearningModule >::difference_type") -> "std::vector< LearningModule,std::allocator< LearningModule > > *":
        return _pyglass.LearningModuleList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.LearningModuleList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< LearningModule >::difference_type", j: "std::vector< LearningModule >::difference_type") -> "void":
        return _pyglass.LearningModuleList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.LearningModuleList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< LearningModule >::value_type const &":
        return _pyglass.LearningModuleList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.LearningModuleList___setitem__(self, *args)

    def pop(self) -> "std::vector< LearningModule >::value_type":
        return _pyglass.LearningModuleList_pop(self)

    def append(self, x: "LearningModule") -> "void":
        return _pyglass.LearningModuleList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.LearningModuleList_empty(self)

    def size(self) -> "std::vector< LearningModule >::size_type":
        return _pyglass.LearningModuleList_size(self)

    def swap(self, v: "LearningModuleList") -> "void":
        return _pyglass.LearningModuleList_swap(self, v)

    def begin(self) -> "std::vector< LearningModule >::iterator":
        return _pyglass.LearningModuleList_begin(self)

    def end(self) -> "std::vector< LearningModule >::iterator":
        return _pyglass.LearningModuleList_end(self)

    def rbegin(self) -> "std::vector< LearningModule >::reverse_iterator":
        return _pyglass.LearningModuleList_rbegin(self)

    def rend(self) -> "std::vector< LearningModule >::reverse_iterator":
        return _pyglass.LearningModuleList_rend(self)

    def clear(self) -> "void":
        return _pyglass.LearningModuleList_clear(self)

    def get_allocator(self) -> "std::vector< LearningModule >::allocator_type":
        return _pyglass.LearningModuleList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.LearningModuleList_pop_back(self)

    def erase(self, *args) -> "std::vector< LearningModule >::iterator":
        return _pyglass.LearningModuleList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.LearningModuleList_swiginit(self, _pyglass.new_LearningModuleList(*args))

    def push_back(self, x: "LearningModule") -> "void":
        return _pyglass.LearningModuleList_push_back(self, x)

    def front(self) -> "std::vector< LearningModule >::value_type const &":
        return _pyglass.LearningModuleList_front(self)

    def back(self) -> "std::vector< LearningModule >::value_type const &":
        return _pyglass.LearningModuleList_back(self)

    def assign(self, n: "std::vector< LearningModule >::size_type", x: "LearningModule") -> "void":
        return _pyglass.LearningModuleList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.LearningModuleList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.LearningModuleList_insert(self, *args)

    def reserve(self, n: "std::vector< LearningModule >::size_type") -> "void":
        return _pyglass.LearningModuleList_reserve(self, n)

    def capacity(self) -> "std::vector< LearningModule >::size_type":
        return _pyglass.LearningModuleList_capacity(self)
    __swig_destroy__ = _pyglass.delete_LearningModuleList

# Register LearningModuleList in _pyglass:
_pyglass.LearningModuleList_swigregister(LearningModuleList)

class NarrationProjectList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.NarrationProjectList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.NarrationProjectList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.NarrationProjectList___bool__(self)

    def __len__(self) -> "std::vector< PresentationFile::NarrationProject >::size_type":
        return _pyglass.NarrationProjectList___len__(self)

    def __getslice__(self, i: "std::vector< PresentationFile::NarrationProject >::difference_type", j: "std::vector< PresentationFile::NarrationProject >::difference_type") -> "std::vector< PresentationFile::NarrationProject,std::allocator< PresentationFile::NarrationProject > > *":
        return _pyglass.NarrationProjectList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.NarrationProjectList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< PresentationFile::NarrationProject >::difference_type", j: "std::vector< PresentationFile::NarrationProject >::difference_type") -> "void":
        return _pyglass.NarrationProjectList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.NarrationProjectList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< PresentationFile::NarrationProject >::value_type const &":
        return _pyglass.NarrationProjectList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.NarrationProjectList___setitem__(self, *args)

    def pop(self) -> "std::vector< PresentationFile::NarrationProject >::value_type":
        return _pyglass.NarrationProjectList_pop(self)

    def append(self, x: "NarrationProject") -> "void":
        return _pyglass.NarrationProjectList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.NarrationProjectList_empty(self)

    def size(self) -> "std::vector< PresentationFile::NarrationProject >::size_type":
        return _pyglass.NarrationProjectList_size(self)

    def swap(self, v: "NarrationProjectList") -> "void":
        return _pyglass.NarrationProjectList_swap(self, v)

    def begin(self) -> "std::vector< PresentationFile::NarrationProject >::iterator":
        return _pyglass.NarrationProjectList_begin(self)

    def end(self) -> "std::vector< PresentationFile::NarrationProject >::iterator":
        return _pyglass.NarrationProjectList_end(self)

    def rbegin(self) -> "std::vector< PresentationFile::NarrationProject >::reverse_iterator":
        return _pyglass.NarrationProjectList_rbegin(self)

    def rend(self) -> "std::vector< PresentationFile::NarrationProject >::reverse_iterator":
        return _pyglass.NarrationProjectList_rend(self)

    def clear(self) -> "void":
        return _pyglass.NarrationProjectList_clear(self)

    def get_allocator(self) -> "std::vector< PresentationFile::NarrationProject >::allocator_type":
        return _pyglass.NarrationProjectList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.NarrationProjectList_pop_back(self)

    def erase(self, *args) -> "std::vector< PresentationFile::NarrationProject >::iterator":
        return _pyglass.NarrationProjectList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.NarrationProjectList_swiginit(self, _pyglass.new_NarrationProjectList(*args))

    def push_back(self, x: "NarrationProject") -> "void":
        return _pyglass.NarrationProjectList_push_back(self, x)

    def front(self) -> "std::vector< PresentationFile::NarrationProject >::value_type const &":
        return _pyglass.NarrationProjectList_front(self)

    def back(self) -> "std::vector< PresentationFile::NarrationProject >::value_type const &":
        return _pyglass.NarrationProjectList_back(self)

    def assign(self, n: "std::vector< PresentationFile::NarrationProject >::size_type", x: "NarrationProject") -> "void":
        return _pyglass.NarrationProjectList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.NarrationProjectList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.NarrationProjectList_insert(self, *args)

    def reserve(self, n: "std::vector< PresentationFile::NarrationProject >::size_type") -> "void":
        return _pyglass.NarrationProjectList_reserve(self, n)

    def capacity(self) -> "std::vector< PresentationFile::NarrationProject >::size_type":
        return _pyglass.NarrationProjectList_capacity(self)
    __swig_destroy__ = _pyglass.delete_NarrationProjectList

# Register NarrationProjectList in _pyglass:
_pyglass.NarrationProjectList_swigregister(NarrationProjectList)

class SupplementaryFileList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.SupplementaryFileList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.SupplementaryFileList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.SupplementaryFileList___bool__(self)

    def __len__(self) -> "std::vector< PresentationFile::SupplementaryFile >::size_type":
        return _pyglass.SupplementaryFileList___len__(self)

    def __getslice__(self, i: "std::vector< PresentationFile::SupplementaryFile >::difference_type", j: "std::vector< PresentationFile::SupplementaryFile >::difference_type") -> "std::vector< PresentationFile::SupplementaryFile,std::allocator< PresentationFile::SupplementaryFile > > *":
        return _pyglass.SupplementaryFileList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.SupplementaryFileList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< PresentationFile::SupplementaryFile >::difference_type", j: "std::vector< PresentationFile::SupplementaryFile >::difference_type") -> "void":
        return _pyglass.SupplementaryFileList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.SupplementaryFileList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< PresentationFile::SupplementaryFile >::value_type const &":
        return _pyglass.SupplementaryFileList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.SupplementaryFileList___setitem__(self, *args)

    def pop(self) -> "std::vector< PresentationFile::SupplementaryFile >::value_type":
        return _pyglass.SupplementaryFileList_pop(self)

    def append(self, x: "SupplementaryFile") -> "void":
        return _pyglass.SupplementaryFileList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.SupplementaryFileList_empty(self)

    def size(self) -> "std::vector< PresentationFile::SupplementaryFile >::size_type":
        return _pyglass.SupplementaryFileList_size(self)

    def swap(self, v: "SupplementaryFileList") -> "void":
        return _pyglass.SupplementaryFileList_swap(self, v)

    def begin(self) -> "std::vector< PresentationFile::SupplementaryFile >::iterator":
        return _pyglass.SupplementaryFileList_begin(self)

    def end(self) -> "std::vector< PresentationFile::SupplementaryFile >::iterator":
        return _pyglass.SupplementaryFileList_end(self)

    def rbegin(self) -> "std::vector< PresentationFile::SupplementaryFile >::reverse_iterator":
        return _pyglass.SupplementaryFileList_rbegin(self)

    def rend(self) -> "std::vector< PresentationFile::SupplementaryFile >::reverse_iterator":
        return _pyglass.SupplementaryFileList_rend(self)

    def clear(self) -> "void":
        return _pyglass.SupplementaryFileList_clear(self)

    def get_allocator(self) -> "std::vector< PresentationFile::SupplementaryFile >::allocator_type":
        return _pyglass.SupplementaryFileList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.SupplementaryFileList_pop_back(self)

    def erase(self, *args) -> "std::vector< PresentationFile::SupplementaryFile >::iterator":
        return _pyglass.SupplementaryFileList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.SupplementaryFileList_swiginit(self, _pyglass.new_SupplementaryFileList(*args))

    def push_back(self, x: "SupplementaryFile") -> "void":
        return _pyglass.SupplementaryFileList_push_back(self, x)

    def front(self) -> "std::vector< PresentationFile::SupplementaryFile >::value_type const &":
        return _pyglass.SupplementaryFileList_front(self)

    def back(self) -> "std::vector< PresentationFile::SupplementaryFile >::value_type const &":
        return _pyglass.SupplementaryFileList_back(self)

    def assign(self, n: "std::vector< PresentationFile::SupplementaryFile >::size_type", x: "SupplementaryFile") -> "void":
        return _pyglass.SupplementaryFileList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.SupplementaryFileList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.SupplementaryFileList_insert(self, *args)

    def reserve(self, n: "std::vector< PresentationFile::SupplementaryFile >::size_type") -> "void":
        return _pyglass.SupplementaryFileList_reserve(self, n)

    def capacity(self) -> "std::vector< PresentationFile::SupplementaryFile >::size_type":
        return _pyglass.SupplementaryFileList_capacity(self)
    __swig_destroy__ = _pyglass.delete_SupplementaryFileList

# Register SupplementaryFileList in _pyglass:
_pyglass.SupplementaryFileList_swigregister(SupplementaryFileList)

class PresentationItemTypeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.PresentationItemTypeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.PresentationItemTypeList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.PresentationItemTypeList___bool__(self)

    def __len__(self) -> "std::vector< enum PresentationFile::PresentationItemType >::size_type":
        return _pyglass.PresentationItemTypeList___len__(self)

    def __getslice__(self, i: "std::vector< enum PresentationFile::PresentationItemType >::difference_type", j: "std::vector< enum PresentationFile::PresentationItemType >::difference_type") -> "std::vector< PresentationFile::PresentationItemType,std::allocator< PresentationFile::PresentationItemType > > *":
        return _pyglass.PresentationItemTypeList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.PresentationItemTypeList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< enum PresentationFile::PresentationItemType >::difference_type", j: "std::vector< enum PresentationFile::PresentationItemType >::difference_type") -> "void":
        return _pyglass.PresentationItemTypeList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.PresentationItemTypeList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< enum PresentationFile::PresentationItemType >::value_type const &":
        return _pyglass.PresentationItemTypeList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.PresentationItemTypeList___setitem__(self, *args)

    def pop(self) -> "std::vector< enum PresentationFile::PresentationItemType >::value_type":
        return _pyglass.PresentationItemTypeList_pop(self)

    def append(self, x: "std::vector< enum PresentationFile::PresentationItemType >::value_type const &") -> "void":
        return _pyglass.PresentationItemTypeList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.PresentationItemTypeList_empty(self)

    def size(self) -> "std::vector< enum PresentationFile::PresentationItemType >::size_type":
        return _pyglass.PresentationItemTypeList_size(self)

    def swap(self, v: "PresentationItemTypeList") -> "void":
        return _pyglass.PresentationItemTypeList_swap(self, v)

    def begin(self) -> "std::vector< enum PresentationFile::PresentationItemType >::iterator":
        return _pyglass.PresentationItemTypeList_begin(self)

    def end(self) -> "std::vector< enum PresentationFile::PresentationItemType >::iterator":
        return _pyglass.PresentationItemTypeList_end(self)

    def rbegin(self) -> "std::vector< enum PresentationFile::PresentationItemType >::reverse_iterator":
        return _pyglass.PresentationItemTypeList_rbegin(self)

    def rend(self) -> "std::vector< enum PresentationFile::PresentationItemType >::reverse_iterator":
        return _pyglass.PresentationItemTypeList_rend(self)

    def clear(self) -> "void":
        return _pyglass.PresentationItemTypeList_clear(self)

    def get_allocator(self) -> "std::vector< enum PresentationFile::PresentationItemType >::allocator_type":
        return _pyglass.PresentationItemTypeList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.PresentationItemTypeList_pop_back(self)

    def erase(self, *args) -> "std::vector< enum PresentationFile::PresentationItemType >::iterator":
        return _pyglass.PresentationItemTypeList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.PresentationItemTypeList_swiginit(self, _pyglass.new_PresentationItemTypeList(*args))

    def push_back(self, x: "std::vector< enum PresentationFile::PresentationItemType >::value_type const &") -> "void":
        return _pyglass.PresentationItemTypeList_push_back(self, x)

    def front(self) -> "std::vector< enum PresentationFile::PresentationItemType >::value_type const &":
        return _pyglass.PresentationItemTypeList_front(self)

    def back(self) -> "std::vector< enum PresentationFile::PresentationItemType >::value_type const &":
        return _pyglass.PresentationItemTypeList_back(self)

    def assign(self, n: "std::vector< enum PresentationFile::PresentationItemType >::size_type", x: "std::vector< enum PresentationFile::PresentationItemType >::value_type const &") -> "void":
        return _pyglass.PresentationItemTypeList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.PresentationItemTypeList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.PresentationItemTypeList_insert(self, *args)

    def reserve(self, n: "std::vector< enum PresentationFile::PresentationItemType >::size_type") -> "void":
        return _pyglass.PresentationItemTypeList_reserve(self, n)

    def capacity(self) -> "std::vector< enum PresentationFile::PresentationItemType >::size_type":
        return _pyglass.PresentationItemTypeList_capacity(self)
    __swig_destroy__ = _pyglass.delete_PresentationItemTypeList

# Register PresentationItemTypeList in _pyglass:
_pyglass.PresentationItemTypeList_swigregister(PresentationItemTypeList)

class NarrationList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.NarrationList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.NarrationList___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.NarrationList___bool__(self)

    def __len__(self) -> "std::vector< PresentationFile::Narration >::size_type":
        return _pyglass.NarrationList___len__(self)

    def __getslice__(self, i: "std::vector< PresentationFile::Narration >::difference_type", j: "std::vector< PresentationFile::Narration >::difference_type") -> "std::vector< PresentationFile::Narration,std::allocator< PresentationFile::Narration > > *":
        return _pyglass.NarrationList___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _pyglass.NarrationList___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< PresentationFile::Narration >::difference_type", j: "std::vector< PresentationFile::Narration >::difference_type") -> "void":
        return _pyglass.NarrationList___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _pyglass.NarrationList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< PresentationFile::Narration >::value_type const &":
        return _pyglass.NarrationList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _pyglass.NarrationList___setitem__(self, *args)

    def pop(self) -> "std::vector< PresentationFile::Narration >::value_type":
        return _pyglass.NarrationList_pop(self)

    def append(self, x: "Narration") -> "void":
        return _pyglass.NarrationList_append(self, x)

    def empty(self) -> "bool":
        return _pyglass.NarrationList_empty(self)

    def size(self) -> "std::vector< PresentationFile::Narration >::size_type":
        return _pyglass.NarrationList_size(self)

    def swap(self, v: "NarrationList") -> "void":
        return _pyglass.NarrationList_swap(self, v)

    def begin(self) -> "std::vector< PresentationFile::Narration >::iterator":
        return _pyglass.NarrationList_begin(self)

    def end(self) -> "std::vector< PresentationFile::Narration >::iterator":
        return _pyglass.NarrationList_end(self)

    def rbegin(self) -> "std::vector< PresentationFile::Narration >::reverse_iterator":
        return _pyglass.NarrationList_rbegin(self)

    def rend(self) -> "std::vector< PresentationFile::Narration >::reverse_iterator":
        return _pyglass.NarrationList_rend(self)

    def clear(self) -> "void":
        return _pyglass.NarrationList_clear(self)

    def get_allocator(self) -> "std::vector< PresentationFile::Narration >::allocator_type":
        return _pyglass.NarrationList_get_allocator(self)

    def pop_back(self) -> "void":
        return _pyglass.NarrationList_pop_back(self)

    def erase(self, *args) -> "std::vector< PresentationFile::Narration >::iterator":
        return _pyglass.NarrationList_erase(self, *args)

    def __init__(self, *args):
        _pyglass.NarrationList_swiginit(self, _pyglass.new_NarrationList(*args))

    def push_back(self, x: "Narration") -> "void":
        return _pyglass.NarrationList_push_back(self, x)

    def front(self) -> "std::vector< PresentationFile::Narration >::value_type const &":
        return _pyglass.NarrationList_front(self)

    def back(self) -> "std::vector< PresentationFile::Narration >::value_type const &":
        return _pyglass.NarrationList_back(self)

    def assign(self, n: "std::vector< PresentationFile::Narration >::size_type", x: "Narration") -> "void":
        return _pyglass.NarrationList_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _pyglass.NarrationList_resize(self, *args)

    def insert(self, *args) -> "void":
        return _pyglass.NarrationList_insert(self, *args)

    def reserve(self, n: "std::vector< PresentationFile::Narration >::size_type") -> "void":
        return _pyglass.NarrationList_reserve(self, n)

    def capacity(self) -> "std::vector< PresentationFile::Narration >::size_type":
        return _pyglass.NarrationList_capacity(self)
    __swig_destroy__ = _pyglass.delete_NarrationList

# Register NarrationList in _pyglass:
_pyglass.NarrationList_swigregister(NarrationList)

class IntVec3Map(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.IntVec3Map_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _pyglass.IntVec3Map___nonzero__(self)

    def __bool__(self) -> "bool":
        return _pyglass.IntVec3Map___bool__(self)

    def __len__(self) -> "std::map< int,glm::tvec3< float,glm::highp > >::size_type":
        return _pyglass.IntVec3Map___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::map< int,glm::tvec3< float,glm::highp > >::key_type const &") -> "std::map< int,glm::tvec3< float,glm::highp > >::mapped_type const &":
        return _pyglass.IntVec3Map___getitem__(self, key)

    def __delitem__(self, key: "std::map< int,glm::tvec3< float,glm::highp > >::key_type const &") -> "void":
        return _pyglass.IntVec3Map___delitem__(self, key)

    def has_key(self, key: "std::map< int,glm::tvec3< float,glm::highp > >::key_type const &") -> "bool":
        return _pyglass.IntVec3Map_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _pyglass.IntVec3Map_keys(self)

    def values(self) -> "PyObject *":
        return _pyglass.IntVec3Map_values(self)

    def items(self) -> "PyObject *":
        return _pyglass.IntVec3Map_items(self)

    def __contains__(self, key: "std::map< int,glm::tvec3< float,glm::highp > >::key_type const &") -> "bool":
        return _pyglass.IntVec3Map___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.IntVec3Map_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _pyglass.IntVec3Map_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _pyglass.IntVec3Map___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _pyglass.IntVec3Map_asdict(self)

    def __init__(self, *args):
        _pyglass.IntVec3Map_swiginit(self, _pyglass.new_IntVec3Map(*args))

    def empty(self) -> "bool":
        return _pyglass.IntVec3Map_empty(self)

    def size(self) -> "std::map< int,glm::tvec3< float,glm::highp > >::size_type":
        return _pyglass.IntVec3Map_size(self)

    def swap(self, v: "IntVec3Map") -> "void":
        return _pyglass.IntVec3Map_swap(self, v)

    def begin(self) -> "std::map< int,glm::tvec3< float,glm::highp > >::iterator":
        return _pyglass.IntVec3Map_begin(self)

    def end(self) -> "std::map< int,glm::tvec3< float,glm::highp > >::iterator":
        return _pyglass.IntVec3Map_end(self)

    def rbegin(self) -> "std::map< int,glm::tvec3< float,glm::highp > >::reverse_iterator":
        return _pyglass.IntVec3Map_rbegin(self)

    def rend(self) -> "std::map< int,glm::tvec3< float,glm::highp > >::reverse_iterator":
        return _pyglass.IntVec3Map_rend(self)

    def clear(self) -> "void":
        return _pyglass.IntVec3Map_clear(self)

    def get_allocator(self) -> "std::map< int,glm::tvec3< float,glm::highp > >::allocator_type":
        return _pyglass.IntVec3Map_get_allocator(self)

    def count(self, x: "std::map< int,glm::tvec3< float,glm::highp > >::key_type const &") -> "std::map< int,glm::tvec3< float,glm::highp > >::size_type":
        return _pyglass.IntVec3Map_count(self, x)

    def erase(self, *args) -> "void":
        return _pyglass.IntVec3Map_erase(self, *args)

    def find(self, x: "std::map< int,glm::tvec3< float,glm::highp > >::key_type const &") -> "std::map< int,glm::tvec3< float,glm::highp > >::iterator":
        return _pyglass.IntVec3Map_find(self, x)

    def lower_bound(self, x: "std::map< int,glm::tvec3< float,glm::highp > >::key_type const &") -> "std::map< int,glm::tvec3< float,glm::highp > >::iterator":
        return _pyglass.IntVec3Map_lower_bound(self, x)

    def upper_bound(self, x: "std::map< int,glm::tvec3< float,glm::highp > >::key_type const &") -> "std::map< int,glm::tvec3< float,glm::highp > >::iterator":
        return _pyglass.IntVec3Map_upper_bound(self, x)
    __swig_destroy__ = _pyglass.delete_IntVec3Map

# Register IntVec3Map in _pyglass:
_pyglass.IntVec3Map_swigregister(IntVec3Map)



