{"version":3,"file":"sortWorker-DTqjyIaL.js","sources":["../src/datastore/datatypes.ts","../src/datastore/sortWorker.js"],"sourcesContent":["const datatypes = {\n    int32: { arr: Int32Array, type: \"number\" },\n    double: { arr: Float32Array, type: \"number\" }, // why is this called double?\n    integer: { arr: Int32Array, type: \"number\" },\n    text16: { arr: Uint16Array, type: \"text\" },\n    text: { arr: Uint8Array, type: \"text\" },\n    unique: { arr: Uint8Array, type: \"unique\" },\n    multitext: { arr: Uint8Array, type: \"multitext\" },\n} as const;\n/**\n * The are the names used to refer to the types of data can be stored in a column.\n */\n// export type DataType = keyof typeof datatypes;\n/**\n * todo\n * Associates a {@link DataType} with the corresponding `TypedArray` type that will be used to store the data.\n */\n// export type DataStructureTypes = {\n//     [T in DataType]: typeof datatypes[T][\"arr\"];\n// }\n// type TextData = DataStructureTypes[\"text\"];\nexport default datatypes;\n","import datatypes from \"./datatypes\";\n\n// biome-ignore lint/suspicious/noGlobalAssign: <explanation>\nonmessage = (e) => {\n    const { orderBuffer, columns } = e.data;\n    //get access to the order buffer\n    const ord = new Uint32Array(orderBuffer);\n    //build the methods\n    const methods = columns.map((x) => {\n        const dinfo = datatypes[x.datatype];\n        const data = new dinfo.arr(x.buffer);\n        let meth = null;\n        if (dinfo.type === \"text\") {\n            meth = getTextSort({ data, desc: x.desc, values: x.values });\n        } else if (dinfo.type === \"unique\") {\n            meth = getUniqueSort({ data, desc: x.desc, size: x.stringLength });\n        } else if (dinfo.type === \"multitext\") {\n            meth = getMultiTextSort({\n                data,\n                desc: x.desc,\n                size: x.stringLength,\n            });\n        } else {\n            meth = getNumberSort({ data, desc: x.desc });\n        }\n        return meth;\n    });\n    ord.sort((a, b) => {\n        for (const m of methods) {\n            const r = m(a, b);\n            if (r !== 0) {\n                return r;\n            }\n        }\n        return 0;\n    });\n    postMessage(\"done\");\n};\n\nfunction getNumberSort({ data, desc }) {\n    const mu = desc ? -1 : 1;\n    return (a, b) => {\n        let va = data[a];\n        let vb = data[b];\n        va = Number.isNaN(va) ? Number.MAX_VALUE : va;\n        vb = Number.isNaN(vb) ? Number.MAX_VALUE : vb;\n        return (va > vb ? 1 : va < vb ? -1 : 0) * mu;\n    };\n}\n\nfunction getTextSort({ data, values, desc }) {\n    //is it quicker to build map and sort on numbers\n    //rather than sort by text?\n    const map = getSortedValues(values, desc);\n    return (a, b) => map[data[a]] - map[data[b]];\n}\n\nfunction getUniqueSort({ data, desc, size }) {\n    const names = {};\n    const tc = new TextDecoder();\n    const mu =  desc ? -1 : 1;\n    for (let i = 0; i < data.length; i++) {\n        const index = data[i];\n        names[index] = tc.decode(col.slice(index * size, index * size + size));\n    }\n    return (a, b) => names[a].localeCompare(names[b]) * mu;\n}\n\nfunction getMultiTextSort({ data, desc, values, size }) {\n    const map = getSortedValues(values, desc);\n    map[65536] = 65356;\n    return (a, b) => {\n        const a1 = data.slice(a * size, a * size + size);\n        const b1 = data.slice(b * size, b * size + size);\n        for (let i = 0; i < size; i++) {\n            const r = map[a1[i]] - map[b1[i]];\n            if (r !== 0) {\n                return r;\n            }\n            //end reached without a difference\n            if (a1[i] === 65536 && b1[i] === 65536) {\n                return 0;\n            }\n        }\n        return 0;\n    };\n}\n\nfunction getSortedValues(values, desc) {\n    const mu = desc ? -1 : 1;\n    const o = values\n        .map((x, i) => [x, i])\n        .sort((a, b) => a[0].localeCompare(b[0]) * mu);\n    const map = {};\n    for (let i = 0; i < o.length; i++) {\n        map[o[i][1]] = i;\n    }\n    return map;\n}\n"],"names":["datatypes","e","orderBuffer","columns","ord","methods","x","dinfo","data","meth","getTextSort","getUniqueSort","getMultiTextSort","getNumberSort","a","b","m","r","desc","mu","va","vb","values","map","getSortedValues","size","names","tc","i","index","a1","b1","o"],"mappings":"yBAAA,MAAMA,EAAY,CACd,MAAO,CAAE,IAAK,WAAY,KAAM,QAAA,EAChC,OAAQ,CAAE,IAAK,aAAc,KAAM,QAAA,EACnC,QAAS,CAAE,IAAK,WAAY,KAAM,QAAA,EAClC,OAAQ,CAAE,IAAK,YAAa,KAAM,MAAA,EAClC,KAAM,CAAE,IAAK,WAAY,KAAM,MAAA,EAC/B,OAAQ,CAAE,IAAK,WAAY,KAAM,QAAA,EACjC,UAAW,CAAE,IAAK,WAAY,KAAM,WAAA,CACxC,ECLA,UAAaC,GAAM,CACf,KAAM,CAAE,YAAAC,EAAa,QAAAC,CAAO,EAAKF,EAAE,KAE7BG,EAAM,IAAI,YAAYF,CAAW,EAEjCG,EAAUF,EAAQ,IAAKG,GAAM,CAC/B,MAAMC,EAAQP,EAAUM,EAAE,QAAQ,EAC5BE,EAAO,IAAID,EAAM,IAAID,EAAE,MAAM,EACnC,IAAIG,EAAO,KACX,OAAIF,EAAM,OAAS,OACfE,EAAOC,EAAY,CAAE,KAAAF,EAAM,KAAMF,EAAE,KAAM,OAAQA,EAAE,OAAQ,EACpDC,EAAM,OAAS,SACtBE,EAAOE,EAAc,CAAE,KAAAH,EAAM,KAAMF,EAAE,KAAM,KAAMA,EAAE,aAAc,EAC1DC,EAAM,OAAS,YACtBE,EAAOG,EAAiB,CACpB,KAAAJ,EACA,KAAMF,EAAE,KACR,KAAMA,EAAE,YACxB,CAAa,EAEDG,EAAOI,EAAc,CAAE,KAAAL,EAAM,KAAMF,EAAE,KAAM,EAExCG,CACX,CAAC,EACDL,EAAI,KAAK,CAACU,EAAGC,IAAM,CACf,UAAWC,KAAKX,EAAS,CACrB,MAAMY,EAAID,EAAEF,EAAGC,CAAC,EAChB,GAAIE,IAAM,EACN,OAAOA,CAEf,CACA,MAAO,EACX,CAAC,EACD,YAAY,MAAM,CACtB,EAEA,SAASJ,EAAc,CAAE,KAAAL,EAAM,KAAAU,GAAQ,CACnC,MAAMC,EAAKD,EAAO,GAAK,EACvB,MAAO,CAACJ,EAAGC,IAAM,CACb,IAAIK,EAAKZ,EAAKM,CAAC,EACXO,EAAKb,EAAKO,CAAC,EACf,OAAAK,EAAK,OAAO,MAAMA,CAAE,EAAI,OAAO,UAAYA,EAC3CC,EAAK,OAAO,MAAMA,CAAE,EAAI,OAAO,UAAYA,GACnCD,EAAKC,EAAK,EAAID,EAAKC,EAAK,GAAK,GAAKF,CAC9C,CACJ,CAEA,SAAST,EAAY,CAAE,KAAAF,EAAM,OAAAc,EAAQ,KAAAJ,CAAI,EAAI,CAGzC,MAAMK,EAAMC,EAAgBF,EAAQJ,CAAI,EACxC,MAAO,CAACJ,EAAGC,IAAMQ,EAAIf,EAAKM,CAAC,CAAC,EAAIS,EAAIf,EAAKO,CAAC,CAAC,CAC/C,CAEA,SAASJ,EAAc,CAAE,KAAAH,EAAM,KAAAU,EAAM,KAAAO,CAAI,EAAI,CACzC,MAAMC,EAAQ,CAAA,EACRC,EAAK,IAAI,YACTR,EAAMD,EAAO,GAAK,EACxB,QAASU,EAAI,EAAGA,EAAIpB,EAAK,OAAQoB,IAAK,CAClC,MAAMC,EAAQrB,EAAKoB,CAAC,EACpBF,EAAMG,CAAK,EAAIF,EAAG,OAAO,IAAI,MAAME,EAAQJ,EAAMI,EAAQJ,EAAOA,CAAI,CAAC,CACzE,CACA,MAAO,CAACX,EAAGC,IAAMW,EAAMZ,CAAC,EAAE,cAAcY,EAAMX,CAAC,CAAC,EAAII,CACxD,CAEA,SAASP,EAAiB,CAAE,KAAAJ,EAAM,KAAAU,EAAM,OAAAI,EAAQ,KAAAG,CAAI,EAAI,CACpD,MAAMF,EAAMC,EAAgBF,EAAQJ,CAAI,EACxC,OAAAK,EAAI,KAAK,EAAI,MACN,CAACT,EAAGC,IAAM,CACb,MAAMe,EAAKtB,EAAK,MAAMM,EAAIW,EAAMX,EAAIW,EAAOA,CAAI,EACzCM,EAAKvB,EAAK,MAAMO,EAAIU,EAAMV,EAAIU,EAAOA,CAAI,EAC/C,QAAS,EAAI,EAAG,EAAIA,EAAM,IAAK,CAC3B,MAAMR,EAAIM,EAAIO,EAAG,CAAC,CAAC,EAAIP,EAAIQ,EAAG,CAAC,CAAC,EAChC,GAAId,IAAM,EACN,OAAOA,EAGX,GAAIa,EAAG,CAAC,IAAM,OAASC,EAAG,CAAC,IAAM,MAC7B,MAAO,EAEf,CACA,MAAO,EACX,CACJ,CAEA,SAASP,EAAgBF,EAAQJ,EAAM,CACnC,MAAMC,EAAKD,EAAO,GAAK,EACjBc,EAAIV,EACL,IAAI,CAAChB,EAAGsB,IAAM,CAACtB,EAAGsB,CAAC,CAAC,EACpB,KAAK,CAACd,EAAGC,IAAMD,EAAE,CAAC,EAAE,cAAcC,EAAE,CAAC,CAAC,EAAII,CAAE,EAC3CI,EAAM,CAAA,EACZ,QAASK,EAAI,EAAGA,EAAII,EAAE,OAAQJ,IAC1BL,EAAIS,EAAEJ,CAAC,EAAE,CAAC,CAAC,EAAIA,EAEnB,OAAOL,CACX"}