import os
from pathlib import Path


def create_file(path: Path, content: str = ''):
    path.parent.mkdir(parents=True, exist_ok=True)
    if not path.exists():
        path.write_text(content, encoding='utf-8')


def run_scaffold():
    base = Path.cwd()

    files = {
        "bot/handler.py": '''import asyncio
import os.path
import re
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
from apscheduler.triggers.date import DateTrigger


import config
from config import Config
from bot import keyboards as kb
from utils import msg_ids, logger, auto_state_clear
import db
import services as bridge

dp = Dispatcher()
bot = Bot(token=Config.BOT_TOKEN)
user_data = {}
scheduler = AsyncIOScheduler()


class Reg(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–π. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π,
    —á—Ç–æ–±—ã –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # state = State() - –ü—Ä–∏–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    pass


@dp.message(CommandStart())
@auto_state_clear()
async def start(message: Message, state: FSMContext):
    uid = message.from_user.id
    await state.clear()
    msg = await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    msg_ids[uid].add(msg.message_id)


@dp.callback_query()
async def callback_handler(callback: CallbackQuery):
    uid = callback.from_user.id
    message = callback.message
    data = callback.data
    if data == 'main_menu':
        try:
            await bot.delete_messages(uid, list(msg_ids[uid]))
        except TelegramBadRequest:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        try:
            await message.edit_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
                                    reply_markup=kb.start_keyboard)
        except TelegramBadRequest:
            try:
                await message.delete()
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞: {e}')
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
                                 reply_markup=kb.start_keyboard)
    elif data == 'about':
        await message.answer(
            '–¢–µ–∫—Å—Ç –æ–±–æ –º–Ω–µ:\\n'
            '–Ø - —à–∞–±–ª–æ–Ω –¥–ª—è –±–æ—Ç–∞. –ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è —Ç–∞–∫–∏–º, –∫–∞–∫ —Ç–µ–±–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è',
            reply_markup=kb.back
        )
    elif data == 'clear':
        await message.delete()
    await callback.answer()


@dp.message()
async def message_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç —É–≤–∏–¥–µ—Ç—å. –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç –∏—Ö"""
    await message.delete()


async def delete_message_after(message: Message, timeout: int = 86400):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å.
    :param timeout: –í—Ä–µ–º—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.
    """
    await asyncio.sleep(timeout)
    try:
        await message.delete()
    except TelegramBadRequest as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}')


def setup_scheduler(scheduler_: AsyncIOScheduler):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler_.remove_all_jobs()  # —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # scheduler.add_job(
    #     func,
    #     trigger=Trigger(minutes=10)
    # ) - –ø–æ–º–µ–Ω—è—Ç—å func –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä
    scheduler_.start()  # –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫


async def main():
    await db.init_db()
    setup_scheduler(scheduler_=scheduler)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)  # —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
''',
        "bot/keyboards.py": '''from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton


start_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–û–±–æ –º–Ω–µ', callback_data='about')],
])

back = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='main_menu')]
])

clear = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='clear')]
])''',

        "db/requests.py": '''import datetime
from typing import Optional

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
# from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, delete

from db.models import async_session, User


async def create_user(
        uid: int
) -> Optional[dict]:
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.uid == uid))
        existing_user = result.scalar_one_or_none()
        if existing_user:
            return existing_user.as_dict()
        new_user = User(
            uid=uid,
        )
        session.add(new_user)
        await session.commit()
        return new_user.as_dict()


async def get_all_users():
    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()
        return [user.as_dict() for user in users]


async def get_user_by_uid(uid: int):
    async with async_session() as session:
        result = await session.execute(select(User).filter(User.uid == uid))
        user = result.scalar_one_or_none()
        if user:
            return user.as_dict()
        return None''',
        "db/models.py": '''from typing import cast

from sqlalchemy import String, Float, ForeignKey, Integer, func, inspect
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, Mapper
from sqlalchemy.ext.asyncio import AsyncAttrs, async_sessionmaker, create_async_engine, AsyncSession

engine = create_async_engine(url='sqlite+aiosqlite:///db/database/users.sqlite3')
async_session = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)


class Base(AsyncAttrs, DeclarativeBase):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ –ë–î"""

    def as_dict(self) -> dict:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ
        {'–Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è –≤ –ë–î': '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ –ë–î'}

        :returns dict:
        """
        mapper: Mapper = cast(Mapper, inspect(self).mapper)
        return {
            column.key: getattr(self, column.key)
            for column in mapper.column_attrs
        }


class User(Base):
    __tablename__ = 'users'

    id: Mapped[int] = mapped_column(Integer, primary_key=True, unique=True, autoincrement=True)
    uid: Mapped[int] = mapped_column(Integer, unique=True, nullable=False)

    
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
''',
        "db/__init__.py": '''from db.requests import *
from db.models import *''',
        "db/database/.gitignore": "*.sqlite3",

        "keys/.gitignore": "*.*",

        "logger/logs/.gitignore": '''*.log''',
        "logger/file_logger.py": '''import logging
import os
from datetime import datetime
from logging.handlers import TimedRotatingFileHandler

from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
# logs_directory = "./logger"
# if not os.path.exists(logs_directory):
#     os.makedirs(logs_directory)

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
# log_format = "[%(asctime)s] %(levelname)s %(source)s: %(message)s"
log_format = "[%(asctime)s] %(levelname)s %(source)s %(funcName)s:%(lineno)d - %(message)s"


class CustomLogger:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª, –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.
    """

    def __init__(self, source: str,
                 log_to_file: bool = True,
                 log_to_console: bool = True,
                 base_dir: str = "./log",
                 log_rotate_days: int = Config.LOG_ROTATE_DAYS):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞.

        :param source: –ò—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "System" –∏–ª–∏ "user_123").
        :param log_to_file: –í–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True).
        :param log_to_console: –í–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True).
        :param base_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "./log").
        :param log_rotate_days: –ü–µ—Ä–∏–æ–¥ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–µ–Ω—å).
        """
        self.source = source
        self.logger = logging.getLogger(f"custom_logger_{source}")
        self.logger.setLevel(logging.INFO)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if self.logger.handlers:
            self.logger.handlers.clear()

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.log_directory = base_dir
        if not os.path.exists(self.log_directory):
            os.makedirs(self.log_directory)

        # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
        self.formatter = logging.Formatter(log_format)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if log_to_file:
            self._setup_file_handler(log_rotate_days)
        self._setup_console_handlers(log_to_console)

    def destroy(self):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–æ–≥–≥–µ—Ä–∞.
        """
        for handler in self.logger.handlers[:]:
            try:
                handler.close()
                self.logger.removeHandler(handler)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")

    def _setup_file_handler(self, log_rotate_days: int):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª.

        :param log_rotate_days: –ü–µ—Ä–∏–æ–¥ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –≤ –¥–Ω—è—Ö.
        """
        log_file_path = os.path.join(self.log_directory, f"{self.source}_{datetime.now().strftime('%Y_%m_%d')}.log")
        file_handler = TimedRotatingFileHandler(
            log_file_path,
            when="midnight",
            interval=log_rotate_days,
            backupCount=5,
            encoding='utf-8',
            delay=True  # –û—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        )
        file_handler.setLevel(logging.DEBUG)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        file_handler.setFormatter(self.formatter)

        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏
        def rename_rotated_logs(prefix):
            def namer(default_name):
                base_filename, ext = os.path.splitext(os.path.basename(default_name))
                rotated_time = base_filename.split(".")[1]
                new_filename = f"{prefix}_{rotated_time}{ext}"
                return os.path.join(self.log_directory, new_filename)
            return namer

        file_handler.namer = rename_rotated_logs(self.source)

        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ doRollover –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤
        original_do_rollover = file_handler.doRollover

        def custom_do_rollover():
            original_do_rollover()  # –í—ã–∑–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
            for handler in self.logger.handlers[:]:
                if isinstance(handler, TimedRotatingFileHandler):
                    try:
                        handler.stream.close()  # –Ø–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                    except Exception as e:
                        c = 1
                        # logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")

        file_handler.doRollover = custom_do_rollover

        self.logger.addHandler(file_handler)

    def _setup_console_handlers(self, log_to_console: bool):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.

        :param log_to_console: –í–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å.
        """
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ ERROR –∏ CRITICAL –≤—Å–µ–≥–¥–∞
        error_console_handler = logging.StreamHandler()
        error_console_handler.setLevel(logging.ERROR)  # –¢–æ–ª—å–∫–æ ERROR –∏ –≤—ã—à–µ
        error_console_handler.setFormatter(self.formatter)
        self.logger.addHandler(error_console_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ log_to_console=True
        if log_to_console:
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.INFO)  # –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–æ–≤
            console_handler.setFormatter(self.formatter)
            self.logger.addHandler(console_handler)

    def _log(self, level: int, message: str):
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.

        :param level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, logging.INFO).
        :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        self.logger.log(level, message, extra={"source": self.source})

    def info(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self._log(logging.INFO, message)

    def error(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö."""
        self._log(logging.ERROR, message)

    def warning(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."""
        self._log(logging.WARNING, message)

    def debug(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self._log(logging.DEBUG, message)

    def critical(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫."""
        self._log(logging.CRITICAL, message)''',

        "services/__init__.py": '''from services import google_api as ggl''',
        "services/google_api.py": '''import io
import os
import re

import gspread
from gspread import SpreadsheetNotFound
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload

from utils import logger
from config import Config

SHEET_ID = Config.SHEET_ID
FOLDER_ID = Config.FOLDER_ID
SCOPES = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

creds = ServiceAccountCredentials.from_json_keyfile_name(Config.GOOGLE_CREDENTIALS_JSON, SCOPES)
client = gspread.authorize(creds)


drive_service = build('drive', 'v3', credentials=creds)


async def send_info(info: list):
    logger.info('Called send_info')
    sheet = client.open_by_key(SHEET_ID).sheet1
    result = sheet.append_row(info)
    logger.info(f'–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É: {result}')
    return result


async def get_info():
    logger.info('fetching info from google sheet')
    try:
        sheet = client.open_by_key(SHEET_ID).worksheet("–∞–∫—Ü–∏–∏")
        data = sheet.get_all_values()
        rows = data[1:]  # Skip the header row
        logger.info('Data read successfully')
    except SpreadsheetNotFound:
        logger.error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã')
        return None
    return rows


def download_file_from_drive(file_id: str, filename: str, dest_folder: str = "vpn_configs") -> str:
    os.makedirs(dest_folder, exist_ok=True)
    request = drive_service.files().get_media(fileId=file_id)

    file_path = os.path.join(dest_folder, filename)
    with io.FileIO(file_path, 'wb') as fh:
        downloader = MediaIoBaseDownload(fh, request)
        done = False
        while not done:
            status, done = downloader.next_chunk()

    return file_path


def transform_google_drive_link(link: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É Google –î–∏—Å–∫–∞ –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    match = re.search(r"https://drive\.google\.com/file/d/([^/]+)/view", link)
    if match:
        file_id = match.group(1)
        return f"https://drive.google.com/uc?export=download&id={file_id}"
    return link''',

        "static/.gitignore": '*.*',

        "utils/__init__.py": "from utils.utils import *",
        "utils/utils.py": '''import asyncio
import os
from collections import defaultdict
from functools import wraps

from aiogram.fsm.context import FSMContext

from logger.file_logger import CustomLogger
from config import BASE_DIR


user_country = {}
msg_ids: dict[int, set] = defaultdict(set)
base_dir = os.path.join(BASE_DIR, 'logger', 'logs')
logger = CustomLogger('bot_log', base_dir=base_dir)
logger.info('logger initialized')

user_timers = {}
users = {}


def auto_state_clear(timeout: int = 900):
    def decorator(func):
        @wraps(func)
        async def wrapper(message, state: FSMContext, *args, **kwargs):
            user_id = message.from_user.id

            if user_id in user_timers:
                task = user_timers[user_id]
                if not task.done():
                    task.cancel()

            async def timer():
                try:
                    await asyncio.sleep(timeout)
                    await state.clear()
                    users.pop(user_id, None)
                    user_timers.pop(user_id, None)
                except asyncio.CancelledError:
                    pass
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –¥–ª—è {user_id}: {e}")

            user_timers[user_id] = asyncio.create_task(timer())

            return await func(message, state, *args, **kwargs)

        return wrapper
    return decorator''',

        ".env.example": '''BOT_TOKEN=
    GOOGLE_CREDENTIALS_JSON=keys/google_service_key.json
    SHEET_ID=
    FOLDER_ID=
    MANAGER_ID=
    CHANNEL_ID=''',
        ".env.local": "",
        ".gitignore": """.idea/
    __pycache__/
    .venv/
    .qodo/
    *.sqlite3
    .env.local
    """,
        "README.md": "",
        "config.py": '''import os

    from dotenv import load_dotenv

    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if os.path.exists(os.path.join(BASE_DIR, '.env.local')):
        load_dotenv(os.path.join(BASE_DIR, '.env.local'))
    else:
        load_dotenv(os.path.join(BASE_DIR, '.env'))


    class Config:
        BOT_TOKEN = os.getenv('BOT_TOKEN')
        DB_URL = f'sqlite+aiosqlite:///{BASE_DIR}/db/database/db.sqlite3'

        FOLDER_ID = os.getenv('FOLDER_ID')
        SHEET_ID = os.getenv('SHEET_ID')
        GOOGLE_CREDENTIALS_JSON = os.path.join(BASE_DIR, os.getenv('GOOGLE_CREDENTIALS_JSON'))
        MANAGER_ID = os.getenv('MANAGER_ID')
        CHANNEL_ID = os.getenv('CHANNEL_ID')
        LOG_ROTATE_DAYS = 1''',
        "main.py": '''import asyncio
import logging

from bot.handler import main


if __name__ == '__main__':
    try:
        logging.basicConfig(level=logging.INFO)
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')''',
        "requirements.txt": '''SQLAlchemy~=2.0.40
APScheduler~=3.11.0
aiogram~=3.3.0
gspread~=6.2.1
oauth2client~=4.1.3
google-api-python-client~=2.179.0
python-dotenv~=0.9.0'''
    }

    dirs = ["static/"]

    for path_str, content in files.items():
        create_file(base / path_str, content)

    for dir_str in dirs:
        (base / dir_str).mkdir(parents=True, exist_ok=True)

    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
