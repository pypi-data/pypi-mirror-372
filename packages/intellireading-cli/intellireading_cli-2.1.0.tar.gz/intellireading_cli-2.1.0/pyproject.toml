[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "intellireading-cli"
dynamic = ["version"]
description = 'Intellireading-cli is a Python library with a set of tools to improve your reading experience'
readme = "README.md"
requires-python = ">=3.13"
license = "GPL-3.0"
keywords = ["kepub","epub", "calibre", "ebook","kindle","kobo","speed-reading", "dyslexia", "adhd"]
authors = [
  { name = "Hugo Batista"},
]
classifiers = [
  "Operating System :: OS Independent",
  "Topic :: Software Development",
  "Topic :: Text Processing :: Markup :: XML",
  "Topic :: Education :: Computer Aided Instruction (CAI)",
  "Topic :: Utilities",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "click>=8.1.7",
  "lxml>=4.9.2",
  "regex >= 2024.11.6",
]

[project.scripts]
intellireading = "intellireading.client:entrypoint"

[project.urls]
Documentation = "https://go.hugobatista.com/gh/intellireading-cli#readme"
Issues = "https://go.hugobatista.com/gh/intellireading-cli/issues"
Source = "https://go.hugobatista.com/gh/intellireading-cli"

[tool.hatch.version]
path = "src/intellireading/client/__about_cli__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/intellireading"]
exclude = ["tests"]

[tool.hatch.build.targets.sdist]
packages = ["src/intellireading"]
exclude = ["tests"]

[tool.hatch.envs.default]
installer = "uv"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests} -v"
test-cov = "coverage run -m pytest {args:tests} -v"
cov-report = [
  "- coverage combine",
  "coverage report",
  "coverage html",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.13"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --ignore-missing-imports --install-types --non-interactive {args:src/intellireading tests}"
style = [
  "ruff check {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore Import block is un-sorted or un-formatted
  "I001",
  # Ignore `import` should be at the top-level of a file
  "PLC0415",
]
lint.unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["intellireading"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["intellireading", "tests"]
branch = true
parallel = true
omit = [
  "src/intellireading/__about_cli__.py",
]

[tool.coverage.paths]
intellireading = ["src/intellireading", "*/intellireading-cli/src/intellireading"]
tests = ["tests", "*/intellireading-cli/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
