# coding: utf-8

"""
    Platform External API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from platform_api_python_client.models.create_inference_v3_deployment_request import CreateInferenceV3DeploymentRequest

class TestCreateInferenceV3DeploymentRequest(unittest.TestCase):
    """CreateInferenceV3DeploymentRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateInferenceV3DeploymentRequest:
        """Test CreateInferenceV3DeploymentRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateInferenceV3DeploymentRequest`
        """
        model = CreateInferenceV3DeploymentRequest()
        if include_optional:
            return CreateInferenceV3DeploymentRequest(
                max_surge = 56,
                max_unavailable = 56,
                name = 'ar1c2v7s6djuy1zmetozkhdomha1b0',
                cluster_id = 56,
                hardware_instance_id = 56,
                image_url = '',
                image_pull_secret_credentials = platform_api_python_client.models.image_pull_secret_credentials.ImagePullSecretCredentials(
                    username = '', 
                    password = '', ),
                port = 56,
                min_replicas = 56,
                max_replicas = 56,
                initial_replicas = 56,
                concurrency = 56,
                healthcheck = '',
                env_vars = {
                    'key' : ''
                    },
                command = '',
                endpoint_bearer_token = '',
                endpoint_certificate_authority = ''
            )
        else:
            return CreateInferenceV3DeploymentRequest(
                name = 'ar1c2v7s6djuy1zmetozkhdomha1b0',
                cluster_id = 56,
                hardware_instance_id = 56,
                image_url = '',
                port = 56,
                min_replicas = 56,
                max_replicas = 56,
        )
        """

    def testCreateInferenceV3DeploymentRequest(self):
        """Test CreateInferenceV3DeploymentRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
