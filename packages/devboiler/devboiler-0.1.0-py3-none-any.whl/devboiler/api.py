from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path
from typing import Dict, Any, Optional, List

from jinja2 import Environment, PackageLoader, select_autoescape


_env: Optional[Environment] = None


def _get_jinja_env() -> Environment:
    global _env
    if _env is None:
        _env = Environment(
            loader=PackageLoader("devboiler", "templates"),
            autoescape=select_autoescape(["html", "xml"]),
            trim_blocks=True,
            lstrip_blocks=True,
        )
    return _env


def _render_template(template_path: str, context: Dict[str, Any]) -> str:
    env = _get_jinja_env()
    template = env.get_template(template_path)
    return template.render(**context)


def _ensure_parent_directory(file_path: Path) -> None:
    file_path.parent.mkdir(parents=True, exist_ok=True)


def _write_text_file(file_path: Path, content: str, *, force: bool = False) -> Path:
    _ensure_parent_directory(file_path)
    if file_path.exists() and not force:
        raise FileExistsError(f"File already exists: {file_path}")
    file_path.write_text(content, encoding="utf-8")
    return file_path


def create_python_class(
    class_name: str,
    *,
    filename: Optional[str] = None,
    directory: Path | str = ".",
    force: bool = False,
) -> Path:
    """Create a Python class skeleton.

    Args:
        class_name: Name of the class to generate.
        filename: Optional explicit filename; defaults to f"{class_name}.py".
        directory: Output directory.
        force: Overwrite files if they exist.
    Returns:
        Path to the generated file.
    """
    directory_path = Path(directory)
    output_filename = filename or f"{class_name}.py"
    output_path = directory_path / output_filename
    content = _render_template(
        "python/class.py.j2",
        {"class_name": class_name},
    )
    return _write_text_file(output_path, content, force=force)


def create_html_page(
    name: str,
    *,
    title: str = "My Homepage",
    directory: Path | str = ".",
    force: bool = False,
) -> Path:
    """Create a minimal HTML page.

    Args:
        name: Base filename (without extension).
        title: HTML <title> value.
        directory: Output directory.
        force: Overwrite files if they exist.
    Returns:
        Path to the generated HTML file.
    """
    directory_path = Path(directory)
    output_path = directory_path / f"{name}.html"
    content = _render_template(
        "html/page.html.j2",
        {"title": title},
    )
    return _write_text_file(output_path, content, force=force)


def create_react_component(
    name: str,
    *,
    type: str = "function",
    extension: str = "jsx",
    directory: Path | str = ".",
    force: bool = False,
) -> Path:
    """Create a React component (function or class)."""
    template_name = (
        "react/component_function.jsx.j2"
        if type == "function"
        else "react/component_class.jsx.j2"
    )
    directory_path = Path(directory)
    output_path = directory_path / f"{name}.{extension}"
    content = _render_template(template_name, {"component_name": name})
    return _write_text_file(output_path, content, force=force)


def create_project(
    name: str,
    *,
    type: str = "python",
    directory: Path | str = ".",
    force: bool = False,
) -> List[Path]:
    """Create a project skeleton.

    Currently supported types:
    - python
    """
    if type != "python":
        raise ValueError(f"Unsupported project type: {type}")

    root = Path(directory) / name
    files_created: List[Path] = []

    # package dir
    package_dir = root / name
    init_content = _render_template("project/python/init.py.j2", {"package_name": name})
    main_content = _render_template("project/python/main.py.j2", {"package_name": name})

    files_created.append(_write_text_file(package_dir / "__init__.py", init_content, force=force))
    files_created.append(_write_text_file(root / "main.py", main_content, force=force))

    # simple README
    readme = (
        f"# {name}\n\nGenerated by devboiler. Run with:\n\n"\
        f"```bash\npython {name}/main.py\n```\n"
    )
    files_created.append(_write_text_file(root / "README.md", readme, force=force))

    return files_created


