import os
import sys
import argparse
import shutil

from alo.__version__ import __version__

def __run(args):
    from alo.alo import Alo
    from alo.model import settings, Git
    if args.name:
        settings.name = args.name
    if args.config:
        settings.config = args.config
    if args.system:
        settings.system = args.system
    if args.computing:
        settings.computing = args.computing
    settings.mode = None if args.mode == 'all' else args.mode
    if args.loop:
        settings.computing = 'daemon'
    if args.server:
        settings.computing = 'server'
    if args.port:  # Ï∂îÍ∞ÄÎêú Î∂ÄÎ∂Ñ
        settings.port = args.port  # portÎ°ú Î≥ÄÍ≤Ω
    if getattr(args, "git.url"):
        settings.git = Git(url=getattr(args, 'git.url'),
                           branch=getattr(args, 'git.branch') if getattr(args, 'git.branch') else 'main')
    if args.log_level:
        settings.log_level = args.log_level
    alo = Alo()
    alo.run()


def __template(args):
    # todo
    print("Coming soon.")

# def __server(args):
#     from alo.api.api_server import run_server
#     run_server(host=args.host, port=args.port, run_function=__run)

def __history(args):
    from alo.alo import Alo
    from alo.model import settings
    if args.config:
        settings.config = args.config
    alo = Alo()
    alo.history(type=args.mode, show_table=True, head=args.head, tail=args.tail)


def __register(args):
    import yaml
    import re

    def check_str_bytes(s, encoding='utf-8', bytes_limit = 5000):
            """ Check if string bytes is under 5000

            Args:
                s: string tobe checked
                encoding: method of string encoding(default: 'utf-8')

            Returns:
                True: bytes < 5000
                False: bytes >= 5000
            """
            byte_length = len(s.encode(encoding))
            if byte_length >= bytes_limit:
                raise ValueError(f"Input exceeds {bytes_limit} bytes limit (current: {byte_length} bytes)")
            return True

    def validate_name(name):
        if not name:  # Empty input is allowed
            return True

        if len(name) > 50:
            raise ValueError("Name must be 50 characters or less")

        # Check for Korean characters
        if any(ord(char) >= 0x3131 and ord(char) <= 0xD7A3 for char in name):
            raise ValueError("Name cannot contain Korean characters")

        # Only allow alphanumeric and hyphen
        if not re.match("^[a-zA-Z0-9-]*$", name):
            raise ValueError("Name can only contain letters, numbers, and hyphens")

        # Check for spaces
        if ' ' in name:
            raise ValueError("Name cannot contain spaces")

        return True

    def read_yaml(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            data = yaml.safe_load(file)
        return data

    def write_yaml(data, file_path):
        with open(file_path, 'w', encoding='utf-8') as file:
            yaml.dump(data, file, default_flow_style=False, allow_unicode=True)

    def update_yaml(data, name=None, overview=None, detail=None):
        # Only update if the input is not empty
        if name and name.strip():  # nameÏù¥ Ï°¥Ïû¨ÌïòÍ≥† Í≥µÎ∞±Ïù¥ ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå ÏóÖÎç∞Ïù¥Ìä∏
            data['name'] = name
        if overview and overview.strip():  # overviewÍ∞Ä Ï°¥Ïû¨ÌïòÍ≥† Í≥µÎ∞±Ïù¥ ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå ÏóÖÎç∞Ïù¥Ìä∏
            data['overview'] = overview
        if detail:  # detail Î¶¨Ïä§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ÏóêÎßå ÏóÖÎç∞Ïù¥Ìä∏
            data['detail'] = detail
        return data

    def copy_file_to_folder(src_file, dest_folder):
    # Î≥µÏÇ¨ÌïòÎ†§Îäî ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
        if not os.path.isfile(src_file):
            print(f"{src_file} ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
            return

        # ÎåÄÏÉÅ Ìè¥ÎçîÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏúºÎ©¥ ÏÉùÏÑ±Ìï©ÎãàÎã§.
        if not os.path.exists(dest_folder):
            os.makedirs(dest_folder)

        # ÌååÏùºÎ™ÖÏùÑ Í∞ÄÏ†∏ÏôÄ ÎåÄÏÉÅ Ìè¥ÎçîÏùò Í≤ΩÎ°úÎ•º ÎßåÎì≠ÎãàÎã§.
        dest_file = os.path.join(dest_folder, os.path.basename(src_file))

        # ÌååÏùºÏùÑ Î≥µÏÇ¨Ìï©ÎãàÎã§.
        shutil.copy2(src_file, dest_file)
        print(f"{src_file} ÌååÏùºÏù¥ {dest_file} ÏúÑÏπòÎ°ú Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.")

    from alo.solution_register import SolutionRegister
    src = os.getcwd()# os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'alo', 'example')
    settings = os.path.join(src, 'setting')
    solution_info = os.path.join(settings, 'solution_info.yaml')
    infra_config = os.path.join(settings, 'infra_config.yaml')

    data = read_yaml(solution_info)

    skip = False
    if args.id != None and args.password != None:
        skip = True
    try:
        if data['ai_conductor_id'] != None and (args.id == None or args.id == ''):
            args.id = data['ai_conductor_id']
            print(f"User id from solution_info :{args.id}")
            skip = True
    except Exception as e:
        print('There is no AIC id information in the setting/solution_info file.')
        if args.id == None or args.id == '':
            while args.id == '' or args.id == None:
                args.id = input("Please enter your AI Conductor ID: ")
            skip = False

    try:
        if data['ai_conductor_pw'] != None and args.password == None:
            args.password = data['ai_conductor_pw']
            print(f"User pw from solution_info : **********")
            skip = True
    except Exception as e:
        print('There is no AIC pw information in the setting/solution_info file.')
        if args.password == None:
            while args.password == '' or args.password == None:
                args.password = input("Please enter your AI Conductor password: ")
            skip = False

    if not skip:
        name = input("Enter the new name (leave empty to keep current): ")
        validate_name(name)
        overview = input("Enter the new overview (leave empty to keep current): ")

        detail = []
        while True:
            add_detail = input("Do you want to add a detail? (If yes, type 'yes'; to skip, press enter): ").strip().lower()
            if add_detail == 'yes':
                content = input("Enter the content for the detail: ")
                check_str_bytes(content)
                title = input("Enter the title for the detail: ")
                check_str_bytes(title)
                detail.append({"content": content, "title": title})
            elif add_detail =='' :
                break
            else :
                raise ValueError("Invalid input! You must type 'yes' or press enter to skip.")
        data = update_yaml(data, name, overview, detail)
        write_yaml(data, solution_info)

        current_settings_dir = os.path.join(os.getcwd(), 'setting')
        os.makedirs(current_settings_dir, exist_ok=True)

    solution_register = SolutionRegister(args.id, args.password)
    solution_register.register()


def __update(args):
    from alo.solution_register import SolutionRegister
    solution_register = SolutionRegister(args.id, args.password)
    solution_register.update()


def __delete(args):
    from alo.solution_register import SolutionRegister
    solution_register = SolutionRegister(args.id, args.password)
    solution_register.delete()


def __example(args):
    src = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'example', args.name)
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(os.getcwd(), item)
        if os.path.isdir(s):
            shutil.copytree(s, d)
        else:
            shutil.copy2(s, d)

    print(f"A {args.name} template file has been created in the current path.")
    print("Run alo")

def __docker(args):

    def print_ubuntu_package_instructions():

        instructions = """
        ### Ïö∞Î∂ÑÌà¨ Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò ÏïàÎÇ¥Î¨∏ üåà

        ÏïàÎÖïÌïòÏÑ∏Ïöî! DockerfileÏùÑ ÌÜµÌï¥ Ïö∞Î∂ÑÌà¨ Ìå®ÌÇ§ÏßÄÎ•º ÏÑ§ÏπòÌï¥Î≥¥Í≤†ÏäµÎãàÎã§. ÏïÑÎûòÏùò Îã®Í≥ÑÎ•º Îî∞Îùº Ìå®ÌÇ§ÏßÄÎ•º Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî:

        1. DockerfileÏóêÏÑú `apt-get update` Î™ÖÎ†πÏùÑ Ìè¨Ìï®ÌïòÏó¨ APT Ìå®ÌÇ§ÏßÄ Î™©Î°ùÏùÑ ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏÑ∏Ïöî.

        2. `apt-get install` Î™ÖÎ†πÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Ìå®ÌÇ§ÏßÄÎ•º ÏÑ§ÏπòÌïòÏÑ∏Ïöî. `--no-install-recommends` ÏòµÏÖòÏùÑ ÏÇ¨Ïö©ÌïòÎ©¥ Î∂àÌïÑÏöîÌïú ÏùòÏ°¥ÏÑ±ÏùÑ ÏµúÏÜåÌôîÌï† Ïàò ÏûàÏäµÎãàÎã§.

        **ÏòàÏ†ú**:
        Ïö∞Î∂ÑÌà¨ Ìå®ÌÇ§ÏßÄ `curl`ÏùÑ ÏÑ§ÏπòÌïòÍ≥† Ïã∂Îã§Î©¥, DockerfileÏùò Ìï¥Îãπ Î∂ÄÎ∂ÑÏóê Îã§ÏùåÍ≥º Í∞ôÏù¥ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî:

        ```dockerfile
        RUN apt-get update && \\
            apt-get install -y --no-install-recommends \\
            curl \\
            && rm -rf /var/lib/apt/lists/*

        Ï∂îÍ∞ÄÎêú curl Ìå®ÌÇ§ÏßÄÎäî Docker Ïª®ÌÖåÏù¥ÎÑà ÎÇ¥ÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.
        Ï¶êÍ±∞Ïö¥ ALO ÏÉùÌôú ÎêòÏÑ∏Ïöî üêß
        """

        print(instructions)

    def print_cuda_instructions():

        instructions = """
        ### alo docker --gpu Î•º Ïã§ÌñâÌïú GPUÏö© Dockerfile ÏûëÏÑ±Ïûê Ïö©
        ### Docker container cudaÏôÄ cudnn ÏÑ§Ï†ïÏóê Í¥ÄÌïú ÏïàÎÇ¥Î¨∏ üåà

        - CUDA Î≤ÑÏ†Ñ Î∞è CuDNN Î≤ÑÏ†ÑÏùÑ ÌôòÍ≤Ω Î≥ÄÏàòÎ°ú Ï†ïÏùòÌï©ÎãàÎã§. tensorflow, torch Î≤ÑÏ†ÑÏóê Îî∞Îùº
        Ìò∏ÌôòÎêòÎäî CUDA_VER Î∞è CUDNN_VER Î≤ÑÏ†ÑÏùÑ ÏûëÏÑ±Ìï©ÎãàÎã§.
        << ÏûëÏÑ± ÏòàÏãú >>
        ## torch >= 2.1.0
        FROM nvidia/cuda:11.8.0-devel-ubuntu22.04
        ARG CUDA_VER=11.8
        ############################################################
        ##  torch <= 2.0.1
        FROM nvidia/cuda:11.7.1-devel-ubuntu22.04
        ARG CUDA_VER=11.7
        ############################################################
        ## tensorflow 2.15
        FROM nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04
        ARG CUDA_VER=12.2
        ############################################################
        ## tensorflow 2.14
        FROM nvidia/cuda:11.8.0-devel-ubuntu22.04
        ARG CUDA_VER=11.8
        ARG CUDNN_VER=8.7.0
        ############################################################
        ## tensorflow 2.12 ~ 2.13
        FROM nvidia/cuda:11.8.0-devel-ubuntu22.04
        ARG CUDA_VER=11.8
        ARG CUDNN_VER=8.6.0
        ############################################################

        Í∞ÄÎ†π, torchÎÇò tensorflow 2.15 Î≤ÑÏ†Ñ Ïù¥ÏÉÅÎ∂ÄÌÑ∞Îäî CUDNN_VERÏùÄ ÎØ∏ÏûëÏÑ±Ìï©ÎãàÎã§.

        - Ï∞∏Í≥† ÏÇ¨Ìï≠
        CUDA Î∞è CuDNN ÏÑ§ÏπòÎäî CUDA Î≤ÑÏ†ÑÍ≥º CuDNNÏùò Ìò∏ÌôòÏÑ±ÏùÑ Î∞òÎìúÏãú ÌôïÏù∏Ìï¥Ïïº Ìï©ÎãàÎã§.
        NVIDIA ÏÇ¨Ïù¥Ìä∏ÏóêÏÑú Î≤ÑÏ†ÑÎ≥Ñ ÏÑ§Ïπò Í∞ÄÏù¥ÎìúÎ•º Ï∞∏Í≥†ÌïòÎ©¥ ÎçîÏö± Ï†ïÌôïÌïú ÏÑ§ÏπòÍ∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§.
        Ï£ºÏùòÏÇ¨Ìï≠: Ìò∏ÌôòÏÑ±ÏùÑ ÏûòÎ™ª ÎßûÏ∂îÎ©¥ ÏòàÏÉÅÏπò Î™ªÌïú ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.
        ÎèÑÏõÄÏù¥ ÎêòÏÖ®Í∏∏ Î∞îÎûçÎãàÎã§! ÌïÑÏöîÏóê Îî∞Îùº DockerfileÏùÑ ÏàòÏ†ïÌïòÏó¨ ÎÇòÎßåÏùò Docker Ïù¥ÎØ∏ÏßÄÎ•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî. üöÄ """

        print(instructions)

    subdir = 'dockerfile_gpu' if args.gpu else 'dockerfile_cpu'
    dockerfile_src = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'Dockerfiles', 'register', subdir, 'Dockerfile')
    dockerfile_dest = os.path.join(os.getcwd(), 'Dockerfile')
    print_ubuntu_package_instructions()
    print_cuda_instructions()
    if os.path.exists(dockerfile_src):
        shutil.copy2(dockerfile_src, dockerfile_dest)
        print(f"Dockerfile has been copied to the current path.")
    else:
        print("Error: Dockerfile not found.")

def main():
    if len(sys.argv) > 1:
        if sys.argv[-1] in ['-v', '--version']:
            print(__version__)
            return
        if sys.argv[1] in ['-h', '--help']:
            pass
        elif sys.argv[1] not in ['run', 'history', 'register', 'update', 'delete', 'template', 'example', 'docker', 'server']:  # v1 Ìò∏Ìôò
            sys.argv.insert(1, 'run')
    else:
        sys.argv.insert(1, 'run')

    parser = argparse.ArgumentParser('alo', description='ALO(AI Learning Organizer)')
    parser.add_argument('-v', '--version', action='version', version=__version__)
    subparsers = parser.add_subparsers(dest='command')

    cmd_exec = subparsers.add_parser('run', description='Run alo')
    cmd_exec.add_argument('--name', type=str, help='name of solution')
    cmd_exec.add_argument('--mode', type=str, default='all', choices=['train', 'inference', 'all'], help='ALO mode: train, inference, all')
    cmd_exec.add_argument("--loop", dest='loop', action='store_true', help="On/off infinite loop: True, False")
    cmd_exec.add_argument("--computing", type=str, default="local", choices=['local', 'daemon', 'server'], help="training resource: local, ...")
    cmd_exec.add_argument('--config', type=str, help='path of experimental_plan.yaml')
    cmd_exec.add_argument('--system', type=str, help='path of solution_metadata.yaml')
    cmd_exec.add_argument('--git.url', type=str, help='url of git repository')
    cmd_exec.add_argument('--git.branch', type=str, help='branch name of git repository')
    cmd_exec.add_argument('--log_level', type=str, default="DEBUG", choices=['NOTSET', 'DEBUG', 'INFO', 'WARNING', 'ERROR'], help='log level')
    cmd_exec.add_argument("--server", dest='server', action='store_true', help="On/off server mode: True, False")
    cmd_exec.add_argument("--port", type=int, default=8000, help="Port for API server (default: 8000)")

    cmd_history = subparsers.add_parser('history', description='Run history')
    cmd_history.add_argument('--config', type=str, help='path of experimental_plan.yaml')
    cmd_history.add_argument('--mode', default=['train', 'inference'], choices=['train', 'inference'], nargs='+', help='train, inference')
    cmd_history.add_argument("--head", type=int, default=None, help="output the last part of history")
    cmd_history.add_argument("--tail", type=int, default=None, help="output the first part of history")

    cmd_template = subparsers.add_parser('template', description='Create titanic template')

    cmd_register = subparsers.add_parser('register', description='Create new solution')
    cmd_register.add_argument('--id', required=False, help='user id of AI conductor')
    cmd_register.add_argument('--password', required=False, help='user password of AI conductor')

    cmd_update = subparsers.add_parser('update', description='Update a solution')
    cmd_update.add_argument('--id', required=True, help='user id of AI conductor')
    cmd_update.add_argument('--password', required=True, help='user password of AI conductor')

    cmd_delete = subparsers.add_parser('delete', description='Delete a solution')
    cmd_delete.add_argument('--id', required=True, help='user id of AI conductor')
    cmd_delete.add_argument('--password', required=True, help='user password of AI conductor')

    cmd_example = subparsers.add_parser('example', description='Create ALO example')
    cmd_example.add_argument('--name', default='titanic', choices=['titanic'], help='Example of ALO')

    # Add docker command parser
    cmd_docker = subparsers.add_parser('docker', description='Create Dockerfile for ALO')
    cmd_docker.add_argument('--gpu', action='store_true', help='Provide GPU Dockerfile sample')

    # cmd_server = subparsers.add_parser('server', description='Run ALO as API server')
    # cmd_server.add_argument('--port', type=int, default=8000, help='Port for API server')
    # cmd_server.add_argument('--host', type=str, default="0.0.0.0", help='Host for API server')

    args = parser.parse_args()

    commands = {'run': __run,
                'template': __template,
                'history': __history,
                'register': __register,
                'update': __update,
                'delete': __delete,
                'example': __example,
                'docker': __docker,
                # 'server': __server
                }
    commands[args.command](args)
