# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import xml.etree.ElementTree as ET
from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.utilities.xml_utilities import XmlUtilities
from apimatic_core.types.xml_attributes import XmlAttributes
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum
from awss3.models.access_control_policy import AccessControlPolicy
from awss3.models.access_control_policy_1 import AccessControlPolicy1


class ACLController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(ACLController, self).__init__(config)

    def bucket_acl(self,
                   acl,
                   x_amz_content_sha_256,
                   bucket):
        """Does a GET request to /{bucket}.

        This implementation of the GET operation uses the acl subresource to
        return the access control list (ACL) of a bucket. To use GET to return
        the ACL of the bucket, you must have READ_ACP access to the bucket. If
        READ_ACP permission is granted to the anonymous user, you can return
        the ACL of the bucket without using an authorization header. 

        Args:
            acl (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            AccessControlPolicy: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('acl')
                         .value(acl))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/xml'))
        ).response(
            ResponseHandler()
            .deserializer(XmlUtilities.deserialize_xml)
            .deserialize_into(AccessControlPolicy)
            .is_xml_response(True)
        ).execute()

    def bucket_acl_1(self,
                     acl,
                     body,
                     bucket):
        """Does a PUT request to /{bucket}.

        Sets the permissions on an existing bucket using access control lists
        (ACL). For more information, see Using ACLs. To set the ACL of a
        bucket, you must have WRITE_ACP permission. 

        Args:
            acl (str): The request query parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('acl')
                         .value(acl))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def acl(self,
            acl,
            bucket,
            key):
        """Does a GET request to /{bucket}/{key}.

        Returns the access control list (ACL) of an object. To use this
        operation, you must have READ_ACP access to the object. 

        Args:
            acl (str): The request query parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            AccessControlPolicy1: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('acl')
                         .value(acl))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/xml'))
        ).response(
            ResponseHandler()
            .deserializer(XmlUtilities.deserialize_xml)
            .deserialize_into(AccessControlPolicy1)
            .is_xml_response(True)
        ).execute()

    def acl_1(self,
              acl,
              body,
              bucket,
              key):
        """Does a PUT request to /{bucket}/{key}.

        Returns the access control list (ACL) of an object. To use this
        operation, you must have READ_ACP access to the object. 

        Args:
            acl (str): The request query parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('acl')
                         .value(acl))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
