# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import xml.etree.ElementTree as ET
from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.utilities.xml_utilities import XmlUtilities
from apimatic_core.types.xml_attributes import XmlAttributes
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum


class LocationController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(LocationController, self).__init__(config)

    def bucket_location(self,
                        location,
                        x_amz_content_sha_256,
                        bucket):
        """Does a GET request to /{bucket}.

        Returns the region the bucket resides in. You set the bucket's region
        using the LocationConstraint request parameter in a CreateBucket
        request. For more information, see CreateBucket. 

        Args:
            location (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('location')
                         .value(location))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/xml'))
        ).response(
            ResponseHandler()
            .deserializer(XmlUtilities.deserialize_xml)
            .is_xml_response(True)
        ).execute()
