# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum
from awss3.models.bucket_policy import BucketPolicy


class PolicyController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(PolicyController, self).__init__(config)

    def bucket_policy(self,
                      policy,
                      x_amz_content_sha_256,
                      bucket):
        """Does a GET request to /{bucket}.

        Returns the policy of a specified bucket. If you are using an identity
        other than the root user of the AWS account that owns the bucket, the
        calling identity must have the GetBucketPolicy permissions on the
        specified bucket and belong to the bucket owner's account in order to
        use this operation. 

        Args:
            policy (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            BucketPolicy: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('policy')
                         .value(policy))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(BucketPolicy.from_dictionary)
        ).execute()

    def bucket_policy_1(self,
                        policy,
                        content_md_5,
                        x_amz_confirm_remove_self_bucket_access,
                        body,
                        bucket):
        """Does a PUT request to /{bucket}.

        Applies an Amazon S3 bucket policy to an Amazon S3 bucket. If you are
        using an identity other than the root user of the AWS account that
        owns the bucket, the calling identity must have the PutBucketPolicy
        permissions on the specified bucket and belong to the bucket owner's
        account in order to use this operation. 

        Args:
            policy (str): The request query parameter.
            content_md_5 (str): The request header parameter.
            x_amz_confirm_remove_self_bucket_access (str): The request header
                parameter.
            body (BucketPolicyRequest): The request body parameter.
            bucket (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('policy')
                         .value(policy))
            .header_param(Parameter()
                          .key('Content-MD5')
                          .value(content_md_5))
            .header_param(Parameter()
                          .key('x-amz-confirm-remove-self-bucket-access')
                          .value(x_amz_confirm_remove_self_bucket_access))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def bucket_policy_status(self,
                             policy_status,
                             x_amz_content_sha_256,
                             bucket):
        """Does a GET request to /{bucket}.

        Retrieves the policy status for an Amazon S3 bucket, indicating
        whether the bucket is public. In order to use this operation, you must
        have the s3:GetBucketPolicyStatus permission. For more information
        about Amazon S3 permissions, see Specifying Permissions in a Policy. 

        Args:
            policy_status (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('policyStatus')
                         .value(policy_status))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def delete_bucket_policy(self,
                             policy,
                             bucket):
        """Does a DELETE request to /{bucket}.

        This implementation of the DELETE operation uses the policysubresource
        to delete the policy of a specified bucket. If you are using an
        identity other than the root user of the AWS account that owns the
        bucket, the calling identity must have the DeleteBucketPolicy
        permissions on the specified bucket and belong to the bucket owner's
        account in order to use this operation. 

        Args:
            policy (str): The request query parameter.
            bucket (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('policy')
                         .value(policy))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
