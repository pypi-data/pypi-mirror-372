# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import xml.etree.ElementTree as ET
from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.utilities.xml_utilities import XmlUtilities
from apimatic_core.types.xml_attributes import XmlAttributes
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum
from awss3.models.list_bucket_result_1 import ListBucketResult1
from awss3.exceptions.api_exception import APIException


class ObjectsController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(ObjectsController, self).__init__(config)

    def object(self,
               part_number,
               version_id,
               x_amz_content_sha_256,
               bucket,
               key):
        """Does a GET request to /{bucket}/{key}.

        The HEAD operation retrieves metadata from an object without returning
        the object itself. This operation is useful if you're only interested
        in an object's metadata. To use HEAD, you must have READ access to the
        object. 

        Args:
            part_number (str): The request query parameter.
            version_id (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('PartNumber')
                         .value(part_number))
            .query_param(Parameter()
                         .key('VersionId')
                         .value(version_id))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
        ).execute()

    def objects_v_1(self,
                    delimiter,
                    encoding_type,
                    marker,
                    max_keys,
                    prefix,
                    x_amz_content_sha_256,
                    bucket):
        """Does a GET request to /{bucket}.

        Returns some or all (up to 1000) of the objects in a bucket. You can
        use the request parameters as selection criteria to return a subset of
        the objects in a bucket. A 200 OK response can contain valid or
        invalid XML. Be sure to design your application to parse the contents
        of the response and handle it appropriately. 

        Args:
            delimiter (str): The request query parameter.
            encoding_type (str): The request query parameter.
            marker (str): The request query parameter.
            max_keys (str): The request query parameter.
            prefix (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            ListBucketResult1: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('Delimiter')
                         .value(delimiter))
            .query_param(Parameter()
                         .key('EncodingType')
                         .value(encoding_type))
            .query_param(Parameter()
                         .key('Marker')
                         .value(marker))
            .query_param(Parameter()
                         .key('MaxKeys')
                         .value(max_keys))
            .query_param(Parameter()
                         .key('Prefix')
                         .value(prefix))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/xml'))
        ).response(
            ResponseHandler()
            .deserializer(XmlUtilities.deserialize_xml)
            .deserialize_into(ListBucketResult1)
            .is_xml_response(True)
        ).execute()

    def objects_v_2(self,
                    list_type,
                    continuation_token,
                    delimiter,
                    encoding_type,
                    fetch_owner,
                    max_keys,
                    prefix,
                    start_after,
                    x_amz_content_sha_256,
                    bucket):
        """Does a GET request to /{bucket}.

        Returns some or all (up to 1000) of the objects in a bucket. You can
        use the request parameters as selection criteria to return a subset of
        the objects in a bucket. A 200 OK response can contain valid or
        invalid XML. Be sure to design your application to parse the contents
        of the response and handle it appropriately. 

        Args:
            list_type (int): The request query parameter.
            continuation_token (str): The request query parameter.
            delimiter (str): The request query parameter.
            encoding_type (str): The request query parameter.
            fetch_owner (str): The request query parameter.
            max_keys (str): The request query parameter.
            prefix (str): The request query parameter.
            start_after (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('list-type')
                         .value(list_type))
            .query_param(Parameter()
                         .key('ContinuationToken')
                         .value(continuation_token))
            .query_param(Parameter()
                         .key('Delimiter')
                         .value(delimiter))
            .query_param(Parameter()
                         .key('EncodingType')
                         .value(encoding_type))
            .query_param(Parameter()
                         .key('FetchOwner')
                         .value(fetch_owner))
            .query_param(Parameter()
                         .key('MaxKeys')
                         .value(max_keys))
            .query_param(Parameter()
                         .key('Prefix')
                         .value(prefix))
            .query_param(Parameter()
                         .key('StartAfter')
                         .value(start_after))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).execute()

    def object_1(self,
                 x_amz_content_sha_256,
                 bucket,
                 key):
        """Does a GET request to /{bucket}/{key}.

        Retrieves objects from Amazon S3. To use GET, you must have READ
        access to the object. If you grant READ access to the anonymous user,
        you can return the object without using an authorization header. 

        Args:
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
        ).execute()

    def parts(self,
              max_parts,
              part_number_marker,
              upload_id,
              x_amz_content_sha_256,
              bucket,
              key):
        """Does a GET request to /{bucket}/{key}.

        Lists the parts that have been uploaded for a specific multipart
        upload. This operation must include the upload ID, which you obtain by
        sending the initiate multipart upload request (see
        CreateMultipartUpload). This request returns a maximum of 1,000
        uploaded parts. The default number of parts returned is 1,000 parts.
        You can restrict the number of parts returned by specifying the
        max-parts request parameter. If your multipart upload consists of more
        than 1,000 parts, the response returns an IsTruncated field with the
        value of true, and a NextPartNumberMarker element. In subsequent
        ListParts requests you can include the part-number-marker query string
        parameter and set its value to the NextPartNumberMarker field value
        from the previous response. 

        Args:
            max_parts (str): The request query parameter.
            part_number_marker (str): The request query parameter.
            upload_id (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('MaxParts')
                         .value(max_parts))
            .query_param(Parameter()
                         .key('PartNumberMarker')
                         .value(part_number_marker))
            .query_param(Parameter()
                         .key('UploadId')
                         .value(upload_id))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
        ).execute()

    def copy_object(self,
                    x_amz_content_sha_256,
                    body,
                    bucket,
                    key):
        """Does a PUT request to /{bucket}/{key}/.

        Creates a copy of an object that is already stored in Amazon S3.

        Args:
            x_amz_content_sha_256 (str): The request header parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}/')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def delete_object(self,
                      version_id,
                      x_amz_content_sha_256,
                      bucket,
                      key):
        """Does a DELETE request to /{bucket}/{key}.

        Removes the null version (if there is one) of an object and inserts a
        delete marker, which becomes the latest version of the object. If
        there isn't a null version, Amazon S3 does not remove any objects. 

        Args:
            version_id (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('VersionId')
                         .value(version_id))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
        ).execute()

    def delete_objects(self,
                       delete,
                       x_amz_content_sha_256,
                       body,
                       bucket):
        """Does a DELETE request to /{bucket}.

        This operation enables you to delete multiple objects from a bucket
        using a single HTTP request. If you know the object keys that you want
        to delete, then this operation provides a suitable alternative to
        sending individual delete requests, reducing per-request overhead. 

        Args:
            delete (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('delete')
                         .value(delete))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).execute()
