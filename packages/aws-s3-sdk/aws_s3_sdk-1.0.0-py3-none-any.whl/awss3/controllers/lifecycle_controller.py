# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum


class LifecycleController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(LifecycleController, self).__init__(config)

    def bucket_lifecycle(self,
                         lifecycle,
                         x_amz_content_sha_256,
                         bucket):
        """Does a GET request to /{bucket}.

        Returns the lifecycle configuration information set on the bucket. For
        information about lifecycle configuration, see Object Lifecycle
        Management.

        Args:
            lifecycle (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('lifecycle')
                         .value(lifecycle))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def delete_bucket_lifecycle(self,
                                lifecycle,
                                bucket):
        """Does a DELETE request to /{bucket}.

        Deletes the lifecycle configuration from the specified bucket. Amazon
        S3 removes all the lifecycle configuration rules in the lifecycle
        subresource associated with the bucket. Your objects never expire, and
        Amazon S3 no longer automatically deletes any objects on the basis of
        rules contained in the deleted lifecycle configuration. 

        Args:
            lifecycle (str): The request query parameter.
            bucket (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('lifecycle')
                         .value(lifecycle))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def bucket_lifecycle_1(self,
                           lifecycle,
                           content_md_5,
                           body,
                           bucket):
        """Does a PUT request to /{bucket}.

        Creates a new lifecycle configuration for the bucket or replaces an
        existing lifecycle configuration.

        Args:
            lifecycle (str): The request query parameter.
            content_md_5 (str): The request header parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('lifecycle')
                         .value(lifecycle))
            .header_param(Parameter()
                          .key('Content-MD5')
                          .value(content_md_5))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
