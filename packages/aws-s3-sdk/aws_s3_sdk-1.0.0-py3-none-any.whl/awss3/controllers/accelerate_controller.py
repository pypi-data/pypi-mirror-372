# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import xml.etree.ElementTree as ET
from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.utilities.xml_utilities import XmlUtilities
from apimatic_core.types.xml_attributes import XmlAttributes
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum
from awss3.models.list_bucket_result import ListBucketResult


class AccelerateController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(AccelerateController, self).__init__(config)

    def bucket_accelerate_configuration(self,
                                        accelerate,
                                        body,
                                        bucket):
        """Does a PUT request to /{bucket}.

        Sets the accelerate configuration of an existing bucket. Amazon S3
        Transfer Acceleration is a bucket-level feature that enables you to
        perform faster data transfers to Amazon S3. 

        Args:
            accelerate (str): The request query parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('accelerate')
                         .value(accelerate))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def bucket_accelerate_configuration_1(self,
                                          accelerate,
                                          bucket):
        """Does a GET request to /{bucket}.

        Sets the accelerate configuration of an existing bucket. Amazon S3
        Transfer Acceleration is a bucket-level feature that enables you to
        perform faster data transfers to Amazon S3. 

        Args:
            accelerate (str): The request query parameter.
            bucket (str): The request template parameter.

        Returns:
            ListBucketResult: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('accelerate')
                         .value(accelerate))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/xml'))
        ).response(
            ResponseHandler()
            .deserializer(XmlUtilities.deserialize_xml)
            .deserialize_into(ListBucketResult)
            .is_xml_response(True)
        ).execute()

    def get_bucket_accelerate_configuration(self,
                                            accelerate,
                                            x_amz_content_sha_256,
                                            bucket):
        """Does a DELETE request to /{bucket}.

        This implementation of the GET operation uses the accelerate
        subresource to return the Transfer Acceleration state of a bucket,
        which is either Enabled or Suspended. Amazon S3 Transfer Acceleration
        is a bucket-level feature that enables you to perform faster data
        transfers to and from Amazon S3. 

        Args:
            accelerate (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('accelerate')
                         .value(accelerate))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).execute()
