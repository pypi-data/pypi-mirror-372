# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import xml.etree.ElementTree as ET
from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.utilities.file_wrapper import FileWrapper
from awss3.utilities.xml_utilities import XmlUtilities
from apimatic_core.types.xml_attributes import XmlAttributes
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum
from awss3.models.list_multipart_uploads_result import ListMultipartUploadsResult


class UploadsController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(UploadsController, self).__init__(config)

    def create_multipart(self,
                         uploads,
                         x_amz_content_sha_256,
                         file,
                         bucket,
                         key):
        """Does a POST request to /{bucket}/{key}.

        This operation initiates a multipart upload and returns an upload ID.
        This upload ID is used to associate all of the parts in the specific
        multipart upload. You specify this upload ID in each of your
        subsequent upload part requests (see UploadPart). You also include
        this upload ID in the final request to either complete or abort the
        multipart upload request. 

        Args:
            uploads (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            file (typing.BinaryIO): The request form parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('uploads')
                         .value(uploads))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .multipart_param(Parameter()
                             .key('File')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
        ).execute()

    def multipart(self,
                  uploads,
                  delimiter,
                  encoding_type,
                  key_marker,
                  max_uploads,
                  prefix,
                  upload_id_marker,
                  x_amz_content_sha_256,
                  bucket):
        """Does a GET request to /{bucket}.

        This operation lists in-progress multipart uploads. An in-progress
        multipart upload is a multipart upload that has been initiated using
        the Initiate Multipart Upload request, but has not yet been completed
        or aborted. 

        Args:
            uploads (str): The request query parameter.
            delimiter (str): The request query parameter.
            encoding_type (str): The request query parameter.
            key_marker (str): The request query parameter.
            max_uploads (str): The request query parameter.
            prefix (str): The request query parameter.
            upload_id_marker (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            ListMultipartUploadsResult: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('uploads')
                         .value(uploads))
            .query_param(Parameter()
                         .key('Delimiter')
                         .value(delimiter))
            .query_param(Parameter()
                         .key('EncodingType')
                         .value(encoding_type))
            .query_param(Parameter()
                         .key('KeyMarker')
                         .value(key_marker))
            .query_param(Parameter()
                         .key('MaxUploads')
                         .value(max_uploads))
            .query_param(Parameter()
                         .key('Prefix')
                         .value(prefix))
            .query_param(Parameter()
                         .key('UploadIdMarker')
                         .value(upload_id_marker))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/xml'))
        ).response(
            ResponseHandler()
            .deserializer(XmlUtilities.deserialize_xml)
            .deserialize_into(ListMultipartUploadsResult)
            .is_xml_response(True)
        ).execute()

    def complete_multipart(self,
                           upload_id,
                           x_amz_content_sha_256,
                           body,
                           bucket,
                           key):
        """Does a POST request to /{bucket}/{key}.

        Completes a multipart upload by assembling previously uploaded parts.

        Args:
            upload_id (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('UploadId')
                         .value(upload_id))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
        ).execute()

    def part(self,
             upload_id,
             x_amz_content_sha_256,
             body,
             bucket,
             key):
        """Does a PUT request to /{bucket}/{key}.

        Completes a multipart upload by assembling previously uploaded parts.

        Args:
            upload_id (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('UploadId')
                         .value(upload_id))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
        ).execute()

    def part_copy(self,
                  upload_id,
                  part_number,
                  x_amz_content_sha_256,
                  body,
                  bucket,
                  key):
        """Does a PUT request to /{bucket}/{key}.

        Completes a multipart upload by assembling previously uploaded parts.

        Args:
            upload_id (str): The request query parameter.
            part_number (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('UploadId')
                         .value(upload_id))
            .query_param(Parameter()
                         .key('PartNumber')
                         .value(part_number))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
        ).execute()

    def abort_multipart(self,
                        upload_id,
                        x_amz_content_sha_256,
                        body,
                        bucket,
                        key):
        """Does a DELETE request to /{bucket}/{key}.

        Completes a multipart upload by assembling previously uploaded parts.

        Args:
            upload_id (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.
            key (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}/{key}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('UploadId')
                         .value(upload_id))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('key')
                            .value(key)
                            .should_encode(True))
        ).execute()
