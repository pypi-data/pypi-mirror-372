# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.models.grantee_1 import Grantee1
from awss3.utilities.xml_utilities import XmlUtilities


class Grant1(object):

    """Implementation of the 'Grant1' model.

    Attributes:
        grantee (Grantee1): The model property of type Grantee1.
        permission (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "grantee": 'Grantee',
        "permission": 'Permission'
    }

    def __init__(self,
                 grantee=None,
                 permission=None):
        """Constructor for the Grant1 class"""

        # Initialize members of the class
        self.grantee = grantee 
        self.permission = permission 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        grantee = Grantee1.from_dictionary(dictionary.get('Grantee')) if dictionary.get('Grantee') else None
        permission = dictionary.get("Permission") if dictionary.get("Permission") else None
        # Return an object of this model
        return cls(grantee,
                   permission)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        grantee = XmlUtilities.value_from_xml_element(root.find('Grantee'), Grantee1)
        permission = XmlUtilities.value_from_xml_element(root.find('Permission'), str)

        return cls(grantee,
                   permission)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.grantee, 'Grantee')
        XmlUtilities.add_as_subelement(root, self.permission, 'Permission')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'grantee={self.grantee!r}, '
                f'permission={self.permission!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'grantee={self.grantee!s}, '
                f'permission={self.permission!s})')
