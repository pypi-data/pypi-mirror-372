# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.models.arn_like import ArnLike
from awss3.models.string_equals import StringEquals
from awss3.utilities.xml_utilities import XmlUtilities


class Condition(object):

    """Implementation of the 'Condition' model.

    Attributes:
        string_equals (StringEquals): The model property of type StringEquals.
        arn_like (ArnLike): The model property of type ArnLike.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "string_equals": 'StringEquals',
        "arn_like": 'ArnLike'
    }

    def __init__(self,
                 string_equals=None,
                 arn_like=None):
        """Constructor for the Condition class"""

        # Initialize members of the class
        self.string_equals = string_equals 
        self.arn_like = arn_like 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        string_equals = StringEquals.from_dictionary(dictionary.get('StringEquals')) if dictionary.get('StringEquals') else None
        arn_like = ArnLike.from_dictionary(dictionary.get('ArnLike')) if dictionary.get('ArnLike') else None
        # Return an object of this model
        return cls(string_equals,
                   arn_like)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        string_equals = XmlUtilities.value_from_xml_element(root.find('StringEquals'), StringEquals)
        arn_like = XmlUtilities.value_from_xml_element(root.find('ArnLike'), ArnLike)

        return cls(string_equals,
                   arn_like)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.string_equals, 'StringEquals')
        XmlUtilities.add_as_subelement(root, self.arn_like, 'ArnLike')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'string_equals={self.string_equals!r}, '
                f'arn_like={self.arn_like!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'string_equals={self.string_equals!s}, '
                f'arn_like={self.arn_like!s})')
