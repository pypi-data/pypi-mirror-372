# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.models.version import Version
from awss3.utilities.xml_utilities import XmlUtilities


class ListVersionsResult(object):

    """Implementation of the 'ListVersionsResult' model.

    Attributes:
        name (str): The model property of type str.
        prefix (str): The model property of type str.
        key_marker (str): The model property of type str.
        version_id_marker (str): The model property of type str.
        max_keys (int): The model property of type int.
        is_truncated (bool): The model property of type bool.
        version (List[Version]): The model property of type List[Version].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'Name',
        "prefix": 'Prefix',
        "key_marker": 'KeyMarker',
        "version_id_marker": 'VersionIdMarker',
        "max_keys": 'MaxKeys',
        "is_truncated": 'IsTruncated',
        "version": 'Version'
    }

    def __init__(self,
                 name=None,
                 prefix=None,
                 key_marker=None,
                 version_id_marker=None,
                 max_keys=None,
                 is_truncated=None,
                 version=None):
        """Constructor for the ListVersionsResult class"""

        # Initialize members of the class
        self.name = name 
        self.prefix = prefix 
        self.key_marker = key_marker 
        self.version_id_marker = version_id_marker 
        self.max_keys = max_keys 
        self.is_truncated = is_truncated 
        self.version = version 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("Name") if dictionary.get("Name") else None
        prefix = dictionary.get("Prefix") if dictionary.get("Prefix") else None
        key_marker = dictionary.get("KeyMarker") if dictionary.get("KeyMarker") else None
        version_id_marker = dictionary.get("VersionIdMarker") if dictionary.get("VersionIdMarker") else None
        max_keys = dictionary.get("MaxKeys") if dictionary.get("MaxKeys") else None
        is_truncated = dictionary.get("IsTruncated") if "IsTruncated" in dictionary.keys() else None
        version = None
        if dictionary.get('Version') is not None:
            version = [Version.from_dictionary(x) for x in dictionary.get('Version')]
        # Return an object of this model
        return cls(name,
                   prefix,
                   key_marker,
                   version_id_marker,
                   max_keys,
                   is_truncated,
                   version)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        name = XmlUtilities.value_from_xml_element(root.find('Name'), str)
        prefix = XmlUtilities.value_from_xml_element(root.find('Prefix'), str)
        key_marker = XmlUtilities.value_from_xml_element(root.find('KeyMarker'), str)
        version_id_marker = XmlUtilities.value_from_xml_element(root.find('VersionIdMarker'), str)
        max_keys = XmlUtilities.value_from_xml_element(root.find('MaxKeys'), int)
        is_truncated = XmlUtilities.value_from_xml_element(root.find('IsTruncated'), bool)
        version = XmlUtilities.list_from_xml_element(root, 'Version', Version)

        return cls(name,
                   prefix,
                   key_marker,
                   version_id_marker,
                   max_keys,
                   is_truncated,
                   version)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.name, 'Name')
        XmlUtilities.add_as_subelement(root, self.prefix, 'Prefix')
        XmlUtilities.add_as_subelement(root, self.key_marker, 'KeyMarker')
        XmlUtilities.add_as_subelement(root, self.version_id_marker, 'VersionIdMarker')
        XmlUtilities.add_as_subelement(root, self.max_keys, 'MaxKeys')
        XmlUtilities.add_as_subelement(root, self.is_truncated, 'IsTruncated')
        XmlUtilities.add_list_as_subelement(root, self.version, 'Version')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'prefix={self.prefix!r}, '
                f'key_marker={self.key_marker!r}, '
                f'version_id_marker={self.version_id_marker!r}, '
                f'max_keys={self.max_keys!r}, '
                f'is_truncated={self.is_truncated!r}, '
                f'version={self.version!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'prefix={self.prefix!s}, '
                f'key_marker={self.key_marker!s}, '
                f'version_id_marker={self.version_id_marker!s}, '
                f'max_keys={self.max_keys!s}, '
                f'is_truncated={self.is_truncated!s}, '
                f'version={self.version!s})')
