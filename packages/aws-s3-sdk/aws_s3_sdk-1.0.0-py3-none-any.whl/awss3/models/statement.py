# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.models.condition import Condition
from awss3.models.principal import Principal
from awss3.utilities.xml_utilities import XmlUtilities


class Statement(object):

    """Implementation of the 'Statement' model.

    Attributes:
        sid (str): The model property of type str.
        effect (str): The model property of type str.
        principal (Principal): The model property of type Principal.
        action (str): The model property of type str.
        resource (str): The model property of type str.
        condition (Condition): The model property of type Condition.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "sid": 'Sid',
        "effect": 'Effect',
        "principal": 'Principal',
        "action": 'Action',
        "resource": 'Resource',
        "condition": 'Condition'
    }

    def __init__(self,
                 sid=None,
                 effect=None,
                 principal=None,
                 action=None,
                 resource=None,
                 condition=None):
        """Constructor for the Statement class"""

        # Initialize members of the class
        self.sid = sid 
        self.effect = effect 
        self.principal = principal 
        self.action = action 
        self.resource = resource 
        self.condition = condition 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        sid = dictionary.get("Sid") if dictionary.get("Sid") else None
        effect = dictionary.get("Effect") if dictionary.get("Effect") else None
        principal = Principal.from_dictionary(dictionary.get('Principal')) if dictionary.get('Principal') else None
        action = dictionary.get("Action") if dictionary.get("Action") else None
        resource = dictionary.get("Resource") if dictionary.get("Resource") else None
        condition = Condition.from_dictionary(dictionary.get('Condition')) if dictionary.get('Condition') else None
        # Return an object of this model
        return cls(sid,
                   effect,
                   principal,
                   action,
                   resource,
                   condition)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        sid = XmlUtilities.value_from_xml_element(root.find('Sid'), str)
        effect = XmlUtilities.value_from_xml_element(root.find('Effect'), str)
        principal = XmlUtilities.value_from_xml_element(root.find('Principal'), Principal)
        action = XmlUtilities.value_from_xml_element(root.find('Action'), str)
        resource = XmlUtilities.value_from_xml_element(root.find('Resource'), str)
        condition = XmlUtilities.value_from_xml_element(root.find('Condition'), Condition)

        return cls(sid,
                   effect,
                   principal,
                   action,
                   resource,
                   condition)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.sid, 'Sid')
        XmlUtilities.add_as_subelement(root, self.effect, 'Effect')
        XmlUtilities.add_as_subelement(root, self.principal, 'Principal')
        XmlUtilities.add_as_subelement(root, self.action, 'Action')
        XmlUtilities.add_as_subelement(root, self.resource, 'Resource')
        XmlUtilities.add_as_subelement(root, self.condition, 'Condition')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!r}, '
                f'effect={self.effect!r}, '
                f'principal={self.principal!r}, '
                f'action={self.action!r}, '
                f'resource={self.resource!r}, '
                f'condition={self.condition!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'sid={self.sid!s}, '
                f'effect={self.effect!s}, '
                f'principal={self.principal!s}, '
                f'action={self.action!s}, '
                f'resource={self.resource!s}, '
                f'condition={self.condition!s})')
