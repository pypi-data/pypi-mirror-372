# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from awss3.configuration import Configuration
from awss3.controllers.base_controller import BaseController
from awss3.configuration import Environment
from awss3.controllers.accelerate_controller import AccelerateController
from awss3.controllers.acl_controller import ACLController
from awss3.controllers.analytics_controller import AnalyticsController
from awss3.controllers.cors_controller import CORSController
from awss3.controllers.encryption_controller import EncryptionController
from awss3.controllers.inventory_controller import InventoryController
from awss3.controllers.lifecycle_controller import LifecycleController
from awss3.controllers.location_controller import LocationController
from awss3.controllers.logging_controller import LoggingController
from awss3.controllers.metrics_controller import MetricsController
from awss3.controllers.notifications_controller import NotificationsController
from awss3.controllers.payments_controller import PaymentsController
from awss3.controllers.policy_controller import PolicyController
from awss3.controllers.replication_controller import ReplicationController
from awss3.controllers.tagging_controller import TaggingController
from awss3.controllers.versioning_controller import VersioningController
from awss3.controllers.website_controller import WebsiteController
from awss3.controllers.buckets_controller import BucketsController
from awss3.controllers.legal_hold_controller import LegalHoldController
from awss3.controllers.lock_controller import LockController
from awss3.controllers.retention_controller import RetentionController
from awss3.controllers.torrent_controller import TorrentController
from awss3.controllers.uploads_controller import UploadsController
from awss3.controllers.versions_controller import VersionsController
from awss3.controllers.objects_controller import ObjectsController
from awss3.controllers.public_access_block_controller\
    import PublicAccessBlockController
from awss3.controllers.misc_controller import MiscController


class Awss3Client(object):
    @LazyProperty
    def accelerate(self):
        return AccelerateController(self.global_configuration)

    @LazyProperty
    def acl(self):
        return ACLController(self.global_configuration)

    @LazyProperty
    def analytics(self):
        return AnalyticsController(self.global_configuration)

    @LazyProperty
    def cors(self):
        return CORSController(self.global_configuration)

    @LazyProperty
    def encryption(self):
        return EncryptionController(self.global_configuration)

    @LazyProperty
    def inventory(self):
        return InventoryController(self.global_configuration)

    @LazyProperty
    def lifecycle(self):
        return LifecycleController(self.global_configuration)

    @LazyProperty
    def location(self):
        return LocationController(self.global_configuration)

    @LazyProperty
    def logging(self):
        return LoggingController(self.global_configuration)

    @LazyProperty
    def metrics(self):
        return MetricsController(self.global_configuration)

    @LazyProperty
    def notifications(self):
        return NotificationsController(self.global_configuration)

    @LazyProperty
    def payments(self):
        return PaymentsController(self.global_configuration)

    @LazyProperty
    def policy(self):
        return PolicyController(self.global_configuration)

    @LazyProperty
    def replication(self):
        return ReplicationController(self.global_configuration)

    @LazyProperty
    def tagging(self):
        return TaggingController(self.global_configuration)

    @LazyProperty
    def versioning(self):
        return VersioningController(self.global_configuration)

    @LazyProperty
    def website(self):
        return WebsiteController(self.global_configuration)

    @LazyProperty
    def buckets(self):
        return BucketsController(self.global_configuration)

    @LazyProperty
    def legal_hold(self):
        return LegalHoldController(self.global_configuration)

    @LazyProperty
    def lock(self):
        return LockController(self.global_configuration)

    @LazyProperty
    def retention(self):
        return RetentionController(self.global_configuration)

    @LazyProperty
    def torrent(self):
        return TorrentController(self.global_configuration)

    @LazyProperty
    def uploads(self):
        return UploadsController(self.global_configuration)

    @LazyProperty
    def versions(self):
        return VersionsController(self.global_configuration)

    @LazyProperty
    def objects(self):
        return ObjectsController(self.global_configuration)

    @LazyProperty
    def public_access_block(self):
        return PublicAccessBlockController(self.global_configuration)

    @LazyProperty
    def misc(self):
        return MiscController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

