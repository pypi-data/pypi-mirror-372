# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.utilities.xml_utilities import XmlUtilities


class StringEquals(object):

    """Implementation of the 'StringEquals' model.

    Attributes:
        aws_source_account (str): The model property of type str.
        s_3_x_amz_acl (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "aws_source_account": 'aws:SourceAccount',
        "s_3_x_amz_acl": 's3:x-amz-acl'
    }

    def __init__(self,
                 aws_source_account=None,
                 s_3_x_amz_acl=None):
        """Constructor for the StringEquals class"""

        # Initialize members of the class
        self.aws_source_account = aws_source_account 
        self.s_3_x_amz_acl = s_3_x_amz_acl 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        aws_source_account = dictionary.get("aws:SourceAccount") if dictionary.get("aws:SourceAccount") else None
        s_3_x_amz_acl = dictionary.get("s3:x-amz-acl") if dictionary.get("s3:x-amz-acl") else None
        # Return an object of this model
        return cls(aws_source_account,
                   s_3_x_amz_acl)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        aws_source_account = XmlUtilities.value_from_xml_element(root.find('aws:SourceAccount'), str)
        s_3_x_amz_acl = XmlUtilities.value_from_xml_element(root.find('s3:x-amz-acl'), str)

        return cls(aws_source_account,
                   s_3_x_amz_acl)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.aws_source_account, 'aws:SourceAccount')
        XmlUtilities.add_as_subelement(root, self.s_3_x_amz_acl, 's3:x-amz-acl')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'aws_source_account={self.aws_source_account!r}, '
                f's_3_x_amz_acl={self.s_3_x_amz_acl!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'aws_source_account={self.aws_source_account!s}, '
                f's_3_x_amz_acl={self.s_3_x_amz_acl!s})')
