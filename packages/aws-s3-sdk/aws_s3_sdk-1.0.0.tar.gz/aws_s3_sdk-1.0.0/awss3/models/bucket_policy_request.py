# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.models.statement import Statement
from awss3.utilities.xml_utilities import XmlUtilities


class BucketPolicyRequest(object):

    """Implementation of the 'Bucket Policy Request' model.

    Attributes:
        version (str): The model property of type str.
        id (str): The model property of type str.
        statement (List[Statement]): The model property of type
            List[Statement].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "version": 'Version',
        "id": 'Id',
        "statement": 'Statement'
    }

    def __init__(self,
                 version=None,
                 id=None,
                 statement=None):
        """Constructor for the BucketPolicyRequest class"""

        # Initialize members of the class
        self.version = version 
        self.id = id 
        self.statement = statement 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        version = dictionary.get("Version") if dictionary.get("Version") else None
        id = dictionary.get("Id") if dictionary.get("Id") else None
        statement = None
        if dictionary.get('Statement') is not None:
            statement = [Statement.from_dictionary(x) for x in dictionary.get('Statement')]
        # Return an object of this model
        return cls(version,
                   id,
                   statement)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        version = XmlUtilities.value_from_xml_element(root.find('Version'), str)
        id = XmlUtilities.value_from_xml_element(root.find('Id'), str)
        statement = XmlUtilities.list_from_xml_element(root, 'Statement', Statement)

        return cls(version,
                   id,
                   statement)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.version, 'Version')
        XmlUtilities.add_as_subelement(root, self.id, 'Id')
        XmlUtilities.add_list_as_subelement(root, self.statement, 'Statement')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'version={self.version!r}, '
                f'id={self.id!r}, '
                f'statement={self.statement!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'version={self.version!s}, '
                f'id={self.id!s}, '
                f'statement={self.statement!s})')
