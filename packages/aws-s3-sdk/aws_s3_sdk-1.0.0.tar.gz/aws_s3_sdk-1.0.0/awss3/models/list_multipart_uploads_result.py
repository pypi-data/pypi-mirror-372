# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.utilities.xml_utilities import XmlUtilities


class ListMultipartUploadsResult(object):

    """Implementation of the 'ListMultipartUploadsResult' model.

    Attributes:
        bucket (str): The model property of type str.
        key_marker (str): The model property of type str.
        upload_id_marker (str): The model property of type str.
        next_key_marker (str): The model property of type str.
        next_upload_id_marker (str): The model property of type str.
        max_uploads (int): The model property of type int.
        is_truncated (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "bucket": 'Bucket',
        "key_marker": 'KeyMarker',
        "upload_id_marker": 'UploadIdMarker',
        "next_key_marker": 'NextKeyMarker',
        "next_upload_id_marker": 'NextUploadIdMarker',
        "max_uploads": 'MaxUploads',
        "is_truncated": 'IsTruncated'
    }

    def __init__(self,
                 bucket=None,
                 key_marker=None,
                 upload_id_marker=None,
                 next_key_marker=None,
                 next_upload_id_marker=None,
                 max_uploads=None,
                 is_truncated=None):
        """Constructor for the ListMultipartUploadsResult class"""

        # Initialize members of the class
        self.bucket = bucket 
        self.key_marker = key_marker 
        self.upload_id_marker = upload_id_marker 
        self.next_key_marker = next_key_marker 
        self.next_upload_id_marker = next_upload_id_marker 
        self.max_uploads = max_uploads 
        self.is_truncated = is_truncated 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        bucket = dictionary.get("Bucket") if dictionary.get("Bucket") else None
        key_marker = dictionary.get("KeyMarker") if dictionary.get("KeyMarker") else None
        upload_id_marker = dictionary.get("UploadIdMarker") if dictionary.get("UploadIdMarker") else None
        next_key_marker = dictionary.get("NextKeyMarker") if dictionary.get("NextKeyMarker") else None
        next_upload_id_marker = dictionary.get("NextUploadIdMarker") if dictionary.get("NextUploadIdMarker") else None
        max_uploads = dictionary.get("MaxUploads") if dictionary.get("MaxUploads") else None
        is_truncated = dictionary.get("IsTruncated") if "IsTruncated" in dictionary.keys() else None
        # Return an object of this model
        return cls(bucket,
                   key_marker,
                   upload_id_marker,
                   next_key_marker,
                   next_upload_id_marker,
                   max_uploads,
                   is_truncated)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        bucket = XmlUtilities.value_from_xml_element(root.find('Bucket'), str)
        key_marker = XmlUtilities.value_from_xml_element(root.find('KeyMarker'), str)
        upload_id_marker = XmlUtilities.value_from_xml_element(root.find('UploadIdMarker'), str)
        next_key_marker = XmlUtilities.value_from_xml_element(root.find('NextKeyMarker'), str)
        next_upload_id_marker = XmlUtilities.value_from_xml_element(root.find('NextUploadIdMarker'), str)
        max_uploads = XmlUtilities.value_from_xml_element(root.find('MaxUploads'), int)
        is_truncated = XmlUtilities.value_from_xml_element(root.find('IsTruncated'), bool)

        return cls(bucket,
                   key_marker,
                   upload_id_marker,
                   next_key_marker,
                   next_upload_id_marker,
                   max_uploads,
                   is_truncated)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.bucket, 'Bucket')
        XmlUtilities.add_as_subelement(root, self.key_marker, 'KeyMarker')
        XmlUtilities.add_as_subelement(root, self.upload_id_marker, 'UploadIdMarker')
        XmlUtilities.add_as_subelement(root, self.next_key_marker, 'NextKeyMarker')
        XmlUtilities.add_as_subelement(root, self.next_upload_id_marker, 'NextUploadIdMarker')
        XmlUtilities.add_as_subelement(root, self.max_uploads, 'MaxUploads')
        XmlUtilities.add_as_subelement(root, self.is_truncated, 'IsTruncated')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'bucket={self.bucket!r}, '
                f'key_marker={self.key_marker!r}, '
                f'upload_id_marker={self.upload_id_marker!r}, '
                f'next_key_marker={self.next_key_marker!r}, '
                f'next_upload_id_marker={self.next_upload_id_marker!r}, '
                f'max_uploads={self.max_uploads!r}, '
                f'is_truncated={self.is_truncated!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'bucket={self.bucket!s}, '
                f'key_marker={self.key_marker!s}, '
                f'upload_id_marker={self.upload_id_marker!s}, '
                f'next_key_marker={self.next_key_marker!s}, '
                f'next_upload_id_marker={self.next_upload_id_marker!s}, '
                f'max_uploads={self.max_uploads!s}, '
                f'is_truncated={self.is_truncated!s})')
