# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.models.owner import Owner
from awss3.utilities.xml_utilities import XmlUtilities


class Version(object):

    """Implementation of the 'Version' model.

    Attributes:
        key (str): The model property of type str.
        version_id (str): The model property of type str.
        is_latest (bool): The model property of type bool.
        last_modified (str): The model property of type str.
        e_tag (str): The model property of type str.
        size (int): The model property of type int.
        owner (Owner): The model property of type Owner.
        storage_class (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "key": 'Key',
        "version_id": 'VersionId',
        "is_latest": 'IsLatest',
        "last_modified": 'LastModified',
        "e_tag": 'ETag',
        "size": 'Size',
        "owner": 'Owner',
        "storage_class": 'StorageClass'
    }

    def __init__(self,
                 key=None,
                 version_id=None,
                 is_latest=None,
                 last_modified=None,
                 e_tag=None,
                 size=None,
                 owner=None,
                 storage_class=None):
        """Constructor for the Version class"""

        # Initialize members of the class
        self.key = key 
        self.version_id = version_id 
        self.is_latest = is_latest 
        self.last_modified = last_modified 
        self.e_tag = e_tag 
        self.size = size 
        self.owner = owner 
        self.storage_class = storage_class 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        key = dictionary.get("Key") if dictionary.get("Key") else None
        version_id = dictionary.get("VersionId") if dictionary.get("VersionId") else None
        is_latest = dictionary.get("IsLatest") if "IsLatest" in dictionary.keys() else None
        last_modified = dictionary.get("LastModified") if dictionary.get("LastModified") else None
        e_tag = dictionary.get("ETag") if dictionary.get("ETag") else None
        size = dictionary.get("Size") if dictionary.get("Size") else None
        owner = Owner.from_dictionary(dictionary.get('Owner')) if dictionary.get('Owner') else None
        storage_class = dictionary.get("StorageClass") if dictionary.get("StorageClass") else None
        # Return an object of this model
        return cls(key,
                   version_id,
                   is_latest,
                   last_modified,
                   e_tag,
                   size,
                   owner,
                   storage_class)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        key = XmlUtilities.value_from_xml_element(root.find('Key'), str)
        version_id = XmlUtilities.value_from_xml_element(root.find('VersionId'), str)
        is_latest = XmlUtilities.value_from_xml_element(root.find('IsLatest'), bool)
        last_modified = XmlUtilities.value_from_xml_element(root.find('LastModified'), str)
        e_tag = XmlUtilities.value_from_xml_element(root.find('ETag'), str)
        size = XmlUtilities.value_from_xml_element(root.find('Size'), int)
        owner = XmlUtilities.value_from_xml_element(root.find('Owner'), Owner)
        storage_class = XmlUtilities.value_from_xml_element(root.find('StorageClass'), str)

        return cls(key,
                   version_id,
                   is_latest,
                   last_modified,
                   e_tag,
                   size,
                   owner,
                   storage_class)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.key, 'Key')
        XmlUtilities.add_as_subelement(root, self.version_id, 'VersionId')
        XmlUtilities.add_as_subelement(root, self.is_latest, 'IsLatest')
        XmlUtilities.add_as_subelement(root, self.last_modified, 'LastModified')
        XmlUtilities.add_as_subelement(root, self.e_tag, 'ETag')
        XmlUtilities.add_as_subelement(root, self.size, 'Size')
        XmlUtilities.add_as_subelement(root, self.owner, 'Owner')
        XmlUtilities.add_as_subelement(root, self.storage_class, 'StorageClass')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'key={self.key!r}, '
                f'version_id={self.version_id!r}, '
                f'is_latest={self.is_latest!r}, '
                f'last_modified={self.last_modified!r}, '
                f'e_tag={self.e_tag!r}, '
                f'size={self.size!r}, '
                f'owner={self.owner!r}, '
                f'storage_class={self.storage_class!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'key={self.key!s}, '
                f'version_id={self.version_id!s}, '
                f'is_latest={self.is_latest!s}, '
                f'last_modified={self.last_modified!s}, '
                f'e_tag={self.e_tag!s}, '
                f'size={self.size!s}, '
                f'owner={self.owner!s}, '
                f'storage_class={self.storage_class!s})')
