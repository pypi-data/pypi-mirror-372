# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.models.contents import Contents
from awss3.utilities.xml_utilities import XmlUtilities


class ListBucketResult1(object):

    """Implementation of the 'ListBucketResult1' model.

    Attributes:
        name (str): The model property of type str.
        prefix (str): The model property of type str.
        marker (str): The model property of type str.
        max_keys (int): The model property of type int.
        is_truncated (bool): The model property of type bool.
        contents (List[Contents]): The model property of type List[Contents].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'Name',
        "prefix": 'Prefix',
        "marker": 'Marker',
        "max_keys": 'MaxKeys',
        "is_truncated": 'IsTruncated',
        "contents": 'Contents'
    }

    def __init__(self,
                 name=None,
                 prefix=None,
                 marker=None,
                 max_keys=None,
                 is_truncated=None,
                 contents=None):
        """Constructor for the ListBucketResult1 class"""

        # Initialize members of the class
        self.name = name 
        self.prefix = prefix 
        self.marker = marker 
        self.max_keys = max_keys 
        self.is_truncated = is_truncated 
        self.contents = contents 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("Name") if dictionary.get("Name") else None
        prefix = dictionary.get("Prefix") if dictionary.get("Prefix") else None
        marker = dictionary.get("Marker") if dictionary.get("Marker") else None
        max_keys = dictionary.get("MaxKeys") if dictionary.get("MaxKeys") else None
        is_truncated = dictionary.get("IsTruncated") if "IsTruncated" in dictionary.keys() else None
        contents = None
        if dictionary.get('Contents') is not None:
            contents = [Contents.from_dictionary(x) for x in dictionary.get('Contents')]
        # Return an object of this model
        return cls(name,
                   prefix,
                   marker,
                   max_keys,
                   is_truncated,
                   contents)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        name = XmlUtilities.value_from_xml_element(root.find('Name'), str)
        prefix = XmlUtilities.value_from_xml_element(root.find('Prefix'), str)
        marker = XmlUtilities.value_from_xml_element(root.find('Marker'), str)
        max_keys = XmlUtilities.value_from_xml_element(root.find('MaxKeys'), int)
        is_truncated = XmlUtilities.value_from_xml_element(root.find('IsTruncated'), bool)
        contents = XmlUtilities.list_from_xml_element(root, 'Contents', Contents)

        return cls(name,
                   prefix,
                   marker,
                   max_keys,
                   is_truncated,
                   contents)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.name, 'Name')
        XmlUtilities.add_as_subelement(root, self.prefix, 'Prefix')
        XmlUtilities.add_as_subelement(root, self.marker, 'Marker')
        XmlUtilities.add_as_subelement(root, self.max_keys, 'MaxKeys')
        XmlUtilities.add_as_subelement(root, self.is_truncated, 'IsTruncated')
        XmlUtilities.add_list_as_subelement(root, self.contents, 'Contents')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!r}, '
                f'prefix={self.prefix!r}, '
                f'marker={self.marker!r}, '
                f'max_keys={self.max_keys!r}, '
                f'is_truncated={self.is_truncated!r}, '
                f'contents={self.contents!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={self.name!s}, '
                f'prefix={self.prefix!s}, '
                f'marker={self.marker!s}, '
                f'max_keys={self.max_keys!s}, '
                f'is_truncated={self.is_truncated!s}, '
                f'contents={self.contents!s})')
