# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.api_helper import APIHelper
from awss3.utilities.xml_utilities import XmlUtilities


class Grantee(object):

    """Implementation of the 'Grantee' model.

    Attributes:
        mtype (str): The model property of type str.
        id (str): The model property of type str.
        display_name (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'ID',
        "display_name": 'DisplayName',
        "mtype": 'type'
    }

    _optionals = [
        'mtype',
    ]

    def __init__(self,
                 id=None,
                 display_name=None,
                 mtype=APIHelper.SKIP):
        """Constructor for the Grantee class"""

        # Initialize members of the class
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        self.id = id 
        self.display_name = display_name 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("ID") if dictionary.get("ID") else None
        display_name = dictionary.get("DisplayName") if dictionary.get("DisplayName") else None
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   display_name,
                   mtype)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        id = XmlUtilities.value_from_xml_element(root.find('ID'), str)
        display_name = XmlUtilities.value_from_xml_element(root.find('DisplayName'), str)
        mtype = XmlUtilities.value_from_xml_attribute(root.get('type'), str)

        return cls(id,
                   display_name,
                   mtype)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.id, 'ID')
        XmlUtilities.add_as_subelement(root, self.display_name, 'DisplayName')
        XmlUtilities.add_as_attribute(root, self.mtype, 'type')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'id={self.id!r}, '
                f'display_name={self.display_name!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'id={self.id!s}, '
                f'display_name={self.display_name!s})')
