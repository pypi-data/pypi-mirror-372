# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.models.access_control_list import AccessControlList
from awss3.models.owner import Owner
from awss3.utilities.xml_utilities import XmlUtilities


class AccessControlPolicy(object):

    """Implementation of the 'AccessControlPolicy' model.

    Attributes:
        owner (Owner): The model property of type Owner.
        access_control_list (AccessControlList): The model property of type
            AccessControlList.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "owner": 'Owner',
        "access_control_list": 'AccessControlList'
    }

    def __init__(self,
                 owner=None,
                 access_control_list=None):
        """Constructor for the AccessControlPolicy class"""

        # Initialize members of the class
        self.owner = owner 
        self.access_control_list = access_control_list 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        owner = Owner.from_dictionary(dictionary.get('Owner')) if dictionary.get('Owner') else None
        access_control_list = AccessControlList.from_dictionary(dictionary.get('AccessControlList')) if dictionary.get('AccessControlList') else None
        # Return an object of this model
        return cls(owner,
                   access_control_list)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        owner = XmlUtilities.value_from_xml_element(root.find('Owner'), Owner)
        access_control_list = XmlUtilities.value_from_xml_element(root.find('AccessControlList'), AccessControlList)

        return cls(owner,
                   access_control_list)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_subelement(root, self.owner, 'Owner')
        XmlUtilities.add_as_subelement(root, self.access_control_list, 'AccessControlList')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'owner={self.owner!r}, '
                f'access_control_list={self.access_control_list!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'owner={self.owner!s}, '
                f'access_control_list={self.access_control_list!s})')
