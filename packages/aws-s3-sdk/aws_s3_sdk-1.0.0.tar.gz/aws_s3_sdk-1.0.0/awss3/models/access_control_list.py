# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from awss3.models.grant import Grant
from awss3.utilities.xml_utilities import XmlUtilities


class AccessControlList(object):

    """Implementation of the 'AccessControlList' model.

    Attributes:
        grant (List[Grant]): The model property of type List[Grant].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "grant": 'Grant'
    }

    def __init__(self,
                 grant=None):
        """Constructor for the AccessControlList class"""

        # Initialize members of the class
        self.grant = grant 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        grant = None
        if dictionary.get('Grant') is not None:
            grant = [Grant.from_dictionary(x) for x in dictionary.get('Grant')]
        # Return an object of this model
        return cls(grant)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        grant = XmlUtilities.list_from_xml_element(root, 'Grant', Grant)

        return cls(grant)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_list_as_subelement(root, self.grant, 'Grant')

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'grant={self.grant!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'grant={self.grant!s})')
