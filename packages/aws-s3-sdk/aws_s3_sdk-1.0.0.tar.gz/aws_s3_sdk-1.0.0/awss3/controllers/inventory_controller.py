# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum


class InventoryController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(InventoryController, self).__init__(config)

    def bucket_inventory_configuration(self,
                                       inventory,
                                       x_amz_content_sha_256,
                                       bucket):
        """Does a GET request to /{bucket}.

        Returns an inventory configuration (identified by the inventory
        configuration ID) from the bucket. 

        Args:
            inventory (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('inventory')
                         .value(inventory))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def delete_bucket_inventory_configuration(self,
                                              inventory,
                                              id,
                                              bucket):
        """Does a DELETE request to /{bucket}.

        Deletes an inventory configuration (identified by the inventory ID)
        from the bucket.

        Args:
            inventory (str): The request query parameter.
            id (str): The request query parameter.
            bucket (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('inventory')
                         .value(inventory))
            .query_param(Parameter()
                         .key('Id')
                         .value(id))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).execute()

    def bucket_inventory_configuration_1(self,
                                         inventory,
                                         id,
                                         body,
                                         bucket):
        """Does a PUT request to /{bucket}.

        This implementation of the PUT operation adds an inventory
        configuration (identified by the inventory ID) to the bucket. You can
        have up to 1,000 inventory configurations per bucket. 

        Args:
            inventory (str): The request query parameter.
            id (str): The request query parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('inventory')
                         .value(inventory))
            .query_param(Parameter()
                         .key('Id')
                         .value(id))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).execute()
