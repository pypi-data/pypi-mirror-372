# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum


class WebsiteController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(WebsiteController, self).__init__(config)

    def website(self,
                website,
                x_amz_content_sha_256,
                bucket):
        """Does a GET request to /{bucket}.

        Returns the website configuration for a bucket. To host website on
        Amazon S3, you can configure a bucket as website by adding a website
        configuration. For more information about hosting websites, see
        Hosting Websites on Amazon S3. 

        Args:
            website (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('website')
                         .value(website))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).execute()

    def website_1(self,
                  website,
                  content_md_5,
                  body,
                  bucket):
        """Does a PUT request to /{bucket}.

        Sets the configuration of the website that is specified in the website
        subresource. To configure a bucket as a website, you can add this
        subresource on the bucket with website configuration information such
        as the file name of the index document and any redirect rules. 

        Args:
            website (str): The request query parameter.
            content_md_5 (str): The request header parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('website')
                         .value(website))
            .header_param(Parameter()
                          .key('Content-MD5')
                          .value(content_md_5))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()

    def website_2(self,
                  website,
                  bucket):
        """Does a DELETE request to /{bucket}.

        This operation removes the website configuration for a bucket. Amazon
        S3 returns a 200 OK response upon successfully deleting a website
        configuration on the specified bucket. You will get a 200 OK response
        if the website configuration you are trying to delete does not exist
        on the bucket. Amazon S3 returns a 404 response if the bucket
        specified in the request does not exist. 

        Args:
            website (str): The request query parameter.
            bucket (str): The request template parameter.

        Returns:
            Any: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('website')
                         .value(website))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.dynamic_deserialize)
        ).execute()
