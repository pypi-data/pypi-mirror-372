# -*- coding: utf-8 -*-

"""
awss3

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from awss3.api_helper import APIHelper
from awss3.configuration import Server
from awss3.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from awss3.http.http_method_enum import HttpMethodEnum


class MetricsController(BaseController):

    """A Controller to access Endpoints in the awss3 API."""
    def __init__(self, config):
        super(MetricsController, self).__init__(config)

    def bucket_metrics_configuration(self,
                                     metrics,
                                     x_amz_content_sha_256,
                                     bucket):
        """Does a GET request to /{bucket}.

        Gets a metrics configuration (specified by the metrics configuration
        ID) from the bucket. Note that this doesn't include the daily storage
        metrics. 

        Args:
            metrics (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('metrics')
                         .value(metrics))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def bucket_metrics_configuration_1(self,
                                       metrics,
                                       id,
                                       body,
                                       bucket):
        """Does a PUT request to /{bucket}.

        Sets a metrics configuration (specified by the metrics configuration
        ID) for the bucket. You can have up to 1,000 metrics configurations
        per bucket. If you're updating an existing metrics configuration, note
        that this is a full replacement of the existing metrics configuration.
        If you don't include the elements you want to keep, they are erased. 

        Args:
            metrics (str): The request query parameter.
            id (str): The request query parameter.
            body (str): The request body parameter.
            bucket (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.PUT)
            .query_param(Parameter()
                         .key('metrics')
                         .value(metrics))
            .query_param(Parameter()
                         .key('Id')
                         .value(id))
            .body_param(Parameter()
                        .value(body))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).execute()

    def list_bucket_metrics_configurations(self,
                                           metrics,
                                           x_amz_content_sha_256,
                                           bucket):
        """Does a GET request to /{bucket}.

        Lists the metrics configurations for the bucket. The metrics
        configurations are only for the request metrics of the bucket and do
        not provide information on daily storage metrics. You can have up to
        1,000 configurations per bucket. 

        Args:
            metrics (str): The request query parameter.
            x_amz_content_sha_256 (str): The request header parameter.
            bucket (str): The request template parameter.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('metrics')
                         .value(metrics))
            .header_param(Parameter()
                          .key('x-amz-content-sha256')
                          .value(x_amz_content_sha_256))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def delete_bucket_metrics_configuration(self,
                                            metrics,
                                            id,
                                            bucket):
        """Does a DELETE request to /{bucket}.

        Deletes a metrics configuration for the Amazon CloudWatch request
        metrics (specified by the metrics configuration ID) from the bucket.
        Note that this doesn't include the daily storage metrics. 

        Args:
            metrics (str): The request query parameter.
            id (str): The request query parameter.
            bucket (str): The request template parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/{bucket}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('metrics')
                         .value(metrics))
            .query_param(Parameter()
                         .key('Id')
                         .value(id))
            .template_param(Parameter()
                            .key('bucket')
                            .value(bucket)
                            .should_encode(True))
        ).execute()
