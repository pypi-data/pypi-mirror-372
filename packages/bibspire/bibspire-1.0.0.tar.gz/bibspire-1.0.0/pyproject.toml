[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bibspire"
version = "1.0.0"
authors = [
    {name = "Lorenz GÃ¤rtner", email = "lorenz.gaertner@gmail.com"},
]
description = "A tool to update .bib entries with INSPIRE-HEP citations"
readme = "README.md"
license = {text = "MIT"}
keywords = ["bibliography", "bibtex", "inspire", "hep", "physics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Text Processing :: Markup :: LaTeX",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.25.0",
]

[project.optional-dependencies]
test = [
    "pytest>=6.0.0",
    "pytest-mock>=3.6.0",
    "responses>=0.21.0",
    "pytest-cov>=4.0.0",
]
dev = [
    "pytest>=6.0.0",
    "pytest-mock>=3.6.0",
    "responses>=0.21.0",
    "pytest-cov>=4.0.0",
    "build>=0.8.0",
    "ruff>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/lorenzennio/bibspire"
Repository = "https://github.com/lorenzennio/bibspire"
Documentation = "https://github.com/lorenzennio/bibspire#readme"
"Bug Tracker" = "https://github.com/lorenzennio/bibspire/issues"

[project.scripts]
bibspire = "bibspire.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["bibspire*"]

[tool.setuptools.package-data]
bibspire = ["*.py"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests that make real API calls",
]

[tool.ruff]
target-version = "py38"
line-length = 88
extend-exclude = [
    "__pycache__",
    "build",
    "dist",
    ".git",
    ".pytest_cache",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PIE",    # flake8-pie
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "ISC",    # flake8-implicit-str-concat
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "TID",    # flake8-tidy-imports
    "ICN",    # flake8-import-conventions
    "PL",     # pylint
    "TRY",    # tryceratops
]

ignore = [
    "E501",   # line too long (handled by formatter)
    "COM812", # trailing comma (handled by formatter)
    "ISC001", # implicit string concatenation (handled by formatter)
    "T201",   # print statements (allowed in CLI)
    "PLR0913", # too many arguments to function call
    "TRY003", # avoid specifying long messages outside exception class
    "PLR2004", # magic value used in comparison
    "TRY300", # consider moving return to else block (stylistic preference)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ARG001", # unused function arguments (fixtures)
    "PLR0915", # too many statements
    "S101",   # use of assert
]

[tool.ruff.lint.isort]
known-first-party = ["bibspire"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "src/bibspire/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
