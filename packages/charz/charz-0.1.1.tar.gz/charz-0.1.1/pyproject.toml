[project]
name = "charz"
version = "0.1.1"
description = "An object oriented terminal game engine"
authors = [
    { name = "Havsalt", email = "77575424+Havsalt@users.noreply.github.com" }
]
dependencies = [
    "charz-core~=0.1.0",
    "colex~=0.3.0",
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">= 3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Games/Entertainment",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]

[project.optional-dependencies]
keyboard = [ "keyboard>=0.13.5" ]
all = [ "keyboard>=0.13.5" ]

[build-system]
requires = ["hatchling~=1.26.0"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "keyboard>=0.13.5",
    "pytest~=8.3",
    "pydoc-markdown~=4.8",
    "pydoc-markdown-havsalt~=0.1.0",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["charz"]

[[tool.pydoc-markdown.loaders]]
type = "python"
packages = ["charz"]

[[tool.pydoc-markdown.processors]]
type = "google"

[[tool.pydoc-markdown.processors]]
type = "filter"
documented_only = true

[tool.pydoc-markdown.renderer]
type = "pydoc_markdown_havsalt.RuffMarkdownRenderer"
filename = "DOCS.md"
page_title = 'Documentation for `charz`'
render_page_title = true
render_toc = true
insert_header_anchors = true
code_headers = true
descriptive_class_title = "Class "
descriptive_module_title = true
add_module_prefix = true
add_method_class_prefix = true

[tool.pydoc-markdown.renderer.header_level_by_type]
Module = 1
Function = 2
Class = 2
Variable = 3
Method = 3

[tool.ruff]
output-format = "grouped"
show-fixes = true
line-length = 90 # +2 from default 88

[tool.ruff.lint]
select = [
    # Rules I use across projects
    "N",      # pep-8-naming
    "E",      # pycodestyle :: error
    "W",      # pycodestyle :: warning
    "UP",     # pyupgrade
    "PL",     # pylint
    "D",      # pydocstyle
    "ISC",    # flake8-implicit-str-concat
    "ANN",    # flake8-annotations
    "FA",     # flake8-future-annotations
    "PYI",    # flake8-pyi
    "A",      # flake8-builtins
    "B",      # flake8-bugbear
    "PIE",    # flake8-pie
    "COM818", # flake8-commas :: trailing-comma-on-bare-tuple
    "COM819", # flake8-commas :: prohibited-trailing-comma
    "SIM",    # flake8-simplify
    "YTT"     # flake8-2020
]
ignore = [
    # Rules that I do not know why it gives of a warning
    "ISC001",  # single-line-implicit-string-concatenation
    "PLR0912", # pylint refactor :: too many branches
    "PLR0913", # pylint refactor :: too many parameters
    # Rules I ignore across projects
    "D200",    # pydocstyle :: fits-on-one-line
    "D203",    # pydocstyle :: one-blank-line-before-class
    "D213",    # pydocstyle :: multi-line-summary-second-line
    "D4",      # pydocstyle :: docstring spesific styling
    "UP040",   # pyupgrade :: non-pep695-type-alias
    "UP035",   # pyupgrade :: depricated-import :!: Using typing.Generator instead of collections.abc.Generator
    "N812"     # pep8-naming :: lowercase-imported-as-non-lowercase
]
extend-per-file-ignores = { "__init__.py" = ["D205", "D212"], "_annotations.py" = ["D205", "D212"], "text.py" = ["D205", "D212"], "tests/**" = ["D"] }
isort = { split-on-trailing-comma = false }
flake8-annotations = { allow-star-arg-any = true }
