[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "listpicker"
description = "Interactive list selection and multiselect for POSIX terminals (non-curses)"
version = "0.3.3"
authors = [
    {name = "Sung Pae", email = "self@sungpae.com"},
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Terminals",
]
keywords = [
    "list selection",
    "multiple select",
    "multiselect",
]
dependencies = [
    "regex",
]

[project.optional-dependencies]
dev = [
    "types-regex",
]

[project.urls]
Homepage = "https://github.com/guns/python-listpicker"
Repository = "https://github.com/guns/python-listpicker.git"

[tool.mypy]
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
check_untyped_defs = true
no_implicit_reexport = true
warn_return_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
strict_equality = true
strict_concatenate = true
strict = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
	"F",     # Pyflakes
	"E",     # pycodestyle
	# "C90",   # mccabe
	"I",     # isort
	"N",     # pep8-naming
	# "D",     # pydocstyle
	# "UP",    # pyupgrade
	"YTT",   # flake8-2020
	# "ANN",   # flake8-annotations
	"ASYNC", # flake8-async
	# "TRIO",  # flake8-trio
	# "S",     # flake8-bandit
	"BLE",   # flake8-blind-except
	"FBT",   # flake8-boolean-trap
	"B",     # flake8-bugbear
	"A",     # flake8-builtins
	"COM",   # flake8-commas
	# "CPY",   # flake8-copyright
	"C4",    # flake8-comprehensions
	"DTZ",   # flake8-datetimez
	"T10",   # flake8-debugger
	# "DJ",    # flake8-django
	# "EM",    # flake8-errmsg
	"EXE",   # flake8-executable
	# "FA",    # flake8-future-annotations
	"ISC",   # flake8-implicit-str-concat
	# "ICN",   # flake8-import-conventions
	"G",     # flake8-logging-format
	"INP",   # flake8-no-pep420
	"PIE",   # flake8-pie
	# "T20",   # flake8-print
	"PYI",   # flake8-pyi
	"PT",    # flake8-pytest-style
	"Q",     # flake8-quotes
	"RSE",   # flake8-raise
	"RET",   # flake8-return
	"SLF",   # flake8-self
	"SLOT",  # flake8-slots
	"SIM",   # flake8-simplify
	"TID",   # flake8-tidy-imports
	"TCH",   # flake8-type-checking
	"INT",   # flake8-gettext
	"ARG",   # flake8-unused-arguments
	# "PTH",   # flake8-use-pathlib
	"TD",    # flake8-todos
	"FIX",   # flake8-fixme
	# "ERA",   # eradicate
	"PD",    # pandas-vet
	# "PGH",   # pygrep-hooks
	# "PL",    # Pylint
	# "TRY",   # tryceratops
	# "FLY",   # flynt
	"NPY",   # NumPy-specific rules
	# "AIR",   # Airflow
	"PERF",  # Perflint
	"FURB",  # refurb
	"LOG",   # flake8-logging
	# "RUF",   # Ruff-specific  rules
]
ignore = [
	"E741", # Checks for the use of the characters 'l', 'O', or 'I' as variable names.
	"SIM112", # Check for environment variables that are not capitalized.
]
