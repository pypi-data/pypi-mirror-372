# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Choice(object):

    """Implementation of the 'Choice' model.

    Attributes:
        finish_reason (str): The model property of type str.
        index (str): The model property of type str.
        logprobs (Any): The model property of type Any.
        text (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "finish_reason": 'finish_reason',
        "index": 'index',
        "logprobs": 'logprobs',
        "text": 'text'
    }

    def __init__(self,
                 finish_reason=None,
                 index=None,
                 logprobs=None,
                 text=None):
        """Constructor for the Choice class"""

        # Initialize members of the class
        self.finish_reason = finish_reason 
        self.index = index 
        self.logprobs = logprobs 
        self.text = text 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        finish_reason = dictionary.get("finish_reason") if dictionary.get("finish_reason") else None
        index = dictionary.get("index") if dictionary.get("index") else None
        logprobs = dictionary.get("logprobs") if dictionary.get("logprobs") else None
        text = dictionary.get("text") if dictionary.get("text") else None
        # Return an object of this model
        return cls(finish_reason,
                   index,
                   logprobs,
                   text)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'finish_reason={self.finish_reason!r}, '
                f'index={self.index!r}, '
                f'logprobs={self.logprobs!r}, '
                f'text={self.text!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'finish_reason={self.finish_reason!s}, '
                f'index={self.index!s}, '
                f'logprobs={self.logprobs!s}, '
                f'text={self.text!s})')
