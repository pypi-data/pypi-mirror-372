# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openai.models.choice import Choice


class Ok(object):

    """Implementation of the 'Ok' model.

    Attributes:
        choices (List[Choice]): The model property of type List[Choice].
        created (str): The model property of type str.
        id (str): The model property of type str.
        model (str): The model property of type str.
        object (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "choices": 'choices',
        "created": 'created',
        "id": 'id',
        "model": 'model',
        "object": 'object'
    }

    def __init__(self,
                 choices=None,
                 created=None,
                 id=None,
                 model=None,
                 object=None):
        """Constructor for the Ok class"""

        # Initialize members of the class
        self.choices = choices 
        self.created = created 
        self.id = id 
        self.model = model 
        self.object = object 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        choices = None
        if dictionary.get('choices') is not None:
            choices = [Choice.from_dictionary(x) for x in dictionary.get('choices')]
        created = dictionary.get("created") if dictionary.get("created") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        model = dictionary.get("model") if dictionary.get("model") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        # Return an object of this model
        return cls(choices,
                   created,
                   id,
                   model,
                   object)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'choices={self.choices!r}, '
                f'created={self.created!r}, '
                f'id={self.id!r}, '
                f'model={self.model!r}, '
                f'object={self.object!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'choices={self.choices!s}, '
                f'created={self.created!s}, '
                f'id={self.id!s}, '
                f'model={self.model!s}, '
                f'object={self.object!s})')
