# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Permission(object):

    """Implementation of the 'Permission' model.

    Attributes:
        id (str): The model property of type str.
        object (str): The model property of type str.
        created (int): The model property of type int.
        allow_create_engine (bool): The model property of type bool.
        allow_sampling (bool): The model property of type bool.
        allow_logprobs (bool): The model property of type bool.
        allow_search_indices (bool): The model property of type bool.
        allow_view (bool): The model property of type bool.
        allow_fine_tuning (bool): The model property of type bool.
        organization (str): The model property of type str.
        group (str): The model property of type str.
        is_blocking (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "object": 'object',
        "created": 'created',
        "allow_create_engine": 'allow_create_engine',
        "allow_sampling": 'allow_sampling',
        "allow_logprobs": 'allow_logprobs',
        "allow_search_indices": 'allow_search_indices',
        "allow_view": 'allow_view',
        "allow_fine_tuning": 'allow_fine_tuning',
        "organization": 'organization',
        "group": 'group',
        "is_blocking": 'is_blocking'
    }

    _nullables = [
        'group',
    ]

    def __init__(self,
                 id=None,
                 object=None,
                 created=None,
                 allow_create_engine=None,
                 allow_sampling=None,
                 allow_logprobs=None,
                 allow_search_indices=None,
                 allow_view=None,
                 allow_fine_tuning=None,
                 organization=None,
                 group=None,
                 is_blocking=None):
        """Constructor for the Permission class"""

        # Initialize members of the class
        self.id = id 
        self.object = object 
        self.created = created 
        self.allow_create_engine = allow_create_engine 
        self.allow_sampling = allow_sampling 
        self.allow_logprobs = allow_logprobs 
        self.allow_search_indices = allow_search_indices 
        self.allow_view = allow_view 
        self.allow_fine_tuning = allow_fine_tuning 
        self.organization = organization 
        self.group = group 
        self.is_blocking = is_blocking 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        object = dictionary.get("object") if dictionary.get("object") else None
        created = dictionary.get("created") if dictionary.get("created") else None
        allow_create_engine = dictionary.get("allow_create_engine") if "allow_create_engine" in dictionary.keys() else None
        allow_sampling = dictionary.get("allow_sampling") if "allow_sampling" in dictionary.keys() else None
        allow_logprobs = dictionary.get("allow_logprobs") if "allow_logprobs" in dictionary.keys() else None
        allow_search_indices = dictionary.get("allow_search_indices") if "allow_search_indices" in dictionary.keys() else None
        allow_view = dictionary.get("allow_view") if "allow_view" in dictionary.keys() else None
        allow_fine_tuning = dictionary.get("allow_fine_tuning") if "allow_fine_tuning" in dictionary.keys() else None
        organization = dictionary.get("organization") if dictionary.get("organization") else None
        group = dictionary.get("group") if dictionary.get("group") else None
        is_blocking = dictionary.get("is_blocking") if "is_blocking" in dictionary.keys() else None
        # Return an object of this model
        return cls(id,
                   object,
                   created,
                   allow_create_engine,
                   allow_sampling,
                   allow_logprobs,
                   allow_search_indices,
                   allow_view,
                   allow_fine_tuning,
                   organization,
                   group,
                   is_blocking)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'object={self.object!r}, '
                f'created={self.created!r}, '
                f'allow_create_engine={self.allow_create_engine!r}, '
                f'allow_sampling={self.allow_sampling!r}, '
                f'allow_logprobs={self.allow_logprobs!r}, '
                f'allow_search_indices={self.allow_search_indices!r}, '
                f'allow_view={self.allow_view!r}, '
                f'allow_fine_tuning={self.allow_fine_tuning!r}, '
                f'organization={self.organization!r}, '
                f'group={self.group!r}, '
                f'is_blocking={self.is_blocking!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'object={self.object!s}, '
                f'created={self.created!s}, '
                f'allow_create_engine={self.allow_create_engine!s}, '
                f'allow_sampling={self.allow_sampling!s}, '
                f'allow_logprobs={self.allow_logprobs!s}, '
                f'allow_search_indices={self.allow_search_indices!s}, '
                f'allow_view={self.allow_view!s}, '
                f'allow_fine_tuning={self.allow_fine_tuning!s}, '
                f'organization={self.organization!s}, '
                f'group={self.group!s}, '
                f'is_blocking={self.is_blocking!s})')
