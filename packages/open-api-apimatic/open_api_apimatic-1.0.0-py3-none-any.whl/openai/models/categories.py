# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Categories(object):

    """Implementation of the 'Categories' model.

    Attributes:
        hate (bool): The model property of type bool.
        hate_threatening (bool): The model property of type bool.
        self_harm (bool): The model property of type bool.
        sexual (bool): The model property of type bool.
        sexual_minors (bool): The model property of type bool.
        violence (bool): The model property of type bool.
        violence_graphic (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "hate": 'hate',
        "hate_threatening": 'hate/threatening',
        "self_harm": 'self-harm',
        "sexual": 'sexual',
        "sexual_minors": 'sexual/minors',
        "violence": 'violence',
        "violence_graphic": 'violence/graphic'
    }

    def __init__(self,
                 hate=None,
                 hate_threatening=None,
                 self_harm=None,
                 sexual=None,
                 sexual_minors=None,
                 violence=None,
                 violence_graphic=None):
        """Constructor for the Categories class"""

        # Initialize members of the class
        self.hate = hate 
        self.hate_threatening = hate_threatening 
        self.self_harm = self_harm 
        self.sexual = sexual 
        self.sexual_minors = sexual_minors 
        self.violence = violence 
        self.violence_graphic = violence_graphic 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        hate = dictionary.get("hate") if "hate" in dictionary.keys() else None
        hate_threatening = dictionary.get("hate/threatening") if "hate/threatening" in dictionary.keys() else None
        self_harm = dictionary.get("self-harm") if "self-harm" in dictionary.keys() else None
        sexual = dictionary.get("sexual") if "sexual" in dictionary.keys() else None
        sexual_minors = dictionary.get("sexual/minors") if "sexual/minors" in dictionary.keys() else None
        violence = dictionary.get("violence") if "violence" in dictionary.keys() else None
        violence_graphic = dictionary.get("violence/graphic") if "violence/graphic" in dictionary.keys() else None
        # Return an object of this model
        return cls(hate,
                   hate_threatening,
                   self_harm,
                   sexual,
                   sexual_minors,
                   violence,
                   violence_graphic)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'hate={self.hate!r}, '
                f'hate_threatening={self.hate_threatening!r}, '
                f'self_harm={self.self_harm!r}, '
                f'sexual={self.sexual!r}, '
                f'sexual_minors={self.sexual_minors!r}, '
                f'violence={self.violence!r}, '
                f'violence_graphic={self.violence_graphic!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'hate={self.hate!s}, '
                f'hate_threatening={self.hate_threatening!s}, '
                f'self_harm={self.self_harm!s}, '
                f'sexual={self.sexual!s}, '
                f'sexual_minors={self.sexual_minors!s}, '
                f'violence={self.violence!s}, '
                f'violence_graphic={self.violence_graphic!s})')
