# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Datum2(object):

    """Implementation of the 'Datum2' model.

    Attributes:
        object (str): The model property of type str.
        index (int): The model property of type int.
        embedding (List[float]): The model property of type List[float].

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "object": 'object',
        "index": 'index',
        "embedding": 'embedding'
    }

    def __init__(self,
                 object=None,
                 index=None,
                 embedding=None):
        """Constructor for the Datum2 class"""

        # Initialize members of the class
        self.object = object 
        self.index = index 
        self.embedding = embedding 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        object = dictionary.get("object") if dictionary.get("object") else None
        index = dictionary.get("index") if dictionary.get("index") else None
        embedding = dictionary.get("embedding") if dictionary.get("embedding") else None
        # Return an object of this model
        return cls(object,
                   index,
                   embedding)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!r}, '
                f'index={self.index!r}, '
                f'embedding={self.embedding!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!s}, '
                f'index={self.index!s}, '
                f'embedding={self.embedding!s})')
