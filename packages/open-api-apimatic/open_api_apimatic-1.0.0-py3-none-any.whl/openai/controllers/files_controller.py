# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openai.api_helper import APIHelper
from openai.configuration import Server
from openai.utilities.file_wrapper import FileWrapper
from openai.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openai.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single


class FilesController(BaseController):

    """A Controller to access Endpoints in the openai API."""
    def __init__(self, config):
        super(FilesController, self).__init__(config)

    def list_files(self):
        """Does a GET request to /files.

        Returns a list of files that belong to the user's organization.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files')
            .http_method(HttpMethodEnum.GET)
            .auth(Single('bearer'))
        ).execute()

    def upload_files(self,
                     file,
                     purpose):
        """Does a POST request to /files.

        Upload a file that contains document(s) to be used across various
        endpoints/features. Currently, the size of all the files uploaded by
        one organization can be up to 1 GB. Please contact us if you need to
        increase the storage limit.

        Args:
            file (typing.BinaryIO): Name of the JSON Lines file to be uploaded.
            purpose (str): The intended purpose of the uploaded documents.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files')
            .http_method(HttpMethodEnum.POST)
            .multipart_param(Parameter()
                             .key('file')
                             .value(file)
                             .default_content_type('application/octet-stream'))
            .form_param(Parameter()
                        .key('purpose')
                        .value(purpose))
            .auth(Single('bearer'))
        ).execute()

    def delete_files(self,
                     file_id):
        """Does a DELETE request to /files/{file_id}.

        Delete a file.

        Args:
            file_id (str): The ID of the file to use for this request.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files/{file_id}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('file_id')
                            .value(file_id)
                            .should_encode(True))
            .auth(Single('bearer'))
        ).execute()

    def retrieve_files(self,
                       file_id):
        """Does a GET request to /files/{file_id}.

        Args:
            file_id (str): The ID of the file to use for this request.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files/{file_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('file_id')
                            .value(file_id)
                            .should_encode(True))
            .auth(Single('bearer'))
        ).execute()

    def retrieve_file_content(self,
                              file_id):
        """Does a GET request to /files/{file_id}/content.

        Args:
            file_id (str): The ID of the file to use for this request.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/files/{file_id}/content')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('file_id')
                            .value(file_id)
                            .should_encode(True))
            .auth(Single('bearer'))
        ).execute()
