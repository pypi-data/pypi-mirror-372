# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from openai.models.categories import Categories
from openai.models.category_scores import CategoryScores


class Result(object):

    """Implementation of the 'Result' model.

    Attributes:
        categories (Categories): The model property of type Categories.
        category_scores (CategoryScores): The model property of type
            CategoryScores.
        flagged (bool): The model property of type bool.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "categories": 'categories',
        "category_scores": 'category_scores',
        "flagged": 'flagged'
    }

    def __init__(self,
                 categories=None,
                 category_scores=None,
                 flagged=None):
        """Constructor for the Result class"""

        # Initialize members of the class
        self.categories = categories 
        self.category_scores = category_scores 
        self.flagged = flagged 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        categories = Categories.from_dictionary(dictionary.get('categories')) if dictionary.get('categories') else None
        category_scores = CategoryScores.from_dictionary(dictionary.get('category_scores')) if dictionary.get('category_scores') else None
        flagged = dictionary.get("flagged") if "flagged" in dictionary.keys() else None
        # Return an object of this model
        return cls(categories,
                   category_scores,
                   flagged)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'categories={self.categories!r}, '
                f'category_scores={self.category_scores!r}, '
                f'flagged={self.flagged!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'categories={self.categories!s}, '
                f'category_scores={self.category_scores!s}, '
                f'flagged={self.flagged!s})')
