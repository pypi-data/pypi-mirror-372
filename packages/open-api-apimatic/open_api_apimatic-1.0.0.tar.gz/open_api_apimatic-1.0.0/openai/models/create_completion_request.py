# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class CreateCompletionRequest(object):

    """Implementation of the 'Create completion Request' model.

    Attributes:
        model (str): The model property of type str.
        prompt (str): The model property of type str.
        temperature (int): The model property of type int.
        max_tokens (int): The model property of type int.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "model": 'model',
        "prompt": 'prompt',
        "temperature": 'temperature',
        "max_tokens": 'max_tokens'
    }

    def __init__(self,
                 model=None,
                 prompt=None,
                 temperature=None,
                 max_tokens=None):
        """Constructor for the CreateCompletionRequest class"""

        # Initialize members of the class
        self.model = model 
        self.prompt = prompt 
        self.temperature = temperature 
        self.max_tokens = max_tokens 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        model = dictionary.get("model") if dictionary.get("model") else None
        prompt = dictionary.get("prompt") if dictionary.get("prompt") else None
        temperature = dictionary.get("temperature") if dictionary.get("temperature") else None
        max_tokens = dictionary.get("max_tokens") if dictionary.get("max_tokens") else None
        # Return an object of this model
        return cls(model,
                   prompt,
                   temperature,
                   max_tokens)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'model={self.model!r}, '
                f'prompt={self.prompt!r}, '
                f'temperature={self.temperature!r}, '
                f'max_tokens={self.max_tokens!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'model={self.model!s}, '
                f'prompt={self.prompt!s}, '
                f'temperature={self.temperature!s}, '
                f'max_tokens={self.max_tokens!s})')
