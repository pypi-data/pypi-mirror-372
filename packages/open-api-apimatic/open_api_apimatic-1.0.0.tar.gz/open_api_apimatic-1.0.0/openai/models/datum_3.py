# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class Datum3(object):

    """Implementation of the 'Datum3' model.

    Attributes:
        object (str): The model property of type str.
        id (str): The model property of type str.
        ready (bool): The model property of type bool.
        owner (str): The model property of type str.
        permissions (str): The model property of type str.
        created (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "object": 'object',
        "id": 'id',
        "ready": 'ready',
        "owner": 'owner',
        "permissions": 'permissions',
        "created": 'created'
    }

    _nullables = [
        'permissions',
        'created',
    ]

    def __init__(self,
                 object=None,
                 id=None,
                 ready=None,
                 owner=None,
                 permissions=None,
                 created=None):
        """Constructor for the Datum3 class"""

        # Initialize members of the class
        self.object = object 
        self.id = id 
        self.ready = ready 
        self.owner = owner 
        self.permissions = permissions 
        self.created = created 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        object = dictionary.get("object") if dictionary.get("object") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        ready = dictionary.get("ready") if "ready" in dictionary.keys() else None
        owner = dictionary.get("owner") if dictionary.get("owner") else None
        permissions = dictionary.get("permissions") if dictionary.get("permissions") else None
        created = dictionary.get("created") if dictionary.get("created") else None
        # Return an object of this model
        return cls(object,
                   id,
                   ready,
                   owner,
                   permissions,
                   created)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!r}, '
                f'id={self.id!r}, '
                f'ready={self.ready!r}, '
                f'owner={self.owner!r}, '
                f'permissions={self.permissions!r}, '
                f'created={self.created!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'object={self.object!s}, '
                f'id={self.id!s}, '
                f'ready={self.ready!s}, '
                f'owner={self.owner!s}, '
                f'permissions={self.permissions!s}, '
                f'created={self.created!s})')
