# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class CreateImageRequest(object):

    """Implementation of the 'Create image Request' model.

    Attributes:
        prompt (str): The model property of type str.
        n (int): The model property of type int.
        size (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "prompt": 'prompt',
        "n": 'n',
        "size": 'size'
    }

    def __init__(self,
                 prompt=None,
                 n=None,
                 size=None):
        """Constructor for the CreateImageRequest class"""

        # Initialize members of the class
        self.prompt = prompt 
        self.n = n 
        self.size = size 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        prompt = dictionary.get("prompt") if dictionary.get("prompt") else None
        n = dictionary.get("n") if dictionary.get("n") else None
        size = dictionary.get("size") if dictionary.get("size") else None
        # Return an object of this model
        return cls(prompt,
                   n,
                   size)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'prompt={self.prompt!r}, '
                f'n={self.n!r}, '
                f'size={self.size!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'prompt={self.prompt!s}, '
                f'n={self.n!s}, '
                f'size={self.size!s})')
