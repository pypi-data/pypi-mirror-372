# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openai.api_helper import APIHelper
from openai.configuration import Server
from openai.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openai.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openai.models.create_image import CreateImage


class ImagesController(BaseController):

    """A Controller to access Endpoints in the openai API."""
    def __init__(self, config):
        super(ImagesController, self).__init__(config)

    def create_image(self,
                     body):
        """Does a POST request to /images/generations.

        Creates an image given a prompt.

        Args:
            body (CreateImageRequest): The request body parameter.

        Returns:
            CreateImage: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/images/generations')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CreateImage.from_dictionary)
        ).execute()

    def create_image_edit(self,
                          image,
                          mask,
                          prompt,
                          n,
                          size,
                          response_format,
                          user):
        """Does a POST request to /images/edits.

        Creates an edited or extended image given an original image and a
        prompt.

        Args:
            image (str): The image to edit. Must be a valid PNG file, less
                than 4MB, and square. If mask is not provided, image must have
                transparency, which will be used as the mask.
            mask (str): An additional image whose fully transparent areas
                (e.g. where alpha is zero) indicate where image should be
                edited. Must be a valid PNG file, less than 4MB, and have the
                same dimensions as image.
            prompt (str): A text description of the desired image(s). The
                maximum length is 1000 characters.
            n (int): The number of images to generate. Must be between 1 and
                10.
            size (str): The size of the generated images. Must be one of
                256x256, 512x512, or 1024x1024.
            response_format (str): The format in which the generated images
                are returned. Must be one of url or b64_json.
            user (str): A unique identifier representing your end-user, which
                can help OpenAI to monitor and detect abuse.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/images/edits')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('image')
                        .value(image))
            .form_param(Parameter()
                        .key('mask')
                        .value(mask))
            .form_param(Parameter()
                        .key('prompt')
                        .value(prompt))
            .form_param(Parameter()
                        .key('n')
                        .value(n))
            .form_param(Parameter()
                        .key('size')
                        .value(size))
            .form_param(Parameter()
                        .key('response_format')
                        .value(response_format))
            .form_param(Parameter()
                        .key('user')
                        .value(user))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('bearer'))
        ).execute()

    def create_image_variation(self,
                               image,
                               n,
                               size,
                               response_format,
                               user):
        """Does a POST request to /images/variations.

        Creates a variation of a given image.

        Args:
            image (str): The image to edit. Must be a valid PNG file, less
                than 4MB, and square. If mask is not provided, image must have
                transparency, which will be used as the mask.
            n (int): The number of images to generate. Must be between 1 and
                10.
            size (str): The size of the generated images. Must be one of
                256x256, 512x512, or 1024x1024.
            response_format (str): The format in which the generated images
                are returned. Must be one of url or b64_json.
            user (str): A unique identifier representing your end-user, which
                can help OpenAI to monitor and detect abuse.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/images/variations')
            .http_method(HttpMethodEnum.POST)
            .form_param(Parameter()
                        .key('image')
                        .value(image))
            .form_param(Parameter()
                        .key('n')
                        .value(n))
            .form_param(Parameter()
                        .key('size')
                        .value(size))
            .form_param(Parameter()
                        .key('response_format')
                        .value(response_format))
            .form_param(Parameter()
                        .key('user')
                        .value(user))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .auth(Single('bearer'))
        ).execute()
