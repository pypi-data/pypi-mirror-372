# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openai.api_helper import APIHelper
from openai.configuration import Server
from openai.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openai.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openai.models.list_models import ListModels
from openai.models.retrieve_model import RetrieveModel


class ModelsController(BaseController):

    """A Controller to access Endpoints in the openai API."""
    def __init__(self, config):
        super(ModelsController, self).__init__(config)

    def list_models(self):
        """Does a GET request to /models.

        Lists the currently available engines, and provides basic information
        about each one such as the owner and availability.
        [See More](https://beta.openai.com/docs/api-reference/engines/list)

        Returns:
            ListModels: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/models')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListModels.from_dictionary)
        ).execute()

    def retrieve_model(self,
                       modelid):
        """Does a GET request to /models/{modelid}.

        Retrieves an engine instance, providing basic information about the
        engine such as the owner and availability.
        [See More](https://beta.openai.com/docs/api-reference/engines/retrieve)

        Args:
            modelid (str): The ID of the model to use for this request

        Returns:
            RetrieveModel: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/models/{modelid}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('modelid')
                            .value(modelid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveModel.from_dictionary)
        ).execute()
