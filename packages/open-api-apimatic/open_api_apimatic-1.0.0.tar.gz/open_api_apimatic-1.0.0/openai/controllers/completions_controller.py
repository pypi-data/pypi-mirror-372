# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openai.api_helper import APIHelper
from openai.configuration import Server
from openai.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openai.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openai.models.ok import Ok


class CompletionsController(BaseController):

    """A Controller to access Endpoints in the openai API."""
    def __init__(self, config):
        super(CompletionsController, self).__init__(config)

    def create_completion(self,
                          body):
        """Does a POST request to /completions.

        Creates a completion for the provided prompt and parameters.

        Args:
            body (CreateCompletionRequest): The request body parameter.

        Returns:
            Ok: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/completions')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Ok.from_dictionary)
        ).execute()
