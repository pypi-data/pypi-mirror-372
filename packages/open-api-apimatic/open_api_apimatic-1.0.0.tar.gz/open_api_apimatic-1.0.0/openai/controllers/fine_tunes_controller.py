# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from openai.api_helper import APIHelper
from openai.configuration import Server
from openai.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from openai.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from openai.models.list_fine_tunes import ListFineTunes


class FineTunesController(BaseController):

    """A Controller to access Endpoints in the openai API."""
    def __init__(self, config):
        super(FineTunesController, self).__init__(config)

    def create_fine_tune(self,
                         body):
        """Does a POST request to /fine-tunes.

        Creates a job that fine-tunes a specified model from a given dataset.

        Args:
            body (CreateFineTuneRequest): The request body parameter.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine-tunes')
            .http_method(HttpMethodEnum.POST)
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/json; charset=utf-8'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('bearer'))
        ).execute()

    def list_fine_tunes(self):
        """Does a GET request to /fine-tunes.

        Creates a job that fine-tunes a specified model from a given dataset.

        Returns:
            ListFineTunes: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine-tunes')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('bearer'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ListFineTunes.from_dictionary)
        ).execute()

    def retrieve_fine_tune(self,
                           fine_tune_id):
        """Does a GET request to /fine-tunes/{fine_tune_id}.

        Creates a job that fine-tunes a specified model from a given dataset.

        Args:
            fine_tune_id (str): The ID of the fine-tune job.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine-tunes/{fine_tune_id}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('fine_tune_id')
                            .value(fine_tune_id)
                            .should_encode(True))
            .auth(Single('bearer'))
        ).execute()

    def cancel_fine_tune(self,
                         fine_tune_id):
        """Does a POST request to /fine-tunes/{fine_tune_id}/cancel.

        Creates a job that fine-tunes a specified model from a given dataset.

        Args:
            fine_tune_id (str): The ID of the fine-tune job.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine-tunes/{fine_tune_id}/cancel')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('fine_tune_id')
                            .value(fine_tune_id)
                            .should_encode(True))
            .auth(Single('bearer'))
        ).execute()

    def list_fine_tune_events(self,
                              fine_tune_id):
        """Does a GET request to /fine-tunes/{fine_tune_id}/events.

        Creates a job that fine-tunes a specified model from a given dataset.

        Args:
            fine_tune_id (str): The ID of the fine-tune job.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/fine-tunes/{fine_tune_id}/events')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('fine_tune_id')
                            .value(fine_tune_id)
                            .should_encode(True))
            .auth(Single('bearer'))
        ).execute()

    def delete_fine_tune_model(self,
                               model):
        """Does a DELETE request to /models/{model}.

        Creates a job that fine-tunes a specified model from a given dataset.

        Args:
            model (str): The model to delete.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.SERVER_1)
            .path('/models/{model}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('model')
                            .value(model)
                            .should_encode(True))
            .auth(Single('bearer'))
        ).execute()
