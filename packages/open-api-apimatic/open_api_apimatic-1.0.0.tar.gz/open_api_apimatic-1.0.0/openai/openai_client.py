# -*- coding: utf-8 -*-

"""
openai

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from openai.configuration import Configuration
from openai.controllers.base_controller import BaseController
from openai.configuration import Environment
from openai.http.auth.o_auth_2 import OAuth2
from openai.controllers.models_controller import ModelsController
from openai.controllers.completions_controller import CompletionsController
from openai.controllers.edits_controller import EditsController
from openai.controllers.images_controller import ImagesController
from openai.controllers.embeddings_controller import EmbeddingsController
from openai.controllers.files_controller import FilesController
from openai.controllers.fine_tunes_controller import FineTunesController
from openai.controllers.moderations_controller import ModerationsController
from openai.controllers.engines_controller import EnginesController


class OpenaiClient(object):
    @LazyProperty
    def models(self):
        return ModelsController(self.global_configuration)

    @LazyProperty
    def completions(self):
        return CompletionsController(self.global_configuration)

    @LazyProperty
    def edits(self):
        return EditsController(self.global_configuration)

    @LazyProperty
    def images(self):
        return ImagesController(self.global_configuration)

    @LazyProperty
    def embeddings(self):
        return EmbeddingsController(self.global_configuration)

    @LazyProperty
    def files(self):
        return FilesController(self.global_configuration)

    @LazyProperty
    def fine_tunes(self):
        return FineTunesController(self.global_configuration)

    @LazyProperty
    def moderations(self):
        return ModerationsController(self.global_configuration)

    @LazyProperty
    def engines(self):
        return EnginesController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, access_token=None,
                 bearer_auth_credentials=None, config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, access_token=access_token,
            bearer_auth_credentials=bearer_auth_credentials)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())

        self.auth_managers = {key: None for key in ['bearer']}
        self.auth_managers['bearer'] = OAuth2(
            self.config.bearer_auth_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

