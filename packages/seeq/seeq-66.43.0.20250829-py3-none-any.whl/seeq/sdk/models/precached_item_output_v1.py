# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.43.0-v202508290748-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class PrecachedItemOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_id': 'str',
        'last_certain_key_nanos': 'int',
        'max_duration_nanos': 'int',
        'max_interpolation_nanos': 'int',
        'type': 'str'
    }

    attribute_map = {
        'data_id': 'dataId',
        'last_certain_key_nanos': 'lastCertainKeyNanos',
        'max_duration_nanos': 'maxDurationNanos',
        'max_interpolation_nanos': 'maxInterpolationNanos',
        'type': 'type'
    }

    def __init__(self, data_id=None, last_certain_key_nanos=None, max_duration_nanos=None, max_interpolation_nanos=None, type=None):
        """
        PrecachedItemOutputV1 - a model defined in Swagger
        """

        self._data_id = None
        self._last_certain_key_nanos = None
        self._max_duration_nanos = None
        self._max_interpolation_nanos = None
        self._type = None

        if data_id is not None:
          self.data_id = data_id
        if last_certain_key_nanos is not None:
          self.last_certain_key_nanos = last_certain_key_nanos
        if max_duration_nanos is not None:
          self.max_duration_nanos = max_duration_nanos
        if max_interpolation_nanos is not None:
          self.max_interpolation_nanos = max_interpolation_nanos
        if type is not None:
          self.type = type

    @property
    def data_id(self):
        """
        Gets the data_id of this PrecachedItemOutputV1.

        :return: The data_id of this PrecachedItemOutputV1.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id):
        """
        Sets the data_id of this PrecachedItemOutputV1.

        :param data_id: The data_id of this PrecachedItemOutputV1.
        :type: str
        """

        self._data_id = data_id

    @property
    def last_certain_key_nanos(self):
        """
        Gets the last_certain_key_nanos of this PrecachedItemOutputV1.

        :return: The last_certain_key_nanos of this PrecachedItemOutputV1.
        :rtype: int
        """
        return self._last_certain_key_nanos

    @last_certain_key_nanos.setter
    def last_certain_key_nanos(self, last_certain_key_nanos):
        """
        Sets the last_certain_key_nanos of this PrecachedItemOutputV1.

        :param last_certain_key_nanos: The last_certain_key_nanos of this PrecachedItemOutputV1.
        :type: int
        """

        self._last_certain_key_nanos = last_certain_key_nanos

    @property
    def max_duration_nanos(self):
        """
        Gets the max_duration_nanos of this PrecachedItemOutputV1.

        :return: The max_duration_nanos of this PrecachedItemOutputV1.
        :rtype: int
        """
        return self._max_duration_nanos

    @max_duration_nanos.setter
    def max_duration_nanos(self, max_duration_nanos):
        """
        Sets the max_duration_nanos of this PrecachedItemOutputV1.

        :param max_duration_nanos: The max_duration_nanos of this PrecachedItemOutputV1.
        :type: int
        """

        self._max_duration_nanos = max_duration_nanos

    @property
    def max_interpolation_nanos(self):
        """
        Gets the max_interpolation_nanos of this PrecachedItemOutputV1.

        :return: The max_interpolation_nanos of this PrecachedItemOutputV1.
        :rtype: int
        """
        return self._max_interpolation_nanos

    @max_interpolation_nanos.setter
    def max_interpolation_nanos(self, max_interpolation_nanos):
        """
        Sets the max_interpolation_nanos of this PrecachedItemOutputV1.

        :param max_interpolation_nanos: The max_interpolation_nanos of this PrecachedItemOutputV1.
        :type: int
        """

        self._max_interpolation_nanos = max_interpolation_nanos

    @property
    def type(self):
        """
        Gets the type of this PrecachedItemOutputV1.

        :return: The type of this PrecachedItemOutputV1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PrecachedItemOutputV1.

        :param type: The type of this PrecachedItemOutputV1.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PrecachedItemOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
