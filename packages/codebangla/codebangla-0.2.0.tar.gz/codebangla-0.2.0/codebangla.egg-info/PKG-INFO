Metadata-Version: 2.4
Name: codebangla
Version: 0.2.0
Summary: Advanced Python transpiler for writing Python code using Bangla keywords
Home-page: https://github.com/saky-semicolon/codebangla
Author: CodeBangla Team
Author-email: CodeBangla Team <team@codebangla.org>
Maintainer-email: CodeBangla Team <team@codebangla.org>
License-Expression: MIT
Project-URL: Homepage, https://github.com/saky-semicolon/codebangla
Project-URL: Documentation, https://codebangla.readthedocs.io
Project-URL: Repository, https://github.com/saky-semicolon/codebangla
Project-URL: Issues, https://github.com/saky-semicolon/codebangla/issues
Project-URL: Changelog, https://github.com/saky-semicolon/codebangla/blob/main/CHANGELOG.md
Keywords: bangla,python,transpiler,programming,education,localization
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Compilers
Classifier: Topic :: Software Development :: Localization
Classifier: Topic :: Education
Classifier: Topic :: Software Development :: Interpreters
Classifier: Natural Language :: Bengali
Classifier: Typing :: Typed
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: click>=8.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-benchmark>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: pre-commit>=2.20.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=5.0.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0.0; extra == "docs"
Requires-Dist: myst-parser>=0.18.0; extra == "docs"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-benchmark>=4.0.0; extra == "test"
Requires-Dist: coverage>=6.0.0; extra == "test"
Requires-Dist: tox>=4.0.0; extra == "test"
Provides-Extra: format
Requires-Dist: black>=22.0.0; extra == "format"
Requires-Dist: isort>=5.0.0; extra == "format"
Provides-Extra: lint
Requires-Dist: flake8>=5.0.0; extra == "lint"
Requires-Dist: mypy>=1.0.0; extra == "lint"
Provides-Extra: build
Requires-Dist: setuptools>=65.0.0; extra == "build"
Requires-Dist: wheel>=0.37.0; extra == "build"
Requires-Dist: twine>=4.0.0; extra == "build"
Provides-Extra: perf
Requires-Dist: chardet>=5.0.0; extra == "perf"
Requires-Dist: unicodedata2>=14.0.0; extra == "perf"
Provides-Extra: all
Requires-Dist: codebangla[build,dev,docs,format,lint,perf,test]; extra == "all"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# CodeBangla

<div align="center">

![CodeBangla Logo](logo.png)

**Advanced Python transpiler for writing Python code using Bangla keywords**

[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
[![Typed with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)

[Features](#-features) ‚Ä¢ [Installation](#-installation) ‚Ä¢ [Quick Start](#-quick-start) ‚Ä¢ [Documentation](#-documentation) ‚Ä¢ [Contributing](#-contributing)

</div>

---

**CodeBangla** is a professional-grade Python transpiler that enables developers to write Python code using Bangla keywords (in English transliteration). Designed to make programming more accessible for Bengali speakers while maintaining full compatibility with the Python ecosystem.

## ‚ú® Features

### üöÄ **Complete Python Support**
- **Modern Python Features**: Full support for async/await, type hints, decorators, context managers
- **All Python Constructs**: Classes, functions, exceptions, comprehensions, generators
- **Python 3.8+ Compatible**: Supports latest Python versions and features

### üîß **Advanced Transpilation Engine**
- **AST-Based Processing**: Sophisticated parsing and transformation
- **Error Recovery**: Intelligent error handling and suggestions
- **Source Mapping**: Debug transpiled code with original line numbers
- **Performance Optimized**: Fast transpilation with caching support

### üõ°Ô∏è **Professional Tooling**
- **Type Checking**: Optional static type analysis
- **Strict Mode**: Enhanced validation and error checking
- **Plugin Architecture**: Extensible with custom transformations
- **CLI Tools**: Comprehensive command-line interface

### üåê **Internationalization**
- **Unicode Normalized**: Proper handling of Bangla text and numerals
- **Mixed Scripts**: Support for mixed Bangla-English codebases
- **Cultural Context**: Keywords designed for Bengali programming concepts

## üì¶ Installation

### Quick Install
```bash
pip install codebangla
```

### Development Install
```bash
git clone https://github.com/saky-semicolon/codebangla.git
cd codebangla
pip install -e ".[dev,docs,test]"
```

### Verify Installation
```bash
codebangla --version
codebangla info
```

## üöÄ Quick Start

### Your First Program
Create a file `hello.bp`:
```python
# hello.bp
shuru main():
    naam = neoa("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶ø? ")
    chhap(f"‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ, {naam}!")

jodi __name__ == "__main__":
    main()
```

### Run It
```bash
codebangla run hello.bp
```

### Compile to Python
```bash
codebangla compile hello.bp -o hello.py
```

## üìö Language Reference

### üî§ Core Keywords

| Bangla | Python | Description |
|--------|--------|-------------|
| `chhap` | `print` | Print output |
| `neoa` | `input` | Get input |
| `jodi` | `if` | Conditional statement |
| `noile` | `else` | Else clause |
| `noile_jodi` | `elif` | Else-if clause |
| `jotokkhon` | `while` | While loop |
| `er_jonno` | `for` | For loop |
| `moddhe` | `in` | Membership test |
| `shuru` | `def` | Function definition |
| `classh` | `class` | Class definition |
| `phiredao` | `return` | Return statement |
| `thamo` | `break` | Break loop |
| `chaliye_jao` | `continue` | Continue loop |

### ‚ö° Modern Features

| Bangla | Python | Description |
|--------|--------|-------------|
| `ashinchronous` | `async` | Async function |
| `opeksha` | `await` | Await expression |
| `sathe` | `with` | Context manager |
| `chesta_koro` | `try` | Try block |
| `dhoro` | `except` | Exception handler |
| `seshe` | `finally` | Finally block |
| `uththapon` | `raise` | Raise exception |
| `tulona` | `assert` | Assertion |

### üèóÔ∏è Data Types

| Bangla | Python | Description |
|--------|--------|-------------|
| `shongkhya` | `int` | Integer |
| `tothyo` | `float` | Float |
| `shobdo` | `str` | String |
| `talika` | `list` | List |
| `obhidhan` | `dict` | Dictionary |
| `jora` | `tuple` | Tuple |
| `shongroho` | `set` | Set |
| `sotti` | `True` | Boolean True |
| `miththa` | `False` | Boolean False |
| `shunno` | `None` | None value |

## üìñ Advanced Examples

### Object-Oriented Programming
```python
# person.bp
classh Person:
    shuru __init__(nijei, naam: shobdo, boyosh: shongkhya):
        nijei.naam = naam
        nijei.boyosh = boyosh
    
    shuru greet(nijei) -> shobdo:
        phiredao f"‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ {nijei.naam}, ‡¶¨‡¶Ø‡¶º‡¶∏ {nijei.boyosh}"
    
    shuru birthday(nijei):
        nijei.boyosh += 1
        chhap(f"{nijei.naam} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Æ‡¶¶‡¶ø‡¶®! ‡¶è‡¶ñ‡¶® ‡¶¨‡¶Ø‡¶º‡¶∏ {nijei.boyosh}")

# Usage
person = Person("‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶", 25)
chhap(person.greet())
person.birthday()
```

### Async Programming
```python
# async_example.bp
theke asyncio ano sleep

ashinchronous shuru fetch_data(url: shobdo) -> obhidhan:
    chhap(f"Fetching data from {url}")
    opeksha sleep(1)  # Simulate network delay
    phiredao {"url": url, "data": "Sample data"}

ashinchronous shuru main():
    urls = ["http://api1.com", "http://api2.com", "http://api3.com"]
    
    er_jonno url moddhe urls:
        result = opeksha fetch_data(url)
        chhap(f"Received: {result}")

jodi __name__ == "__main__":
    theke asyncio ano run
    run(main())
```

### Error Handling
```python
# error_handling.bp
shuru divide(a: tothyo, b: tothyo) -> tothyo:
    chesta_koro:
        result = a / b
        phiredao result
    dhoro ZeroDivisionError:
        chhap("‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶®‡¶æ ‡¶∂‡ßÇ‡¶®‡ßç‡¶Ø ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá!")
        phiredao 0.0
    dhoro TypeError hishabe e:
        chhap(f"‡¶≠‡ßÅ‡¶≤ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ü‡¶æ‡¶á‡¶™: {e}")
        uththapon e
    seshe:
        chhap("‡¶ó‡¶£‡¶®‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®")

# Usage
result1 = divide(10, 2)    # Normal case
result2 = divide(10, 0)    # Zero division
result3 = divide("10", 2)  # Type error
```

## ÔøΩÔ∏è CLI Reference

### Basic Commands
```bash
# Run a CodeBangla file
codebangla run myfile.bp

# Compile to Python
codebangla compile myfile.bp -o myfile.py

# Interactive REPL
codebangla repl

# Validate code
codebangla validate myfile.bp

# Create new project
codebangla init myproject --template advanced
```

### Advanced Options
```bash
# Enable strict mode
codebangla run myfile.bp --strict

# Watch for changes
codebangla run myfile.bp --watch

# Enable profiling
codebangla compile myfile.bp --profile

# Format output
codebangla compile myfile.bp --format black

# Enable debugging
codebangla run myfile.bp --debug
```

### Project Management
```bash
# Initialize project with template
codebangla init my-web-app --template web --author "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ"

# Show system information
codebangla info

# List available keywords
codebangla keywords --category core

# Search keywords
codebangla keywords --search "print"
```

## ‚öôÔ∏è Configuration

Create `codebangla.json` in your project:
```json
{
  "name": "my-project",
  "version": "1.0.0",
  "author": "Your Name",
  "license": "MIT",
  "transpiler": {
    "strict_mode": false,
    "enable_type_checking": true,
    "enable_async_support": true,
    "target_python_version": [3, 8],
    "plugins": []
  }
}
```

## üß™ Testing

```bash
# Run tests
pytest

# Run with coverage
pytest --cov=codebangla

# Run performance benchmarks
pytest --benchmark-only

# Run specific test categories
pytest -m "not slow"  # Skip slow tests
pytest -m integration  # Integration tests only
```

## üìä Performance

CodeBangla is optimized for performance:

- **Fast Transpilation**: Sub-millisecond transpilation for typical files
- **Memory Efficient**: Minimal memory overhead during processing
- **Caching**: Intelligent caching of transpilation results
- **Parallel Processing**: Multi-threaded processing for large projects

### Benchmarks
```
Small file (< 1KB):     ~0.1ms
Medium file (10KB):     ~1ms
Large file (100KB):     ~10ms
Very large (1MB):       ~100ms
```

## ÔøΩ API Reference

### Programmatic Usage
```python
from codebangla import AdvancedTranspiler, TranspilerConfig

# Basic usage
from codebangla import transpile
result = transpile('chhap("Hello")')

# Advanced usage
config = TranspilerConfig(
    strict_mode=True,
    enable_type_checking=True,
    enable_debugging=True
)

transpiler = AdvancedTranspiler(config)
result = transpiler.transpile(source_code, filename="test.bp")

if result.success:
    print("Transpiled code:", result.code)
    exec(result.code)
else:
    print("Errors:", result.errors)
    print("Warnings:", result.warnings)
```

### Tokenization
```python
from codebangla.tokenizer import AdvancedTokenizer

tokenizer = AdvancedTokenizer()
tokens = tokenizer.tokenize('chhap("Hello")')

for token in tokens:
    print(f"{token.type}: {token.value} -> {token.python_equivalent}")
```

## ü§ù Contributing

We welcome contributions! See [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

### Development Setup
```bash
git clone https://github.com/saky-semicolon/codebangla.git
cd codebangla
pip install -e ".[dev]"
pre-commit install
```

### Code Quality
```bash
# Format code
black codebangla tests
isort codebangla tests

# Lint code
flake8 codebangla tests
mypy codebangla

# Run all checks
tox
```

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- Inspired by the need to make programming accessible to Bengali speakers
- Built on Python's robust tokenization and AST infrastructure
- Thanks to the open-source community for tools and libraries

## üìû Support

- **Issues**: [GitHub Issues](https://github.com/saky-semicolon/codebangla/issues)
- **Discussions**: [GitHub Discussions](https://github.com/saky-semicolon/codebangla/discussions)
- **Documentation**: [Read the Docs](https://codebangla.readthedocs.io)
- **Email**: team@codebangla.org

---

<div align="center">

**Made with ‚ù§Ô∏è for the Bengali programming community**

[‚≠ê Star us on GitHub](https://github.com/saky-semicolon/codebangla) ‚Ä¢ [üê¶ Follow on Twitter](https://twitter.com/codebangla) ‚Ä¢ [üí¨ Join Discord](https://discord.gg/codebangla)

</div>
