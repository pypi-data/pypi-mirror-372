# coding: utf-8

"""Model Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""
# noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from mlx.api.model_registry.models.model_storage import ModelStorage
from typing import Optional, Set
from typing_extensions import Self

class Model(BaseModel):
    """Model"""
    # noqa: E501
    created: StrictStr
    description: StrictStr
    id: StrictStr
    labels: Dict[str, StrictStr]
    name: StrictStr
    project: StrictStr
    project_id: StrictStr
    public: StrictBool
    storage: ModelStorage
    summary: StrictStr
    tags: List[StrictStr]
    updated: StrictStr
    __properties: ClassVar[List[str]] = ["created", "description", "id", "labels", "name", "project", "project_id", "public", "storage", "summary", "tags", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "project": obj.get("project"),
            "project_id": obj.get("project_id"),
            "public": obj.get("public"),
            "storage": ModelStorage.from_dict(obj["storage"]) if obj.get("storage") is not None else None,
            "summary": obj.get("summary"),
            "tags": obj.get("tags"),
            "updated": obj.get("updated")
        })
        return _obj


