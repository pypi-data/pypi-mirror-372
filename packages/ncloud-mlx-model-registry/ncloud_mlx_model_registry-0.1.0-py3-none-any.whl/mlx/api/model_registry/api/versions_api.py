# coding: utf-8

"""Model Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""
# noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from mlx.api.model_registry.models.version import Version
from mlx.api.model_registry.models.version_list_request import VersionListRequest
from mlx.api.model_registry.models.version_request import VersionRequest
from mlx.api.model_registry.models.version_update_request import VersionUpdateRequest
from mlx.api.model_registry.models.versions_response import VersionsResponse

from mlx.api.model_registry.api_client import ApiClient, RequestSerialized
from mlx.api.model_registry.api_response import ApiResponse
from mlx.api.model_registry.rest import RESTResponseType


class VersionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_version(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_request: VersionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Version:
        """Create a new model version entry

        Create a new model version entry

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_request (VersionRequest): (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._create_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_request=version_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_version_with_http_info(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_request: VersionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Version]:
        """Create a new model version entry

        Create a new model version entry

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_request (VersionRequest): (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._create_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_request=version_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_version_without_preload_content(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_request: VersionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new model version entry

        Create a new model version entry

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_request (VersionRequest): (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._create_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_request=version_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_version_serialize(
        self,
        project_name,
        model_name,
        version_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_name is not None:
            _path_params['project_name'] = project_name
        if model_name is not None:
            _path_params['model_name'] = model_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if version_request is not None:
            _body_params = version_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/projects/{project_name}/models/{model_name}/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_version(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete model version (including files)

        Delete model version (including files)

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._delete_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_version_with_http_info(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete model version (including files)

        Delete model version (including files)

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._delete_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_version_without_preload_content(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete model version (including files)

        Delete model version (including files)

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._delete_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_version_serialize(
        self,
        project_name,
        model_name,
        version_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_name is not None:
            _path_params['project_name'] = project_name
        if model_name is not None:
            _path_params['model_name'] = model_name
        if version_name is not None:
            _path_params['version_name'] = version_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/projects/{project_name}/models/{model_name}/versions/{version_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def finalize_upload(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Version:
        """Finalize model version upload

        Finalize model version upload

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._finalize_upload_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def finalize_upload_with_http_info(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Version]:
        """Finalize model version upload

        Finalize model version upload

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._finalize_upload_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def finalize_upload_without_preload_content(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Finalize model version upload

        Finalize model version upload

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._finalize_upload_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _finalize_upload_serialize(
        self,
        project_name,
        model_name,
        version_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_name is not None:
            _path_params['project_name'] = project_name
        if model_name is not None:
            _path_params['model_name'] = model_name
        if version_name is not None:
            _path_params['version_name'] = version_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/private/projects/{project_name}/models/{model_name}/versions/{version_name}/finalize-upload',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_latest_model_version(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Version:
        """Get latest model version

        Get latest model version

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_latest_model_version_serialize(
            project_name=project_name,
            model_name=model_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_latest_model_version_with_http_info(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Version]:
        """Get latest model version

        Get latest model version

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_latest_model_version_serialize(
            project_name=project_name,
            model_name=model_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_latest_model_version_without_preload_content(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get latest model version

        Get latest model version

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_latest_model_version_serialize(
            project_name=project_name,
            model_name=model_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_latest_model_version_serialize(
        self,
        project_name,
        model_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_name is not None:
            _path_params['project_name'] = project_name
        if model_name is not None:
            _path_params['model_name'] = model_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/projects/{project_name}/models/{model_name}/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_version(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Version:
        """Get model version information

        Get model version information

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_version_with_http_info(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Version]:
        """Get model version information

        Get model version information

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_version_without_preload_content(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get model version information

        Get model version information

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_version_serialize(
        self,
        project_name,
        model_name,
        version_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_name is not None:
            _path_params['project_name'] = project_name
        if model_name is not None:
            _path_params['model_name'] = model_name
        if version_name is not None:
            _path_params['version_name'] = version_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/projects/{project_name}/models/{model_name}/versions/{version_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_versions(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        ascending: Optional[StrictBool] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        tags: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VersionsResponse:
        """List verisons for some ids

        List verisons for some ids

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            ascending (bool)
            page (int)
            page_size (int)
            search (str)
            sort_by (str)
            tags (List[str])
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_versions_serialize(
            project_name=project_name,
            model_name=model_name,
            ascending=ascending,
            page=page,
            page_size=page_size,
            search=search,
            sort_by=sort_by,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VersionsResponse",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_versions_with_http_info(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        ascending: Optional[StrictBool] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        tags: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VersionsResponse]:
        """List verisons for some ids

        List verisons for some ids

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            ascending (bool)
            page (int)
            page_size (int)
            search (str)
            sort_by (str)
            tags (List[str])
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_versions_serialize(
            project_name=project_name,
            model_name=model_name,
            ascending=ascending,
            page=page,
            page_size=page_size,
            search=search,
            sort_by=sort_by,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VersionsResponse",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_versions_without_preload_content(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        ascending: Optional[StrictBool] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        tags: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List verisons for some ids

        List verisons for some ids

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            ascending (bool)
            page (int)
            page_size (int)
            search (str)
            sort_by (str)
            tags (List[str])
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._get_versions_serialize(
            project_name=project_name,
            model_name=model_name,
            ascending=ascending,
            page=page,
            page_size=page_size,
            search=search,
            sort_by=sort_by,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VersionsResponse",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_versions_serialize(
        self,
        project_name,
        model_name,
        ascending,
        page,
        page_size,
        search,
        sort_by,
        tags,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_name is not None:
            _path_params['project_name'] = project_name
        if model_name is not None:
            _path_params['model_name'] = model_name
        # process the query parameters
        if ascending is not None:
            
            _query_params.append(('ascending', ascending))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/projects/{project_name}/models/{model_name}/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_versions_by_ids(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_list_request: VersionListRequest,
        ascending: Optional[StrictBool] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        tags: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VersionListRequest:
        """List verisons for some ids

        List verisons for some ids

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_list_request (VersionListRequest): (required)
            ascending (bool)
            page (int)
            page_size (int)
            search (str)
            sort_by (str)
            tags (List[str])
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._list_versions_by_ids_serialize(
            project_name=project_name,
            model_name=model_name,
            version_list_request=version_list_request,
            ascending=ascending,
            page=page,
            page_size=page_size,
            search=search,
            sort_by=sort_by,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VersionListRequest",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_versions_by_ids_with_http_info(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_list_request: VersionListRequest,
        ascending: Optional[StrictBool] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        tags: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VersionListRequest]:
        """List verisons for some ids

        List verisons for some ids

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_list_request (VersionListRequest): (required)
            ascending (bool)
            page (int)
            page_size (int)
            search (str)
            sort_by (str)
            tags (List[str])
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._list_versions_by_ids_serialize(
            project_name=project_name,
            model_name=model_name,
            version_list_request=version_list_request,
            ascending=ascending,
            page=page,
            page_size=page_size,
            search=search,
            sort_by=sort_by,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VersionListRequest",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_versions_by_ids_without_preload_content(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_list_request: VersionListRequest,
        ascending: Optional[StrictBool] = None,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        tags: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List verisons for some ids

        List verisons for some ids

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_list_request (VersionListRequest): (required)
            ascending (bool)
            page (int)
            page_size (int)
            search (str)
            sort_by (str)
            tags (List[str])
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._list_versions_by_ids_serialize(
            project_name=project_name,
            model_name=model_name,
            version_list_request=version_list_request,
            ascending=ascending,
            page=page,
            page_size=page_size,
            search=search,
            sort_by=sort_by,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VersionListRequest",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_versions_by_ids_serialize(
        self,
        project_name,
        model_name,
        version_list_request,
        ascending,
        page,
        page_size,
        search,
        sort_by,
        tags,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_name is not None:
            _path_params['project_name'] = project_name
        if model_name is not None:
            _path_params['model_name'] = model_name
        # process the query parameters
        if ascending is not None:
            
            _query_params.append(('ascending', ascending))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if version_list_request is not None:
            _body_params = version_list_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/projects/{project_name}/models/{model_name}/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_version(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        version_update_request: VersionUpdateRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Version:
        """Update model version metadata

        Update model version metadata

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            version_update_request (VersionUpdateRequest): (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._update_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            version_update_request=version_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_version_with_http_info(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        version_update_request: VersionUpdateRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Version]:
        """Update model version metadata

        Update model version metadata

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            version_update_request (VersionUpdateRequest): (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._update_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            version_update_request=version_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_version_without_preload_content(
        self,
        project_name: Annotated[StrictStr, Field(description="Project name")],
        model_name: Annotated[StrictStr, Field(description="Model name")],
        version_name: Annotated[StrictStr, Field(description="Version name")],
        version_update_request: VersionUpdateRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update model version metadata

        Update model version metadata

        Args:
            project_name (str): Project name (required)
            model_name (str): Model name (required)
            version_name (str): Version name (required)
            version_update_request (VersionUpdateRequest): (required)
            _request_timeout (int, tuple(int, int), optional): timeout
                setting for this request. If one number provided, it
                will be total request timeout. It can also be a pair
                (tuple) of (connection, read) timeouts.
            _request_auth (dict, optional): set to override the
                auth_settings for an a single request; this effectively
                ignores the authentication in the spec for a single
                request.
            _content_type (str, Optional): force content-type for the
                request.
            _headers (dict, optional): set to override the headers for a
                single request; this effectively ignores the headers in
                the spec for a single request.
            _host_index (int, optional): set to override the host_index
                for a single request; this effectively ignores the
                host_index in the spec for a single request.

        Returns:
            Returns the result object.
        """
        # noqa: E501

        _param = self._update_version_serialize(
            project_name=project_name,
            model_name=model_name,
            version_name=version_name,
            version_update_request=version_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '400': "Error",
            '404': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_version_serialize(
        self,
        project_name,
        model_name,
        version_name,
        version_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_name is not None:
            _path_params['project_name'] = project_name
        if model_name is not None:
            _path_params['model_name'] = model_name
        if version_name is not None:
            _path_params['version_name'] = version_name
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if version_update_request is not None:
            _body_params = version_update_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/projects/{project_name}/models/{model_name}/versions/{version_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


