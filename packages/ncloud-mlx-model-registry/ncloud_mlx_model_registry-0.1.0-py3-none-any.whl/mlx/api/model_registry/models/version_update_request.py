# coding: utf-8

"""Model Registry API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""
# noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from mlx.api.model_registry.models.training import Training
from mlx.api.model_registry.models.version_storage import VersionStorage
from typing import Optional, Set
from typing_extensions import Self

class VersionUpdateRequest(BaseModel):
    """VersionUpdateRequest"""
    # noqa: E501
    author: Optional[StrictStr] = None
    labels: Optional[Dict[str, StrictStr]] = None
    stage: Optional[StrictStr] = None
    storage: Optional[VersionStorage] = None
    summary: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    training: Optional[Training] = None
    __properties: ClassVar[List[str]] = ["author", "labels", "stage", "storage", "summary", "tags", "training"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VersionUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of training
        if self.training:
            _dict['training'] = self.training.to_dict()
        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['author'] = None

        # set to None if labels (nullable) is None
        # and model_fields_set contains the field
        if self.labels is None and "labels" in self.model_fields_set:
            _dict['labels'] = None

        # set to None if stage (nullable) is None
        # and model_fields_set contains the field
        if self.stage is None and "stage" in self.model_fields_set:
            _dict['stage'] = None

        # set to None if storage (nullable) is None
        # and model_fields_set contains the field
        if self.storage is None and "storage" in self.model_fields_set:
            _dict['storage'] = None

        # set to None if summary (nullable) is None
        # and model_fields_set contains the field
        if self.summary is None and "summary" in self.model_fields_set:
            _dict['summary'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if training (nullable) is None
        # and model_fields_set contains the field
        if self.training is None and "training" in self.model_fields_set:
            _dict['training'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VersionUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author"),
            "labels": obj.get("labels"),
            "stage": obj.get("stage"),
            "storage": VersionStorage.from_dict(obj["storage"]) if obj.get("storage") is not None else None,
            "summary": obj.get("summary"),
            "tags": obj.get("tags"),
            "training": Training.from_dict(obj["training"]) if obj.get("training") is not None else None
        })
        return _obj


