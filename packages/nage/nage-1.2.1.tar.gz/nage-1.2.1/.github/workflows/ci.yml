name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        # 安装开发依赖（如果存在）
        if [ -f "requirements-dev.txt" ]; then
          pip install -r requirements-dev.txt
        fi
        # 确保安装 pytest 用于真正的测试
        pip install pytest pytest-cov
    
    - name: Lint with flake8 (if available)
      run: |
        if pip show flake8 >/dev/null 2>&1; then
          flake8 nage/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 nage/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        else
          echo "flake8 not installed, skipping linting"
        fi
    
    - name: Run comprehensive tests
      run: |
        echo "Running comprehensive tests for Python ${{ matrix.python-version }}"
        
        # 1. 基础导入测试
        echo "1. Testing basic imports..."
        python -c "
        try:
            import nage
            from nage import main
            from nage.ai_client import AIClient
            from nage.setting import Setting
            from nage.parse import JsonParser
            print('✅ All modules imported successfully')
        except Exception as e:
            print(f'❌ Import failed: {e}')
            exit(1)
        "
        
        # 2. 命令行接口测试
        echo "2. Testing CLI interface..."
        # 使用 Python 的 subprocess 和 timeout 来测试，避免系统 timeout 命令兼容性问题
        python -c "
        import subprocess
        import sys
        try:
            # 使用 Python 的 subprocess 来控制超时，避免系统差异
            result = subprocess.run([sys.executable, '-m', 'nage'], 
                                  capture_output=True, text=True, timeout=5)
            output = result.stdout + result.stderr
        except subprocess.TimeoutExpired:
            # 超时是预期的，因为程序可能在等待用户输入
            output = 'Program started but timed out (expected behavior)'
        except Exception as e:
            output = f'Exception: {e}'
        
        print(f'CLI Output: {output}')
        
        # 检查是否包含预期的输出
        if 'This is a free tool by 0x3st' in output or 'First time setup' in output:
            print('✅ CLI interface test passed')
        else:
            print('⚠️ CLI test completed with timeout (normal if waiting for input)')
        "
        
        # 3. 配置系统测试
        echo "3. Testing configuration system..."
        python -c "
        from nage.setting import Setting
        import tempfile
        import os
        
        # 测试设置类
        try:
            # 创建临时配置目录
            with tempfile.TemporaryDirectory() as temp_dir:
                # 临时改变 HOME 目录
                original_home = os.environ.get('HOME')
                os.environ['HOME'] = temp_dir
                
                try:
                    # 测试配置类创建
                    setting = Setting()
                    print(f'Default model: {setting.model}')
                    
                    # 测试配置修改
                    setting.change_model('test-model')
                    assert setting.model == 'test-model', f'Expected test-model, got {setting.model}'
                    
                    # 测试配置保存和加载
                    setting.save()
                    new_setting = Setting()
                    new_setting.load()
                    assert new_setting.model == 'test-model', f'Expected test-model after load, got {new_setting.model}'
                    
                finally:
                    # 恢复原始 HOME 目录
                    if original_home:
                        os.environ['HOME'] = original_home
                    
            print('✅ Configuration system test passed')
        except Exception as e:
            print(f'❌ Configuration test failed: {e}')
            exit(1)
        "
        
        # 4. AI 客户端和 JSON 处理测试
        echo "4. Testing AI client and JSON parser..."
        python -c "
        from nage.ai_client import AIClient
        from nage.parse import JsonParser
        import json
        
        try:
            # 测试 AI 客户端实例化
            client = AIClient()
            assert client.settings is not None, 'AI client should have settings'
            print('✅ AI client instantiation passed')
            
            # 测试 JSON 解析器
            test_json = json.dumps({'type': 'test', 'content': 'hello'})
            parser = JsonParser(test_json)
            
            # 测试状态检查
            status = parser.check_status()
            assert status == True, f'Expected True, got {status}'
            print('✅ JSON parser test passed')
            
        except Exception as e:
            print(f'❌ AI client/JSON parser test failed: {e}')
            exit(1)
        "
        
        # 5. 如果有 pytest，运行单元测试
        if pip show pytest >/dev/null 2>&1; then
            echo "5. Running pytest unit tests..."
            if [ -d "tests" ]; then
                pytest -v --tb=short
            else
                echo "No tests directory found, running direct pytest on modules..."
                python -m pytest --tb=short -v --collect-only nage/ 2>/dev/null || echo "Module collection completed"
                echo "Running basic module validation..."
                python -c "from nage.setting import Setting; from nage.ai_client import AIClient; from nage.parse import JsonParser; from nage import main; import json; setting = Setting(); client = AIClient(); parser = JsonParser(json.dumps({'type': 'test'})); assert all([setting, client, parser.check_status()]); print('✅ All modules validated successfully')"
            fi
        else
            echo "5. pytest not available, skipping unit tests"
        fi
        
        echo "✅ All compatibility tests completed for Python ${{ matrix.python-version }}"

  build-test:
    name: Test installer package build on ${{ matrix.platform }}-${{ matrix.arch }}
    needs: test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            package_format: "deb"
            installer_ext: ".deb"
          - os: windows-latest
            platform: windows
            arch: x64
            package_format: "msi"
            installer_ext: ".msi"
          - os: macos-15
            platform: macos
            arch: arm64
            package_format: "dmg"
            installer_ext: ".dmg"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # 使用稳定版本进行构建测试
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install timeout command (macOS)
      if: matrix.platform == 'macos'
      run: |
        brew install coreutils
    
    - name: Install WiX Toolset (Windows)
      if: matrix.platform == 'windows'
      run: |
        choco install wixtoolset -y
        echo "C:\\Program Files (x86)\\WiX Toolset v3.11\\bin" >> $GITHUB_PATH
    
    - name: Install deb build tools (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev
    
    - name: Install dependencies with build extras
      run: |
        uv sync --extra build
    
    - name: Create PyInstaller spec file
      shell: bash
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          # ARM64 spec file
          cat > nage.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['nage/__main__.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=['click', 'openai', 'pyperclip', 'nage.ai_client', 'nage.setting', 'nage.parse'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='nage',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=False,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch='arm64',
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF
        else
          # x64 spec file (Linux, Windows, macOS Intel)
          cat > nage.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        a = Analysis(
            ['nage/__main__.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=['click', 'openai', 'pyperclip', 'nage.ai_client', 'nage.setting', 'nage.parse'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='nage',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=False,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch='x86_64',
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF
        fi
    
    - name: Test build executable with PyInstaller
      timeout-minutes: 10
      shell: bash
      run: |
        uv run --extra build pyinstaller --clean nage.spec

    - name: Test Linux .deb package creation
      if: matrix.platform == 'linux'
      run: |
        # 创建 Debian 包结构
        mkdir -p nage_1.0_amd64/DEBIAN
        mkdir -p nage_1.0_amd64/usr/bin
        mkdir -p nage_1.0_amd64/usr/share/applications
        mkdir -p nage_1.0_amd64/usr/share/doc/nage
        
        # 复制可执行文件
        cp dist/nage nage_1.0_amd64/usr/bin/
        chmod +x nage_1.0_amd64/usr/bin/nage
        
        # 创建控制文件
        cat > nage_1.0_amd64/DEBIAN/control << EOF
        Package: nage
        Version: 1.0
        Section: utils
        Priority: optional
        Architecture: amd64
        Maintainer: 0x3st
        Description: AI assistant CLI tool
         A command-line AI assistant tool.
        EOF
        
        # 创建 .desktop 文件
        cat > nage_1.0_amd64/usr/share/applications/nage.desktop << EOF
        [Desktop Entry]
        Name=Nage
        Comment=AI assistant CLI tool
        Exec=/usr/bin/nage
        Terminal=true
        Type=Application
        Categories=Utility;
        EOF
        
        # 构建 .deb 包
        dpkg-deb --build nage_1.0_amd64
        mv nage_1.0_amd64.deb nage-test-${{ matrix.platform }}-${{ matrix.arch }}.deb
        echo "✅ .deb package created successfully"

    - name: Test Windows MSI installer creation
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        # 创建 WiX 源文件 - 简化版本
        cat > nage.wxs << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
          <Product Id="*" Name="Nage" Language="1033" Version="1.0.0" Manufacturer="0x3st" UpgradeCode="12345678-1234-1234-1234-123456789012">
            <Package InstallerVersion="200" Compressed="yes" InstallScope="perMachine" />
            <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." />
            <MediaTemplate EmbedCab="yes" />
            
            <Feature Id="ProductFeature" Title="Nage" Level="1">
              <ComponentGroupRef Id="ProductComponents" />
            </Feature>
            
            <Directory Id="TARGETDIR" Name="SourceDir">
              <Directory Id="ProgramFilesFolder">
                <Directory Id="INSTALLFOLDER" Name="Nage" />
              </Directory>
            </Directory>
            
            <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
              <Component Id="nage.exe" Guid="*">
                <File Id="nage.exe" Source="dist/nage.exe" KeyPath="yes"/>
                <Environment Id="AddToPath" Name="PATH" Value="[INSTALLFOLDER]" Action="set" Part="last" System="yes" />
              </Component>
            </ComponentGroup>
          </Product>
        </Wix>
        EOF
        
        # 编译 MSI
        candle.exe nage.wxs
        light.exe -sw1076 -o nage-test-${{ matrix.platform }}-${{ matrix.arch }}.msi nage.wixobj
        echo "✅ MSI installer created successfully"

    - name: Test macOS DMG package creation
      if: matrix.platform == 'macos'
      run: |
        # 创建应用程序包结构
        mkdir -p Nage.app/Contents/MacOS
        mkdir -p Nage.app/Contents/Resources
        
        # 复制可执行文件
        cp dist/nage Nage.app/Contents/MacOS/
        chmod +x Nage.app/Contents/MacOS/nage
        
        # 创建 Info.plist
        cat > Nage.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>nage</string>
            <key>CFBundleIdentifier</key>
            <string>com.0x3st.nage</string>
            <key>CFBundleName</key>
            <string>Nage</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>LSUIElement</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        # 创建 DMG
        hdiutil create -volname "Nage" -srcfolder Nage.app -ov -format UDZO nage-test-${{ matrix.platform }}-${{ matrix.arch }}.dmg
        echo "✅ DMG package created successfully"
    
    - name: Test executable (Linux/macOS)
      if: matrix.platform != 'windows'
      shell: bash
      run: |
        chmod +x ./dist/nage
        # Test that the binary exists and is executable
        if [ ! -f "./dist/nage" ]; then
          echo "Error: Binary not found"
          exit 1
        fi
        
        # Test that binary starts correctly
        echo "Testing binary execution..."
        
        # 使用跨平台的方法测试可执行文件
        if command -v timeout >/dev/null 2>&1; then
          # GNU timeout 可用
          echo "Using system timeout command"
          output=$(echo -e "\n\n\ntest_key" | timeout 10s ./dist/nage 2>&1 || true)
        else
          # 使用 Bash 的后台进程和 sleep 作为替代
          echo "Using bash background process method"
          echo -e "\n\n\ntest_key" | ./dist/nage > output.log 2>&1 &
          pid=$!
          sleep 5
          kill $pid 2>/dev/null || true
          wait $pid 2>/dev/null || true
          output=$(cat output.log 2>/dev/null || echo "No output captured")
        fi
        
        echo "Binary output:"
        echo "$output"
        
        # Check if binary started correctly
        if echo "$output" | grep -q "First time setup"; then
          echo "✅ Binary test passed - first time setup prompt found"
        elif echo "$output" | grep -q "This is a free tool by 0x3st"; then
          echo "✅ Binary test passed - welcome message found"
        else
          echo "⚠️ Binary started but output differs (might be normal)"
        fi
        ls -la dist/

    - name: Test executable (Windows)
      if: matrix.platform == 'windows'
      shell: bash
      run: |
        chmod +x ./dist/nage.exe
        # Test that the binary exists and is executable  
        if [ ! -f "./dist/nage.exe" ]; then
          echo "Error: Binary not found"
          exit 1
        fi
        
        # Test that binary starts correctly
        echo "Testing binary execution..."
        
        # Windows 版本使用 timeout 命令 (应该可用)
        if command -v timeout >/dev/null 2>&1; then
          echo "Using system timeout command"
          output=$(echo -e "\n\n\ntest_key" | timeout 10s ./dist/nage.exe 2>&1 || true)
        else
          # 备用方案：使用后台进程
          echo "Using background process method"
          echo -e "\n\n\ntest_key" | ./dist/nage.exe > output.log 2>&1 &
          pid=$!
          sleep 5
          kill $pid 2>/dev/null || true
          wait $pid 2>/dev/null || true
          output=$(cat output.log 2>/dev/null || echo "No output captured")
        fi
        
        echo "Binary output:"
        echo "$output"
        
        # Check if binary started correctly
        if echo "$output" | grep -q "First time setup"; then
          echo "✅ Binary test passed - first time setup prompt found"
        elif echo "$output" | grep -q "This is a free tool by 0x3st"; then
          echo "✅ Binary test passed - welcome message found"
        else
          echo "⚠️ Binary started but output differs (might be normal)"
        fi
        ls -la dist/
    
    - name: Upload test installer package
      uses: actions/upload-artifact@v4
      with:
        name: test-nage-${{ matrix.platform }}-${{ matrix.arch }}-installer
        path: nage-test-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.installer_ext }}
        retention-days: 1
