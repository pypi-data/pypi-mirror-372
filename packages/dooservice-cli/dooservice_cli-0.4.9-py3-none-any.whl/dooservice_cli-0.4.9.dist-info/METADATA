Metadata-Version: 2.4
Name: dooservice-cli
Version: 0.4.9
Summary: Professional CLI tool for managing Odoo instances with declarative configuration, automated backups, snapshots, and GitHub integration.
Author-email: DooService Development Team <principal@apiservicesac.com>, API SERVICE SAC <principal@apiservicesac.com>
Maintainer-email: DooService Development Team <principal@apiservicesac.com>
License: MIT License
        
        Copyright (c) 2023 Your Name
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://apiservicesac.com
Project-URL: Documentation, https://github.com/apiservicesac/dooservice-cli-py#readme
Project-URL: Repository, https://github.com/apiservicesac/dooservice-cli-py
Project-URL: Issues, https://github.com/apiservicesac/dooservice-cli-py/issues
Project-URL: Changelog, https://github.com/apiservicesac/dooservice-cli-py/releases
Keywords: odoo,docker,cli,management,deployment,backup,snapshot,devops,automation,orchestration,containerization,enterprise,erp,github-integration,webhook,configuration-management
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: System :: Installation/Setup
Classifier: Topic :: System :: Software Distribution
Classifier: Topic :: Database
Classifier: Topic :: Internet :: WWW/HTTP :: WSGI :: Application
Classifier: Environment :: Console
Classifier: Framework :: Odoo
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: click>=8.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: docker>=7.0.0
Requires-Dist: GitPython>=3.1
Requires-Dist: dacite>=1.6.0
Requires-Dist: toml>=0.10.2
Requires-Dist: requests>=2.25.0
Requires-Dist: cryptography>=3.0.0
Requires-Dist: psutil>=7.0.0
Requires-Dist: jinja2>=3.1.6
Requires-Dist: fastapi>=0.104.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: ruff>=0.11.13
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: flake8>=4.0; extra == "dev"
Requires-Dist: pytest-mock>=3.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0; extra == "dev"
Requires-Dist: coverage>=7.0; extra == "dev"
Requires-Dist: ruff==0.11.13; extra == "dev"
Requires-Dist: build>=0.10.0; extra == "dev"
Requires-Dist: twine>=4.0.0; extra == "dev"
Dynamic: license-file

# DooService CLI

DooService CLI is a professional command-line tool for managing complex Odoo instances using a declarative approach. Define your entire infrastructure in a single `dooservice.yml` file and manage instances, repositories, backups, deployments, and GitHub integration from the command line.

## ‚ú® Features

- **üîß Declarative Configuration**: Define all Odoo instances, repositories, and deployments in a single YAML file
- **üöÄ Full Instance Lifecycle**: Create, start, stop, sync, and delete instances with simple commands  
- **üìÅ Repository Management**: Automatically clone and update Odoo addon repositories from Git
- **üê≥ Docker Integration**: Native Docker support for deploying Odoo and PostgreSQL containers
- **üíæ Backup System**: Create, restore, list, and manage instance backups with database and filestore support
- **üì∏ Snapshot Management**: Capture complete instance states including configuration, repositories, and modules
- **üêô GitHub Integration**: OAuth authentication, SSH key management, and webhook-based auto-sync
- **üé£ Webhook Synchronization**: HTTP daemon with signature verification for real-time GitHub updates
- **üîç Dry-Run Mode**: Preview all operations before executing them with `--dry-run`
- **‚ö° High Performance**: Built with clean architecture principles and optimized for speed

## üì¶ Installation

### Production Installation

```bash
# Using pipx (recommended)
pipx install dooservice-cli

# Using pip
pip install dooservice-cli

# Verify installation
dooservice --help
```

### Docker Installation

```bash
# Run with Docker
docker run -v $(pwd):/workspace -v /var/run/docker.sock:/var/run/docker.sock \
  dooservice/cli:latest --help
```

### Development Installation

```bash
# Clone the repository
git clone https://github.com/your-org/dooservice-cli-py.git
cd dooservice-cli

# Install uv (modern Python package manager)
curl -LsSf https://astral.sh/uv/install.sh | sh

# Install all dependencies
uv sync --all-extras

# Verify installation
uv run dooservice --help
```

For detailed installation instructions, see [INSTALL.md](INSTALL.md).

## üöÄ Quick Start

1. **Initialize Configuration**
   ```bash
   # Copy example configuration
   cp dooservice.yml.example dooservice.yml
   
   # Edit the configuration to match your needs
   nano dooservice.yml
   ```

2. **Validate Configuration**
   ```bash
   dooservice config validate
   ```

3. **Create Your First Instance**
   ```bash
   # Create and start instance (with preview)
   dooservice instance create my-instance --dry-run
   dooservice instance create my-instance --start
   ```

4. **Access Your Instance**
   Your Odoo instance will be running at `http://localhost:8069` (or your configured port)

5. **Manage Your Instance**
   ```bash
   # Check status
   dooservice instance status my-instance
   
   # View logs
   dooservice instance logs my-instance --follow
   
   # Create backup
   dooservice backup create my-instance
   ```

## üìñ Command Reference

### Instance Management
```bash
# Create and manage instances
dooservice instance create <name> [--start] [--dry-run]
dooservice instance start <name>
dooservice instance stop <name>
dooservice instance status <name>
dooservice instance logs <name> [--follow] [--tail <lines>]
dooservice instance sync <name> [--dry-run]
dooservice instance delete <name> [--dry-run]
dooservice instance exec-web <name>
dooservice instance exec-db <name>
```

### Repository Management
```bash
# Update addon repositories
dooservice repo update <repository_name>
dooservice repo update-all
```

### Configuration Management
```bash
# Validate and manage configuration
dooservice config validate
dooservice lock generate
```

### Backup Operations
```bash
# Create and manage backups
dooservice backup create <instance> [--dry-run] [--description <text>]
dooservice backup restore <backup_id> <target_instance> [--dry-run]
dooservice backup list [--instance <name>]
dooservice backup delete <backup_id>
```

### Snapshot Management
```bash
# Create and manage snapshots
dooservice snapshot create <instance> [--tag <tag>] [--dry-run]
dooservice snapshot restore <snapshot_id> <target> [--dry-run]
dooservice snapshot list [--instance <name>]
dooservice snapshot delete <snapshot_id>
```

### GitHub Integration
```bash
# Authentication
dooservice github login
dooservice github logout
dooservice github status

# SSH Key Management
dooservice github key list
dooservice github key add <title> <key_file>
dooservice github key remove <key_id>

# Repository Watchers
dooservice github watch add <repo> <instance> [--action <action>]
dooservice github watch remove <repo> <instance>
dooservice github watch list

# Webhook Synchronization
dooservice github listen start [--port <port>] [--host <host>]
dooservice github listen stop
dooservice github listen status
dooservice github listen logs [--follow]

# Webhook Synchronization Service
dooservice github sync start [--port <port>] [--daemon]
dooservice github sync stop
dooservice github sync status
```


## üìö Configuration

The `dooservice.yml` file is the heart of DooService CLI. It defines your entire Odoo infrastructure in a declarative way.

### Basic Structure

```yaml
# Global repositories that can be used by instances
repositories:
  my-addons:
    url: "https://github.com/your-org/odoo-addons.git"
    branch: "main"

# Instance definitions
instances:
  production:
    odoo_version: "17.0"
    data_dir: "/opt/odoo-data/production"
    
    ports:
      web: 8069
      db: 5432
    
    repositories:
      - my-addons
    
    env_vars:
      ODOO_DB_NAME: "production_db"
      ODOO_DB_PASSWORD: "secure_password"
    
    deployment:
      docker:
        web:
          image: "odoo:17.0"
          container_name: "production-odoo"
        db:
          image: "postgres:15"
          container_name: "production-db"
```

### Advanced Features

- **üîÑ Variable Substitution**: Use `${data_dir}` and `${env_vars.VARIABLE}` placeholders
- **üê≥ Docker Health Checks**: Configure container health monitoring  
- **üìÅ Custom Paths**: Define paths for configs, addons, logs, and filestore
- **üîí Environment Variables**: Secure configuration with environment-based secrets
- **üéØ Multiple Environments**: Define development, staging, and production instances
- **üêô GitHub Integration**: OAuth authentication and webhook-based repository synchronization
- **üé£ Webhook Automation**: Automatic instance updates on repository changes

See `dooservice.yml.example` for a complete configuration example.

## ü§ù Contributing

We welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details.

## üìú License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üÜò Support

- üìñ [Documentation](https://github.com/your-org/dooservice-cli-py)
- üêõ [Issues](https://github.com/your-org/dooservice-cli-py/issues)
- üí¨ [Discussions](https://github.com/your-org/dooservice-cli-py/discussions)

