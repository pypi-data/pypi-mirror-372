version: '1.0'  # Versi√≥n del esquema de configuraci√≥n. Se usa para detectar cambios incompatibles en la estructura.

# =======================================
# Gesti√≥n de Dominios y SSL
# =======================================
domains:
  default_provider: <string: 'letsencrypt' | 'cloudflare' | 'zerossl' | 'other'>  # Proveedor SSL por defecto si no se especifica en cada dominio
  default_ssl: <boolean>                         # Activar SSL (HTTPS) por defecto
  default_force_ssl: <boolean>                   # Redirigir HTTP ‚Üí HTTPS
  default_redirect_www: <boolean>                # Redirecci√≥n entre www y sin www
  default_hsts: <boolean>                        # Activar cabecera HSTS (HTTP Strict Transport Security)

  providers:
    letsencrypt:
      email: <string: ${env_vars.LETSENCRYPT_EMAIL}>  # Email de registro en Let's Encrypt
    cloudflare:
      api_token: <string: ${env_vars.CLOUDFLARE_API_TOKEN}>  # Token de API para autenticaci√≥n en Cloudflare
      zone_id: <string: ${env_vars.CLOUDFLARE_ZONE_ID}>      # ID de zona DNS en Cloudflare
    zerossl:
      api_key: <string: ${env_vars.ZEROSSL_API_KEY}>         # Clave de API para ZeroSSL

  base_domains:
    - name: <string>                             # Dominio base (ej. example.com)
      ssl_provider: <string: 'letsencrypt' | 'cloudflare' | 'zerossl' | 'other'>  # Override del proveedor SSL
      ssl: <boolean>                             # Habilitar SSL para este dominio
      force_ssl: <boolean>                       # Redirigir a HTTPS este dominio
      redirect_www: <boolean>                    # Redirigir www‚Üîsin-www
      hsts: <boolean>                            # Activar o desactivar HSTS
      cname_target: <string|null>                # Destino CNAME si se desea redirigir el dominio
      dns_challenge: <boolean>                   # Si se usa validaci√≥n DNS para emisi√≥n de SSL

# =======================================
# Configuraci√≥n Global de Backups
# =======================================
backup:
  enabled: <boolean: true>                      # Activar sistema de backup globalmente
  output_dir: <string: '/opt/dooservice/backups'> # Directorio de almacenamiento de backups
  format: <string: 'zip' | 'dump'>            # Formato de backup por defecto
  retention:                                    # Pol√≠ticas de retenci√≥n de backups
    days: <integer: 30>                         # D√≠as a mantener backups (0 = sin l√≠mite)
    max_backups: <integer: 10>                  # N√∫mero m√°ximo de backups (0 = sin l√≠mite)
  auto_backup:                                  # Configuraci√≥n global de backup autom√°tico
    enabled: <boolean: false>                   # Activar backup autom√°tico globalmente
    format: <string: 'zip' | 'dump'>            # Formato de backup autom√°tico
    schedule:                                   # Configuraci√≥n de programaci√≥n de backups autom√°ticos
      frequency: <string: 'daily' | 'weekly' | 'monthly'> # Frecuencia de backups autom√°ticos
      time: <string: '02:00'>                   # Hora de ejecuci√≥n del backup autom√°tico (formato HH:MM)

# =======================================
# Configuraci√≥n Global de Snapshots  
# =======================================
snapshot:
  enabled: <boolean: true>                        # Activar sistema de snapshots globalmente
  default_storage_dir: <string: '/opt/dooservice/snapshots'> # Directorio por defecto para snapshots
  retention:
    days: <integer: 60>                           # D√≠as a mantener snapshots por defecto
    max_snapshots: <integer: 100>                 # N√∫mero m√°ximo de snapshots global

# =======================================
# Configuraci√≥n Global de GitHub Integration
# =======================================
github:
  enabled: <boolean: true>                        # Activar integraci√≥n con GitHub globalmente
  oauth:
    client_id: <string: ${env_vars.GITHUB_CLIENT_ID}>    # ID de aplicaci√≥n OAuth de GitHub
    client_secret: <string: ${env_vars.GITHUB_CLIENT_SECRET}> # Secret de aplicaci√≥n OAuth de GitHub
    redirect_uri: <string: 'http://localhost:8080/auth/callback'> # URI de redirecci√≥n OAuth
    scopes: <array: ['repo', 'read:user', 'admin:public_key']> # Permisos OAuth solicitados
  webhook:
    enabled: <boolean: true>                      # Activar webhook listener
    default_host: <string: 'localhost'>          # Host por defecto para webhook listener
    default_port: <integer: 8080>                 # Puerto por defecto para webhook listener
    default_secret: <string: ${env_vars.GITHUB_WEBHOOK_SECRET}> # Secret por defecto para webhooks
    auto_start: <boolean: false>                  # Iniciar listener autom√°ticamente

# =======================================
# Definici√≥n de Repositorios Globales
# =======================================
repositories:
  <repository_name>:                             # Identificador √∫nico del repositorio
    source_type: <string: 'git' | 'zip' | 'local' | 'tar.gz'>  # M√©todo de obtenci√≥n del repositorio
    path: <string: '${data_dir}/${repository_name}'>  # Ruta local de almacenamiento
    type: <string: 'git' | 'github' | 'gitlab'>  # Tipo de repositorio Git
    url: <string>                                # URL del repositorio
    branch: <string>                             # Rama a usar
    ssh_key_path: <string: '${data_dir}/ssh/${repository_name}_key'>  # Clave SSH si se requiere
    submodules: <boolean>                        # Incluir subm√≥dulos del repositorio
    github:                                      # Configuraci√≥n GitHub para este repositorio
      auto_watch: <boolean: true>                # Observar autom√°ticamente todas las instancias que usen este repositorio
      default_action: <string|array: 'pull+restart' | ['backup', 'pull+restart']>  # Acci√≥n por defecto (simple o m√∫ltiple)
      watchers: <array>                          # Lista espec√≠fica de watchers (opcional)
        - instance: <string>                     # Nombre de instancia espec√≠fica
          action: <string|array: 'pull' | 'restart' | 'pull+restart' | 'sync' | 'sync+restart' | 'backup' | 'snapshot' | ['backup', 'pull+restart']>  # Acci√≥n a ejecutar (simple o m√∫ltiple)
          enabled: <boolean: true>               # Activar este watcher
      exclude_instances: <array: [<string>]>     # Instancias a excluir del auto-watch

# =======================================
# Definici√≥n de Instancias Odoo
# =======================================
instances:
  <name>:                               # Nombre √∫nico de la instancia
    odoo_version: <string: '14.0' | '15.0' | '16.0' | '17.0' | '18.0'>  # Versi√≥n de Odoo
    # -----------------------------------
    # Configuraci√≥n de backup por instancia
    # -----------------------------------
    auto_backup:
      enabled: <boolean: true>  
      db_name: <string: '${name}_db'>         # Nombre de la base de datos a respaldar

    data_dir: <string: '/opt/odoo-data/${name}'>  # Directorio ra√≠z de la data

    # -----------------------------------
    # Rutas internas
    # -----------------------------------
    paths:
      config: <string: '${data_dir}/etc/odoo.conf'>          # Archivo de configuraci√≥n de Odoo
      addons: <string: '${data_dir}/addons'>                 # Ruta de addons personalizados
      logs: <string: '${data_dir}/logs'>                     # Carpeta de logs
      filestore: <string: '${data_dir}/filestore'>           # Ruta del filestore de Odoo para backups

    # -----------------------------------
    # Puertos expuestos
    # -----------------------------------
    ports:
      http: <str: ${env_vars.ODOO_HTTP_PORT}>                 # Puerto HTTP
      longpolling: <str: ${env_vars.ODOO_LONGPOLLING_PORT}>   # Puerto para longpolling

    # -----------------------------------
    # Repositorios espec√≠ficos de la instancia
    # -----------------------------------
    repositories:
      <repository_name>:
        source_type: <string>
        path: <string: '${data_dir}/repos/${repository_name}'>
        type: <string>
        url: <string>
        branch: <string>
        ssh_key_path: <string: '${data_dir}/ssh/${repository_name}_key'>
        submodules: <boolean>
        github:                                      # Configuraci√≥n GitHub para este repositorio
          auto_watch: <boolean: true>                # Observar autom√°ticamente todas las instancias que usen este repositorio
          default_action: <string|array: 'pull+restart' | ['backup', 'pull+restart']>  # Acci√≥n por defecto (simple o m√∫ltiple)
          watchers: <array>                          # Lista espec√≠fica de watchers (opcional)
            - instance: <string>                     # Nombre de instancia espec√≠fica
              action: <string|array: 'pull' | 'restart' | 'pull+restart' | 'sync' | 'sync+restart' | 'backup' | 'snapshot' | ['backup', 'pull+restart']>  # Acci√≥n a ejecutar (simple o m√∫ltiple)
              enabled: <boolean: true>               # Activar este watcher
          exclude_instances: <array: [<string>]>     # Instancias a excluir del auto-watch

    # -----------------------------------
    # Variables de entorno (agrupadas por tipo)
    # -----------------------------------
    env_vars:
      ## üåê Configuraci√≥n de red y puertos
      ODOO_HTTP_PORT: <integer>              # Puerto HTTP externo
      ODOO_LONGPOLLING_PORT: <integer>  # Puerto de longpolling

      # FOR ODOO CONF
      ## üîê Credenciales de base de datos
      DB_HOST: <string>                    # Host del servidor PostgreSQL
      DB_PORT: <integer>                   # Puerto PostgreSQL
      DB_USER: <string>                    # Usuario de base de datos
      DB_PASSWORD: <string>            # Contrase√±a del usuario
      ADMIN_PASSWORD: <string>      # Contrase√±a del superadministrador de Odoo (tambi√©n usado como admin_passwd para backups)

      ## ‚öôÔ∏è Par√°metros de rendimiento y recursos
      WORKERS: <integer>                          # Cantidad de workers (recomendado >= 2)
      LIMIT_MEMORY_SOFT: <integer>                # L√≠mite suave de memoria
      LIMIT_MEMORY_HARD: <integer>                # L√≠mite duro de memoria
      LIMIT_REQUEST: <integer>                    # M√°ximo de requests antes de reiniciar el worker
      LIMIT_TIME_CPU: <integer>                   # Tiempo m√°ximo de CPU por request (en segundos)
      LIMIT_TIME_REAL: <integer>                  # Tiempo real m√°ximo por request
      MAX_CRON_THREADS: <integer>                 # Hilos para tareas programadas (cron)

      ## üõ†Ô∏è Configuraciones generales de Odoo
      PROXY_MODE: <boolean>                       # Activar si est√° detr√°s de un proxy
      LIST_DB: <boolean>                          # Mostrar listado de bases de datos
      TIMEZONE: <string>                          # Zona horaria del servidor

      # FOR DOMAIN
      ## üîí Proveedores SSL y API keys
      LETSENCRYPT_EMAIL: <string>        # Email para Let's Encrypt
      CLOUDFLARE_API_TOKEN: <string>  # Token API Cloudflare
      CLOUDFLARE_ZONE_ID: <string>      # ID de zona Cloudflare
      ZEROSSL_API_KEY: <string>            # API Key de ZeroSSL

      # FOR GITHUB INTEGRATION
      ## üêô GitHub OAuth y Webhooks
      GITHUB_CLIENT_ID: <string>           # ID de aplicaci√≥n GitHub OAuth
      GITHUB_CLIENT_SECRET: <string>       # Secret de aplicaci√≥n GitHub OAuth
      GITHUB_WEBHOOK_SECRET: <string>      # Secret para verificaci√≥n de webhooks

    # -----------------------------------
    # Configuraci√≥n de dominio de la instancia
    # -----------------------------------
    domain:
      base: <string: '${name}.example.com'>       # Dominio completo (FQDN)
      subdomain: <string: '${name}'>              # Subdominio
      use_root_domain: <boolean>                  # Usar dominio ra√≠z directamente

    # -----------------------------------
    # Dependencias de Python
    # -----------------------------------
    python_dependencies: <array of string>         # Lista de paquetes a instalar con pip

    # -----------------------------------
    # Configuraci√≥n de Snapshots
    # -----------------------------------
    snapshot:
      enabled: <boolean: true>                      # Activar sistema de snapshots
      storage_dir: <string: '${data_dir}/snapshots'> # Directorio de almacenamiento de snapshots
      include_backup_by_default: <boolean: true>    # Incluir backup completo en snapshots por defecto
      retention:
        days: <integer: 60>                         # D√≠as a mantener snapshots (0 = sin l√≠mite)
        max_snapshots: <integer: 20>                # N√∫mero m√°ximo de snapshots (0 = sin l√≠mite)


    # -----------------------------------
    # Configuraci√≥n de despliegue
    # -----------------------------------
    deployment:
      type: <string: 'system' | 'docker'>         # Tipo de despliegue (nativo o contenedor)

      docker:
        web:
          image: <string: 'odoo:${odoo_version}'>
          container_name: <string: 'odoo_${name}'>
          restart_policy: <string: 'no' | 'on-failure' | 'always' | 'unless-stopped'>
          volumes:
            - <string: '${paths.addons}:/mnt/extra-addons'>
            - <string: '${paths.config}:/etc/odoo/odoo.conf'>
            - <string: '${paths.logs}:/var/log/odoo'>
          networks:
            - <string: 'net_${name}'>
          environment: <dict>                      # Claves y valores para el entorno del contenedor.
          ports:
            - <string: '${env_vars.ODOO_HTTP_PORT}:8069'>
            - <string: '${env_vars.ODOO_LONGPOLLING_PORT}:8072'>
          depends_on:
            - <string: 'db_${name}'>
          healthcheck:
            test: <array of string>                # Comando de healthcheck. E.g., ["CMD", "pg_isready", "-U", "odoo"]
            interval: <string: '30s'>              # Intervalo entre checks (e.g., '30s', '1m')
            timeout: <string: '30s'>               # Tiempo de espera por check
            retries: <integer: 3>                  # Reintentos antes de marcar como 'unhealthy'
            start_period: <string: '0s'>           # Periodo de gracia inicial

        db:
          image: <string>
          container_name: <string: 'db_${name}'>
          restart_policy: <string: 'no' | 'on-failure' | 'always' | 'unless-stopped'>
          volumes:
            - <string: '${data_dir}/db:/var/lib/postgresql/data'>
          ports:
            - <string: '${env_vars.DB_PORT}:5432'>
          networks:
            - <string: 'net_${name}'>
          environment: <dict>                      # Claves y valores para el entorno del contenedor.
          healthcheck:
            test: <array of string>                # Comando de healthcheck. E.g., ["CMD", "pg_isready", "-U", "postgres"]
            interval: <string: '10s'>
            timeout: <string: '5s'>
            retries: <integer: 5>
            start_period: <string: '5s'>

# ===========================================
# üìã CONDITIONS AND CONFIGURATION POLICIES
# ===========================================

# 1. FLEXIBLE DOCKER CONFIGURATION:
#    - It is not mandatory to define both `web` and `db` under `deployment.docker`.
#    - When using an external database (e.g., managed PostgreSQL), you can omit the `db` section entirely.
#    - In such cases, ensure all required DB variables (DB_HOST, DB_PORT, etc.) are set via `env_vars`.
#    - The `depends_on` field inside `web` can be omitted or adjusted accordingly.

# 2. GLOBAL VS INLINE DEFINITIONS:
#    - Both `repositories` and `domains` can be defined globally and referenced by name in each instance.
#    - Inline definitions inside `instances` override global definitions for that instance.
#    - Prefer global definitions to promote reuse and consistency.

# 3. MINIMUM REQUIRED FIELDS PER INSTANCE:
#    - Every instance must include at least:
#        - `odoo_version`
#        - `data_dir`
#        - `paths.config`
#        - `deployment.type`
#    - If `deployment.type` is `docker`, the `deployment.docker.web` section must also be defined.

# 4. DYNAMIC PATHS AND VARIABLES:
#    - Use `${data_dir}`, `${paths.config}`, etc. to define dynamic paths.
#    - Use `${env_vars.VARIABLE}` to denote values that will be resolved at runtime from environment context.
#    - üîÑ Note: You may use literal (hardcoded) values instead of `${env_vars....}` in any field that supports environment resolution.

# 5. INSTANCE ISOLATION:
#    - Each instance should have its own isolated `data_dir`, ports, and configurations.
#    - Avoid reusing host ports or directories between instances to prevent conflicts.

# 6. DOMAIN RESOLUTION:
#    - Define the `domain` section per instance.
#    - You may reference global `base_domains` or define a fully inline domain per instance.

# 7. ODOO VERSION & DOCKER IMAGE COMPATIBILITY:
#    - Ensure `odoo_version` matches the version tag of the Docker image (e.g., `odoo:17.0`).
#    - Supported versions: `14.0` through `18.0`.

# 8. DOCKER RESTART POLICIES:
#    - Valid values: `no`, `on-failure`, `always`, `unless-stopped`.
#    - Use `always` in production; `on-failure` for dev/test environments.

# 9. DOCKER NETWORK CONFIGURATION:
#    - All Docker services must share the same virtual network (e.g., `net_${name}`).
#    - Enables secure internal communication between `web` and `db` containers.

# =======================================
# üß† CONSIDERATIONS & BEST PRACTICES
# =======================================

# 1. ENVIRONMENT VARIABLE MANAGEMENT:
#    - All environment values should be defined inside `env_vars`.
#    - During instance creation, these `env_vars` will be written into the file at `paths.env_file`.
#    - Do not manually define or maintain the `.env_file`; it is auto-generated.
#    - üîÑ Note: Any `env_vars` field can accept a hardcoded literal value instead of an environment reference.

# 2. ENV_VAR PRECEDENCE:
#    - `env_vars` is the single source of truth and overrides any inherited values.
#    - Avoid combining `env_file` and `env_vars` manually ‚Äî only use `env_vars`.

# 3. FIXED CONTAINER PORTS:
#    - Internal container ports are fixed (8069 for Odoo HTTP, 8072 for longpolling, 5432 for PostgreSQL).
#    - Map these to different host ports via `${env_vars....}` to avoid conflicts between instances.

# 4. PATH EVALUATION:
#    - Paths such as `${data_dir}` or `${paths.config}` are dynamically interpolated.
#    - Absolute paths are discouraged unless explicitly required by your infrastructure.

# 5. PER-INSTANCE ISOLATION:
#    - Assign unique `data_dir`, ports, and domains to each instance.
#    - This ensures complete runtime separation and avoids cross-interference.

# 6. RECOMMENDED STRUCTURE:
#    - Define reusable repositories and domains globally.
#    - Customize or override values inside each instance only when necessary.

# =======================================
# üß© ABOUT DOMAINS AND REPOSITORIES
# =======================================

# ‚û§ DOMAINS (`domains`)
#    - Defined globally under `domains.base_domains`, or inline inside an `instance`.
#    - Use global definitions when multiple instances share the same provider or settings.
#    - Use inline definition for custom per-instance domain logic.

# ‚û§ REPOSITORIES (`repositories`)
#    - Global repository definitions enable sharing code between instances.
#    - Inline overrides are allowed for per-instance branches or credentials.
#    - Supports GitHub, GitLab, private repos with SSH, or zipped/archived sources.

# üìù RECOMMENDATION:
#    - Favor global definitions for clarity and maintainability.
#    - Override locally only when a specific customization is needed.
