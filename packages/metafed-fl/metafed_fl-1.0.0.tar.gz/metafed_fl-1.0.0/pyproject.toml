[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "metafed-fl"
version = "1.0.0"
authors = [
    {name = "Muhammet Anil Yagiz", email = "anill.yagiz@gmail.com"},
    {name = "Zeynep Sude Cengiz", email = "z.sude.cengiz@gmail.com"},
    {name = "Polat Goktas", email = "polatgoktas@gmail.com"},
]
description = "Federated Learning for Metaverse Infrastructures with MARL, Privacy, and Sustainability"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
keywords = [
    "federated learning",
    "machine learning", 
    "distributed systems",
    "privacy preserving",
    "multi-agent reinforcement learning",
    "carbon aware computing",
    "sustainable AI",
    "metaverse",
    "PyTorch",
]
dependencies = [
    "torch>=2.2.2",
    "torchvision>=0.17.2",
    "numpy>=1.26.4",
    "pandas>=2.2.2",
    "matplotlib>=3.9.2",
    "timm>=1.0.8",
    "pyyaml>=6.0",
    "tqdm>=4.64.0",
    "scikit-learn>=1.1.0",
    "seaborn>=0.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "isort>=5.10.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0",
]
experiments = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.4.0",
    "ipywidgets>=8.0.0",
    "plotly>=5.10.0",
]
privacy = [
    "opacus>=1.4.0",
    # "crypten>=0.4.0",  # Commented out due to installation issues
]
all = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "isort>=5.10.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=0.18.0",
    "jupyter>=1.0.0",
    "jupyterlab>=3.4.0",
    "ipywidgets>=8.0.0",
    "plotly>=5.10.0",
    "opacus>=1.4.0",
    # "crypten>=0.4.0",  # Commented out due to installation issues
]

[project.urls]
Homepage = "https://github.com/afrilab/MetaFed-FL"
Documentation = "https://github.com/afrilab/MetaFed-FL#readme"
Repository = "https://github.com/afrilab/MetaFed-FL"
"Bug Tracker" = "https://github.com/afrilab/MetaFed-FL/issues"

[project.scripts]
metafed-mnist = "experiments.mnist.run_experiment:main"
metafed-cifar10 = "experiments.cifar10.run_experiment:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
metafed = ["configs/*.yaml", "configs/*.yml", "data/*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "matplotlib.*",
    "seaborn.*",
    "pandas.*",
    "numpy.*",
    "sklearn.*",
    "timm.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]