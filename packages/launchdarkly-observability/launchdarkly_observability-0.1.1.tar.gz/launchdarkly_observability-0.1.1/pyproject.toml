[project]
name = "launchdarkly-observability"
version = "0.1.1"
description = "LaunchDarkly Observability for Python"
license = "Apache-2.0"
authors = [
    { name = "LaunchDarkly Authors", email = "dev@launchdarkly.com" },
]
readme = "README.md"
homepage = "https://www.launchdarkly.com"
repository = "https://github.com/launchdarkly/observability-sdk"
documentation = "https://docs.launchdarkly.com"

classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
]

requires-python = ">=3.10,<4"
dependencies = [
    "opentelemetry-api==1.34.1",
    "opentelemetry-exporter-otlp-proto-grpc==1.34.1",
    "opentelemetry-instrumentation==0.55b1",
    "opentelemetry-proto==1.34.1",
    "opentelemetry-sdk==1.34.1",
    "opentelemetry-instrumentation-aiohttp-client==0.55b1",
    "opentelemetry-instrumentation-aiohttp-server==0.55b1",
    "opentelemetry-instrumentation-anthropic==0.40.14",
    "opentelemetry-instrumentation-bedrock==0.40.14",
    "opentelemetry-instrumentation-boto==0.55b1",
    "opentelemetry-instrumentation-boto3sqs==0.55b1",
    "opentelemetry-instrumentation-celery==0.55b1",
    "opentelemetry-instrumentation-chromadb==0.40.14",
    "opentelemetry-instrumentation-cohere==0.40.14",
    "opentelemetry-instrumentation-django==0.55b1",
    "opentelemetry-instrumentation-fastapi==0.55b1",
    "opentelemetry-instrumentation-flask==0.55b1",
    "opentelemetry-instrumentation-grpc==0.55b1",
    "opentelemetry-instrumentation-haystack==0.40.14",
    "opentelemetry-instrumentation-httpx==0.55b1",
    "opentelemetry-instrumentation-jinja2==0.55b1",
    "opentelemetry-instrumentation-langchain==0.40.14",
    "opentelemetry-instrumentation-llamaindex==0.40.14",
    "opentelemetry-instrumentation-logging==0.55b1",
    "opentelemetry-instrumentation-openai==0.40.14",
    "opentelemetry-instrumentation-pinecone==0.40.14",
    "opentelemetry-instrumentation-psycopg==0.55b1",
    "opentelemetry-instrumentation-psycopg2==0.55b1",
    "opentelemetry-instrumentation-qdrant==0.40.14",
    "opentelemetry-instrumentation-redis==0.55b1",
    "opentelemetry-instrumentation-replicate==0.40.14",
    "opentelemetry-instrumentation-requests==0.55b1",
    "opentelemetry-instrumentation-sqlalchemy==0.55b1",
    "opentelemetry-instrumentation-sqlite3==0.55b1",
    "opentelemetry-instrumentation-starlette==0.55b1",
    "opentelemetry-instrumentation-system-metrics==0.55b1",
    "opentelemetry-instrumentation-transformers==0.40.14",
    "opentelemetry-instrumentation-urllib==0.55b1",
    "opentelemetry-instrumentation-urllib3==0.55b1",
    "opentelemetry-instrumentation-vertexai==0.40.14",
    "opentelemetry-instrumentation-watsonx==0.40.14",
    "opentelemetry-instrumentation-weaviate==0.40.14",
    "opentelemetry-instrumentation-wsgi==0.55b1",
    "urllib3>=2.2.1",
    "requests>=2.31.0",
    "ariadne-codegen (>=0.14.0,<0.15.0)",
    "launchdarkly-server-sdk (>=9.12.0, < 10.0.0)",
    "launchdarkly-server-sdk-otel (>=1.2.0, < 2.0.0)",
]

[project.optional-dependencies]
dev = [
    "azure-functions>=1",
    "black>=24",
    "blinker>=1",
    "django>=4",
    "fastapi>=0",
    "flask>=3",
    "functions-framework>=3",
    "loguru>=0",
    "orjson==3.9.15",
    "pytest>=8",
    "pytest-asyncio>=0",
    "pytest-cov>=5",
    "pytest-mock>=3",
    "pdoc>=15"
]

[tool.poetry]
packages = [{ include = "ldobserve" }]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ariadne-codegen]
schema_path = "../../../../backend/public-graph/graph/schema.graphqls"
queries_path = "ldobserve/graph/operators/query.gql"
include_comments = "none"
target_package_name = "public_graph_client"
target_package_path = "ldobserve/graph/generated"
enable_custom_operations = true

[tool.coverage.run]
omit = [
    "*/generated/*",
]