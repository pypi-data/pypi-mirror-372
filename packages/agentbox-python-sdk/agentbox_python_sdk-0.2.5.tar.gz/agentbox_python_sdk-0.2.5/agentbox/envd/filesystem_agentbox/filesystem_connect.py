# Code generated by protoc-gen-connect-python 0.1.0.dev2, DO NOT EDIT.
from typing import Any, Generator, Coroutine, AsyncGenerator, Optional
from httpcore import ConnectionPool, AsyncConnectionPool

import agentbox_connect as connect

from agentbox.envd.filesystem_agentbox import filesystem_pb2 as filesystem_dot_filesystem__pb2

FilesystemName = "filesystem_agentbox.AgentBoxFilesystem"


class AgentBoxFilesystemClient:
    def __init__(
        self,
        base_url: str,
        *,
        pool: Optional[ConnectionPool] = None,
        async_pool: Optional[AsyncConnectionPool] = None,
        compressor=None,
        json=False,
        **opts,
    ):
        self._stat = connect.Client(
            pool=pool,
            async_pool=async_pool,
            url=f"{base_url}/{FilesystemName}/Stat",
            response_type=filesystem_dot_filesystem__pb2.AgentBoxStatResponse,
            compressor=compressor,
            json=json,
            **opts,
        )
        self._make_dir = connect.Client(
            pool=pool,
            async_pool=async_pool,
            url=f"{base_url}/{FilesystemName}/MakeDir",
            response_type=filesystem_dot_filesystem__pb2.AgentBoxMakeDirResponse,
            compressor=compressor,
            json=json,
            **opts,
        )
        self._move = connect.Client(
            pool=pool,
            async_pool=async_pool,
            url=f"{base_url}/{FilesystemName}/Move",
            response_type=filesystem_dot_filesystem__pb2.AgentBoxMoveResponse,
            compressor=compressor,
            json=json,
            **opts,
        )
        self._list_dir = connect.Client(
            pool=pool,
            async_pool=async_pool,
            url=f"{base_url}/{FilesystemName}/ListDir",
            response_type=filesystem_dot_filesystem__pb2.AgentBoxListDirResponse,
            compressor=compressor,
            json=json,
            **opts,
        )
        self._remove = connect.Client(
            pool=pool,
            async_pool=async_pool,
            url=f"{base_url}/{FilesystemName}/Remove",
            response_type=filesystem_dot_filesystem__pb2.AgentBoxRemoveResponse,
            compressor=compressor,
            json=json,
            **opts,
        )
        self._watch_dir = connect.Client(
            pool=pool,
            async_pool=async_pool,
            url=f"{base_url}/{FilesystemName}/WatchDir",
            response_type=filesystem_dot_filesystem__pb2.AgentBoxWatchDirResponse,
            compressor=compressor,
            json=json,
            **opts,
        )
        self._create_watcher = connect.Client(
            pool=pool,
            async_pool=async_pool,
            url=f"{base_url}/{FilesystemName}/CreateWatcher",
            response_type=filesystem_dot_filesystem__pb2.AgentBoxCreateWatcherResponse,
            compressor=compressor,
            json=json,
            **opts,
        )
        self._get_watcher_events = connect.Client(
            pool=pool,
            async_pool=async_pool,
            url=f"{base_url}/{FilesystemName}/GetWatcherEvents",
            response_type=filesystem_dot_filesystem__pb2.AgentBoxGetWatcherEventsResponse,
            compressor=compressor,
            json=json,
            **opts,
        )
        self._remove_watcher = connect.Client(
            pool=pool,
            async_pool=async_pool,
            url=f"{base_url}/{FilesystemName}/RemoveWatcher",
            response_type=filesystem_dot_filesystem__pb2.AgentBoxRemoveWatcherResponse,
            compressor=compressor,
            json=json,
            **opts,
        )

    def stat(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxStatRequest, **opts
    ) -> filesystem_dot_filesystem__pb2.AgentBoxStatResponse:
        return self._stat.call_unary(req, **opts)

    def astat(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxStatRequest, **opts
    ) -> Coroutine[Any, Any, filesystem_dot_filesystem__pb2.AgentBoxStatResponse]:
        return self._stat.acall_unary(req, **opts)

    def make_dir(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxMakeDirRequest, **opts
    ) -> filesystem_dot_filesystem__pb2.AgentBoxMakeDirResponse:
        return self._make_dir.call_unary(req, **opts)

    def amake_dir(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxMakeDirRequest, **opts
    ) -> Coroutine[Any, Any, filesystem_dot_filesystem__pb2.AgentBoxMakeDirResponse]:
        return self._make_dir.acall_unary(req, **opts)

    def move(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxMoveRequest, **opts
    ) -> filesystem_dot_filesystem__pb2.AgentBoxMoveResponse:
        return self._move.call_unary(req, **opts)

    def amove(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxMoveRequest, **opts
    ) -> Coroutine[Any, Any, filesystem_dot_filesystem__pb2.AgentBoxMoveResponse]:
        return self._move.acall_unary(req, **opts)

    def list_dir(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxListDirRequest, **opts
    ) -> filesystem_dot_filesystem__pb2.AgentBoxListDirResponse:
        return self._list_dir.call_unary(req, **opts)

    def alist_dir(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxListDirRequest, **opts
    ) -> Coroutine[Any, Any, filesystem_dot_filesystem__pb2.AgentBoxListDirResponse]:
        return self._list_dir.acall_unary(req, **opts)

    def remove(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxRemoveRequest, **opts
    ) -> filesystem_dot_filesystem__pb2.AgentBoxRemoveResponse:
        return self._remove.call_unary(req, **opts)

    def aremove(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxRemoveRequest, **opts
    ) -> Coroutine[Any, Any, filesystem_dot_filesystem__pb2.AgentBoxRemoveResponse]:
        return self._remove.acall_unary(req, **opts)

    def watch_dir(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxWatchDirRequest, **opts
    ) -> Generator[filesystem_dot_filesystem__pb2.AgentBoxWatchDirResponse, Any, None]:
        return self._watch_dir.call_server_stream(req, **opts)

    def awatch_dir(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxWatchDirRequest, **opts
    ) -> AsyncGenerator[filesystem_dot_filesystem__pb2.AgentBoxWatchDirResponse, Any]:
        return self._watch_dir.acall_server_stream(req, **opts)

    def create_watcher(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxCreateWatcherRequest, **opts
    ) -> filesystem_dot_filesystem__pb2.AgentBoxCreateWatcherResponse:
        return self._create_watcher.call_unary(req, **opts)

    def acreate_watcher(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxCreateWatcherRequest, **opts
    ) -> Coroutine[Any, Any, filesystem_dot_filesystem__pb2.AgentBoxCreateWatcherResponse]:
        return self._create_watcher.acall_unary(req, **opts)

    def get_watcher_events(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxGetWatcherEventsRequest, **opts
    ) -> filesystem_dot_filesystem__pb2.AgentBoxGetWatcherEventsResponse:
        return self._get_watcher_events.call_unary(req, **opts)

    def aget_watcher_events(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxGetWatcherEventsRequest, **opts
    ) -> Coroutine[Any, Any, filesystem_dot_filesystem__pb2.AgentBoxGetWatcherEventsResponse]:
        return self._get_watcher_events.acall_unary(req, **opts)

    def remove_watcher(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxRemoveWatcherRequest, **opts
    ) -> filesystem_dot_filesystem__pb2.AgentBoxRemoveWatcherResponse:
        return self._remove_watcher.call_unary(req, **opts)

    def aremove_watcher(
        self, req: filesystem_dot_filesystem__pb2.AgentBoxRemoveWatcherRequest, **opts
    ) -> Coroutine[Any, Any, filesystem_dot_filesystem__pb2.AgentBoxRemoveWatcherResponse]:
        return self._remove_watcher.acall_unary(req, **opts)
