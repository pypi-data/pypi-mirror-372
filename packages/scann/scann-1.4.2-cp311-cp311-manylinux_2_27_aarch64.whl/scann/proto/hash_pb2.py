# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: scann/proto/hash.proto
# Protobuf Python Version: 5.28.3
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    5,
    28,
    3,
    '',
    'scann/proto/hash.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from scann.proto import distance_measure_pb2 as scann_dot_proto_dot_distance__measure__pb2
from scann.proto import projection_pb2 as scann_dot_proto_dot_projection__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x16scann/proto/hash.proto\x12\x0eresearch_scann\x1a\"scann/proto/distance_measure.proto\x1a\x1cscann/proto/projection.proto\"\xa5\x04\n\nHashConfig\x12\x10\n\x08num_bits\x18\x01 \x01(\x05\x12\x34\n\nprojection\x18\x02 \x01(\x0b\x32 .research_scann.ProjectionConfig\x12\x46\n\x0ethreshold_type\x18\x03 \x01(\x0e\x32(.research_scann.HashConfig.ThresholdType:\x04SIGN\x12\x1b\n\x13parameters_filename\x18\x04 \x01(\t\x12?\n\x0f\x61symmetric_hash\x18\x05 \x01(\x0b\x32&.research_scann.AsymmetricHasherConfig\x12\x31\n\x08min_hash\x18\x06 \x01(\x0b\x32\x1f.research_scann.MinHasherConfig\x12\x31\n\x08pca_hash\x18\x07 \x01(\x0b\x32\x1f.research_scann.PcaHasherConfig\x12\x42\n\x11\x62it_sampling_hash\x18\t \x01(\x0b\x32\'.research_scann.BitSamplingHasherConfig\x12\x31\n\x08\x62nc_hash\x18\n \x01(\x0b\x32\x1f.research_scann.BncHasherConfig\"L\n\rThresholdType\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x08\n\x04SIGN\x10\x01\x12\x08\n\x04MEAN\x10\x02\x12\n\n\x06MEDIAN\x10\x03\x12\x0e\n\nSINUSOIDAL\x10\x04\"\xc5\x0e\n\x16\x41symmetricHasherConfig\x12\x34\n\nprojection\x18\x01 \x01(\x0b\x32 .research_scann.ProjectionConfig\x12#\n\x16num_clusters_per_block\x18\x02 \x01(\x05:\x03\x32\x35\x36\x12M\n\x0blookup_type\x18\x14 \x01(\x0e\x32\x31.research_scann.AsymmetricHasherConfig.LookupType:\x05\x46LOAT\x12\x1a\n\x0f\x63lustering_seed\x18\t \x01(\x05:\x01\x31\x12(\n\x19use_residual_quantization\x18\x16 \x01(\x08:\x05\x66\x61lse\x12$\n\x17noise_shaping_threshold\x18\x1c \x01(\x01:\x03nan\x12*\n\x1buse_norm_biasing_correction\x18\x1f \x01(\x08:\x05\x66\x61lse\x12\x1d\n\x0fuse_global_topn\x18! \x01(\x08:\x04true\x12q\n\"fixed_point_lut_conversion_options\x18\x19 \x01(\x0b\x32\x45.research_scann.AsymmetricHasherConfig.FixedPointLUTConversionOptions\x12\x1e\n\x11sampling_fraction\x18\n \x01(\x02:\x01\x31H\x00\x12\x1e\n\x14\x65xpected_sample_size\x18\x1d \x01(\x05H\x00\x12\x18\n\rsampling_seed\x18\x0b \x01(\x05:\x01\x31\x12\x44\n\x15quantization_distance\x18\x12 \x01(\x0b\x32%.research_scann.DistanceMeasureConfig\x12%\n\x19max_clustering_iterations\x18\x04 \x01(\x05:\x02\x31\x30\x12/\n clustering_convergence_tolerance\x18\x05 \x01(\x02:\x05\x31\x65-05\x12\x18\n\x10\x63\x65nters_filename\x18\x06 \x01(\t\x12\x14\n\x0cnum_machines\x18\x1b \x01(\x05\x12.\n\x1fuse_per_leaf_partition_training\x18\x11 \x01(\x08:\x05\x66\x61lse\x12\x19\n\x11mr_jobname_prefix\x18\x0c \x01(\t\x12\x0c\n\x04\x63\x65ll\x18\r \x01(\t\x12\x11\n\x06ram_gb\x18\x0e \x01(\x05:\x01\x34\x12\x13\n\x08num_cpus\x18\x0f \x01(\x05:\x01\x31\x12_\n\x13quantization_scheme\x18\x17 \x01(\x0e\x32\x39.research_scann.AsymmetricHasherConfig.QuantizationScheme:\x07PRODUCT\x12J\n\x19stacked_quantizers_config\x18\x18 \x01(\x0b\x32\'.research_scann.StackedQuantizersConfig\x12\x1f\n\x13min_number_machines\x18\x07 \x01(\x05\x42\x02\x18\x01\x12#\n\x0fmax_sample_size\x18\x03 \x01(\x05:\n2147483647\x12,\n\x19use_noise_shaped_training\x18\x1e \x01(\x08:\x05\x66\x61lseB\x02\x18\x01\x12\x39\n*partition_level_confidence_interval_stdevs\x18\x1a \x01(\x02:\x01\x30\x42\x02\x18\x01\x12\x1f\n\x10min_cluster_size\x18\x13 \x01(\x02:\x01\x31\x42\x02\x18\x01\x12-\n\x1ause_single_machine_trainer\x18\x08 \x01(\x08:\x05\x66\x61lseB\x02\x18\x01\x12\x37\n$use_normalized_residual_quantization\x18  \x01(\x08:\x05\x66\x61lseB\x02\x18\x01\x1a\x8c\x02\n\x1e\x46ixedPointLUTConversionOptions\x12\x92\x01\n\x1e\x66loat_to_int_conversion_method\x18\x01 \x01(\x0e\x32`.research_scann.AsymmetricHasherConfig.FixedPointLUTConversionOptions.FloatToIntConversionMethod:\x08TRUNCATE\x12\x1e\n\x13multiplier_quantile\x18\x02 \x01(\x02:\x01\x31\"5\n\x1a\x46loatToIntConversionMethod\x12\x0c\n\x08TRUNCATE\x10\x00\x12\t\n\x05ROUND\x10\x01\"<\n\nLookupType\x12\t\n\x05\x46LOAT\x10\x00\x12\x08\n\x04INT8\x10\x01\x12\t\n\x05INT16\x10\x02\x12\x0e\n\nINT8_LUT16\x10\x03\"Z\n\x12QuantizationScheme\x12\x0b\n\x07PRODUCT\x10\x00\x12\x0b\n\x07STACKED\x10\x01\x12\x14\n\x10PRODUCT_AND_BIAS\x10\x02\x12\x14\n\x10PRODUCT_AND_PACK\x10\x03\x42 \n\x1eSamplingFractionOrExpectedSize\"x\n\x0fMinHasherConfig\x12\x11\n\tconfig_id\x18\x01 \x01(\x05\x12\x14\n\x0cnum_sketches\x18\x02 \x01(\x05\x12\x12\n\nnum_hashes\x18\x03 \x01(\x05\x12\r\n\x05seeds\x18\x04 \x03(\x03\x12\x19\n\x11num_bits_per_hash\x18\x05 \x01(\x05\"a\n\x17\x42itSamplingHasherConfig\x12\x13\n\x08num_bits\x18\x01 \x01(\x05:\x01\x33\x12\x1a\n\x0buse_entropy\x18\x02 \x01(\x08:\x05\x66\x61lseJ\x04\x08\x03\x10\x04R\x0f\x63hunked_hamming\"\xea\x01\n\x0fPcaHasherConfig\x12!\n\x12rotate_projections\x18\x01 \x01(\x08:\x05\x66\x61lse\x12\x1c\n\x11sampling_fraction\x18\x02 \x01(\x02:\x01\x31\x12\x18\n\rsampling_seed\x18\x03 \x01(\x05:\x01\x31\x12\x17\n\x0fmax_sample_size\x18\x04 \x01(\x05\x12 \n\x11learn_projections\x18\x05 \x01(\x08:\x05\x66\x61lse\x12\x1d\n\x11max_num_iteration\x18\x06 \x01(\x05:\x02\x34\x30\x12\"\n\x13iteration_tolerance\x18\x07 \x01(\x02:\x05\x31\x65-05\"\xed\x01\n\x0f\x42ncHasherConfig\x12\x1c\n\x11\x63ompression_ratio\x18\x01 \x01(\x02:\x01\x30\x12\x11\n\x05gamma\x18\x02 \x01(\x02:\x02\x31\x30\x12\x1a\n\rlearning_rate\x18\x03 \x01(\x02:\x03\x30.1\x12\x17\n\nbatch_size\x18\x04 \x01(\x05:\x03\x31\x32\x38\x12!\n\x15num_phase1_iterations\x18\x05 \x01(\x05:\x02\x35\x30\x12\"\n\x15num_phase2_iterations\x18\x06 \x01(\x05:\x03\x31\x30\x30\x12\x18\n\rsampling_seed\x18\x07 \x01(\x05:\x01\x31\x12\x13\n\x08num_cpus\x18\x08 \x01(\x05:\x01\x31\"\x87\x01\n\x17StackedQuantizersConfig\x12\x1d\n\x12min_num_iterations\x18\x01 \x01(\x05:\x01\x33\x12\x1e\n\x12max_num_iterations\x18\x02 \x01(\x05:\x02\x31\x30\x12-\n\x1erelative_improvement_threshold\x18\x03 \x01(\x02:\x05\x30.001')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'scann.proto.hash_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['min_number_machines']._loaded_options = None
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['min_number_machines']._serialized_options = b'\030\001'
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['use_noise_shaped_training']._loaded_options = None
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['use_noise_shaped_training']._serialized_options = b'\030\001'
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['partition_level_confidence_interval_stdevs']._loaded_options = None
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['partition_level_confidence_interval_stdevs']._serialized_options = b'\030\001'
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['min_cluster_size']._loaded_options = None
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['min_cluster_size']._serialized_options = b'\030\001'
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['use_single_machine_trainer']._loaded_options = None
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['use_single_machine_trainer']._serialized_options = b'\030\001'
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['use_normalized_residual_quantization']._loaded_options = None
  _globals['_ASYMMETRICHASHERCONFIG'].fields_by_name['use_normalized_residual_quantization']._serialized_options = b'\030\001'
  _globals['_HASHCONFIG']._serialized_start=109
  _globals['_HASHCONFIG']._serialized_end=658
  _globals['_HASHCONFIG_THRESHOLDTYPE']._serialized_start=582
  _globals['_HASHCONFIG_THRESHOLDTYPE']._serialized_end=658
  _globals['_ASYMMETRICHASHERCONFIG']._serialized_start=661
  _globals['_ASYMMETRICHASHERCONFIG']._serialized_end=2522
  _globals['_ASYMMETRICHASHERCONFIG_FIXEDPOINTLUTCONVERSIONOPTIONS']._serialized_start=2066
  _globals['_ASYMMETRICHASHERCONFIG_FIXEDPOINTLUTCONVERSIONOPTIONS']._serialized_end=2334
  _globals['_ASYMMETRICHASHERCONFIG_FIXEDPOINTLUTCONVERSIONOPTIONS_FLOATTOINTCONVERSIONMETHOD']._serialized_start=2281
  _globals['_ASYMMETRICHASHERCONFIG_FIXEDPOINTLUTCONVERSIONOPTIONS_FLOATTOINTCONVERSIONMETHOD']._serialized_end=2334
  _globals['_ASYMMETRICHASHERCONFIG_LOOKUPTYPE']._serialized_start=2336
  _globals['_ASYMMETRICHASHERCONFIG_LOOKUPTYPE']._serialized_end=2396
  _globals['_ASYMMETRICHASHERCONFIG_QUANTIZATIONSCHEME']._serialized_start=2398
  _globals['_ASYMMETRICHASHERCONFIG_QUANTIZATIONSCHEME']._serialized_end=2488
  _globals['_MINHASHERCONFIG']._serialized_start=2524
  _globals['_MINHASHERCONFIG']._serialized_end=2644
  _globals['_BITSAMPLINGHASHERCONFIG']._serialized_start=2646
  _globals['_BITSAMPLINGHASHERCONFIG']._serialized_end=2743
  _globals['_PCAHASHERCONFIG']._serialized_start=2746
  _globals['_PCAHASHERCONFIG']._serialized_end=2980
  _globals['_BNCHASHERCONFIG']._serialized_start=2983
  _globals['_BNCHASHERCONFIG']._serialized_end=3220
  _globals['_STACKEDQUANTIZERSCONFIG']._serialized_start=3223
  _globals['_STACKEDQUANTIZERSCONFIG']._serialized_end=3358
# @@protoc_insertion_point(module_scope)
