"""Client-side SSE connection monitoring and management utilities"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/monitors.ipynb.

# %% auto 0
__all__ = ['ConnectionState', 'MonitorConfig', 'generate_monitor_script', 'generate_simple_monitor',
           'generate_connection_counter']

# %% ../../nbs/components/monitors.ipynb 3
from typing import Optional, Dict, Any, List, Callable
from dataclasses import dataclass, field
from enum import Enum
import json

# %% ../../nbs/components/monitors.ipynb 5
class ConnectionState(Enum):
    """SSE connection states"""
    CONNECTING = "connecting"
    CONNECTED = "connected"
    DISCONNECTED = "disconnected"
    ERROR = "error"
    RECONNECTING = "reconnecting"
    CLOSED = "closed"

# %% ../../nbs/components/monitors.ipynb 7
@dataclass
class MonitorConfig:
    """
    Configuration for SSE connection monitoring.
    
    Attributes:
        sse_element_id: ID of the SSE connection element to monitor
        status_element_id: ID of element to update with connection status
        auto_reconnect: Whether to automatically reconnect on failures
        reconnect_delay: Delay in ms before reconnection attempts
        max_reconnect_attempts: Maximum number of reconnection attempts (None = infinite)
        visibility_reconnect: Reconnect when tab becomes visible
        heartbeat_timeout: Timeout in ms to consider connection dead (None = no timeout)
        debug: Enable console logging
        callbacks: JavaScript callbacks for state changes
    """
    sse_element_id: str
    status_element_id: Optional[str] = None
    auto_reconnect: bool = True
    reconnect_delay: int = 3000
    max_reconnect_attempts: Optional[int] = None
    visibility_reconnect: bool = True
    heartbeat_timeout: Optional[int] = None
    debug: bool = False
    callbacks: Dict[str, str] = field(default_factory=dict)
    
    def to_js_config(
        self
    ) -> str:  # JSON string of the JavaScript configuration object
        """Convert to JavaScript configuration object"""
        config = {
            "sseElementId": self.sse_element_id,
            "statusElementId": self.status_element_id,
            "autoReconnect": self.auto_reconnect,
            "reconnectDelay": self.reconnect_delay,
            "maxReconnectAttempts": self.max_reconnect_attempts,
            "visibilityReconnect": self.visibility_reconnect,
            "heartbeatTimeout": self.heartbeat_timeout,
            "debug": self.debug
        }
        # Remove None values
        config = {k: v for k, v in config.items() if v is not None}
        return json.dumps(config)

# %% ../../nbs/components/monitors.ipynb 9
def generate_monitor_script(
    config: MonitorConfig,  # Monitor configuration
    status_indicators: Optional[Dict[ConnectionState, str]] = None
) -> str:  # JavaScript code as a string
    "Generate JavaScript for monitoring SSE connections."
    # Default status indicators if not provided
    if status_indicators is None:
        status_indicators = {
            ConnectionState.CONNECTING: "Connecting...",
            ConnectionState.CONNECTED: "Connected",
            ConnectionState.DISCONNECTED: "Disconnected",
            ConnectionState.ERROR: "Connection Error",
            ConnectionState.RECONNECTING: "Reconnecting...",
            ConnectionState.CLOSED: "Connection Closed"
        }
    
    # Convert indicators to JavaScript object
    indicators_js = json.dumps({
        state.value: html for state, html in status_indicators.items()
    })
    
    # Generate JavaScript
    return f"""
(function() {{
    const config = {config.to_js_config()};
    const statusIndicators = {indicators_js};
    
    class SSEMonitor {{
        constructor(cfg) {{
            this.config = cfg;
            this.element = null;
            this.statusElement = null;
            this.reconnectAttempts = 0;
            this.reconnectTimer = null;
            this.heartbeatTimer = null;
            this.lastHeartbeat = Date.now();
            this.state = '{ConnectionState.DISCONNECTED.value}';
            
            this.init();
        }}
        
        log(message) {{
            if (this.config.debug) {{
                console.log('[SSE Monitor] ' + message);
            }}
        }}
        
        updateStatus(state) {{
            this.state = state;
            this.log('State: ' + state);
            
            if (this.statusElement && statusIndicators[state]) {{
                this.statusElement.innerHTML = statusIndicators[state];
            }}
            
            // Trigger custom callback if defined
            const callback = this.config.callbacks && this.config.callbacks[state];
            if (callback && typeof window[callback] === 'function') {{
                window[callback](state);
            }}
        }}
        
        init() {{
            this.element = document.getElementById(this.config.sseElementId);
            if (!this.element) {{
                this.log('SSE element not found: ' + this.config.sseElementId);
                return;
            }}
            
            if (this.config.statusElementId) {{
                this.statusElement = document.getElementById(this.config.statusElementId);
            }}
            
            this.attachListeners();
            this.setupVisibilityHandling();
            this.setupHeartbeatMonitor();
        }}
        
        attachListeners() {{
            // HTMX SSE events
            this.element.addEventListener('htmx:sseOpen', (evt) => {{
                this.log('SSE connection opened');
                this.updateStatus('{ConnectionState.CONNECTED.value}');
                this.reconnectAttempts = 0;
                this.resetHeartbeat();
            }});
            
            this.element.addEventListener('htmx:sseClose', (evt) => {{
                this.log('SSE connection closed');
                this.updateStatus('{ConnectionState.CLOSED.value}');
                this.handleDisconnection();
            }});
            
            this.element.addEventListener('htmx:sseError', (evt) => {{
                this.log('SSE connection error');
                this.updateStatus('{ConnectionState.ERROR.value}');
                this.handleDisconnection();
            }});
            
            // Track SSE messages for heartbeat
            this.element.addEventListener('sse:message', (evt) => {{
                this.resetHeartbeat();
            }});
        }}
        
        setupVisibilityHandling() {{
            if (!this.config.visibilityReconnect) return;
            
            document.addEventListener('visibilitychange', () => {{
                if (!document.hidden) {{
                    this.log('Tab became visible, checking connection');
                    this.checkConnection();
                }}
            }});
        }}
        
        setupHeartbeatMonitor() {{
            if (!this.config.heartbeatTimeout) return;
            
            setInterval(() => {{
                const timeSinceLastHeartbeat = Date.now() - this.lastHeartbeat;
                if (timeSinceLastHeartbeat > this.config.heartbeatTimeout) {{
                    this.log('Heartbeat timeout, connection may be dead');
                    this.handleDisconnection();
                }}
            }}, this.config.heartbeatTimeout / 2);
        }}
        
        resetHeartbeat() {{
            this.lastHeartbeat = Date.now();
        }}
        
        checkConnection() {{
            const sseData = this.element['htmx-internal-data'];
            if (!sseData || !sseData.sseEventSource) {{
                this.log('No SSE connection found');
                this.reconnect();
                return;
            }}
            
            const state = sseData.sseEventSource.readyState;
            switch(state) {{
                case EventSource.CONNECTING:
                    this.updateStatus('{ConnectionState.CONNECTING.value}');
                    break;
                case EventSource.OPEN:
                    this.updateStatus('{ConnectionState.CONNECTED.value}');
                    break;
                case EventSource.CLOSED:
                    this.handleDisconnection();
                    break;
            }}
        }}
        
        handleDisconnection() {{
            if (this.config.autoReconnect && this.canReconnect()) {{
                this.scheduleReconnect();
            }} else {{
                this.updateStatus('{ConnectionState.DISCONNECTED.value}');
            }}
        }}
        
        canReconnect() {{
            if (!this.config.maxReconnectAttempts) return true;
            return this.reconnectAttempts < this.config.maxReconnectAttempts;
        }}
        
        scheduleReconnect() {{
            if (this.reconnectTimer) return;
            
            this.updateStatus('{ConnectionState.RECONNECTING.value}');
            this.reconnectTimer = setTimeout(() => {{
                this.reconnectTimer = null;
                this.reconnect();
            }}, this.config.reconnectDelay);
        }}
        
        reconnect() {{
            this.reconnectAttempts++;
            this.log('Reconnection attempt ' + this.reconnectAttempts);
            
            // Trigger HTMX to reconnect
            if (typeof htmx !== 'undefined') {{
                htmx.trigger(this.element, 'htmx:sseReconnect');
            }}
        }}
        
        destroy() {{
            if (this.reconnectTimer) {{
                clearTimeout(this.reconnectTimer);
            }}
            if (this.heartbeatTimer) {{
                clearInterval(this.heartbeatTimer);
            }}
        }}
    }}
    
    // Initialize monitor when DOM is ready
    if (document.readyState === 'loading') {{
        document.addEventListener('DOMContentLoaded', () => {{
            window.sseMonitor = new SSEMonitor(config);
        }});
    }} else {{
        window.sseMonitor = new SSEMonitor(config);
    }}
}})();
"""

# %% ../../nbs/components/monitors.ipynb 11
def generate_simple_monitor(
    sse_element_id: str,  # ID of SSE element to monitor
    status_element_id: Optional[str] = None,  # Optional status display element
    debug: bool = False  # Enable console logging
) -> str:  # JavaScript code for basic monitoring
    "Generate a simple SSE connection monitor."
    config = MonitorConfig(
        sse_element_id=sse_element_id,
        status_element_id=status_element_id,
        debug=debug,
        auto_reconnect=True,
        visibility_reconnect=True
    )
    return generate_monitor_script(config)

# %% ../../nbs/components/monitors.ipynb 12
def generate_connection_counter(
) -> str:  # JavaScript code that tracks connection count
    "Generate JavaScript for counting active SSE connections."
    return """
(function() {
    window.SSEConnectionCounter = {
        connections: new Map(),
        
        add(elementId) {
            this.connections.set(elementId, 'active');
            this.updateCount();
        },
        
        remove(elementId) {
            this.connections.delete(elementId);
            this.updateCount();
        },
        
        updateCount() {
            const count = this.connections.size;
            document.dispatchEvent(new CustomEvent('sse:connectionCountChanged', {
                detail: { count: count }
            }));
        },
        
        getCount() {
            return this.connections.size;
        },
        
        init() {
            document.querySelectorAll('[sse-connect]').forEach(element => {
                const id = element.id || element.getAttribute('sse-connect');
                
                element.addEventListener('htmx:sseOpen', () => {
                    this.add(id);
                });
                
                element.addEventListener('htmx:sseClose', () => {
                    this.remove(id);
                });
                
                element.addEventListener('htmx:sseError', () => {
                    this.remove(id);
                });
            });
        }
    };
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            SSEConnectionCounter.init();
        });
    } else {
        SSEConnectionCounter.init();
    }
})();
""".strip()
