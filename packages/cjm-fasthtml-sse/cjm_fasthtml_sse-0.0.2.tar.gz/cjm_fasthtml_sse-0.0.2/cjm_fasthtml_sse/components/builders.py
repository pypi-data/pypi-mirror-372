"""Generic builders for creating SSE-enabled elements with HTMX"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/builders.ipynb.

# %% auto 0
__all__ = ['add_sse_attrs', 'add_oob_swap', 'SSEConfig', 'OOBUpdate', 'MultiUpdateBuilder', 'generate_sse_cleanup_script',
           'get_htmx_sse_extension_url', 'create_sse_attrs', 'create_oob_attrs']

# %% ../../nbs/components/builders.ipynb 3
from typing import Optional, List, Dict, Any, Union, Callable
from dataclasses import dataclass, field

# %% ../../nbs/components/builders.ipynb 5
def add_sse_attrs(
    element: Any,  # Any element with an attrs dictionary
    endpoint: str,  # SSE endpoint URL
    event_name: str = "message",  # SSE event to listen for
    swap_mode: Optional[str] = None,  # Optional HTMX swap mode **extra_attrs: Additional attributes to add
    **extra_attrs
) -> Any:  # The modified element
    "Add SSE attributes to any element. This function modifies an element in-place by adding the necessary HTMX SSE attributes. It's framework-agnostic and works with any element that has an attrs dictionary."
    if not hasattr(element, 'attrs'):
        element.attrs = {}
    
    element.attrs['hx-ext'] = 'sse'
    element.attrs['sse-connect'] = endpoint
    element.attrs['sse-swap'] = event_name
    
    if swap_mode:
        element.attrs['hx-swap'] = swap_mode
    
    element.attrs.update(extra_attrs)
    return element

# %% ../../nbs/components/builders.ipynb 6
def add_oob_swap(
    element: Any,  # Any element with an attrs dictionary
    swap_type: str = "innerHTML",  # Type of swap (innerHTML, outerHTML, etc.)
    target_id: Optional[str] = None  # Optional target element ID (uses element's own ID if not specified)
) -> Any:  # The modified element
    "Add out-of-band swap attributes to any element."
    if not hasattr(element, 'attrs'):
        element.attrs = {}
    
    element.attrs['hx-swap-oob'] = swap_type
    
    if target_id and not element.attrs.get('id'):
        element.attrs['id'] = target_id
    
    return element

# %% ../../nbs/components/builders.ipynb 8
@dataclass
class SSEConfig:
    """
    Configuration for SSE-enabled elements.
    
    This dataclass provides a clean way to configure SSE attributes
    that can be applied to any element.
    """
    endpoint: str
    event_name: str = "message"
    swap_mode: Optional[str] = None
    reconnect_time: Optional[int] = None
    extra_attrs: Dict[str, Any] = field(default_factory=dict)
    
    def apply_to(
        self,
        element: Any  # Element to configure
    ) -> Any:  # The configured element
        """
        Apply this SSE configuration to an element.            
        """
        attrs = self.extra_attrs.copy()
        
        if self.reconnect_time:
            attrs['sse-reconnect-time'] = str(self.reconnect_time)
        
        return add_sse_attrs(
            element,
            self.endpoint,
            self.event_name,
            self.swap_mode,
            **attrs
        )
    
    def to_attrs(
        self
    ) -> Dict[str, str]:  # Dictionary of HTMX SSE attributes
        """
        Convert configuration to attribute dictionary.
        """
        attrs = {
            'hx-ext': 'sse',
            'sse-connect': self.endpoint,
            'sse-swap': self.event_name
        }
        
        if self.swap_mode:
            attrs['hx-swap'] = self.swap_mode
        
        if self.reconnect_time:
            attrs['sse-reconnect-time'] = str(self.reconnect_time)
        
        attrs.update(self.extra_attrs)
        return attrs

# %% ../../nbs/components/builders.ipynb 10
@dataclass
class OOBUpdate:
    """
    Represents an out-of-band update.
    
    This is a generic container for OOB updates that doesn't
    depend on specific element types.
    """
    element: Any
    swap_type: str = "innerHTML"
    target_id: Optional[str] = None
    
    def prepare(
        self
    ) -> Any:  # Element with OOB swap attributes
        """
        Prepare element with OOB attributes.
        """
        return add_oob_swap(self.element, self.swap_type, self.target_id)

# %% ../../nbs/components/builders.ipynb 11
class MultiUpdateBuilder:
    """
    Builder for creating multiple OOB updates.
    
    This builder is framework-agnostic and works with any elements.
    """
    
    def __init__(
        self,
        container_factory: Optional[Callable] = None  # Optional factory function for creating containers.  Should accept *children as arguments.
    ):
        """
        Initialize the builder.                             
        """
        self.updates: List[OOBUpdate] = []
        self.container_factory = container_factory or (lambda *children: children)
    
    def add(
        self,
        element: Any,  # Element to add
        swap_type: str = "innerHTML",  # Type of swap
        target_id: Optional[str] = None  # Optional target ID
    ) -> 'MultiUpdateBuilder':  # Self for chaining
        """
        Add an update to the builder.            
        """
        self.updates.append(OOBUpdate(element, swap_type, target_id))
        return self
    
    def add_many(
        self,
        updates: List[Union[OOBUpdate, tuple, Any]] # List of updates (OOBUpdate objects, tuples, or elements)
    ) -> 'MultiUpdateBuilder':  # Self for chaining
        """
        Add multiple updates at once.
        """
        for update in updates:
            if isinstance(update, OOBUpdate):
                self.updates.append(update)
            elif isinstance(update, tuple):
                # Assume tuple is (element, swap_type, target_id)
                element = update[0]
                swap_type = update[1] if len(update) > 1 else "innerHTML"
                target_id = update[2] if len(update) > 2 else None
                self.add(element, swap_type, target_id)
            else:
                # Just an element, use defaults
                self.add(update)
        return self
    
    def build(
        self
    ) -> Any:  # Container with all prepared OOB updates
        """
        Build the final multi-update container.            
        """
        prepared = [update.prepare() for update in self.updates]
        return self.container_factory(*prepared)
    
    def clear(
        self
    ) -> 'MultiUpdateBuilder':  # Self for chaining
        """
        Clear all pending updates.
        """
        self.updates = []
        return self
    
    def __len__(
        self
    ) -> int:  # Number of pending updates
        """Get number of pending updates"""
        return len(self.updates)
    
    def __bool__(
        self
    ) -> bool:  # True if there are pending updates, False otherwise
        """Check if there are any updates"""
        return bool(self.updates)

# %% ../../nbs/components/builders.ipynb 13
def generate_sse_cleanup_script(
) -> str:  # JavaScript code as a string
    "Generate JavaScript for proper SSE connection cleanup."
    return """
    (function() {
        function closeSSEConnections() {
            document.querySelectorAll('[sse-connect]').forEach(element => {
                const sseData = element['htmx-internal-data'];
                if (sseData && sseData.sseEventSource) {
                    sseData.sseEventSource.close();
                }
            });
            
            if (typeof htmx !== 'undefined') {
                htmx.findAll('[sse-connect]').forEach(element => {
                    htmx.trigger(element, 'htmx:sseClose');
                });
            }
        }
        
        window.addEventListener('beforeunload', closeSSEConnections);
        window.addEventListener('pagehide', closeSSEConnections);
    })();
    """.strip()

# %% ../../nbs/components/builders.ipynb 14
def get_htmx_sse_extension_url(
    version: str = "2.2.3"  # Version of the extension
) -> str:  # CDN URL as a string
    "Get the CDN URL for the HTMX SSE extension."
    return f"https://unpkg.com/htmx-ext-sse@{version}/sse.js"

# %% ../../nbs/components/builders.ipynb 16
def create_sse_attrs(
    endpoint: str,  # SSE endpoint
    event: str = "message",  # Event name to listen for
    swap: Optional[str] = None,  # Optional swap mode **kwargs: Additional attributes
    **kwargs
) -> Dict[str, str]:  # Dictionary of attributes
    "Create a dictionary of SSE attributes. This is a convenience function for creating SSE attributes that can be spread into element constructors."
    attrs = {
        'hx-ext': 'sse',
        'sse-connect': endpoint,
        'sse-swap': event
    }
    
    if swap:
        attrs['hx-swap'] = swap
    
    attrs.update(kwargs)
    return attrs

# %% ../../nbs/components/builders.ipynb 17
def create_oob_attrs(
    element_id: str,  # ID of target element
    swap_type: str = "innerHTML"  # Type of swap
) -> Dict[str, str]:  # Dictionary of attributes
    "Create a dictionary of OOB swap attributes."
    return {
        'id': element_id,
        'hx-swap-oob': swap_type
    }
