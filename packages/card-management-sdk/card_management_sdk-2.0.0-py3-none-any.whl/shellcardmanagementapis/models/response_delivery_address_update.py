# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.datum import Datum


class ResponseDeliveryAddressUpdate(object):

    """Implementation of the 'ResponseDeliveryAddressUpdate' model.

    Attributes:
        request_id (uuid|str): Mandatory UUID (according to RFC 4122
            standards) for requests and responses. This will be played back in
            the response from the requests.
        status (DeliveryAddressUpdateStatusEnum): Indicates overall status of
            the request
        main_reference (int): Main reference number for tracking.
        data (List[Datum]): List of Delivery address update entity. The fields
            of this entity are described below.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "request_id": 'RequestId',
        "status": 'Status',
        "main_reference": 'MainReference',
        "data": 'Data'
    }

    _optionals = [
        'main_reference',
        'data',
    ]

    def __init__(self,
                 request_id=None,
                 status=None,
                 main_reference=APIHelper.SKIP,
                 data=APIHelper.SKIP):
        """Constructor for the ResponseDeliveryAddressUpdate class"""

        # Initialize members of the class
        self.request_id = request_id 
        self.status = status 
        if main_reference is not APIHelper.SKIP:
            self.main_reference = main_reference 
        if data is not APIHelper.SKIP:
            self.data = data 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        request_id = dictionary.get("RequestId") if dictionary.get("RequestId") else None
        status = dictionary.get("Status") if dictionary.get("Status") else None
        main_reference = dictionary.get("MainReference") if dictionary.get("MainReference") else APIHelper.SKIP
        data = None
        if dictionary.get('Data') is not None:
            data = [Datum.from_dictionary(x) for x in dictionary.get('Data')]
        else:
            data = APIHelper.SKIP
        # Return an object of this model
        return cls(request_id,
                   status,
                   main_reference,
                   data)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'request_id={self.request_id!r}, '
                f'status={self.status!r}, '
                f'main_reference={(self.main_reference if hasattr(self, "main_reference") else None)!r}, '
                f'data={(self.data if hasattr(self, "data") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'request_id={self.request_id!s}, '
                f'status={self.status!s}, '
                f'main_reference={(self.main_reference if hasattr(self, "main_reference") else None)!s}, '
                f'data={(self.data if hasattr(self, "data") else None)!s})')
