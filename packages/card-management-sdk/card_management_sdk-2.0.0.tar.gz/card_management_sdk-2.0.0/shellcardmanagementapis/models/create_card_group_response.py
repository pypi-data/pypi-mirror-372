# -*- coding: utf-8 -*-

"""
shellcardmanagementapis

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from shellcardmanagementapis.api_helper import APIHelper
from shellcardmanagementapis.models.create_card_group_response_error_cards_items import CreateCardGroupResponseErrorCardsItems
from shellcardmanagementapis.models.create_card_group_response_successful_requests_items import CreateCardGroupResponseSuccessfulRequestsItems


class CreateCardGroupResponse(object):

    """Implementation of the 'CreateCardGroupResponse' model.

    Attributes:
        main_reference (int): Reference number for tracking the execution of
            the requests â€“ new Card Group creation and to move the cards to
            the new card group. Reference number will be null when the
            validations of new card group parameters fail.
        new_card_group_reference (int): Reference number for tracking the
            execution of card group creation.   Reference number will be null
            when the validations of new card group parameters fail.
        successful_requests
            (List[CreateCardGroupResponseSuccessfulRequestsItems]): List of
            cards validated and submitted successfully for processing.
        error_cards (List[CreateCardGroupResponseErrorCardsItems]): List of
            cards that failed validation and not submitted for processing.
            Entity: FailedCardReference This list will be empty when the
            validations of new card group parameters fail.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "main_reference": 'MainReference',
        "new_card_group_reference": 'NewCardGroupReference',
        "successful_requests": 'SuccessfulRequests',
        "error_cards": 'ErrorCards'
    }

    _optionals = [
        'main_reference',
        'new_card_group_reference',
        'successful_requests',
        'error_cards',
    ]

    def __init__(self,
                 main_reference=APIHelper.SKIP,
                 new_card_group_reference=APIHelper.SKIP,
                 successful_requests=APIHelper.SKIP,
                 error_cards=APIHelper.SKIP):
        """Constructor for the CreateCardGroupResponse class"""

        # Initialize members of the class
        if main_reference is not APIHelper.SKIP:
            self.main_reference = main_reference 
        if new_card_group_reference is not APIHelper.SKIP:
            self.new_card_group_reference = new_card_group_reference 
        if successful_requests is not APIHelper.SKIP:
            self.successful_requests = successful_requests 
        if error_cards is not APIHelper.SKIP:
            self.error_cards = error_cards 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        main_reference = dictionary.get("MainReference") if dictionary.get("MainReference") else APIHelper.SKIP
        new_card_group_reference = dictionary.get("NewCardGroupReference") if dictionary.get("NewCardGroupReference") else APIHelper.SKIP
        successful_requests = None
        if dictionary.get('SuccessfulRequests') is not None:
            successful_requests = [CreateCardGroupResponseSuccessfulRequestsItems.from_dictionary(x) for x in dictionary.get('SuccessfulRequests')]
        else:
            successful_requests = APIHelper.SKIP
        error_cards = None
        if dictionary.get('ErrorCards') is not None:
            error_cards = [CreateCardGroupResponseErrorCardsItems.from_dictionary(x) for x in dictionary.get('ErrorCards')]
        else:
            error_cards = APIHelper.SKIP
        # Return an object of this model
        return cls(main_reference,
                   new_card_group_reference,
                   successful_requests,
                   error_cards)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'main_reference={(self.main_reference if hasattr(self, "main_reference") else None)!r}, '
                f'new_card_group_reference={(self.new_card_group_reference if hasattr(self, "new_card_group_reference") else None)!r}, '
                f'successful_requests={(self.successful_requests if hasattr(self, "successful_requests") else None)!r}, '
                f'error_cards={(self.error_cards if hasattr(self, "error_cards") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'main_reference={(self.main_reference if hasattr(self, "main_reference") else None)!s}, '
                f'new_card_group_reference={(self.new_card_group_reference if hasattr(self, "new_card_group_reference") else None)!s}, '
                f'successful_requests={(self.successful_requests if hasattr(self, "successful_requests") else None)!s}, '
                f'error_cards={(self.error_cards if hasattr(self, "error_cards") else None)!s})')
