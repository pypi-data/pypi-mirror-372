# ---- Project Info and Dependencies ----

[project.urls]
Repository = "https://github.com/jlevy/kash-media"
# Homepage = "https://..."
# Documentation = "https://..."

[project]
name = "kash-media"
description = "The knowledge agent shell (media kit)"
authors = [
    { name="Joshua Levy", email="joshua@cal.berkeley.edu" },
]
readme = "README.md"
license = "AGPL-3.0-or-later"
requires-python = ">=3.11,<4.0"
dynamic = ["version"]

# https://pypi.org/classifiers/
# Adjust as needed:
classifiers = [
    # Adjust as needed:
    "Development Status :: 4 - Beta",
    # "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
    # Include this to avoid accidentally publishing to PyPI:
    # "Private :: Do Not Upload",
]


# ---- Main dependencies ----

dependencies = [
# Main kash and kash kits:
    "kash-docs[full]==0.1.19",
    "sidematter-format>=0.0.3",
    # Utilities:
    "typing-extensions>=4.11.1",
    # Content tools:
    "flowmark>=0.4.5",
    "chopdiff>=0.2.1",
    # "simplemma>=1.1.2",
    # For downloading media:
    "yt-dlp>=2025.3.27",
    "curl-cffi>=0.7.4",
    # For screen capture and image processing:
    "opencv-python>=4.11.0.86",
    "scikit-image>=0.25.2",
]


# ---- Dev dependencies ----

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-sugar>=1.0.0",
    "ruff>=0.11.0",
    "codespell>=2.4.1",
    "rich>=14.0.0",
    "basedpyright==1.29.5",  # TODO: Upgrade when Cursor supports it.
    "funlog>=0.2.0",
    "clideps>=0.1.1",
]

[tool.uv.sources]
# For bleeding edge:
# kash-docs = { git = "https://github.com/jlevy/kash-docs.git" }
# kash-shell = { git = "https://github.com/jlevy/kash.git" }
# For local development:
# kash-docs = { path = "../kash-docs", editable = true }
# kash-shell = { path = "../kash", editable = true }
# sidematter-format = { path = "../sidematter-format", editable = true }
# frontmatter-format = { path = "../frontmatter-format", editable = true }



[project.scripts]
# These override the kash-shell entry points so we have full deps for this kit.
# kash-media should match the package name so it's easy to run from uvx.
# kash makes it easy to run as usual with kash.
kash-media = "kash.shell.shell_main:main"
kash = "kash.shell.shell_main:main"
kash-mcp = "kash.mcp.mcp_cli:main"


# ---- Build system ----

# Dynamic versioning from:
# https://github.com/ninoseki/uv-dynamic-versioning/

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"
# Note JSON schemas don't seem to be right for tool.hatch.version.source so
# this may cause false warnings in IDEs.
# https://github.com/ninoseki/uv-dynamic-versioning/issues/21

[tool.hatch.metadata]
# For referencing git+ssh urls in dependencies.
allow-direct-references = true

# Explicitly configure top-level namespace for hatch.
[tool.hatch.build.targets.wheel]
packages = ["src/kash"]

[tool.hatch.build.targets.wheel.sources]
"src/kash" = "kash"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true


# ---- Settings ----

[tool.ruff]
# Set as desired, typically 88 (black standard) or 100 (wide).
line-length = 100

[tool.ruff.lint]
select = [
    # See: https://docs.astral.sh/ruff/rules/
    # Basic list from: https://docs.astral.sh/ruff/linter/#rule-selection
    "E", # https://docs.astral.sh/ruff/rules/#error-e
    "F", # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "UP", # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "B", # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "I", # https://docs.astral.sh/ruff/rules/#isort-i
    # Other possibilities:
    # "D" # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    # "Q" # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    # "COM" # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    # "SIM", # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim

]
ignore = [
    # Disable some rules that are overly pedantic. Add/remove as desired:
    "E501", # https://docs.astral.sh/ruff/rules/line-too-long/
    "E402", # https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/
    "E731", # https://docs.astral.sh/ruff/rules/lambda-assignment/
    # TODO: Consider cleaning these up:
    "E712",
    "UP031",
    "UP007",
    "B904",
    "UP038",
    "B007",
    "B008",
    "B026",
    # We use both ruff formatter and linter so some rules should always be disabled.
    # See: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191", # https://docs.astral.sh/ruff/rules/tab-indentation/
    "E111", # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple/
    "E114", # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple-comment/
    "E117", # https://docs.astral.sh/ruff/rules/over-indented/
    "D206", # https://docs.astral.sh/ruff/rules/docstring-tab-indentation/
    "D300", # https://docs.astral.sh/ruff/rules/triple-single-quotes/
    "Q000", # https://docs.astral.sh/ruff/rules/bad-quotes-inline-string/
    "Q001", # https://docs.astral.sh/ruff/rules/bad-quotes-multiline-string/
    "Q002", # https://docs.astral.sh/ruff/rules/bad-quotes-docstring/
    "Q003", # https://docs.astral.sh/ruff/rules/avoidable-escaped-quote/
    "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/
    "COM819", # https://docs.astral.sh/ruff/rules/prohibited-trailing-comma/
    "ISC002", # https://docs.astral.sh/ruff/rules/multi-line-implicit-string-concatenation/
]

[tool.basedpyright]
# BasedPyright currently seems like the best type checker option, much faster
# than mypy and with a good extension for VSCode/Cursor.
# https://marketplace.visualstudio.com/items?itemName=detachhead.basedpyright
# https://docs.basedpyright.com/latest/configuration/config-files/#sample-pyprojecttoml-file
include = ["src", "tests", "devtools"]
reportUnusedParameter = false
reportUnusedImport = false
# Make ignoring easier:
reportIgnoreCommentWithoutRule = false
reportUnnecessaryTypeIgnoreComment = false
# Seem generally harmless:
reportImplicitStringConcatenation = false
reportUnknownLambdaType = false
# Typically noisy warnings, comment/uncomment as desired:
reportMissingTypeStubs = false
reportUnusedCallResult = false
# reportMissingImports = false
reportUnnecessaryIsInstance = false
reportUnreachable = false
reportAny = false
reportExplicitAny = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportUntypedFunctionDecorator = false
reportPrivateImportUsage = false

[tool.codespell]
ignore-words-list = "iTerm,Numbe,caf"
# skip = "foo.py,bar.py"

[tool.pytest.ini_options]
python_files = ["*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = [
    "src",
    "tests",
]
norecursedirs = ["src/kash/xontrib"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore:.*deprecated.*",
    "ignore:.*Deprecation.*",
    "ignore::RuntimeWarning:xonsh.tools",
    "ignore::SyntaxWarning:pydub.utils",
    "ignore::UserWarning:pydantic",
]
# Dev convenience: Temporarily rename a file to a stash pattern to stop tracking it.
addopts = "--ignore-glob='stash.*' --ignore-glob='*.stash.*'"

