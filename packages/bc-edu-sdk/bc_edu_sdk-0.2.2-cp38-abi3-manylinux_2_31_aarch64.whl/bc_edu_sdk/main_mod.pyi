# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from enum import Enum

class BLEDeviceInfo:
    manufacturer: builtins.str
    model: builtins.str
    serial: builtins.str
    hardware: builtins.str
    firmware: builtins.str

class BandPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    d3: builtins.float
    d4: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    w3: builtins.float
    w4: builtins.float

class BandStopFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    d3: builtins.float
    d4: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    w3: builtins.float
    w4: builtins.float
    r: builtins.float
    s: builtins.float

class HighPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float

class LowPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float

class MessageParser:
    def __new__(cls, device_id:builtins.str, msg_type:MsgType) -> MessageParser: ...
    def receive_data(self, device_id:builtins.str, data:typing.Sequence[builtins.int]) -> None: ...

class MessageStream:
    def __aiter__(self) -> MessageStream: ...
    def __anext__(self) -> typing.Any: ...

class PyEduDevice:
    def __new__(cls, port_name:builtins.str, baudrate:builtins.int) -> PyEduDevice: ...
    def start_data_stream(self, py_parser:MessageParser) -> typing.Any: ...
    def stop_data_stream(self) -> None: ...
    def get_dongle_info(self) -> typing.Any: ...
    def get_dongle_pair_stat(self) -> typing.Any: ...
    def get_dongle_pair_cfg(self) -> typing.Any: ...
    def get_device_info(self) -> typing.Any: ...
    def get_port_stat(self) -> typing.Any: ...
    def get_sensor_cfg(self) -> typing.Any: ...
    def start_sensor_data_stream(self) -> typing.Any: ...
    def stop_sensor_data_stream(self) -> typing.Any: ...
    def set_flex_config(self, fs:SamplingRate) -> typing.Any: ...
    def set_afe_config(self, afe_sr:AfeSampleRate, channel_bits:builtins.int) -> typing.Any: ...
    def set_imu_config(self, imu_sr:ImuSampleRate, data_type:UploadDataType) -> typing.Any: ...
    def set_mag_config(self, mag_sr:MagSampleRate, data_type:UploadDataType) -> typing.Any: ...

class PySerialStream:
    def __new__(cls, port_name:builtins.str, baudrate:builtins.int) -> PySerialStream: ...
    def start_data_stream(self, py_parser:MessageParser) -> typing.Any: ...
    def stop_data_stream(self) -> None: ...
    def write_data(self, data:typing.Sequence[builtins.int]) -> typing.Any: ...

class ScanResult:
    id: builtins.str
    name: builtins.str
    rssi: builtins.int

class AfeSampleRate(Enum):
    AFE_SR_INVALID = ...
    AFE_SR_OFF = ...
    AFE_SR_125 = ...
    AFE_SR_250 = ...
    AFE_SR_500 = ...
    AFE_SR_1000 = ...
    AFE_SR_2000 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> AfeSampleRate: ...

class AggOperations(Enum):
    Mean = ...
    Median = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> AggOperations: ...

class CentralAdapterState(Enum):
    Unknown = ...
    PoweredOn = ...
    PoweredOff = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> CentralAdapterState: ...

class ConnectionState(Enum):
    Connecting = ...
    Connected = ...
    Disconnecting = ...
    Disconnected = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ConnectionState: ...

class CtrlBoxPort(Enum):
    PORT_NONE = ...
    PORT_A = ...
    PORT_B = ...
    PORT_C = ...
    PORT_D = ...
    PORT_E = ...
    PORT_F = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> CtrlBoxPort: ...

class DownsamplingOperations(Enum):
    Mean = ...
    Median = ...
    Max = ...
    Min = ...
    Sum = ...
    First = ...
    Last = ...
    Extremes = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> DownsamplingOperations: ...

class EduModuleId(Enum):
    APP = ...
    DONGLE = ...
    DEVICE = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> EduModuleId: ...

class ImuMode(Enum):
    NOT_SET = ...
    ACC = ...
    GYRO = ...
    ACC_GYRO = ...
    EULER = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ImuMode: ...

class ImuSampleRate(Enum):
    IMU_SR_UNUSED = ...
    IMU_SR_OFF = ...
    IMU_SR_25 = ...
    IMU_SR_50 = ...
    IMU_SR_100 = ...
    IMU_SR_400 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ImuSampleRate: ...

class LogLevel(Enum):
    Error = ...
    Warn = ...
    Info = ...
    Debug = ...
    Trace = ...

class MagSampleRate(Enum):
    MAG_SR_UNUSED = ...
    MAG_SR_OFF = ...
    MAG_SR_10 = ...
    MAG_SR_20 = ...
    MAG_SR_50 = ...
    MAG_SR_100 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> MagSampleRate: ...

class MsgType(Enum):
    Crimson = ...
    OxyZen = ...
    Mobius = ...
    MobiusV1_5 = ...
    Almond = ...
    AlmondV2 = ...
    Morpheus = ...
    Luna = ...
    REN = ...
    Breeze = ...
    Stark = ...
    EEGCap = ...
    Edu = ...
    Clear = ...
    Melody = ...
    Aura = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> MsgType: ...

class NoiseTypes(Enum):
    FIFTY = ...
    SIXTY = ...
    FIFTY_AND_SIXTY = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> NoiseTypes: ...

class SamplingRate(Enum):
    SAMPLING_RATE_NONE = ...
    SAMPLING_RATE_OFF = ...
    SAMPLING_RATE_25 = ...
    SAMPLING_RATE_50 = ...
    SAMPLING_RATE_100 = ...
    SAMPLING_RATE_200 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> SamplingRate: ...

class UploadDataType(Enum):
    TYPE_UNSPECIFIED = ...
    RAW_DATA = ...
    CALIBRATED_DATA = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> UploadDataType: ...

def available_usb_ports(vid:builtins.int, pid:builtins.int) -> typing.Any: ...

def clear_afe_buffer() -> None: ...

def clear_flex_buffer() -> None: ...

def clear_imu_buffer() -> None: ...

def clear_mag_buffer() -> None: ...

def get_afe_buffer(take:builtins.int, clean:builtins.bool) -> builtins.list[builtins.list[builtins.float]]: ...

def get_flex_buffer(take:builtins.int, clean:builtins.bool) -> builtins.list[builtins.list[builtins.float]]: ...

def get_imu_buffer(take:builtins.int, clean:builtins.bool) -> builtins.list[builtins.list[builtins.int]]: ...

def get_imu_calibration_buff(take:builtins.int, clean:builtins.bool) -> builtins.list[builtins.list[builtins.float]]: ...

def get_mag_buffer(take:builtins.int, clean:builtins.bool) -> builtins.list[builtins.list[builtins.int]]: ...

def get_mag_calibration_buff(take:builtins.int, clean:builtins.bool) -> builtins.list[builtins.list[builtins.float]]: ...

def get_sdk_version() -> builtins.str: ...

def get_usb_available_ports() -> None: ...

def initialize_logging_py(level:LogLevel) -> None: ...

def initialize_logging_with_file_py(level:LogLevel, enable_file_logging:builtins.bool) -> None: ...

def set_afe_buffer_cfg(buff_len:builtins.int) -> None: ...

def set_eeg_data_callback(func:typing.Any) -> None: ...

def set_flex_buffer_cfg(buff_len:builtins.int) -> None: ...

def set_imp_data_callback(func:typing.Any) -> None: ...

def set_imu_buffer_cfg(imu_buffer_len:builtins.int) -> None: ...

def set_imu_data_callback(func:typing.Any) -> None: ...

def set_mag_buffer_cfg(mag_buffer_len:builtins.int) -> None: ...

def set_msg_resp_callback(func:typing.Any) -> None: ...

