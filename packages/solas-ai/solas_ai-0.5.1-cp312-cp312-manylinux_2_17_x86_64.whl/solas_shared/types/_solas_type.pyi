import attr
import pandas as pd
from ._log_level import LogLevel as LogLevel
from ._types_shared import get_new_id as get_new_id
from abc import ABC
from datetime import datetime
from pathlib import Path
from rich.table import Table
from solas_shared import __version__ as __version__, db as db, ui as ui
from sqlalchemy import Column
from typing import TypeVar

T = TypeVar('T')

class SolasType(ABC):
    @classmethod
    def id_columns(cls) -> list[Column]: ...
    @classmethod
    def common_columns(cls) -> list[Column]: ...
    @classmethod
    def common_columns_list(cls) -> list[str]: ...
    @classmethod
    def all_persist_columns_list(cls) -> list[str]: ...
    id: str
    created: datetime | None
    updated: datetime | None
    __user__: str | None
    __node__: str | None
    __version__: str | None
    def save(self) -> T: ...
    @classmethod
    def get(cls, id: str) -> T | None: ...
    def log(self, for_display: bool | None = None, max_records: int | None = None): ...
    def to_pickle(self, path: Path | str) -> None: ...
    def to_dict(self) -> dict: ...
    def to_tuple(self) -> tuple: ...
    def to_json(self, indent=None, path: Path | None = None) -> str: ...
    def to_dataframe(self) -> pd.DataFrame: ...
    def validate(self) -> None: ...
    def show(self) -> None: ...
    def summary_styled(self) -> pd.DataFrame: ...
    def fields_dict(self) -> dict[str, attr.Attribute]: ...
    def __rich__(self) -> Table: ...
    def summary_fields(self) -> dict[str, attr.Attribute]: ...
    def summary(self, include_log_summary: bool = True) -> pd.DataFrame: ...
    def __init__(self, id, created, updated, user__, node__, version__) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
