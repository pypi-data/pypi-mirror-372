from . import requests as requests
from solas_disparity import disparity as disparity
from solas_disparity.types import DisparityResponse as DisparityResponse
from sqlalchemy.orm import Session as Session

async def adverse_impact_ratio(air_request: requests.RequestAir, session: Session = ...) -> DisparityResponse: ...
async def relative_rate(rr_request: requests.RequestRr, session: Session = ...) -> DisparityResponse: ...
async def segmented_adverse_impact_ratio(air_request: requests.RequestSegmentedAdverseImpactRatio, session: Session = ...) -> DisparityResponse: ...
async def adverse_impact_ratio_by_quantile(air_request: requests.RequestAirByQuantile, session: Session = ...) -> DisparityResponse: ...
async def categorical_adverse_impact_ratio(air_request: requests.RequestCategoricalAdverseImpactRatio, session: Session = ...) -> DisparityResponse: ...
async def standardized_mean_difference(smd_request: requests.RequestSmd, session: Session = ...): ...
async def residual_standardized_mean_difference(smd_request: requests.RequestResidualSmd, session: Session = ...): ...
async def false_discovery_rate(request: requests.RequestFalseDiscoveryRate, session: Session = ...): ...
async def false_negative_rate(request: requests.RequestFalseNegativeRate, session: Session = ...): ...
async def false_positive_rate(request: requests.RequestFalseNegativeRate, session: Session = ...): ...
async def odds_ratio(request: requests.RequestOddsRatio, session: Session = ...): ...
async def precision(request: requests.RequestPrecision, session: Session = ...): ...
async def true_negative_rate(request: requests.RequestFalseNegativeRate, session: Session = ...): ...
async def true_positive_rate(request: requests.RequestFalseNegativeRate, session: Session = ...): ...
