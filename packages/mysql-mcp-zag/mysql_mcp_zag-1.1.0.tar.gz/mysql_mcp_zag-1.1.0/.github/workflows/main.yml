name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  id-token: write
  packages: write
  pull-requests: write

jobs:
  # Quality Gates - Run on all events
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run tests
        run: uv run pytest tests/test_server.py

      - name: Run linting
        run: uv run ruff check src/mysql_mcp/ tests/

      - name: Run type checking
        run: uv run mypy src/mysql_mcp/

      - name: Run security scan
        run: uv run bandit -r src/mysql_mcp/

  # Release and Publish - Only on main branch pushes
  release-publish:
    name: Release and Publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: quality-gates
    environment: pypi
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group dev

      - name: Generate version and release
        run: npx semantic-release --debug
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Update version in pyproject.toml
        run: |
          VERSION=${{ steps.version.outputs.version }}
          # Remove 'v' prefix if present
          VERSION_NUMBER=${VERSION#v}
          sed -i "s/version = \".*\"/version = \"${VERSION_NUMBER}\"/" pyproject.toml

      - name: Build package
        run: uv build

      - name: Verify build
        run: |
          ls -la dist/
          echo "Package built successfully with version ${{ steps.version.outputs.version }}"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: Cleanup on failure
        if: failure()
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ ! -z "$VERSION" ]; then
            git tag -d $VERSION
            git push origin --delete $VERSION
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}