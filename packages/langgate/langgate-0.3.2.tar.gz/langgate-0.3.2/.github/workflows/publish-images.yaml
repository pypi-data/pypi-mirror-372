name: Publish Docker Images

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (without v prefix, defaults to latest)'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  ORG_NAME: ${{ github.repository_owner }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [server, processor, envoy]

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up image name
        run: |
          echo "IMAGE_NAME=${{ env.ORG_NAME }}/langgate-${{ matrix.service }}" >> $GITHUB_ENV

      - name: Set up version tag
        run: |
          # For GitHub release triggers, use the tag name
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "Publishing version: $VERSION from GitHub release"
          else
            VERSION="${{ github.event.inputs.tag }}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "Publishing version: $VERSION from manual workflow dispatch"
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest,enable=${{ !contains(env.VERSION, '-') && env.VERSION != 'latest' }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
