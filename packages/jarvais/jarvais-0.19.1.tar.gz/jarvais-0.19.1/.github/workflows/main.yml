name: CI-CD

# only run on pushes to main or pull requests
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["*"]

jobs:
  ################################################################################################
  # Unit-Tests: Run unit tests using pytest
  ################################################################################################
  Unit-Tests:
    if: github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        env: ["py310", "py311", "py312"]

    steps:
      - uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.14
        with:
          environments: ${{ matrix.env }}
          pixi-version: v0.41.3
          cache: true
          locked: false

      - name: Run pytest
        run: |
          pixi run -e ${{ matrix.env }} test

  ################################################################################################
  # Codecov: Run codecov to check coverage
  ################################################################################################
  # Code-Coverage:
  #   needs: Unit-Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Download coverage.xml artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: coverage-report

  #     - name: Use Codecov to track coverage
  #       uses: codecov/codecov-action@v3
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         files: ./coverage-report/coverage.xml
  #         fail_ci_if_error: true
  #         verbose: true
  #         name: codecov-umbrella

  ################################################################################################
  # Ruff: Run ruff linter
  ################################################################################################
  # Ruff:
  #   runs-on: ubuntu-latest
  #   env:
  #     PIXI_ENV: "dev"
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install Pixi
  #       uses: prefix-dev/setup-pixi@v0.8.14
  #       with:
  #         environments: ${{ env.PIXI_ENV }}
  #         pixi-version: v0.41.3
  #         cache: true
  #         locked: false

  #     - name: Run Ruff
  #       run: pixi run lint

  # --------------------------------------
  # Release Please â€” generates version bump + changelog
  # --------------------------------------
  release-please:
    runs-on: ubuntu-latest
    needs: [Unit-Tests]
    permissions:
      contents: write
      pull-requests: write
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
    steps:
      - id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: python
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}

  # --------------------------------------
  # Publish to PyPI when a release is tagged
  # --------------------------------------
  Publish-To-PyPi:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created }}
    runs-on: ubuntu-latest
    env:
      PIXI_ENV: publish

    steps:
      - name: Checkout the tagged release
        uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.14
        with:
          environments: ${{ env.PIXI_ENV }}
          pixi-version: v0.41.3
          cache: true
          locked: false

      - name: Publish to PyPI
        env:
          HATCH_INDEX_USER: __token__
          HATCH_INDEX_AUTH: ${{ secrets.__TOKEN__ }}
          HATCH_INDEX_REPO: https://upload.pypi.org/legacy/
        run: |
          pixi run publish-pypi


