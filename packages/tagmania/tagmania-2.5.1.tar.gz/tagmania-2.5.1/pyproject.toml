[project]
name = "tagmania"
version = "2.5.1"
description = "Manic tools for manipulating sets of tagged resources in AWS."
authors = [
    {name = "Samuel Vange",email = "7166607+svange@users.noreply.github.com"}
]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.9,<4.0"
packages = [
    { include = "tagmania", from = "src" },
]

[tool.poetry.dependencies]
boto3 = "^1.39.0"

[tool.poetry.group.dev.dependencies]
python-semantic-release = "^10.2.0"
augint-github = "^1.3.1"
pytest = "^8.4.1"
pytest-html = "^4.1.1"
pytest-cov = "^6.2.1"
pre-commit = "^4.2.0"
ruff = "^0.12.1"
commitizen = "^4.8.3"
flake8 = "^7.3.0"
isort = "^6.0.1"
pdoc = "^15.0.4"
pytest-click = "^1.1.0"

[tool.poetry.group.security.dependencies]
bandit = {extras = ["toml"], version = "^1.8.6"}
safety = "^3.6.0"
pip-audit = "^2.9.0"
semgrep = "<1.100"

[project.scripts]
cluster-start = "tagmania.start_cluster:main"
cluster-stop = "tagmania.stop_cluster:main"
cluster-snap = "tagmania.snapshot_manager:main"


[tool.semantic_release]
assets = []
commit_message = "chore(release): {version}\n\nAutomatically generated by python-semantic-release [skip ci]"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = false
no_git_verify = false
tag_format = "v{version}"
version_toml = ["pyproject.toml:project.version"]
build_command = "poetry install && poetry build"
build_command_env = []



[tool.pytest.ini_options]
addopts = '-m "not slow" --html=test-report.html --self-contained-html'
log_cli = true
log_cli_level = "INFO"
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "pytest.log"
log_file_level = "INFO"
#environment_table_redact_list = ".*key.*"
#render_collapsed = "failed,error"
markers = [
    "slow: mark test as slow (does real AWS operations, takes several minutes)",
]




[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
mode = "update"
insertion_flag = "<!-- version list -->"
template_dir = "templates"
exclude_commit_patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Initial [Cc]ommit.*''',
]

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
insecure = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"
fallback_env = "GITHUB_TOKEN"

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
skip_gitignore = true

[tool.ruff]
line-length = 88
target-version = "py39"
fix = true

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "PTH", # flake8-use-pathlib
    "PD",  # pandas-vet
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "SIM105", # Use contextlib.suppress
    "ISC001", # Conflicts with formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # asserts allowed in tests
    "PLR2004", # magic values allowed in tests
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # skip assert_used test
