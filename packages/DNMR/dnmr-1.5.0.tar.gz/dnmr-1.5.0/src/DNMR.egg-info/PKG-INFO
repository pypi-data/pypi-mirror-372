Metadata-Version: 2.4
Name: DNMR
Version: 1.5.0
Summary: A package to analyse the data generated by the frappy/NICOS interface, with the TNMR setup at Paul Scherrer Institut, Villigen, Switzerland
Author-email: "Davis V. Garrad" <davis.last@psi.ch>
License-Expression: GPL-3.0-only
Project-URL: Homepage, https://github.com/Davis-Garrad/DNMR
Project-URL: Issues, https://github.com/Davis-Garrad/DNMR/issues
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: h5py
Requires-Dist: numpy<=2.3.0
Requires-Dist: matplotlib
Requires-Dist: PyQt6
Requires-Dist: pandas
Requires-Dist: pytnt
Dynamic: license-file

# DNMR

The *Data Analysis, Visualisation, and Interpretation Software for Nuclear Magnetic Resonance* (DAVISNMR, or more simply **DNMR**) is a piece of software including a GUI to read and analyse files generated by the frappy-Tecmag NMR interface described [here](https://www.psi.ch/en/lin/nmr-spectroscopy-0).

### Features
- Quick comparison of completely separate datasets (parallel viewing and handling)
- Equally quick loading and combination of separate-but-related datasets for analysis (live concatenation of datasets) 
- Auto or manual data re-phasing, both for individual data points or in bulk
- View time-domain and frequency-domain data
- Apply easily-customisable filters to time-domain data
- Common NMR analysis workflows including T<sub>1</sub> fitting, field scans, and inverse Laplace transforms (ILTs)
- Export processed data into an easy-to-handle CSV format
- Easily extensible framework for custom analyses
- Limited support for .TNT files natively generated by Tecmag's TNMR program

### Installation
This software is available on Pip:
```
python -m pip install DNMR
```

### Running
Simply load the software as a module. For example:
```
python -m DNMR
```
Any additional arguments will be loaded as datafiles into the zero-th channel. I.e., if you wanted to load "test_file_0p25K.hdf" and "test_file_1K.hdf" together, you'd run:
```
python -m DNMR test_file_0p25K.hdf test_file_1K.hdf
```
(one could also just use the buttons and dialogs in the GUI)
